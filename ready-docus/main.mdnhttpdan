                                                                               
            88                                      88                         
            ""                                      88                         
                                                    88                         
8b       d8 88 88,dPYba,,adPYba,            ,adPPYb,88 ,adPPYYba, 8b,dPPYba,   
`8b     d8' 88 88P'   "88"    "8a aaaaaaaa a8"    `Y88 ""     `Y8 88P'   `"8a  
 `8b   d8'  88 88      88      88 """""""" 8b       88 ,adPPPPP88 88       88  
  `8b,d8'   88 88      88      88          "8a,   ,d88 88,    ,88 88       88  
    "8"     88 88      88      88           `"8bbdP"Y8 `"8bbdP"Y8 88       88  
                                                                               
                                                                               
               _       _     _   _         
 _ __ ___   __| |_ __ | |__ | |_| |_ _ __  
| '_ ` _ \ / _` | '_ \| '_ \| __| __| '_ \ 
| | | | | | (_| | | | | | | | |_| |_| |_) |
|_| |_| |_|\__,_|_| |_|_| |_|\__|\__| .__/ 
                                    |_|    
In this article

-   Tutorials
-   Reference
-   Tools & resources

1.  HTTP
2.  Guides
3.  Resources and URIs
    1.  Identifying resources on the Web
    2.  Data URLs
    3.  Introduction to MIME types
    4.  Common MIME types
    5.  Choosing between www and non-www URLs
4.  HTTP guide
    1.  Basics of HTTP
    2.  Overview of HTTP
    3.  Evolution of HTTP
    4.  HTTP Messages
    5.  A typical HTTP session
    6.  Connection management in HTTP/1.x
    7.  Protocol upgrade mechanism
5.  HTTP security
    1.  Content Security Policy (CSP)
    2.  HTTP Strict Transport Security (HSTS)
    3.  X-Content-Type-Options
    4.  X-Frame-Options
    5.  X-XSS-Protection
    6.  Mozilla web security guidelines
    7.  Mozilla Observatory
6.  HTTP access control (CORS)
7.  HTTP authentication
8.  HTTP caching
9.  HTTP compression
10. HTTP conditional requests
11. HTTP content negotiation
12. HTTP cookies
13. HTTP range requests
14. HTTP redirects
15. HTTP specifications
16. Permissions Policy
17. References
18. HTTP headers
    1.   Accept
    2.   Accept-CH
    3.   Accept-CH-Lifetime Non-standard Deprecated
    4.   Accept-Charset
    5.   Accept-Encoding
    6.   Accept-Language
    7.   Accept-Patch
    8.   Accept-Post
    9.   Accept-Ranges
    10.  Access-Control-Allow-Credentials
    11.  Access-Control-Allow-Headers
    12.  Access-Control-Allow-Methods
    13.  Access-Control-Allow-Origin
    14.  Access-Control-Expose-Headers
    15.  Access-Control-Max-Age
    16.  Access-Control-Request-Headers
    17.  Access-Control-Request-Method
    18.  Age
    19.  Allow
    20.  Alt-Svc
    21.  Alt-Used
    22.  Authorization
    23.  Cache-Control
    24.  Clear-Site-Data
    25.  Connection
    26.  Content-Disposition
    27.  Content-DPR Non-standard Deprecated
    28.  Content-Encoding
    29.  Content-Language
    30.  Content-Length
    31.  Content-Location
    32.  Content-Range
    33.  Content-Security-Policy
    34.  Content-Security-Policy-Report-Only
    35.  Content-Type
    36.  Cookie
    37.  Critical-CH Experimental
    38.  Cross-Origin-Embedder-Policy
    39.  Cross-Origin-Opener-Policy
    40.  Cross-Origin-Resource-Policy
    41.  Date
    42.  Device-Memory
    43.  Digest Deprecated
    44.  DNT Non-standard Deprecated
    45.  Downlink Experimental
    46.  DPR Non-standard Deprecated
    47.  Early-Data Experimental
    48.  ECT Experimental
    49.  ETag
    50.  Expect
    51.  Expect-CT
    52.  Expires
    53.  Forwarded
    54.  From
    55.  Host
    56.  If-Match
    57.  If-Modified-Since
    58.  If-None-Match
    59.  If-Range
    60.  If-Unmodified-Since
    61.  Keep-Alive
    62.  Large-Allocation Non-standard Deprecated
    63.  Last-Modified
    64.  Link
    65.  Location
    66.  Max-Forwards
    67.  NEL Experimental
    68.  Origin
    69.  Origin-Agent-Cluster Experimental
    70.  Permissions-Policy
    71.  Pragma Deprecated
    72.  Proxy-Authenticate
    73.  Proxy-Authorization
    74.  Range
    75.  Referer
    76.  Referrer-Policy
    77.  Retry-After
    78.  RTT Experimental
    79.  Save-Data Experimental
    80.  Sec-CH-Prefers-Color-Scheme Experimental
    81.  Sec-CH-Prefers-Reduced-Motion Experimental
    82.  Sec-CH-Prefers-Reduced-Transparency Experimental
    83.  Sec-CH-UA Experimental
    84.  Sec-CH-UA-Arch Experimental
    85.  Sec-CH-UA-Bitness Experimental
    86.  Sec-CH-UA-Full-Version Deprecated
    87.  Sec-CH-UA-Full-Version-List Experimental
    88.  Sec-CH-UA-Mobile Experimental
    89.  Sec-CH-UA-Model Experimental
    90.  Sec-CH-UA-Platform Experimental
    91.  Sec-CH-UA-Platform-Version Experimental
    92.  Sec-Fetch-Dest
    93.  Sec-Fetch-Mode
    94.  Sec-Fetch-Site
    95.  Sec-Fetch-User
    96.  Sec-GPC Experimental Non-standard
    97.  Sec-Purpose
    98.  Sec-WebSocket-Accept
    99.  Server
    100.  Server-Timing
    101.  Service-Worker-Navigation-Preload
    102.  Set-Cookie
    103.  SourceMap
    104.  Strict-Transport-Security
    105.  Supports-Loading-Mode Experimental
    106.  TE
    107.  Timing-Allow-Origin
    108.  Tk Non-standard Deprecated
    109.  Trailer
    110.  Transfer-Encoding
    111.  Upgrade
    112.  Upgrade-Insecure-Requests
    113.  User-Agent
    114.  Vary
    115.  Via
    116.  Viewport-Width Non-standard Deprecated
    117.  Want-Digest Deprecated
    118.  Warning Deprecated
    119.  Width Non-standard Deprecated
    120.  WWW-Authenticate
    121.  X-Content-Type-Options
    122.  X-DNS-Prefetch-Control Non-standard
    123.  X-Forwarded-For Non-standard
    124.  X-Forwarded-Host Non-standard
    125.  X-Forwarded-Proto Non-standard
    126.  X-Frame-Options
    127.  X-XSS-Protection Non-standard
19. HTTP request methods
    1.   CONNECT
    2.   DELETE
    3.   GET
    4.   HEAD
    5.   OPTIONS
    6.   PATCH
    7.   POST
    8.   PUT
    9.   TRACE
20. HTTP response status codes
    1.   100 Continue
    2.   101 Switching Protocols
    3.   102 Processing
    4.   103 Early Hints
    5.   200 OK
    6.   201 Created
    7.   202 Accepted
    8.   203 Non-Authoritative Information
    9.   204 No Content
    10.  205 Reset Content
    11.  206 Partial Content
    12.  207 Multi-Status
    13.  208 Already Reported
    14.  226 IM Used
    15.  300 Multiple Choices
    16.  301 Moved Permanently
    17.  302 Found
    18.  303 See Other
    19.  304 Not Modified
    20.  307 Temporary Redirect
    21.  308 Permanent Redirect
    22.  400 Bad Request
    23.  401 Unauthorized
    24.  402 Payment Required
    25.  403 Forbidden
    26.  404 Not Found
    27.  405 Method Not Allowed
    28.  406 Not Acceptable
    29.  407 Proxy Authentication Required
    30.  408 Request Timeout
    31.  409 Conflict
    32.  410 Gone
    33.  411 Length Required
    34.  412 Precondition Failed
    35.  413 Content Too Large
    36.  414 URI Too Long
    37.  415 Unsupported Media Type
    38.  416 Range Not Satisfiable
    39.  417 Expectation Failed
    40.  418 I'm a teapot
    41.  421 Misdirected Request
    42.  422 Unprocessable Content
    43.  423 Locked
    44.  424 Failed Dependency
    45.  425 Too Early
    46.  426 Upgrade Required
    47.  428 Precondition Required
    48.  429 Too Many Requests
    49.  431 Request Header Fields Too Large
    50.  451 Unavailable For Legal Reasons
    51.  500 Internal Server Error
    52.  501 Not Implemented
    53.  502 Bad Gateway
    54.  503 Service Unavailable
    55.  504 Gateway Timeout
    56.  505 HTTP Version Not Supported
    57.  506 Variant Also Negotiates
    58.  507 Insufficient Storage
    59.  508 Loop Detected
    60.  510 Not Extended
    61.  511 Network Authentication Required
21. CSP directives
    1.   CSP source values
    2.   CSP: base-uri
    3.   CSP: block-all-mixed-content Deprecated
    4.   CSP: child-src
    5.   CSP: connect-src
    6.   CSP: default-src
    7.   CSP: font-src
    8.   CSP: form-action
    9.   CSP: frame-ancestors
    10.  CSP: frame-src
    11.  CSP: img-src
    12.  CSP: manifest-src
    13.  CSP: media-src
    14.  CSP: object-src
    15.  CSP: plugin-types Non-standard Deprecated
    16.  CSP: prefetch-src Non-standard Deprecated
    17.  CSP: referrer Non-standard Deprecated
    18.  CSP: report-to
    19.  CSP: report-uri Deprecated
    20.  CSP: require-trusted-types-for Experimental
    21.  CSP: sandbox
    22.  CSP: script-src
    23.  CSP: script-src-attr
    24.  CSP: script-src-elem
    25.  CSP: style-src
    26.  CSP: style-src-attr
    27.  CSP: style-src-elem
    28.  CSP: trusted-types Experimental
    29.  CSP: upgrade-insecure-requests
    30.  CSP: worker-src
22. CORS errors
    1.  Reason: CORS disabled
    2.  Reason: CORS header 'Access-Control-Allow-Origin' does not match
        'xyz'
    3.  Reason: CORS header 'Access-Control-Allow-Origin' missing
    4.  Reason: CORS header 'Origin' cannot be added
    5.  Reason: CORS preflight channel did not succeed
    6.  Reason: CORS request did not succeed
    7.  Reason: CORS request external redirect not allowed
    8.  Reason: CORS request not HTTP
    9.  Reason: Credential is not supported if the CORS header
        'Access-Control-Allow-Origin' is '*'
    10. Reason: Did not find method in CORS header
        'Access-Control-Allow-Methods'
    11. Reason: expected 'true' in CORS header
        'Access-Control-Allow-Credentials'
    12. Reason: invalid token 'xyz' in CORS header
        'Access-Control-Allow-Headers'
    13. Reason: invalid token 'xyz' in CORS header
        'Access-Control-Allow-Methods'
    14. Reason: missing token 'xyz' in CORS header
        'Access-Control-Allow-Headers' from CORS preflight channel
    15. Reason: Multiple CORS header 'Access-Control-Allow-Origin' not
        allowed
23. Permissions-Policy directives
    1.  Permissions-Policy: accelerometer Experimental
    2.  Permissions-Policy: ambient-light-sensor Experimental
    3.  Permissions-Policy: autoplay Experimental
    4.  Permissions-Policy: battery Experimental
    5.  Permissions-Policy: camera
    6.  Permissions-Policy: display-capture
    7.  Permissions-Policy: document-domain Experimental
    8.  Permissions-Policy: encrypted-media Experimental
    9.  Permissions-Policy: execution-while-not-rendered Experimental
    10. Permissions-Policy: execution-while-out-of-viewport Experimental
    11. Permissions-Policy: fullscreen
    12. Permissions-Policy: gamepad Experimental
    13. Permissions-Policy: geolocation
    14. Permissions-Policy: gyroscope Experimental
    15. Permissions-Policy: hid Experimental
    16. Permissions-Policy: identity-credentials-get Experimental
    17. Permissions-Policy: idle-detection Experimental
    18. Permissions-Policy: local-fonts Experimental
    19. Permissions-Policy: magnetometer Experimental
    20. Permissions-Policy: microphone
    21. Permissions-Policy: midi Experimental
    22. Permissions-Policy: otp-credentials Experimental
    23. Permissions-Policy: payment Experimental
    24. Permissions-Policy: picture-in-picture Experimental
    25. Permissions-Policy: publickey-credentials-create Experimental
    26. Permissions-Policy: publickey-credentials-get
    27. Permissions-Policy: screen-wake-lock Experimental
    28. Permissions-Policy: serial Experimental
    29. Permissions-Policy: speaker-selection Experimental
    30. Permissions-Policy: storage-access Experimental
    31. Permissions-Policy: usb Experimental
    32. Permissions-Policy: web-share
    33. Permissions-Policy: window-management Experimental
    34. Permissions-Policy: xr-spatial-tracking Experimental
# HTTP authentication #
 _   _ _____ _____ ____  
| | | |_   _|_   _|  _ \ 
| |_| | | |   | | | |_) |
|  _  | | |   | | |  __/ 
|_| |_| |_|   |_| |_|    
                         
             _   _                _   _           _   _             
  __ _ _   _| |_| |__   ___ _ __ | |_(_) ___ __ _| |_(_) ___  _ __  
 / _` | | | | __| '_ \ / _ \ '_ \| __| |/ __/ _` | __| |/ _ \| '_ \ 
| (_| | |_| | |_| | | |  __/ | | | |_| | (_| (_| | |_| | (_) | | | |
 \__,_|\__,_|\__|_| |_|\___|_| |_|\__|_|\___\__,_|\__|_|\___/|_| |_|
                                                                    
HTTP authentication

HTTP provides a general framework for access control and authentication.
This page is an introduction to the HTTP framework for authentication,
and shows how to restrict access to your server using the HTTP "Basic"
schema.

The general HTTP authentication framework

RFC 7235 defines the HTTP authentication framework, which can be used by
a server to challenge a client request, and by a client to provide
authentication information.

The challenge and response flow works like this:

1.  The server responds to a client with a  401 (Unauthorized) response
    status and provides information on how to authorize with a
     WWW-Authenticate response header containing at least one challenge.
2.  A client that wants to authenticate itself with the server can then
    do so by including an  Authorization request header with the
    credentials.
3.  Usually a client will present a password prompt to the user and will
    then issue the request including the correct  Authorization header.

[A sequence diagram illustrating HTTP messages between a client and a
server lifeline.]

The general message flow above is the same for most (if not all)
authentication schemes . The actual information in the headers and the
way it is encoded does change!

Warning: The "Basic" authentication scheme used in the diagram above
sends the credentials encoded but not encrypted. This would be
completely insecure unless the exchange was over a secure connection
(HTTPS/TLS).

Proxy authentication

The same challenge and response mechanism can be used for proxy
authentication . As both resource authentication and proxy
authentication can coexist, a different set of headers and status codes
is needed. In the case of proxies, the challenging status code is  407
(Proxy Authentication Required), the  Proxy-Authenticate response header
contains at least one challenge applicable to the proxy, and the
 Proxy-Authorization request header is used for providing the
credentials to the proxy server.

Access forbidden

If a (proxy) server receives invalid credentials, it should respond with
a  401  Unauthorized or with a  407  Proxy Authentication Required , and
the user may send a new request or replace the  Authorization header
field.

If a (proxy) server receives valid credentials that are inadequate to
access a given resource, the server should respond with the  403
 Forbidden status code. Unlike  401  Unauthorized or  407
 Proxy Authentication Required , authentication is impossible for this
user and browsers will not propose a new attempt.

In all cases, the server may prefer returning a  404  Not Found status
code, to hide the existence of the page to a user without adequate
privileges or not correctly authenticated.

Authentication of cross-origin images

A potential security hole (that has since been fixed in browsers) was
authentication of cross-site images. From Firefox 59 onwards, image
resources loaded from different origins to the current document are no
longer able to trigger HTTP authentication dialogs ( Firefox bug 1423146
), preventing user credentials being stolen if attackers were able to
embed an arbitrary image into a third-party page.

Character encoding of HTTP authentication

Browsers use  utf-8 encoding for usernames and passwords.

Firefox once used  ISO-8859-1 , but changed to  utf-8 for parity with
other browsers and to avoid potential problems as described in Firefox
bug 1419658 .

WWW-Authenticate and Proxy-Authenticate headers

The  WWW-Authenticate and  Proxy-Authenticate response headers define
the authentication method that should be used to gain access to a
resource. They must specify which authentication scheme is used, so that
the client that wishes to authorize knows how to provide the
credentials.

The syntax for these headers is the following:

http

    WWW-Authenticate: <type> realm=<realm>
    Proxy-Authenticate: <type> realm=<realm>

Here,  <type> is the authentication scheme ("Basic" is the most common
scheme and introduced below ). The realm is used to describe the
protected area or to indicate the scope of protection. This could be a
message like "Access to the staging site" or similar, so that the user
knows to which space they are trying to get access to.

Authorization and Proxy-Authorization headers

The  Authorization and  Proxy-Authorization request headers contain the
credentials to authenticate a user agent with a (proxy) server. Here,
the  <type> is needed again followed by the credentials, which can be
encoded or encrypted depending on which authentication scheme is used.

http

    Authorization: <type> <credentials>
    Proxy-Authorization: <type> <credentials>

Authentication schemes

The general HTTP authentication framework is the base for a number of
authentication schemes.

IANA maintains a list of authentication schemes , but there are other
schemes offered by host services, such as Amazon AWS.

Some common authentication schemes include:

Basic

    See RFC 7617 , base64-encoded credentials. More information below.

Bearer

    See RFC 6750 , bearer tokens to access OAuth 2.0-protected resources

Digest

    See RFC 7616 . Firefox 93 and later support the SHA-256 algorithm.
    Previous versions only support MD5 hashing (not recommended).

HOBA

    See RFC 7486 , Section 3, H TTP O rigin- B ound A uthentication,
    digital-signature-based

Mutual

    See RFC 8120

Negotiate / NTLM

    See RFC4599

VAPID

    See RFC 8292

SCRAM

    See RFC 7804

AWS4-HMAC-SHA256

    See AWS docs . This scheme is used for AWS3 server authentication.

Schemes can differ in security strength and in their availability in
client or server software.

The "Basic" authentication scheme offers very poor security, but is
widely supported and easy to set up. It is introduced in more detail
below.

Basic authentication scheme

The "Basic" HTTP authentication scheme is defined in RFC 7617 , which
transmits credentials as user ID/password pairs, encoded using base64.

Security of basic authentication

As the user ID and password are passed over the network as clear text
(it is base64 encoded, but base64 is a reversible encoding), the basic
authentication scheme is not secure . HTTPS/TLS should be used with
basic authentication. Without these additional security enhancements,
basic authentication should not be used to protect sensitive or valuable
information.

Restricting access with Apache and basic authentication

To password-protect a directory on an Apache server, you will need a
 .htaccess and a  .htpasswd file.

The  .htaccess file typically looks like this:

apacheconf

    AuthType Basic
    AuthName "Access to the staging site"
    AuthUserFile /path/to/.htpasswd
    Require valid-user

The  .htaccess file references a  .htpasswd file in which each line
consists of a username and a password separated by a colon (  : ). You
cannot see the actual passwords as they are hashed (using MD5-based
hashing, in this case). Note that you can name your  .htpasswd file
differently if you like, but keep in mind this file shouldn't be
accessible to anyone. (Apache is usually configured to prevent access to
 .ht* files).

apacheconf

    aladdin:$apr1$ZjTqBB3f$IF9gdYAGlMrs2fuINjHsz.
    user2:$apr1$O04r.y2H$/vEkesPhVInBByJUkXitA/

Restricting access with Nginx and basic authentication

For Nginx, you will need to specify a location that you are going to
protect and the  auth_basic directive that provides the name to the
password-protected area. The  auth_basic_user_file directive then points
to a  .htpasswd file containing the encrypted user credentials, just
like in the Apache example above.

apacheconf

    location /status {
        auth_basic           "Access to the staging site";
        auth_basic_user_file /etc/apache2/.htpasswd;
    }

Access using credentials in the URL

Many clients also let you avoid the login prompt by using an encoded URL
containing the username and the password like this:

    https://username:password@www.example.com/

The use of these URLs is deprecated . In Chrome, the  username:password@
part in URLs is removed from subresource URLs for security reasons. In
Firefox, it is checked if the site actually requires authentication and
if not, Firefox will warn the user with a prompt "You are about to log
in to the site  www.example.com with the username  username , but the
website does not require authentication. This may be an attempt to trick
you." In case the site does require authentication, Firefox will still
ask for user confirmation "You are about to log in to the site
 www.example.com with the username  username ." before sending the
credentials to the site. Note that Firefox sends the request without
credentials in both cases before showing the prompt in order to
determine whether the site requires authentication.

See also

-    WWW-Authenticate
-    Authorization
-    Proxy-Authorization
-    Proxy-Authenticate
-    401 ,  403 ,  407

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 20, 2023 by MDN contributors .
# Choosing between www and non-www URLs #
  ____ _                     _             
 / ___| |__   ___   ___  ___(_)_ __   __ _ 
| |   | '_ \ / _ \ / _ \/ __| | '_ \ / _` |
| |___| | | | (_) | (_) \__ \ | | | | (_| |
 \____|_| |_|\___/ \___/|___/_|_| |_|\__, |
                                     |___/ 
 _          _                                                          
| |__   ___| |___      _____  ___ _ __   __      ____      ____      __
| '_ \ / _ \ __\ \ /\ / / _ \/ _ \ '_ \  \ \ /\ / /\ \ /\ / /\ \ /\ / /
| |_) |  __/ |_ \ V  V /  __/  __/ | | |  \ V  V /  \ V  V /  \ V  V / 
|_.__/ \___|\__| \_/\_/ \___|\___|_| |_|   \_/\_/    \_/\_/    \_/\_/  
                                                                       
                 _                                                       
  __ _ _ __   __| |  _ __   ___  _ __      __      ____      ____      __
 / _` | '_ \ / _` | | '_ \ / _ \| '_ \ ____\ \ /\ / /\ \ /\ / /\ \ /\ / /
| (_| | | | | (_| | | | | | (_) | | | |_____\ V  V /  \ V  V /  \ V  V / 
 \__,_|_| |_|\__,_| |_| |_|\___/|_| |_|      \_/\_/    \_/\_/    \_/\_/  
                                                                         
 _   _ ____  _         
| | | |  _ \| |    ___ 
| | | | |_) | |   / __|
| |_| |  _ <| |___\__ \
 \___/|_| \_\_____|___/
                       
Choosing between www and non-www URLs

A recurring question among website owners is whether to choose non-www
or www URLs. This page provides some advice on what's best.

What are domain names?

In an HTTP URL, the first substring that follows the initial  http:// or
 https:// is called the domain name. This domain name is hosted on a
server where the document resides.

A server isn't necessarily a physical machine: several servers can
reside on the same physical machine. Or, one server can be handled by
several machines, cooperating to produce the answer or balancing the
load of the requests between them. The key point is that semantically
one domain name represents one single server .

So, do I have to choose one or the other for my website?

-   Yes , you need to choose one and stick with it. The choice of which
    one to have as your canonical location is yours, but if you choose
    one, stick with it. It will make your website appear more consistent
    to your users and to search engines. This includes always linking to
    the chosen domain (which shouldn't be hard if you're using relative
    URLs in your website) and always sharing links (by email/social
    networks, etc.) to the same domain.
-   No , you can have two. What is important is that you are coherent
    and consistent with which one is the official domain. This official
    domain is called the canonical name. All your absolute links should
    use it. But even so, you can still have the other domain working:
    HTTP allows two techniques so that it is clear for your users, or
    search engines, which domain is the canonical one, while still
    allowing the non-canonical domain to work and provide the expected
    pages.

So, choose one of your domains as your canonical one! There are two
techniques below to allow the non-canonical domain to work still.

Techniques for canonical URLs

There are different ways to choose which website is canonical .

Using HTTP 301 redirects

In this case, you need to configure the server receiving the HTTP
requests (which is most likely the same for www and non-www URLs) to
respond with an adequate HTTP  301 response to any request to the
non-canonical domain. This will redirect the browser trying to access
the non-canonical URLs to their canonical equivalent. For example, if
you've chosen to use non-www URLs as the canonical type, you should
redirect all www URLs to their equivalent URL without the www .

Example:

1.  A server receives a request for  http://www.example.org/whaddup
    (when the canonical domain is example.org).
2.  The server answers with a code  301 with the header    Location :
    http://example.org/whaddup .
3.  The client issues a request to the location under the canonical
    domain:  http://example.org/whaddup .

The HTML5 boilerplate project has an example on how to configure an
Apache server to redirect one domain to the other .

Using <link rel="canonical">

It is possible to add a special HTML  <link> element to a page to
indicate what the canonical address of a page is. This has no impact on
the human reader of the page, but tells search engine crawlers where the
page actually lives. This way, search engines don't index the same page
several times, potentially leading to it being considered as duplicate
content or spam, and even removing or lowering your page from the search
engine result pages.

When adding such a tag, you serve the same content for both domains,
telling search engines which URL is canonical. In the previous example,
 http://www.example.org/whaddup would serve the same content as
 http://example.org/whaddup , but with an additional  <link> element in
the head:

html

    <link href="http://example.org/whaddup" rel="canonical" />

Unlike the previous case, browser history will consider non-www and www
URLs as independent entries.

Make your page work for both

With these techniques, you can configure your server to respond
correctly for both, the www-prefixed and the non-www-prefixed domains.
It is good advice to do this since you can't predict which URL users
will type in their browser's URL bar. It is a matter of choosing which
type you want to use as your canonical location, then redirecting the
other type to it.

Deciding the case

This is a very subjective topic — it could be considered a bikeshedding
issue. If you wish to read deeper, here are some resources:

-   Options for bare domains on www.netlify.com (2020)
-   WWW vs non-WWW – Which Is Better for WordPress SEO? on
    www.wpbeginner.com (2023)

See also

-   Stats on what people type in the URL bar (2011)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 14, 2023 by MDN contributors .
# Data URLs #
 ____        _          _   _ ____  _         
|  _ \  __ _| |_ __ _  | | | |  _ \| |    ___ 
| | | |/ _` | __/ _` | | | | | |_) | |   / __|
| |_| | (_| | || (_| | | |_| |  _ <| |___\__ \
|____/ \__,_|\__\__,_|  \___/|_| \_\_____|___/
                                              
Data URLs

Data URLs , URLs prefixed with the  data: scheme, allow content creators
to embed small files inline in documents. They were formerly known as
"data URIs" until that name was retired by the WHATWG.

Note: Data URLs are treated as unique opaque origins by modern browsers,
rather than inheriting the origin of the settings object responsible for
the navigation.

Syntax

Data URLs are composed of four parts: a prefix (  data: ), a MIME type
indicating the type of data, an optional  base64 token if non-textual,
and the data itself:

    data:[<mediatype>][;base64],<data>

The  mediatype is a MIME type string, such as  'image/jpeg' for a JPEG
image file. If omitted, defaults to  text/plain;charset=US-ASCII

If the data contains characters defined in RFC 3986 as reserved
characters , or contains space characters, newline characters, or other
non-printing characters, those characters must be URL encoded .

If the data is textual, you can embed the text (using the appropriate
entities or escapes based on the enclosing document's type). Otherwise,
you can specify  base64 to embed base64-encoded binary data. You can
find more info on MIME types here and here .

A few examples:

 data:,Hello%2C%20World%21

    The text/plain data  Hello, World! . Note how the comma is URl
    encoded as  %2C , and the space character as  %20 .

 data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==

    base64-encoded version of the above

 data:text/html,%3Ch1%3EHello%2C%20World%21%3C%2Fh1%3E

    An HTML document with  <h1>Hello, World!</h1>

 data:text/html,%3Cscript%3Ealert%28%27hi%27%29%3B%3C%2Fscript%3E

    An HTML document with  <script>alert('hi');</script> that executes a
    JavaScript alert. Note that the closing script tag is required.

Encoding data into base64 format

Base64 is a group of binary-to-text encoding schemes that represent
binary data in an ASCII string format by translating it into a radix-64
representation. By consisting only of ASCII characters, base64 strings
are generally url-safe, and that's why they can be used to encode data
in Data URLs.

Encoding in JavaScript

The Web APIs have native methods to encode or decode to base64: Base64 .

Encoding on a Unix system

Base64 encoding of a file or string on Linux and macOS systems can be
achieved using the command-line  base64 (or, as an alternative, the
 uuencode utility with  -m argument).

bash

    echo -n hello|base64
    # outputs to console: aGVsbG8=

    echo -n hello>a.txt
    base64 a.txt
    # outputs to console: aGVsbG8=

    base64 a.txt>b.txt
    # outputs to file b.txt: aGVsbG8=

Encoding on Microsoft Windows

On Windows, Convert.ToBase64String from PowerShell can be used to
perform the Base64 encoding:

    [convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes("hello"))
    # outputs to console: aGVsbG8=

Alternatively, a GNU/Linux shell (such as WSL ) provides the utility
 base64 :

bash

    bash$ echo -n hello | base64
    # outputs to console: aGVsbG8=

Common problems

This section describes problems that commonly occur when creating and
using  data URLs.

html

    data:text/html,lots of text…<p><a name%3D"bottom">bottom</a>?arg=val</p>

This represents an HTML resource whose contents are:

html

    lots of text…
    <p><a name="bottom">bottom</a>?arg=val</p>

Syntax

    The format for  data URLs is very simple, but it's easy to forget to
    put a comma before the "data" segment, or to incorrectly encode the
    data into base64 format.

Formatting in HTML

    A  data URL provides a file within a file, which can potentially be
    very wide relative to the width of the enclosing document. As a URL,
    the  data should be formattable with whitespace (linefeed, tab, or
    spaces), but there are practical issues that arise when using base64
    encoding .

Length limitations

    Browsers are not required to support any particular maximum length
    of data. For example, the Opera 11 browser limited URLs to 65535
    characters long which limits  data URLs to 65529 characters (65529
    characters being the length of the encoded data, not the source, if
    you use the plain  data: , without specifying a MIME type). Firefox
    version 97 and newer supports  data URLs of up to 32MB (before 97
    the limit was close to 256MB). Chromium objects to URLs over 512MB,
    and Webkit (Safari) to URLs over 2048MB.

Lack of error handling

    Invalid parameters in media, or typos when specifying  'base64' ,
    are ignored, but no error is provided.

No support for query strings, etc.

    The data portion of a data URL is opaque, so an attempt to use a
    query string (page-specific parameters, with the syntax
     <url>?parameter-data ) with a data URL will just include the query
    string in the data the URL represents.

Security issues

    A number of security issues (for example, phishing) have been
    associated with data URLs, and navigating to them in the browser's
    top level. To mitigate such issues, top-level navigation to  data:
    URLs is blocked in all modern browsers. See this blog post from the
    Mozilla Security Team for more details.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  The "data" URL scheme
  # section-2

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Base64
-   URL encoding
-    atob()
-    btoa()
-   CSS  url()
-   URI

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 29, 2023 by MDN contributors .
# Evolution of HTTP #
 _____            _       _   _                      __ 
| ____|_   _____ | |_   _| |_(_) ___  _ __     ___  / _|
|  _| \ \ / / _ \| | | | | __| |/ _ \| '_ \   / _ \| |_ 
| |___ \ V / (_) | | |_| | |_| | (_) | | | | | (_) |  _|
|_____| \_/ \___/|_|\__,_|\__|_|\___/|_| |_|  \___/|_|  
                                                        
 _   _ _____ _____ ____  
| | | |_   _|_   _|  _ \ 
| |_| | | |   | | | |_) |
|  _  | | |   | | |  __/ 
|_| |_| |_|   |_| |_|    
                         
Evolution of HTTP

HTTP (HyperText Transfer Protocol) is the underlying protocol of the
World Wide Web. Developed by Tim Berners-Lee and his team between
1989-1991, HTTP has gone through many changes that have helped maintain
its simplicity while shaping its flexibility. Keep reading to learn how
HTTP evolved from a protocol designed to exchange files in a semitrusted
laboratory environment into a modern internet maze that carries images
and videos in high resolution and 3D.

Invention of the World Wide Web

In 1989, while working at CERN, Tim Berners-Lee wrote a proposal to
build a hypertext system over the internet. Initially called the Mesh ,
it was later renamed the World Wide Web during its implementation in
1990. Built over the existing TCP and IP protocols, it consisted of 4
building blocks:

-   A textual format to represent hypertext documents, the HyperText
    Markup Language (HTML).
-   A simple protocol to exchange these documents, the HyperText
    Transfer Protocol (HTTP).
-   A client to display (and edit) these documents, the first web
    browser called the WorldWideWeb .
-   A server to give access to the document, an early version of httpd .

These four building blocks were completed by the end of 1990, and the
first servers were running outside of CERN by early 1991. On August 6,
1991, Tim Berners-Lee posted on the public alt.hypertext newsgroup. This
is now considered to be the official start of the World Wide Web as a
public project.

The HTTP protocol used in those early phases was very simple. It was
later dubbed HTTP/0.9 and is sometimes called the one-line protocol.

HTTP/0.9 – The one-line protocol

The initial version of HTTP had no version number; it was later called
0.9 to differentiate it from later versions. HTTP/0.9 was extremely
simple: requests consisted of a single line and started with the only
possible method  GET followed by the path to the resource. The full URL
wasn't included as the protocol, server, and port weren't necessary once
connected to the server.

http

    GET /mypage.html

The response was extremely simple, too: it only consisted of the file
itself.

html

    <html>
      A very simple HTML page
    </html>

Unlike subsequent evolutions, there were no HTTP headers. This meant
that only HTML files could be transmitted. There were no status or error
codes. If there was a problem, a specific HTML file was generated and
included a description of the problem for human consumption.

HTTP/1.0 – Building extensibility

HTTP/0.9 was very limited, but browsers and servers quickly made it more
versatile:

-   Versioning information was sent within each request (  HTTP/1.0 was
    appended to the  GET line).
-   A status code line was also sent at the beginning of a response.
    This allowed the browser itself to recognize the success or failure
    of a request and adapt its behavior accordingly. For example,
    updating or using its local cache in a specific way.
-   The concept of HTTP headers was introduced for both requests and
    responses. Metadata could be transmitted and the protocol became
    extremely flexible and extensible.
-   Documents other than plain HTML files could be transmitted thanks to
    the  Content-Type header.

At this point in time, a typical request and response looked like this:

http

    GET /mypage.html HTTP/1.0
    User-Agent: NCSA_Mosaic/2.0 (Windows 3.1)

    200 OK
    Date: Tue, 15 Nov 1994 08:12:31 GMT
    Server: CERN/3.0 libwww/2.17
    Content-Type: text/html
    <HTML>
    A page with an image
      <IMG SRC="/myimage.gif">
    </HTML>

It was followed by a second connection and a request to fetch the image
(with the corresponding response):

http

    GET /myimage.gif HTTP/1.0
    User-Agent: NCSA_Mosaic/2.0 (Windows 3.1)

    200 OK
    Date: Tue, 15 Nov 1994 08:12:32 GMT
    Server: CERN/3.0 libwww/2.17
    Content-Type: text/gif
    (image content)

Between 1991-1995, these were introduced with a try-and-see approach. A
server and a browser would add a feature and see if it got traction.
Interoperability problems were common. In an effort to solve these
issues, an informational document that described the common practices
was published in November 1996. This was known as RFC 1945 and defined
HTTP/1.0.

HTTP/1.1 – The standardized protocol

In the meantime, proper standardization was in progress. This happened
in parallel to the diverse implementations of HTTP/1.0. The first
standardized version of HTTP, HTTP/1.1, was published in early 1997,
only a few months after HTTP/1.0.

HTTP/1.1 clarified ambiguities and introduced numerous improvements:

-   A connection could be reused, which saved time. It no longer needed
    to be opened multiple times to display the resources embedded in the
    single original document.
-   Pipelining was added. This allowed a second request to be sent
    before the answer to the first one was fully transmitted. This
    lowered the latency of the communication.
-   Chunked responses were also supported.
-   Additional cache control mechanisms were introduced.
-   Content negotiation, including language, encoding, and type, was
    introduced. A client and a server could now agree on which content
    to exchange.
-   Thanks to the  Host header, the ability to host different domains
    from the same IP address allowed server collocation.

A typical flow of requests, all through one single connection, looked
like this:

http

    GET /en-US/docs/Glossary/Simple_header HTTP/1.1
    Host: developer.mozilla.org
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate, br
    Referer: https://developer.mozilla.org/en-US/docs/Glossary/Simple_header

    200 OK
    Connection: Keep-Alive
    Content-Encoding: gzip
    Content-Type: text/html; charset=utf-8
    Date: Wed, 20 Jul 2016 10:55:30 GMT
    Etag: "547fa7e369ef56031dd3bff2ace9fc0832eb251a"
    Keep-Alive: timeout=5, max=1000
    Last-Modified: Tue, 19 Jul 2016 00:59:33 GMT
    Server: Apache
    Transfer-Encoding: chunked
    Vary: Cookie, Accept-Encoding

    (content)

    GET /static/img/header-background.png HTTP/1.1
    Host: developer.mozilla.org
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0
    Accept: */*
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate, br
    Referer: https://developer.mozilla.org/en-US/docs/Glossary/Simple_header

    200 OK
    Age: 9578461
    Cache-Control: public, max-age=315360000
    Connection: keep-alive
    Content-Length: 3077
    Content-Type: image/png
    Date: Thu, 31 Mar 2016 13:34:46 GMT
    Last-Modified: Wed, 21 Oct 2015 18:27:50 GMT
    Server: Apache

    (image content of 3077 bytes)

HTTP/1.1 was first published as RFC 2068 in January 1997.

More than 15 years of extensions

The extensibility of HTTP made it easy to create new headers and
methods. Even though the HTTP/1.1 protocol was refined over two
revisions, RFC 2616 published in June 1999 and RFC 7230 - RFC 7235
published in June 2014 before the release of HTTP/2, it was extremely
stable for more than 15 years.

Using HTTP for secure transmissions

The largest change to HTTP was made at the end of 1994. Instead of
sending HTTP over a basic TCP/IP stack, the computer-services company
Netscape Communications created an additional encrypted transmission
layer on top of it: SSL. SSL 1.0 was never released to the public, but
SSL 2.0 and its successor SSL 3.0 allowed for the creation of e-commerce
websites. To do this, they encrypted and guaranteed the authenticity of
the messages exchanged between the server and client. SSL was eventually
standardized and became TLS.

During the same time period, it became clear that an encrypted transport
layer was needed. The web was no longer a mostly academic network, and
instead became a jungle where advertisers, random individuals, and
criminals competed for as much private data as possible. As the
applications built over HTTP became more powerful and required access to
private information like address books, email, and user location, TLS
became necessary outside the e-commerce use case.

Using HTTP for complex applications

Tim Berners-Lee didn't originally envision HTTP as a read-only medium.
He wanted to create a web where people could add and move documents
remotely—a kind of distributed file system. Around 1996, HTTP was
extended to allow authoring, and a standard called WebDAV was created.
It grew to include specific applications like CardDAV for handling
address book entries and CalDAV for dealing with calendars. But all
these *DAV extensions had a flaw: they were only usable when implemented
by the servers.

In 2000, a new pattern for using HTTP was designed: representational
state transfer (or REST). The API wasn't based on the new HTTP methods,
but instead relied on access to specific URIs with basic HTTP/1.1
methods. This allowed any web application to let an API retrieve and
modify its data without having to update the browsers or the servers.
All necessary information was embedded in the files that the websites
served through standard HTTP/1.1. The drawback of the REST model was
that each website defined its own nonstandard RESTful API and had total
control of it. This differed from the *DAV extensions where clients and
servers were interoperable. RESTful APIs became very common in the
2010s.

Since 2005, more APIs have become available to web pages. Several of
these APIs create extensions to the HTTP protocol for specific purposes:

-   Server-sent events , where the server can push occasional messages
    to the browser.
-   WebSocket , a new protocol that can be set up by upgrading an
    existing HTTP connection.

Relaxing the security-model of the web

HTTP is independent of the web security model, known as the same-origin
policy . In fact, the current web security model was developed after the
creation of HTTP! Over the years, it proved useful to lift some
restrictions of this policy under certain constraints. The server
transmitted how much and when to lift such restrictions to the client
using a new set of HTTP headers. These were defined in specifications
like Cross-Origin Resource Sharing (CORS) and the Content Security
Policy (CSP).

In addition to these large extensions, many other headers were added,
sometimes only experimentally. Notable headers are the Do Not Track (
 DNT ) header to control privacy,  X-Frame-Options , and
 Upgrade-Insecure-Requests but many more exist.

HTTP/2 – A protocol for greater performance

Over the years, web pages became more complex. Some of them were even
applications in their own right. More visual media was displayed and the
volume and size of scripts adding interactivity also increased. Much
more data was transmitted over significantly more HTTP requests and this
created more complexity and overhead for HTTP/1.1 connections. To
account for this, Google implemented an experimental protocol SPDY in
the early 2010s. This alternative way of exchanging data between client
and server amassed interest from developers working on both browsers and
servers. SPDY defined an increase in responsiveness and solved the
problem of duplicate data transmission, serving as the foundation for
the HTTP/2 protocol.

The HTTP/2 protocol differs from HTTP/1.1 in a few ways:

-   It's a binary protocol rather than a text protocol. It can't be read
    and created manually. Despite this hurdle, it allows for the
    implementation of improved optimization techniques.
-   It's a multiplexed protocol. Parallel requests can be made over the
    same connection, removing the constraints of the HTTP/1.x protocol.
-   It compresses headers. As these are often similar among a set of
    requests, this removes the duplication and overhead of data
    transmitted.
-   It allows a server to populate data in a client cache through a
    mechanism called the server push.

Officially standardized in May 2015, HTTP/2 use peaked in January 2022
at 46.9% of all websites (see these stats ). High-traffic websites
showed the most rapid adoption in an effort to save on data transfer
overhead and subsequent budgets.

This rapid adoption was likely because HTTP/2 didn't require changes to
websites and applications. To use it, only an up-to-date server that
communicated with a recent browser was necessary. Only a limited set of
groups was needed to trigger adoption, and as legacy browser and server
versions were renewed, usage was naturally increased, without
significant work for web developers.

Post-HTTP/2 evolution

HTTP's extensibility is still being used to add new features. Notably,
we can cite new extensions of the HTTP protocol that appeared in 2016:

-   Support for  Alt-Svc allowed the dissociation of the identification
    and the location of a given resource. This meant a smarter CDN
    caching mechanism.
-   The introduction of client hints allowed the browser or client to
    proactively communicate information about its requirements and
    hardware constraints to the server.
-   The introduction of security-related prefixes in the  Cookie header
    helped guarantee that secure cookies couldn't be altered.

HTTP/3 - HTTP over QUIC

The next major version of HTTP, HTTP/3 has the same semantics as earlier
versions of HTTP but uses QUIC instead of TCP for the transport layer
portion. By October 2022, 26% of all websites were using HTTP/3 .

QUIC is designed to provide much lower latency for HTTP connections.
Like HTTP/2, it is a multiplexed protocol, but HTTP/2 runs over a single
TCP connection, so packet loss detection and retransmission handled at
the TCP layer can block all streams. QUIC runs multiple streams over UDP
and implements packet loss detection and retransmission independently
for each stream, so that if an error occurs, only the stream with data
in that packet is blocked.

Defined in RFC 9114 , HTTP/3 is supported by most major browsers
including Chromium (and its variants such as Chrome and Edge) and
Firefox.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Basics of HTTP #
 ____            _                   __   _   _ _____ _____ ____  
| __ )  __ _ ___(_) ___ ___    ___  / _| | | | |_   _|_   _|  _ \ 
|  _ \ / _` / __| |/ __/ __|  / _ \| |_  | |_| | | |   | | | |_) |
| |_) | (_| \__ \ | (__\__ \ | (_) |  _| |  _  | | |   | | |  __/ 
|____/ \__,_|___/_|\___|___/  \___/|_|   |_| |_| |_|   |_| |_|    
                                                                  
Basics of HTTP

HTTP is an extensible protocol that relies on concepts like resources
and Uniform Resource Identifiers (URIs), simple message structure, and
client-server communication flow. On top of these basic concepts,
numerous extensions have been developed over the years that add updated
functionality and semantics with new HTTP methods or headers.

Articles

Overview of HTTP

    Describes what HTTP is and its role in web architecture, including
    its position in the protocol stack.

Evolution of HTTP

    HTTP was created in the early 1990s and has been extended several
    times. This article goes through its history and describes HTTP/0.9,
    HTTP/1.0, HTTP/1.1, and the modern HTTP/2, as well as novelties
    introduced over the years.

Resources and URIs

    A brief introduction to the concept of resources, identifiers, and
    locations on the web.

Identifying resources on the Web

    Describes how web resources are referenced and how to locate them.

Data URLs

    A specific kind of URI that directly embeds the resource it
    represents. Data URLs are very convenient, but have some caveats.

Resource URLs  Non-standard 

    Resource URLs, those prefixed with the  resource scheme are used by
    Firefox and Firefox browser extensions to load resources internally,
    but is also available to some sites the browser connects to as well.

MIME types

    Since HTTP/1.0, different types of content can be transmitted. This
    article explains how this is accomplished using the  Content-Type
    header and the MIME standard.

Choosing between www and non-www URLs

    This article provides guidance on how to choose whether to use a
    www-prefixed domain or not, along with the consequences of that
    choice.

Flow of an HTTP session

    This article describes a typical HTTP session; i.e. what happens
    when you follow a link or load an image into a web page.

HTTP Messages

    HTTP Messages transmitted during requests or responses have a very
    clear structure. This introductory article describes this structure,
    its purpose, and its possibilities.

Frame and message structure in HTTP/2

    HTTP/2 encapsulates and represents HTTP/1.x messages in a binary
    frame. This article explains the frame structure, its purpose, and
    the way it's encoded.

Connection management in HTTP/1.x

    HTTP/1.1 was the first version of HTTP to support persistent
    connection and pipelining. This article explains both concepts.

Connection management in HTTP/2

    HTTP/2 completely revisited how connections are created and
    maintained. This article explains how HTTP frames allow multiplexing
    and solve the 'head-of-line' blocking problem of former HTTP
    versions.

Content Negotiation

    HTTP introduces a set of headers, starting with  Accept as a way for
    a browser to announce the format, language, or encoding it prefers.
    This article explains how this advertisement happens, how the server
    is expected to react, and how it chooses the most adequate response.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Identifying resources on the Web #
 ___    _            _   _  __       _             
|_ _|__| | ___ _ __ | |_(_)/ _|_   _(_)_ __   __ _ 
 | |/ _` |/ _ \ '_ \| __| | |_| | | | | '_ \ / _` |
 | | (_| |  __/ | | | |_| |  _| |_| | | | | | (_| |
|___\__,_|\___|_| |_|\__|_|_|  \__, |_|_| |_|\__, |
                               |___/         |___/ 
                                                             _   _          
 _ __ ___  ___  ___  _   _ _ __ ___ ___  ___    ___  _ __   | |_| |__   ___ 
| '__/ _ \/ __|/ _ \| | | | '__/ __/ _ \/ __|  / _ \| '_ \  | __| '_ \ / _ \
| | |  __/\__ \ (_) | |_| | | | (_|  __/\__ \ | (_) | | | | | |_| | | |  __/
|_|  \___||___/\___/ \__,_|_|  \___\___||___/  \___/|_| |_|  \__|_| |_|\___|
                                                                            
__        __   _     
\ \      / /__| |__  
 \ \ /\ / / _ \ '_ \ 
  \ V  V /  __/ |_) |
   \_/\_/ \___|_.__/ 
                     
Identifying resources on the Web

The target of an HTTP request is called a "resource", whose nature isn't
defined further; it can be a document, a photo, or anything else. Each
resource is identified by a Uniform Resource Identifier ( URI ) used
throughout HTTP for identifying resources.

URLs and URNs

URLs

The most common form of URI is the Uniform Resource Locator ( URL ),
which is known as the web address .

url

    https://developer.mozilla.org
    https://developer.mozilla.org/en-US/docs/Learn/
    https://developer.mozilla.org/en-US/search?q=URL

Any of those URLs can be typed into your browser's address bar to tell
it to load the associated page (resource).

A URL is composed of different parts, some mandatory and others
optional. A more complex example might look like this:

url

    http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument

URNs

A Uniform Resource Name (URN) is a URI that identifies a resource by
name in a particular namespace.

url

    urn:isbn:9780141036144
    urn:ietf:rfc:7230

The two URNs correspond to

-   the book Nineteen Eighty-Four by George Orwell,
-   the IETF specification 7230, Hypertext Transfer Protocol (HTTP/1.1):
    Message Syntax and Routing.

Syntax of Uniform Resource Identifiers (URIs)

Scheme or protocol

 [Protocol]

     http:// is the protocol. It indicates which protocol the browser
    must use. Usually it is the HTTP protocol or its secured version,
    HTTPS. The Web requires one of these two, but browsers also know how
    to handle other protocols such as  mailto: (to open a mail client)
    or  ftp: to handle a file transfer, so don't be surprised if you see
    such protocols. Common schemes are:

  Scheme        Description
  ------------- ---------------------------------------
  data          Data URLs
  file          Host-specific file names
  ftp           File Transfer Protocol
  http/https    Hyper text transfer protocol (Secure)
  javascript    URL-embedded JavaScript code
  mailto        Electronic mail address
  ssh           Secure shell
  tel           telephone
  urn           Uniform Resource Names
  view-source   Source code of the resource
  ws/wss        WebSocket connections (Secure)

Authority

 [Domaine Name]

     www.example.com is the domain name or authority that governs the
    namespace. It indicates which Web server is being requested.
    Alternatively, it is possible to directly use an IP address , but
    because it is less convenient, it is not often used on the Web.

Port

 [Port]

     :80 is the port in this instance. It indicates the technical "gate"
    used to access the resources on the web server. It is usually
    omitted if the web server uses the standard ports of the HTTP
    protocol (80 for HTTP and 443 for HTTPS) to grant access to its
    resources. Otherwise, it is mandatory.

Path

 [Path to the file]

     /path/to/myfile.html is the path to the resource on the Web server.
    In the early days of the Web, a path like this represented a
    physical file location on the Web server. Nowadays, it is mostly an
    abstraction handled by Web servers without any physical reality.

Query

 [Parameters]

     ?key1=value1&key2=value2 are extra parameters provided to the Web
    server. Those parameters are a list of key/value pairs separated
    with the  & symbol. The Web server can use those parameters to do
    extra stuff before returning the resource to the user. Each Web
    server has its own rules regarding parameters, and the only reliable
    way to know how a specific Web server is handling parameters is by
    asking the Web server owner.

Fragment

 [Anchor]

     #SomewhereInTheDocument is an anchor to another part of the
    resource itself. An anchor represents a sort of "bookmark" inside
    the resource, giving the browser the directions to show the content
    located at that "bookmarked" spot. On an HTML document, for example,
    the browser will scroll to the point where the anchor is defined; on
    a video or audio document, the browser will try to go to the time
    the anchor represents. It is worth noting that the part after the #,
    also known as the fragment identifier, is never sent to the server
    with the request.

Usage notes

When using URLs in HTML content, you should generally only use a few of
these URL schemes. When referring to subresources — that is, files that
are being loaded as part of a larger document — you should only use the
HTTP and HTTPS schemes. Increasingly, browsers are removing support for
using FTP to load subresources, for security reasons.

FTP is still acceptable at the top level (such as typed directly into
the browser's URL bar, or the target of a link), although some browsers
may delegate loading FTP content to another application.

Examples

url

    https://developer.mozilla.org/en-US/docs/Learn
    tel:+1-816-555-1212
    git@github.com:mdn/browser-compat-data.git
    ftp://example.org/resource.txt
    urn:isbn:9780141036144
    mailto:help@supercyberhelpdesk.info

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # uri

  -----------------------------------------------------------------------

See also

-   What is a URL?
-   IANA list of URI schemes

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 25, 2023 by MDN contributors .
# Common MIME types #
  ____                                        __  __ ___ __  __ _____ 
 / ___|___  _ __ ___  _ __ ___   ___  _ __   |  \/  |_ _|  \/  | ____|
| |   / _ \| '_ ` _ \| '_ ` _ \ / _ \| '_ \  | |\/| || || |\/| |  _|  
| |__| (_) | | | | | | | | | | | (_) | | | | | |  | || || |  | | |___ 
 \____\___/|_| |_| |_|_| |_| |_|\___/|_| |_| |_|  |_|___|_|  |_|_____|
                                                                      
 _                         
| |_ _   _ _ __   ___  ___ 
| __| | | | '_ \ / _ \/ __|
| |_| |_| | |_) |  __/\__ \
 \__|\__, | .__/ \___||___/
     |___/|_|              
Common MIME types

This topic lists the most common MIME types with corresponding document
types, ordered by their common extensions.

The following two important MIME types are the default types:

-    text/plain is the default value for textual files. A textual file
    should be human-readable and must not contain binary data.
-    application/octet-stream is the default value for all other cases.
    An unknown file type should use this type. Browsers are particularly
    careful when manipulating these files to protect users from software
    vulnerabilities and possible dangerous behavior.

IANA is the official registry of MIME media types and maintains a list
of all the official MIME types . This table lists important MIME types
for the Web:

  Extension        Kind of document                                  MIME Type
  ---------------- ------------------------------------------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   .aac            AAC audio                                          audio/aac
   .abw            AbiWord document                                   application/x-abiword
   .apng           Animated Portable Network Graphics (APNG) image    image/apng
   .arc            Archive document (multiple files embedded)         application/x-freearc
   .avif           AVIF image                                         image/avif
   .avi            AVI: Audio Video Interleave                        video/x-msvideo
   .azw            Amazon Kindle eBook format                         application/vnd.amazon.ebook
   .bin            Any kind of binary data                            application/octet-stream
   .bmp            Windows OS/2 Bitmap Graphics                       image/bmp
   .bz             BZip archive                                       application/x-bzip
   .bz2            BZip2 archive                                      application/x-bzip2
   .cda            CD audio                                           application/x-cdf
   .csh            C-Shell script                                     application/x-csh
   .css            Cascading Style Sheets (CSS)                       text/css
   .csv            Comma-separated values (CSV)                       text/csv
   .doc            Microsoft Word                                     application/msword
   .docx           Microsoft Word (OpenXML)                           application/vnd.openxmlformats-officedocument.wordprocessingml.document
   .eot            MS Embedded OpenType fonts                         application/vnd.ms-fontobject
   .epub           Electronic publication (EPUB)                      application/epub+zip
   .gz             GZip Compressed Archive                            application/gzip
   .gif            Graphics Interchange Format (GIF)                  image/gif
   .htm ,  .html   HyperText Markup Language (HTML)                   text/html
   .ico            Icon format                                        image/vnd.microsoft.icon
   .ics            iCalendar format                                   text/calendar
   .jar            Java Archive (JAR)                                 application/java-archive
   .jpeg ,  .jpg   JPEG images                                        image/jpeg
   .js             JavaScript                                         text/javascript (Specifications: HTML and RFC 9239 )
   .json           JSON format                                        application/json
   .jsonld         JSON-LD format                                     application/ld+json
   .mid ,  .midi   Musical Instrument Digital Interface (MIDI)        audio/midi ,  audio/x-midi
   .mjs            JavaScript module                                  text/javascript
   .mp3            MP3 audio                                          audio/mpeg
   .mp4            MP4 video                                          video/mp4
   .mpeg           MPEG Video                                         video/mpeg
   .mpkg           Apple Installer Package                            application/vnd.apple.installer+xml
   .odp            OpenDocument presentation document                 application/vnd.oasis.opendocument.presentation
   .ods            OpenDocument spreadsheet document                  application/vnd.oasis.opendocument.spreadsheet
   .odt            OpenDocument text document                         application/vnd.oasis.opendocument.text
   .oga            OGG audio                                          audio/ogg
   .ogv            OGG video                                          video/ogg
   .ogx            OGG                                                application/ogg
   .opus           Opus audio                                         audio/opus
   .otf            OpenType font                                      font/otf
   .png            Portable Network Graphics                          image/png
   .pdf            Adobe Portable Document Format (PDF)               application/pdf
   .php            Hypertext Preprocessor ( Personal Home Page )      application/x-httpd-php
   .ppt            Microsoft PowerPoint                               application/vnd.ms-powerpoint
   .pptx           Microsoft PowerPoint (OpenXML)                     application/vnd.openxmlformats-officedocument.presentationml.presentation
   .rar            RAR archive                                        application/vnd.rar
   .rtf            Rich Text Format (RTF)                             application/rtf
   .sh             Bourne shell script                                application/x-sh
   .svg            Scalable Vector Graphics (SVG)                     image/svg+xml
   .tar            Tape Archive (TAR)                                 application/x-tar
   .tif ,  .tiff   Tagged Image File Format (TIFF)                    image/tiff
   .ts             MPEG transport stream                              video/mp2t
   .ttf            TrueType Font                                      font/ttf
   .txt            Text, (generally ASCII or ISO 8859- n )            text/plain
   .vsd            Microsoft Visio                                    application/vnd.visio
   .wav            Waveform Audio Format                              audio/wav
   .weba           WEBM audio                                         audio/webm
   .webm           WEBM video                                         video/webm
   .webp           WEBP image                                         image/webp
   .woff           Web Open Font Format (WOFF)                        font/woff
   .woff2          Web Open Font Format (WOFF)                        font/woff2
   .xhtml          XHTML                                              application/xhtml+xml
   .xls            Microsoft Excel                                    application/vnd.ms-excel
   .xlsx           Microsoft Excel (OpenXML)                          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
   .xml            XML                                                application/xml is recommended as of RFC 7303 (section 4.1), but  text/xml is still used sometimes. You can assign a specific MIME type to a file with  .xml extension depending on how its contents are meant to be interpreted. For instance, an Atom feed is  application/atom+xml , but  application/xml serves as a valid default.
   .xul            XUL                                                application/vnd.mozilla.xul+xml
   .zip            ZIP archive                                        application/zip
   .3gp            3GPP audio/video container                         video/3gpp ;  audio/3gpp if it doesn't contain video
   .3g2            3GPP2 audio/video container                        video/3gpp2 ;  audio/3gpp2 if it doesn't contain video
   .7z             7-zip archive                                      application/x-7z-compressed

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 9, 2024 by MDN contributors .
# MIME types (IANA media types) #
 __  __ ___ __  __ _____   _                         
|  \/  |_ _|  \/  | ____| | |_ _   _ _ __   ___  ___ 
| |\/| || || |\/| |  _|   | __| | | | '_ \ / _ \/ __|
| |  | || || |  | | |___  | |_| |_| | |_) |  __/\__ \
|_|  |_|___|_|  |_|_____|  \__|\__, | .__/ \___||___/
                               |___/|_|              
  _____    _    _   _    _                         _ _       
 / /_ _|  / \  | \ | |  / \     _ __ ___   ___  __| (_) __ _ 
| | | |  / _ \ |  \| | / _ \   | '_ ` _ \ / _ \/ _` | |/ _` |
| | | | / ___ \| |\  |/ ___ \  | | | | | |  __/ (_| | | (_| |
| ||___/_/   \_\_| \_/_/   \_\ |_| |_| |_|\___|\__,_|_|\__,_|
 \_\                                                         
 _                       __  
| |_ _   _ _ __   ___  __\ \ 
| __| | | | '_ \ / _ \/ __| |
| |_| |_| | |_) |  __/\__ \ |
 \__|\__, | .__/ \___||___/ |
     |___/|_|            /_/ 
MIME types (IANA media types)

A media type (also known as a Multipurpose Internet Mail Extensions or
MIME type ) indicates the nature and format of a document, file, or
assortment of bytes. MIME types are defined and standardized in IETF's
RFC 6838 .

The Internet Assigned Numbers Authority (IANA) is responsible for all
official MIME types, and you can find the most up-to-date and complete
list at their Media Types page.

Warning: Browsers use the MIME type, not the file extension , to
determine how to process a URL, so it's important that web servers send
the correct MIME type in the response's  Content-Type header. If this is
not correctly configured, browsers are likely to misinterpret the
contents of files, sites will not work correctly, and downloaded files
may be mishandled.

Structure of a MIME type

A MIME type most commonly consists of just two parts: a type and a
subtype , separated by a slash (  / ) — with no whitespace between:

    type/subtype

The type represents the general category into which the data type falls,
such as  video or  text .

The subtype identifies the exact kind of data of the specified type the
MIME type represents. For example, for the MIME type  text , the subtype
might be  plain (plain text),  html ( HTML source code), or  calendar
(for iCalendar/  .ics ) files.

Each type has its own set of possible subtypes. A MIME type always has
both a type and a subtype, never just one or the other.

An optional parameter can be added to provide additional details:

    type/subtype;parameter=value

For example, for any MIME type whose main type is  text , you can add
the optional  charset parameter to specify the character set used for
the characters in the data. If no  charset is specified, the default is
ASCII (  US-ASCII ) unless overridden by the user agent's settings. To
specify a UTF-8 text file, the MIME type  text/plain;charset=UTF-8 is
used.

MIME types are case-insensitive but are traditionally written in
lowercase. The parameter values can be case-sensitive.

Types

There are two classes of type: discrete and multipart . Discrete types
are types which represent a single file or medium, such as a single text
or music file, or a single video. A multipart type represents a document
that's comprised of multiple component parts, each of which may have its
own individual MIME type; or, a multipart type may encapsulate multiple
files being sent together in one transaction. For example, multipart
MIME types are used when attaching multiple files to an email.

Discrete types

The discrete types currently registered with the IANA are:

 application

    Any kind of binary data that doesn't fall explicitly into one of the
    other types; either data that will be executed or interpreted in
    some way or binary data that requires a specific application or
    category of application to use. Generic binary data (or binary data
    whose true type is unknown) is  application/octet-stream . Other
    common examples include  application/pdf ,  application/pkcs8 , and
     application/zip . (See application type registry at IANA)

 audio

    Audio or music data. Examples include  audio/mpeg ,  audio/vorbis .
    (See audio type registry at IANA)

 example

    Reserved for use as a placeholder in examples showing how to use
    MIME types. These should never be used outside of sample code
    listings and documentation.  example can also be used as a subtype;
    for instance, in an example related to working with audio on the
    web, the MIME type  audio/example can be used to indicate that the
    type is a placeholder and should be replaced with an appropriate one
    when using the code in the real world.

 font

    Font/typeface data. Common examples include  font/woff ,  font/ttf ,
    and  font/otf . (See font type registry at IANA)

 image

    Image or graphical data including both bitmap and vector still
    images as well as animated versions of still image formats such as
    animated GIF or APNG. Common examples are  image/jpeg ,  image/png ,
    and  image/svg+xml . (See image type registry at IANA)

 model

    Model data for a 3D object or scene. Examples include  model/3mf and
     model/vrml . (See model type registry at IANA)

 text

    Text-only data including any human-readable content, source code, or
    textual data such as comma-separated value (CSV) formatted data.
    Examples include:  text/plain ,  text/csv , and  text/html . (See
    text type registry at IANA)

 video

    Video data or files, such as MP4 movies (  video/mp4 ). (See video
    type registry at IANA)

For text documents without a specific subtype,  text/plain should be
used. Similarly, for binary documents without a specific or known
subtype,  application/octet-stream should be used.

Multipart types

Multipart types indicate a category of document broken into pieces,
often with different MIME types; they can also be used — especially in
email scenarios — to represent multiple, separate files which are all
part of the same transaction. They represent a composite document .

Except for  multipart/form-data , used in the  POST method of HTML Forms
, and  multipart/byteranges , used with  206  Partial Content to send
part of a document, HTTP doesn't handle multipart documents in a special
way: the message is transmitted to the browser (which will likely show a
"Save As" window if it doesn't know how to display the document).

There are two multipart types:

 message

    A message that encapsulates other messages. This can be used, for
    instance, to represent an email that includes a forwarded message as
    part of its data, or to allow sending very large messages in chunks
    as if it were multiple messages. Examples include  message/rfc822
    (for forwarded or replied-to message quoting) and  message/partial
    to allow breaking a large message into smaller ones automatically to
    be reassembled by the recipient. (See message type registry at IANA)

 multipart

    Data that consists of multiple components which may individually
    have different MIME types. Examples include  multipart/form-data
    (for data produced using the  FormData API) and
     multipart/byteranges (defined in RFC 7233, section 5.4.1 and used
    with HTTP 's  206 "Partial Content" response returned when the
    fetched data is only part of the content, such as is delivered using
    the  Range header). (See multipart type registry at IANA)

Important MIME types for Web developers

application/octet-stream

This is the default for binary files. As it means unknown binary file,
browsers usually don't execute it, or even ask if it should be executed.
They treat it as if the  Content-Disposition header was set to
 attachment , and propose a "Save As" dialog.

text/plain

This is the default for textual files. Even if it really means "unknown
textual file," browsers assume they can display it.

Note:  text/plain does not mean "any kind of textual data." If they
expect a specific kind of textual data, they will likely not consider it
a match. Specifically if they download a  text/plain file from a  <link>
element declaring a CSS file, they will not recognize it as a valid CSS
file if presented with  text/plain . The CSS mime type  text/css must be
used.

text/css

CSS files used to style a Web page must be sent with  text/css . If a
server doesn't recognize the  .css suffix for CSS files, it may send
them with  text/plain or  application/octet-stream MIME types. If so,
they won't be recognized as CSS by most browsers and will be ignored.

text/html

All HTML content should be served with this type. Alternative MIME types
for XHTML (like  application/xhtml+xml ) are mostly useless nowadays.

Note: Use  application/xml or  application/xhtml+xml if you want XML's
strict parsing rules,  <![CDATA[…]]> sections, or elements that aren't
from HTML/SVG/MathML namespaces.

text/javascript

Per the IANA Media Types registry , RFC 9239 , and the HTML
specification , JavaScript content should always be served using the
MIME type  text/javascript . No other MIME types are considered valid
for JavaScript, and using any MIME type other than  text/javascript may
result in scripts that do not load or run.

You may find some JavaScript content incorrectly served with a  charset
parameter as part of the MIME type — as an attempt to specify the
character set for the script content. That  charset parameter isn't
valid for JavaScript content, and in most cases will result in a script
failing to load.

Legacy JavaScript MIME types

In addition to the  text/javascript MIME type, for historical reasons,
the MIME Sniffing Standard (the definition of how browsers should
interpret MIME types and figure out what to do with content that doesn't
have a valid one) also allows JavaScript to be served using any of the
following legacy JavaScript MIME types:

-    application/javascript Deprecated
-    application/ecmascript Deprecated
-    application/x-ecmascript Non-standard
-    application/x-javascript Non-standard
-    text/ecmascript Deprecated
-    text/javascript1.0 Non-standard
-    text/javascript1.1 Non-standard
-    text/javascript1.2 Non-standard
-    text/javascript1.3 Non-standard
-    text/javascript1.4 Non-standard
-    text/javascript1.5 Non-standard
-    text/jscript Non-standard
-    text/livescript Non-standard
-    text/x-ecmascript Non-standard
-    text/x-javascript Non-standard

Note: Even though any given user agent may support any or all of these,
you should only use  text/javascript . It's the only MIME type
guaranteed to work now and into the future.

Image types

Files whose MIME type is  image contain image data. The subtype
specifies which specific image file format the data represents.

The following image types are used commonly enough to be considered safe
for use on web pages:

-    image/apng : Animated Portable Network Graphics (APNG)
-    image/avif : AV1 Image File Format (AVIF)
-    image/gif : Graphics Interchange Format (GIF)
-    image/jpeg : Joint Photographic Expert Group image (JPEG)
-    image/png : Portable Network Graphics (PNG)
-    image/svg+xml : Scalable Vector Graphics (SVG)
-    image/webp : Web Picture format (WEBP)

The Image file type and format guide provides information and
recommendations about when to use the different image formats.

Audio and video types

As is the case for images, HTML doesn't mandate that web browsers
support any specific file and codec types for the  <audio> and  <video>
elements, so it's important to consider your target audience and the
range of browsers (and versions of those browsers) they may be using
when choosing the file type and codecs to use for media.

Our media container formats guide provides a list of the file types that
are commonly supported by web browsers, including information about what
their special use cases may be, any drawbacks they have, and
compatibility information, along with other details.

The audio codec and video codec guides list the various codecs that web
browsers often support, providing compatibility details along with
technical information such as how many audio channels they support, what
sort of compression is used, and what bit rates and so forth they're
useful at. The codecs used by WebRTC guide expands upon this by
specifically covering the codecs supported by the major web browsers, so
you can choose the codecs that best cover the range of browsers you wish
to support.

As for MIME types of audio or video files, they typically specify the
container format (file type). The optional codecs parameter can be added
to the MIME type to further specify which codecs to use and what options
were used to encode the media, such as codec profile, level, or other
such information.

For more information on common media types, see the Common MIME types
page.

multipart/form-data

The  multipart/form-data type can be used when sending the values of a
completed HTML Form from browser to server.

As a multipart document format, it consists of different parts,
delimited by a boundary (a string starting with a double dash  -- ).
Each part is its own entity with its own HTTP headers,
 Content-Disposition , and  Content-Type for file uploading fields.

http

    Content-Type: multipart/form-data; boundary=aBoundaryString
    (other headers associated with the multipart document as a whole)

    --aBoundaryString
    Content-Disposition: form-data; name="myFile"; filename="img.jpg"
    Content-Type: image/jpeg

    (data)
    --aBoundaryString
    Content-Disposition: form-data; name="myField"

    (data)
    --aBoundaryString
    (more subparts)
    --aBoundaryString--

The following  <form> :

html

    <form
      action="http://localhost:8000/"
      method="post"
      enctype="multipart/form-data">
      <label>Name: <input name="myTextField" value="Test" /></label>
      <label><input type="checkbox" name="myCheckBox" /> Check</label>
      <label>
        Upload file: <input type="file" name="myFile" value="test.txt" />
      </label>
      <button>Send the file</button>
    </form>

will send this message:

http

    POST / HTTP/1.1
    Host: localhost:8000
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    Connection: keep-alive
    Upgrade-Insecure-Requests: 1
    Content-Type: multipart/form-data; boundary=---------------------------8721656041911415653955004498
    Content-Length: 465

    -----------------------------8721656041911415653955004498
    Content-Disposition: form-data; name="myTextField"

    Test
    -----------------------------8721656041911415653955004498
    Content-Disposition: form-data; name="myCheckBox"

    on
    -----------------------------8721656041911415653955004498
    Content-Disposition: form-data; name="myFile"; filename="test.txt"
    Content-Type: text/plain

    Simple file.
    -----------------------------8721656041911415653955004498--

multipart/byteranges

The  multipart/byteranges MIME type is used to send partial responses to
the browser.

When the  206 Partial Content status code is sent, this MIME type
indicates that the document is composed of several parts, one for each
of the requested ranges. Like other multipart types, the  Content-Type
uses a  boundary to separate the pieces. Each piece has a  Content-Type
header with its actual type and a  Content-Range of the range it
represents.

http

    HTTP/1.1 206 Partial Content
    Accept-Ranges: bytes
    Content-Type: multipart/byteranges; boundary=3d6b6a416f9b5
    Content-Length: 385

    --3d6b6a416f9b5
    Content-Type: text/html
    Content-Range: bytes 100-200/1270

    eta http-equiv="Content-type" content="text/html; charset=utf-8" />
        <meta name="viewport" content
    --3d6b6a416f9b5
    Content-Type: text/html
    Content-Range: bytes 300-400/1270

    -color: #f0f0f2;
            margin: 0;
            padding: 0;
            font-family: "Open Sans", "Helvetica
    --3d6b6a416f9b5--

Importance of setting the correct MIME type

Most web servers send unrecognized resources as the
 application/octet-stream MIME type. For security reasons, most browsers
do not allow setting a custom default action for such resources, forcing
the user to save it to disk to use it.

Some common incorrect server configurations:

-   RAR-compressed files. In this case, the ideal would be the true type
    of the original files; this is often impossible as .RAR files can
    hold several resources of different types. In this case, configure
    the server to send  application/x-rar-compressed .
-   Audio and video. Only resources with the correct MIME Type will be
    played in  <video> or  <audio> elements. Be sure to specify the
    correct media type for audio and video .
-   Proprietary file types. Avoid using  application/octet-stream as
    most browsers do not allow defining a default behavior (like "Open
    in Word") for this generic MIME type. A specific type like
     application/vnd.mspowerpoint lets users open such files
    automatically in the presentation software of their choice.

MIME sniffing

In the absence of a MIME type, or in certain cases where browsers
believe they are incorrect, browsers may perform MIME sniffing —
guessing the correct MIME type by looking at the bytes of the resource.

Each browser performs MIME sniffing differently and under different
circumstances. (For example, Safari will look at the file extension in
the URL if the sent MIME type is unsuitable.) There are security
concerns as some MIME types represent executable content. Servers can
prevent MIME sniffing by sending the  X-Content-Type-Options header.

Other methods of conveying document type

MIME types are not the only way to convey document type information:

-   Filename suffixes are sometimes used, especially on Microsoft
    Windows. Not all operating systems consider these suffixes
    meaningful (such as Linux and macOS), and there is no guarantee they
    are correct.
-   Magic numbers. The syntax of different formats allows file-type
    inference by looking at their byte structure. For example, GIF files
    start with the  47 49 46 38 39 hexadecimal value (  GIF89 ), and PNG
    files with  89 50 4E 47 (  .PNG ). Not all file types have magic
    numbers, so this is not 100% reliable either.

See also

-   Web media technologies
-   Guide to media types used on the web
-   Properly configuring server MIME types

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 18, 2023 by MDN contributors .
# MIME types (IANA media types) #
 __  __ ___ __  __ _____   _                         
|  \/  |_ _|  \/  | ____| | |_ _   _ _ __   ___  ___ 
| |\/| || || |\/| |  _|   | __| | | | '_ \ / _ \/ __|
| |  | || || |  | | |___  | |_| |_| | |_) |  __/\__ \
|_|  |_|___|_|  |_|_____|  \__|\__, | .__/ \___||___/
                               |___/|_|              
  _____    _    _   _    _                         _ _       
 / /_ _|  / \  | \ | |  / \     _ __ ___   ___  __| (_) __ _ 
| | | |  / _ \ |  \| | / _ \   | '_ ` _ \ / _ \/ _` | |/ _` |
| | | | / ___ \| |\  |/ ___ \  | | | | | |  __/ (_| | | (_| |
| ||___/_/   \_\_| \_/_/   \_\ |_| |_| |_|\___|\__,_|_|\__,_|
 \_\                                                         
 _                       __  
| |_ _   _ _ __   ___  __\ \ 
| __| | | | '_ \ / _ \/ __| |
| |_| |_| | |_) |  __/\__ \ |
 \__|\__, | .__/ \___||___/ |
     |___/|_|            /_/ 
MIME types (IANA media types)

A media type (also known as a Multipurpose Internet Mail Extensions or
MIME type ) indicates the nature and format of a document, file, or
assortment of bytes. MIME types are defined and standardized in IETF's
RFC 6838 .

The Internet Assigned Numbers Authority (IANA) is responsible for all
official MIME types, and you can find the most up-to-date and complete
list at their Media Types page.

Warning: Browsers use the MIME type, not the file extension , to
determine how to process a URL, so it's important that web servers send
the correct MIME type in the response's  Content-Type header. If this is
not correctly configured, browsers are likely to misinterpret the
contents of files, sites will not work correctly, and downloaded files
may be mishandled.

Structure of a MIME type

A MIME type most commonly consists of just two parts: a type and a
subtype , separated by a slash (  / ) — with no whitespace between:

    type/subtype

The type represents the general category into which the data type falls,
such as  video or  text .

The subtype identifies the exact kind of data of the specified type the
MIME type represents. For example, for the MIME type  text , the subtype
might be  plain (plain text),  html ( HTML source code), or  calendar
(for iCalendar/  .ics ) files.

Each type has its own set of possible subtypes. A MIME type always has
both a type and a subtype, never just one or the other.

An optional parameter can be added to provide additional details:

    type/subtype;parameter=value

For example, for any MIME type whose main type is  text , you can add
the optional  charset parameter to specify the character set used for
the characters in the data. If no  charset is specified, the default is
ASCII (  US-ASCII ) unless overridden by the user agent's settings. To
specify a UTF-8 text file, the MIME type  text/plain;charset=UTF-8 is
used.

MIME types are case-insensitive but are traditionally written in
lowercase. The parameter values can be case-sensitive.

Types

There are two classes of type: discrete and multipart . Discrete types
are types which represent a single file or medium, such as a single text
or music file, or a single video. A multipart type represents a document
that's comprised of multiple component parts, each of which may have its
own individual MIME type; or, a multipart type may encapsulate multiple
files being sent together in one transaction. For example, multipart
MIME types are used when attaching multiple files to an email.

Discrete types

The discrete types currently registered with the IANA are:

 application

    Any kind of binary data that doesn't fall explicitly into one of the
    other types; either data that will be executed or interpreted in
    some way or binary data that requires a specific application or
    category of application to use. Generic binary data (or binary data
    whose true type is unknown) is  application/octet-stream . Other
    common examples include  application/pdf ,  application/pkcs8 , and
     application/zip . (See application type registry at IANA)

 audio

    Audio or music data. Examples include  audio/mpeg ,  audio/vorbis .
    (See audio type registry at IANA)

 example

    Reserved for use as a placeholder in examples showing how to use
    MIME types. These should never be used outside of sample code
    listings and documentation.  example can also be used as a subtype;
    for instance, in an example related to working with audio on the
    web, the MIME type  audio/example can be used to indicate that the
    type is a placeholder and should be replaced with an appropriate one
    when using the code in the real world.

 font

    Font/typeface data. Common examples include  font/woff ,  font/ttf ,
    and  font/otf . (See font type registry at IANA)

 image

    Image or graphical data including both bitmap and vector still
    images as well as animated versions of still image formats such as
    animated GIF or APNG. Common examples are  image/jpeg ,  image/png ,
    and  image/svg+xml . (See image type registry at IANA)

 model

    Model data for a 3D object or scene. Examples include  model/3mf and
     model/vrml . (See model type registry at IANA)

 text

    Text-only data including any human-readable content, source code, or
    textual data such as comma-separated value (CSV) formatted data.
    Examples include:  text/plain ,  text/csv , and  text/html . (See
    text type registry at IANA)

 video

    Video data or files, such as MP4 movies (  video/mp4 ). (See video
    type registry at IANA)

For text documents without a specific subtype,  text/plain should be
used. Similarly, for binary documents without a specific or known
subtype,  application/octet-stream should be used.

Multipart types

Multipart types indicate a category of document broken into pieces,
often with different MIME types; they can also be used — especially in
email scenarios — to represent multiple, separate files which are all
part of the same transaction. They represent a composite document .

Except for  multipart/form-data , used in the  POST method of HTML Forms
, and  multipart/byteranges , used with  206  Partial Content to send
part of a document, HTTP doesn't handle multipart documents in a special
way: the message is transmitted to the browser (which will likely show a
"Save As" window if it doesn't know how to display the document).

There are two multipart types:

 message

    A message that encapsulates other messages. This can be used, for
    instance, to represent an email that includes a forwarded message as
    part of its data, or to allow sending very large messages in chunks
    as if it were multiple messages. Examples include  message/rfc822
    (for forwarded or replied-to message quoting) and  message/partial
    to allow breaking a large message into smaller ones automatically to
    be reassembled by the recipient. (See message type registry at IANA)

 multipart

    Data that consists of multiple components which may individually
    have different MIME types. Examples include  multipart/form-data
    (for data produced using the  FormData API) and
     multipart/byteranges (defined in RFC 7233, section 5.4.1 and used
    with HTTP 's  206 "Partial Content" response returned when the
    fetched data is only part of the content, such as is delivered using
    the  Range header). (See multipart type registry at IANA)

Important MIME types for Web developers

application/octet-stream

This is the default for binary files. As it means unknown binary file,
browsers usually don't execute it, or even ask if it should be executed.
They treat it as if the  Content-Disposition header was set to
 attachment , and propose a "Save As" dialog.

text/plain

This is the default for textual files. Even if it really means "unknown
textual file," browsers assume they can display it.

Note:  text/plain does not mean "any kind of textual data." If they
expect a specific kind of textual data, they will likely not consider it
a match. Specifically if they download a  text/plain file from a  <link>
element declaring a CSS file, they will not recognize it as a valid CSS
file if presented with  text/plain . The CSS mime type  text/css must be
used.

text/css

CSS files used to style a Web page must be sent with  text/css . If a
server doesn't recognize the  .css suffix for CSS files, it may send
them with  text/plain or  application/octet-stream MIME types. If so,
they won't be recognized as CSS by most browsers and will be ignored.

text/html

All HTML content should be served with this type. Alternative MIME types
for XHTML (like  application/xhtml+xml ) are mostly useless nowadays.

Note: Use  application/xml or  application/xhtml+xml if you want XML's
strict parsing rules,  <![CDATA[…]]> sections, or elements that aren't
from HTML/SVG/MathML namespaces.

text/javascript

Per the IANA Media Types registry , RFC 9239 , and the HTML
specification , JavaScript content should always be served using the
MIME type  text/javascript . No other MIME types are considered valid
for JavaScript, and using any MIME type other than  text/javascript may
result in scripts that do not load or run.

You may find some JavaScript content incorrectly served with a  charset
parameter as part of the MIME type — as an attempt to specify the
character set for the script content. That  charset parameter isn't
valid for JavaScript content, and in most cases will result in a script
failing to load.

Legacy JavaScript MIME types

In addition to the  text/javascript MIME type, for historical reasons,
the MIME Sniffing Standard (the definition of how browsers should
interpret MIME types and figure out what to do with content that doesn't
have a valid one) also allows JavaScript to be served using any of the
following legacy JavaScript MIME types:

-    application/javascript Deprecated
-    application/ecmascript Deprecated
-    application/x-ecmascript Non-standard
-    application/x-javascript Non-standard
-    text/ecmascript Deprecated
-    text/javascript1.0 Non-standard
-    text/javascript1.1 Non-standard
-    text/javascript1.2 Non-standard
-    text/javascript1.3 Non-standard
-    text/javascript1.4 Non-standard
-    text/javascript1.5 Non-standard
-    text/jscript Non-standard
-    text/livescript Non-standard
-    text/x-ecmascript Non-standard
-    text/x-javascript Non-standard

Note: Even though any given user agent may support any or all of these,
you should only use  text/javascript . It's the only MIME type
guaranteed to work now and into the future.

Image types

Files whose MIME type is  image contain image data. The subtype
specifies which specific image file format the data represents.

The following image types are used commonly enough to be considered safe
for use on web pages:

-    image/apng : Animated Portable Network Graphics (APNG)
-    image/avif : AV1 Image File Format (AVIF)
-    image/gif : Graphics Interchange Format (GIF)
-    image/jpeg : Joint Photographic Expert Group image (JPEG)
-    image/png : Portable Network Graphics (PNG)
-    image/svg+xml : Scalable Vector Graphics (SVG)
-    image/webp : Web Picture format (WEBP)

The Image file type and format guide provides information and
recommendations about when to use the different image formats.

Audio and video types

As is the case for images, HTML doesn't mandate that web browsers
support any specific file and codec types for the  <audio> and  <video>
elements, so it's important to consider your target audience and the
range of browsers (and versions of those browsers) they may be using
when choosing the file type and codecs to use for media.

Our media container formats guide provides a list of the file types that
are commonly supported by web browsers, including information about what
their special use cases may be, any drawbacks they have, and
compatibility information, along with other details.

The audio codec and video codec guides list the various codecs that web
browsers often support, providing compatibility details along with
technical information such as how many audio channels they support, what
sort of compression is used, and what bit rates and so forth they're
useful at. The codecs used by WebRTC guide expands upon this by
specifically covering the codecs supported by the major web browsers, so
you can choose the codecs that best cover the range of browsers you wish
to support.

As for MIME types of audio or video files, they typically specify the
container format (file type). The optional codecs parameter can be added
to the MIME type to further specify which codecs to use and what options
were used to encode the media, such as codec profile, level, or other
such information.

For more information on common media types, see the Common MIME types
page.

multipart/form-data

The  multipart/form-data type can be used when sending the values of a
completed HTML Form from browser to server.

As a multipart document format, it consists of different parts,
delimited by a boundary (a string starting with a double dash  -- ).
Each part is its own entity with its own HTTP headers,
 Content-Disposition , and  Content-Type for file uploading fields.

http

    Content-Type: multipart/form-data; boundary=aBoundaryString
    (other headers associated with the multipart document as a whole)

    --aBoundaryString
    Content-Disposition: form-data; name="myFile"; filename="img.jpg"
    Content-Type: image/jpeg

    (data)
    --aBoundaryString
    Content-Disposition: form-data; name="myField"

    (data)
    --aBoundaryString
    (more subparts)
    --aBoundaryString--

The following  <form> :

html

    <form
      action="http://localhost:8000/"
      method="post"
      enctype="multipart/form-data">
      <label>Name: <input name="myTextField" value="Test" /></label>
      <label><input type="checkbox" name="myCheckBox" /> Check</label>
      <label>
        Upload file: <input type="file" name="myFile" value="test.txt" />
      </label>
      <button>Send the file</button>
    </form>

will send this message:

http

    POST / HTTP/1.1
    Host: localhost:8000
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    Connection: keep-alive
    Upgrade-Insecure-Requests: 1
    Content-Type: multipart/form-data; boundary=---------------------------8721656041911415653955004498
    Content-Length: 465

    -----------------------------8721656041911415653955004498
    Content-Disposition: form-data; name="myTextField"

    Test
    -----------------------------8721656041911415653955004498
    Content-Disposition: form-data; name="myCheckBox"

    on
    -----------------------------8721656041911415653955004498
    Content-Disposition: form-data; name="myFile"; filename="test.txt"
    Content-Type: text/plain

    Simple file.
    -----------------------------8721656041911415653955004498--

multipart/byteranges

The  multipart/byteranges MIME type is used to send partial responses to
the browser.

When the  206 Partial Content status code is sent, this MIME type
indicates that the document is composed of several parts, one for each
of the requested ranges. Like other multipart types, the  Content-Type
uses a  boundary to separate the pieces. Each piece has a  Content-Type
header with its actual type and a  Content-Range of the range it
represents.

http

    HTTP/1.1 206 Partial Content
    Accept-Ranges: bytes
    Content-Type: multipart/byteranges; boundary=3d6b6a416f9b5
    Content-Length: 385

    --3d6b6a416f9b5
    Content-Type: text/html
    Content-Range: bytes 100-200/1270

    eta http-equiv="Content-type" content="text/html; charset=utf-8" />
        <meta name="viewport" content
    --3d6b6a416f9b5
    Content-Type: text/html
    Content-Range: bytes 300-400/1270

    -color: #f0f0f2;
            margin: 0;
            padding: 0;
            font-family: "Open Sans", "Helvetica
    --3d6b6a416f9b5--

Importance of setting the correct MIME type

Most web servers send unrecognized resources as the
 application/octet-stream MIME type. For security reasons, most browsers
do not allow setting a custom default action for such resources, forcing
the user to save it to disk to use it.

Some common incorrect server configurations:

-   RAR-compressed files. In this case, the ideal would be the true type
    of the original files; this is often impossible as .RAR files can
    hold several resources of different types. In this case, configure
    the server to send  application/x-rar-compressed .
-   Audio and video. Only resources with the correct MIME Type will be
    played in  <video> or  <audio> elements. Be sure to specify the
    correct media type for audio and video .
-   Proprietary file types. Avoid using  application/octet-stream as
    most browsers do not allow defining a default behavior (like "Open
    in Word") for this generic MIME type. A specific type like
     application/vnd.mspowerpoint lets users open such files
    automatically in the presentation software of their choice.

MIME sniffing

In the absence of a MIME type, or in certain cases where browsers
believe they are incorrect, browsers may perform MIME sniffing —
guessing the correct MIME type by looking at the bytes of the resource.

Each browser performs MIME sniffing differently and under different
circumstances. (For example, Safari will look at the file extension in
the URL if the sent MIME type is unsuitable.) There are security
concerns as some MIME types represent executable content. Servers can
prevent MIME sniffing by sending the  X-Content-Type-Options header.

Other methods of conveying document type

MIME types are not the only way to convey document type information:

-   Filename suffixes are sometimes used, especially on Microsoft
    Windows. Not all operating systems consider these suffixes
    meaningful (such as Linux and macOS), and there is no guarantee they
    are correct.
-   Magic numbers. The syntax of different formats allows file-type
    inference by looking at their byte structure. For example, GIF files
    start with the  47 49 46 38 39 hexadecimal value (  GIF89 ), and PNG
    files with  89 50 4E 47 (  .PNG ). Not all file types have magic
    numbers, so this is not 100% reliable either.

See also

-   Web media technologies
-   Guide to media types used on the web
-   Properly configuring server MIME types

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 18, 2023 by MDN contributors .
# Resource URLs #
 ____                                      _   _ ____  _         
|  _ \ ___  ___  ___  _   _ _ __ ___ ___  | | | |  _ \| |    ___ 
| |_) / _ \/ __|/ _ \| | | | '__/ __/ _ \ | | | | |_) | |   / __|
|  _ <  __/\__ \ (_) | |_| | | | (_|  __/ | |_| |  _ <| |___\__ \
|_| \_\___||___/\___/ \__,_|_|  \___\___|  \___/|_| \_\_____|___/
                                                                 
Resource URLs

Non-standard: This feature is non-standard and is not on a standards
track. Do not use it on production sites facing the Web: it will not
work for every user. There may also be large incompatibilities between
implementations and the behavior may change in the future.

Resource URLs, URLs prefixed with the  resource: scheme, are used by
Firefox and Firefox browser extensions to load resources internally, but
some of the information is available to sites the browser connects to as
well.

Syntax

Resource URLs are composed of two parts: a prefix (  resource: ), and a
URL pointing to the resource you want to load:

url

    resource://<url>

An example:

url

    resource://gre/res/svg.css

When arrows are found in the resource URL's ('->'), it means that the
first file loaded the next one:

url

    resource://<File-loader> -> <File-loaded>

Please refer to Identifying resources on the web for more general
details.

In this article, we focus on resource URIs, which are used internally by
Firefox to point to built-in resources.

Threats

Because some of the information shared by  resource: URLs is available
to websites, a web page could run internal scripts and inspect internal
resources of Firefox, including the default preferences, which could be
a serious security and privacy issue.

For example, a script on Browserleaks highlights what Firefox reveals
when queried by a simple script running on the site (you can find the
code in https://browserleaks.com/firefox#more ).

The file firefox.js passes preference names and values to the pref()
function. For example:

url

    http://searchfox.org/mozilla-central/rev/48ea452803907f2575d81021e8678634e8067fc2/browser/app/profile/firefox.js#575

Websites can easily collect Firefox default preferences by overriding
this  pref() function and using the script
 resource:///defaults/preferences/firefox.js .

Furthermore, some default values of preferences differ between build
configurations, such as platform and locale, which means websites could
identify individual users using this information.

Solution

In order to fix this problem, Mozilla changed the behavior of loading
resource: URIs in Firefox bug 863246 , which landed in Firefox 57
(Quantum) .

In the past, web content was able to access whatever  resource: URIs
were desired — not only Firefox's internal resources, but also
extensions' assets. Now this behavior is prohibited by default.

It is however still necessary for Firefox to load resources in web
content under certain circumstances. For example, if you open the view
source page (View Page Source or View Selection Source), you will find
it requires  viewsource.css through a  resource: URI. Resources that
have to be exposed to web content have been moved to a new location
named  resource://content-accessible/ , which is isolated and only
contains non-sensitive resources. In this way we can keep essential
resources exposed and have most threats eliminated.

Note: It is recommended that web and extension developers don't try to
use resource URLs anymore. Their usage was hacky at best, and most usage
won't work any more.

Specifications

resource: is not defined in any specification.

Browser compatibility

resource: is Firefox only.

See also

-   Identifying resources on the Web
-   What is a URL?
-   IANA list of URI schemes (  resource: is covered here )

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 25, 2023 by MDN contributors .
# Browser detection using the user agent #
 ____                                  
| __ ) _ __ _____      _____  ___ _ __ 
|  _ \| '__/ _ \ \ /\ / / __|/ _ \ '__|
| |_) | | | (_) \ V  V /\__ \  __/ |   
|____/|_|  \___/ \_/\_/ |___/\___|_|   
                                       
     _      _            _   _                         _             
  __| | ___| |_ ___  ___| |_(_) ___  _ __    _   _ ___(_)_ __   __ _ 
 / _` |/ _ \ __/ _ \/ __| __| |/ _ \| '_ \  | | | / __| | '_ \ / _` |
| (_| |  __/ ||  __/ (__| |_| | (_) | | | | | |_| \__ \ | | | | (_| |
 \__,_|\___|\__\___|\___|\__|_|\___/|_| |_|  \__,_|___/_|_| |_|\__, |
                                                               |___/ 
 _   _                                                         _   
| |_| |__   ___   _   _ ___  ___ _ __    __ _  __ _  ___ _ __ | |_ 
| __| '_ \ / _ \ | | | / __|/ _ \ '__|  / _` |/ _` |/ _ \ '_ \| __|
| |_| | | |  __/ | |_| \__ \  __/ |    | (_| | (_| |  __/ | | | |_ 
 \__|_| |_|\___|  \__,_|___/\___|_|     \__,_|\__, |\___|_| |_|\__|
                                              |___/                
Browser detection using the user agent

Serving different Web pages or services to different browsers is usually
a bad idea. The Web is meant to be accessible to everyone, regardless of
which browser or device they're using. There are ways to develop your
website to progressively enhance itself based on the availability of
features rather than by targeting specific browsers.

But browsers and standards are not perfect, and there are still some
edge cases where detecting the browser is needed. Using the user agent
to detect the browser looks simple, but doing it well is, in fact, a
very hard problem. This document will guide you in doing this as
correctly as possible.

Note: It's worth re-iterating: it's very rarely a good idea to use user
agent sniffing. You can almost always find a better, more broadly
compatible way to solve your problem!

Considerations before using browser detection

When considering using the user agent string to detect which browser is
being used, your first step is to try to avoid it if possible. Start by
trying to identify why you want to do it.

Are you trying to work around a specific bug in some version of a browser?

    Look, or ask, in specialized forums: you're unlikely to be the first
    to hit this problem. Also, experts, or people with another point of
    view, can give you ideas for working around the bug. If the problem
    seems uncommon, it's worth checking if this bug has been reported to
    the browser vendor via their bug tracking system ( Mozilla ; WebKit
    ; Blink ; Opera ). Browser makers do pay attention to bug reports,
    and the analysis may hint about other workarounds for the bug.

Are you trying to check for the existence of a specific feature?

    Your site needs to use a specific Web feature that some browsers
    don't yet support, and you want to send those users to an older
    website with fewer features but that you know will work. This is the
    worst reason to use user agent detection because odds are eventually
    all the other browsers will catch up. In addition, it is not
    practical to test every one of the less popular browsers and test
    for those Web features. You should never do user agent sniffing.
    There is always the alternative of doing feature detection instead.

Do you want to provide different HTML depending on which browser is being used?

    This is usually a bad practice, but there are some cases in which
    this is necessary. In these cases, you should first analyze your
    situation to be sure it's really necessary. Can you prevent it by
    adding some non-semantic  <div> or  <span> elements? The difficulty
    of successfully using user agent detection is worth a few
    disruptions to the purity of your HTML. Also, rethink your design:
    can you use progressive enhancement or fluid layouts to help remove
    the need to do this?

Avoiding user agent detection

If you want to avoid using user agent detection, you have options!

Feature detection

    Feature detection is where you don't try to figure out which browser
    is rendering your page, but instead, you check to see if the
    specific feature you need is available. If it's not, you use a
    fallback. In those rare cases where behavior differs between
    browsers, instead of checking the user agent string, you should
    instead implement a test to detect how the browser implements the
    API and determine how to use it from that. An example of feature
    detection is as follows. In 2017, Chrome unflagged experimental
    lookbehind support in regular expressions , but no other browser
    supported it. So, you might have thought to do this:

js

    // This code snippet splits a string in a special notation
    let splitUpString;
    if (navigator.userAgent.includes("Chrome")) {
      // YES! The user is suspected to support look-behind regexps
      // DO NOT USE /(?<=[A-Z])/. It will cause a syntax error in
      // browsers that do not support look-behind expressions
      // because all browsers parse the entire script, including
      // sections of the code that are never executed.
      const camelCaseExpression = new RegExp("(?<=[A-Z])");
      splitUpString = (str) => String(str).split(camelCaseExpression);
    } else {
      // This fallback code is much less performant, but works
      splitUpString = (str) =>
        String(str)
          .split(/(.*?[A-Z])/)
          .filter(Boolean);
    }

    console.log(splitUpString("fooBar")); // ["fooB", "ar"]
    console.log(splitUpString("jQWhy")); // ["jQ", "W", "hy"]

The above code would have made several incorrect assumptions: First, it
assumed that all user agent strings that include the substring "Chrome"
are Chrome. UA strings are notoriously misleading. Then, it assumed that
the lookbehind feature would always be available if the browser was
Chrome. The agent might be an older version of Chrome, from before
support was added, or (because the feature was experimental at the time)
it could be a later version of Chrome that removed it. Most importantly,
it assumed no other browsers would support the feature. Support could
have been added to other browsers at any time, but this code would have
continued choosing the inferior path.

Problems like these can be avoided by testing for support of the feature
itself instead:

js

    let isLookBehindSupported = false;

    try {
      new RegExp("(?<=)");
      isLookBehindSupported = true;
    } catch (err) {
      // If the agent doesn't support look behinds, the attempted
      // creation of a RegExp object using that syntax throws and
      // isLookBehindSupported remains false.
    }

    const splitUpString = isLookBehindSupported
      ? (str) => String(str).split(new RegExp("(?<=[A-Z])"))
      : (str) =>
          String(str)
            .split(/(.*?[A-Z])/)
            .filter(Boolean);

    console.log(splitUpString("fooBar")); // ["fooB", "ar"]
    console.log(splitUpString("jQWhy")); // ["jQ", "W", "hy"]

As the above code demonstrates, there is always a way to test browser
support without user agent sniffing. There is never any reason to check
the user agent string for this.

Lastly, the above code snippets bring about a critical issue with
cross-browser coding that must always be taken into account. Don't
unintentionally use the API you are testing for in unsupported browsers.
This may sound obvious and simple, but sometimes it is not. For example,
in the above code snippets, using lookbehind in short-regexp notation
(for example, /reg/igm) will cause a parser error in unsupported
browsers. Thus, in the above example, you would use new
RegExp("(?<=look_behind_stuff)"); instead of /(?<=look_behind_stuff)/ ,
even in the lookbehind supported section of your code.

Progressive enhancement

    This design technique involves developing your website in 'layers',
    using a bottom-up approach, starting with a simpler layer and
    improving the capabilities of the site in successive layers, each
    using more features.

Graceful degradation

    This is a top-down approach in which you build the best possible
    site using all the features you want, then tweak it to make it work
    on older browsers. This can be harder to do, and less effective,
    than progressive enhancement, but may be useful in some cases.

Mobile device detection

    Arguably the most common use and misuse of user agent sniffing is to
    detect if the device is a mobile device. However, people too often
    overlook what they are really after. People use user agent sniffing
    to detect if the users' device is touch-friendly and has a small
    screen so they can optimize their website accordingly. While user
    agent sniffing can sometimes detect these, not all devices are the
    same: some mobile devices have big screen sizes, some desktops have
    a small touchscreen, some people use smart TV's which are an
    entirely different ballgame altogether, and some people can
    dynamically change the width and height of their screen by flipping
    their tablet on its side! So, user agent sniffing is definitely not
    the way to go. Thankfully, there are much better alternatives. Use
    Navigator.maxTouchPoints to detect if the user's device has a
    touchscreen. Then, default back to checking the user agent screen
    only if (!("maxTouchPoints" in navigator)) { /*Code here*/} . Using
    this information of whether the device has a touchscreen, do not
    change the entire layout of the website just for touch devices: you
    will only create more work and maintenance for yourself. Rather, add
    in touch conveniences such as bigger, more easily clickable buttons
    (you can do this using CSS by increasing the font size). Here is an
    example of code that increases the padding of #exampleButton to 1em
    on mobile devices.

js

    let hasTouchScreen = false;
    if ("maxTouchPoints" in navigator) {
      hasTouchScreen = navigator.maxTouchPoints > 0;
    } else if ("msMaxTouchPoints" in navigator) {
      hasTouchScreen = navigator.msMaxTouchPoints > 0;
    } else {
      const mQ = matchMedia?.("(pointer:coarse)");
      if (mQ?.media === "(pointer:coarse)") {
        hasTouchScreen = !!mQ.matches;
      } else if ("orientation" in window) {
        hasTouchScreen = true; // deprecated, but good fallback
      } else {
        // Only as a last resort, fall back to user agent sniffing
        const UA = navigator.userAgent;
        hasTouchScreen =
          /\b(BlackBerry|webOS|iPhone|IEMobile)\b/i.test(UA) ||
          /\b(Android|Windows Phone|iPad|iPod)\b/i.test(UA);
      }
    }

    if (hasTouchScreen) {
      document.getElementById("exampleButton").style.padding = "1em";
    }

As for the screen size, use window.innerWidth and
window.addEventListener("resize", () => { /*refresh screen size
dependent things*/ }). What you want to do for screen size is not slash
off information on smaller screens. That will only annoy people because
it will force them to use the desktop version. Rather, try to have fewer
columns of information in a longer page on smaller screens while having
more columns with a shorter page on larger screen sizes. This effect can
be easily achieved using CSS flexboxes , sometimes with floats as a
partial fallback.

Also try to move less relevant/important information down to the bottom
and group the page's content together meaningfully. Although it is
off-topic, perhaps the following detailed example might give you
insights and ideas that persuade you to forgo user agent sniffing. Let
us imagine a page composed of boxes of information; each box is about a
different feline breed or canine breed. Each box has an image, an
overview, and a historical fun fact. The pictures are kept to a maximum
reasonable size even on large screens. For the purposes of grouping the
content meaningfully, all the cat boxes are separated from all the dog
boxes such that the cat and dog boxes are not intermixed together. On a
large screen, it saves space to have multiple columns to reduce the
space wasted to the left and to the right of the pictures. The boxes can
be separated into multiple columns via two equally fair method. From
this point on, we shall assume that all the dog boxes are at the top of
the source code, that all the cat boxes are at the bottom of the source
code, and that all these boxes have the same parent element. There a
single instance of a dog box immediately above a cat box, of course. The
first method uses horizontal Flexboxes to group the content such that
when the page is displayed to the end user, all the dogs boxes are at
the top of the page and all the cat boxes are lower on the page. The
second method uses a Column layout and resents all the dogs to the left
and all the cats to the right. Only in this particular scenario, it is
appropriate to provide no fallback for the flexboxes/multicolumns,
resulting in a single column of very wide boxes on old browsers. Also
consider the following. If more people visit the webpage to see the
cats, then it might be a good idea to put all the cats higher in the
source code than the dogs so that more people can find what they are
looking for faster on smaller screens where the content collapses down
to one column.

Next, always make your code dynamic. The user can flip their mobile
device on its side, changing the width and height of the page. Or, there
might be some weird flip-phone-like device thing in the future where
flipping it out extends the screen. Do not be the developer having a
headache over how to deal with the flip-phone-like device thing. Never
be satisfied with your webpage until you can open up the dev tools side
panel and resize the screen while the webpage looks smooth, fluid, and
dynamically resized. The simplest way to do this is to separate all the
code that moves content around based on screen size to a single function
that is called when the page is loaded and at each resize event
thereafter. If there is a lot calculated by this layout function before
it determines the new layout of the page, then consider debouncing the
event listener such that it is not called as often. Also note that there
is a huge difference between the media queries  (max-width: 25em) ,
 not all and (min-width: 25em) , and  (max-width: 24.99em) :
 (max-width: 25em) excludes  (max-width: 25em) , whereas
 not all and (min-width: 25em) includes  (max-width: 25em) .
 (max-width: 24.99em) is a poor man's version of
 not all and (min-width: 25em) : do not use  (max-width: 24.99em)
because the layout might break on very high font sizes on very high
definition devices in the future. Always be very deliberate about
choosing the right media query and choosing the right >=, <=, >, or < in
any corresponding JavaScript because it is very easy to get these mixed
up, resulting in the website looking wonky right at the screen size
where the layout changes. Thus, thoroughly test the website at the exact
widths/heights where layout changes occur to ensure that the layout
changes occur properly.

Making the best of user agent sniffing

After reviewing all of the above better alternatives to user agent
sniffing, there are still some potential cases where user agent sniffing
is appropriate and justified.

One such case is using user agent sniffing as a fallback when detecting
if the device has a touch screen. See the Mobile Device Detection
section for more information.

Another such case is for fixing bugs in browsers that do not
automatically update. Webkit (on iOS) is a perfect example. Apple forces
all of the browsers on IOS to use Webkit internally, thus the user has
no way to get a better more updated browser on older devices. Most bugs
can be detected, but some bugs take more effort to detect than others.
In such cases, it might be beneficial to use user agent sniffing to save
on performance. For example, Webkit 6 has a bug whereby when the device
orientation changes, the browser might not fire MediaQueryList listeners
when it should. To overcome this bug, observe the code below.

js

    const UA = navigator.userAgent;
    const isWebkit =
      /\b(iPad|iPhone|iPod)\b/.test(UA) &&
      /WebKit/.test(UA) &&
      !/Edge/.test(UA) &&
      !window.MSStream;

    let mediaQueryUpdated = true;
    const mqL = [];

    function whenMediaChanges() {
      mediaQueryUpdated = true;
    }

    const listenToMediaQuery = isWebkit
      ? (mQ, f) => {
          if (/height|width/.test(mQ.media)) {
            mqL.push([mQ, f]);
          }
          mQ.addListener(f);
          mQ.addListener(whenMediaChanges);
        }
      : () => {};

    const destroyMediaQuery = isWebkit
      ? (mQ) => {
          for (let i = 0; i < mqL.length; i++) {
            if (mqL[i][0] === mQ) {
              mqL.splice(i, 1);
            }
          }
          mQ.removeListener(whenMediaChanges);
        }
      : listenToMediaQuery;

    let orientationChanged = false;
    addEventListener(
      "orientationchange",
      () => {
        orientationChanged = true;
      },
      PASSIVE_LISTENER_OPTION,
    );

    addEventListener("resize", () =>
      setTimeout(() => {
        if (orientationChanged && !mediaQueryUpdated) {
          for (let i = 0; i < mqL.length; i++) {
            mqL[i][1](mqL[i][0]);
          }
        }
        mediaQueryUpdated = orientationChanged = false;
      }, 0),
    );

Which part of the user agent contains the information you are looking for?

As there is no uniformity of the different part of the user agent
string, this is the tricky part.

Browser Name and version

When people say they want "browser detection", often they actually want
"rendering engine detection". Do you actually want to detect Firefox, as
opposed to SeaMonkey, or Chrome as opposed to Chromium? Or do you
actually want to see if the browser is using the Gecko or the WebKit
rendering engine? If this is what you need, see further down the page.

Most browsers set the name and version in the format
BrowserName/VersionNumber . But as the name is not the only information
in a user agent string that is in that format, you can not discover the
name of the browser, you can only check if the name you are looking for.
But note that some browsers are lying: Chrome for example reports both
as Chrome and Safari. So to detect Safari you have to check for the
Safari string and the absence of the Chrome string, Chromium often
reports itself as Chrome too or Seamonkey sometimes reports itself as
Firefox.

Also, pay attention not to use a simple regular expression on the
BrowserName, user agents also contain strings outside the Keyword/Value
syntax. Safari & Chrome contain the string 'like Gecko', for instance.

  Engine                            Must contain     Must not contain
  --------------------------------- ---------------- ------------------------------
  Firefox                            Firefox/xyz      Seamonkey/xyz
  Seamonkey                          Seamonkey/xyz   
  Chrome                             Chrome/xyz       Chromium/xyz or  Edg.*/xyz
  Chromium                           Chromium/xyz    
  Safari                             Safari/xyz       Chrome/xyz or  Chromium/xyz
  Opera 15+ (Blink-based engine)     OPR/xyz         
  Opera 12- (Presto-based engine)    Opera/xyz       

[1] Safari gives two version numbers: one technical in the  Safari/xyz
token, and one user-friendly in a  Version/xyz token.

Of course, there is absolutely no guarantee that another browser will
not hijack some of these things (like Chrome hijacked the Safari string
in the past). That's why browser detection using the user agent string
is unreliable and should be done only with the check of the version
number (hijacking of past versions is less likely).

Rendering engine

As seen earlier, in most cases, looking for the rendering engine is a
better way to go. This will help to not exclude lesser known browsers.
Browsers sharing a common rendering engine will display a page in the
same way: it is often a fair assumption that what will work in one will
work in the other.

There are three active major rendering engines: Blink, Gecko, and
WebKit. As sniffing the rendering engines names is common, a lot of user
agents added other rendering names to trigger detection. It is therefore
important to pay attention not to trigger false-positives when detecting
the rendering engine.

  Engine     Must contain       Comment
  ---------- ------------------ ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Blink       Chrome/xyz        
  Gecko       Gecko/xyz         
  WebKit      AppleWebKit/xyz   Pay attention, WebKit browsers add a 'like Gecko' string that may trigger false positive for Gecko if the detection is not careful.
  Presto      Opera/xyz         Note: Presto is no longer used in Opera browser builds >= version 15 (see 'Blink')
  EdgeHTML    Edge/xyz          The non-Chromium Edge puts its engine version after the Edge/ token, not the application version. Note: EdgeHTML is no longer used in Edge browser builds >= version 79 (see 'Blink').

Rendering engine version

Most rendering engines put the version number in the
RenderingEngine/VersionNumber token, with the notable exception of
Gecko. Gecko puts the Gecko version number in the comment part of the
User Agent after the  rv: string. From Gecko 14 for the mobile version
and Gecko 17 for the desktop version, it also puts this value in the
 Gecko/version token (previous version put there the build date, then a
fixed date called the GeckoTrail).

OS

The Operating System is given in most User Agent strings (although not
web-focused platforms like Firefox OS), but the format varies a lot. It
is a fixed string between two semicolons, in the comment part of the
User Agent. These strings are specific for each browser. They indicate
the OS, but also often its version and information on the relying
hardware (32 or 64 bits, or Intel/PPC for Mac).

Like in all cases, these strings may change in the future, one should
use them only in conjunction with the detection of already released
browsers. A technological survey must be in place to adapt the script
when new browser versions are coming out.

Mobile, Tablet or Desktop

The most common reason to perform user agent sniffing is to determine
which type of device the browser runs on. The goal is to serve different
HTML to different device types.

-   Never assume that a browser or a rendering engine only runs on one
    type of device. Especially don't make different defaults for
    different browsers or rendering engines.
-   Never use the OS token to define if a browser is on mobile, tablet
    or desktop. The OS may run on more than one type of device (for
    example, Android runs on tablets as well as phones).

The following table summarizes the way common browser vendors indicate
that their browsers are running on a mobile device:

  Browser                                                             Rule                                                 Example
  ------------------------------------------------------------------- ---------------------------------------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------
  Mozilla (Gecko, Firefox)                                             Mobile or  Tablet inside the comment.                Mozilla/5.0 (Android; Mobile; rv:13.0) Gecko/13.0 Firefox/13.0
  WebKit-based (Android, Safari)                                       Mobile Safari token outside the comment.             Mozilla/5.0 (Linux; U; Android 4.0.3; de-ch; HTC Sensation Build/IML74K) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30
  Blink-based (Chromium, Google Chrome, Opera 15+, Edge on Android)    Mobile Safari token outside the comment.             Mozilla/5.0 (Linux; Android 4.4.2; Nexus 5 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.117 Mobile Safari/537.36 OPR/20.0.1396.72047
  Presto-based (Opera 12-)                                             Opera Mobi/xyz token inside the comment.             Opera/9.80 (Android 2.3.3; Linux; Opera Mobi/ADR-1111101157; U; es-ES) Presto/2.9.201 Version/11.50
  Edge on Windows 10 Mobile                                            Mobile/xyz and  Edge/ tokens outside the comment.    Mozilla/5.0 (Windows Phone 10.0; Android 6.0.1; Xbox; Xbox One) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Mobile Safari/537.36 Edge/16.16299

In summary, we recommend looking for the string  Mobi anywhere in the
User Agent to detect a mobile device.

Note: If the device is large enough that it's not marked with  Mobi ,
you should serve your desktop site (which, as a best practice, should
support touch input anyway, as more desktop machines are appearing with
touchscreens).

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 8, 2024 by MDN contributors .
# HTTP caching #
 _   _ _____ _____ ____                   _     _             
| | | |_   _|_   _|  _ \    ___ __ _  ___| |__ (_)_ __   __ _ 
| |_| | | |   | | | |_) |  / __/ _` |/ __| '_ \| | '_ \ / _` |
|  _  | | |   | | |  __/  | (_| (_| | (__| | | | | | | | (_| |
|_| |_| |_|   |_| |_|      \___\__,_|\___|_| |_|_|_| |_|\__, |
                                                        |___/ 
HTTP caching

Overview

The HTTP cache stores a response associated with a request and reuses
the stored response for subsequent requests.

There are several advantages to reusability. First, since there is no
need to deliver the request to the origin server, then the closer the
client and cache are, the faster the response will be. The most typical
example is when the browser itself stores a cache for browser requests.

Also, when a response is reusable, the origin server does not need to
process the request — so it does not need to parse and route the
request, restore the session based on the cookie, query the DB for
results, or render the template engine. That reduces the load on the
server.

Proper operation of the cache is critical to the health of the system.

Types of caches

In the HTTP Caching spec, there are two main types of caches: private
caches and shared caches .

Private caches

A private cache is a cache tied to a specific client — typically a
browser cache. Since the stored response is not shared with other
clients, a private cache can store a personalized response for that
user.

On the other hand, if personalized contents are stored in a cache other
than a private cache, then other users may be able to retrieve those
contents — which may cause unintentional information leakage.

If a response contains personalized content and you want to store the
response only in the private cache, you must specify a  private
directive.

http

    Cache-Control: private

Personalized contents are usually controlled by cookies, but the
presence of a cookie does not always indicate that it is private, and
thus a cookie alone does not make the response private.

Shared cache

The shared cache is located between the client and the server and can
store responses that can be shared among users. And shared caches can be
further sub-classified into proxy caches and managed caches .

Proxy caches

In addition to the function of access control, some proxies implement
caching to reduce traffic out of the network. This is usually not
managed by the service developer, so it must be controlled by
appropriate HTTP headers and so on. However, in the past, outdated
proxy-cache implementations — such as implementations that do not
properly understand the HTTP Caching standard — have often caused
problems for developers.

Kitchen-sink headers like the following are used to try to work around
"old and not updated proxy cache" implementations that do not understand
current HTTP Caching spec directives like  no-store .

http

    Cache-Control: no-store, no-cache, max-age=0, must-revalidate, proxy-revalidate

However, in recent years, as HTTPS has become more common and
client/server communication has become encrypted, proxy caches in the
path can only tunnel a response and can't behave as a cache, in many
cases. So in that scenario, there is no need to worry about outdated
proxy cache implementations that cannot even see the response.

On the other hand, if a TLS bridge proxy decrypts all communications in
a person-in-the-middle manner by installing a certificate from a CA
(certificate authority) managed by the organization on the PC, and
performs access control, etc. — it is possible to see the contents of
the response and cache it. However, since CT (certificate transparency)
has become widespread in recent years, and some browsers only allow
certificates issued with an SCT (signed certificate timestamp), this
method requires the application of an enterprise policy. In such a
controlled environment, there is no need to worry about the proxy cache
being "out of date and not updated".

Managed caches

Managed caches are explicitly deployed by service developers to offload
the origin server and to deliver content efficiently. Examples include
reverse proxies, CDNs, and service workers in combination with the Cache
API.

The characteristics of managed caches vary depending on the product
deployed. In most cases, you can control the cache's behavior through
the  Cache-Control header and your own configuration files or
dashboards.

For example, the HTTP Caching specification essentially does not define
a way to explicitly delete a cache — but with a managed cache, the
stored response can be deleted at any time through dashboard operations,
API calls, restarts, and so on. That allows for a more proactive caching
strategy.

It is also possible to ignore the standard HTTP Caching spec protocols
in favor of explicit manipulation. For example, the following can be
specified to opt-out of a private cache or proxy cache, while using your
own strategy to cache only in a managed cache.

http

    Cache-Control: no-store

For example, Varnish Cache uses VCL (Varnish Configuration Language, a
type of DSL ) logic to handle cache storage, while service workers in
combination with the Cache API allow you to create that logic in
JavaScript.

That means if a managed cache intentionally ignores a  no-store
directive, there is no need to perceive it as being "non-compliant" with
the standard. What you should do is, avoid using kitchen-sink headers,
but carefully read the documentation of whatever managed-cache mechanism
you're using, and ensure you're controlling the cache properly in the
ways provided by the mechanism you've chosen to use.

Note that some CDNs provide their own headers that are effective only
for that CDN (for example,  Surrogate-Control ). Currently, work is
underway to define a  CDN-Cache-Control header to standardize those.

[Type of Cache]

Heuristic caching

HTTP is designed to cache as much as possible, so even if no
 Cache-Control is given, responses will get stored and reused if certain
conditions are met. This is called heuristic caching .

For example, take the following response. This response was last updated
1 year ago.

http

    HTTP/1.1 200 OK
    Content-Type: text/html
    Content-Length: 1024
    Date: Tue, 22 Feb 2022 22:22:22 GMT
    Last-Modified: Tue, 22 Feb 2021 22:22:22 GMT

    <!doctype html>
    …

It is heuristically known that content which has not been updated for a
full year will not be updated for some time after that. Therefore, the
client stores this response (despite the lack of  max-age ) and reuses
it for a while. How long to reuse is up to the implementation, but the
specification recommends about 10% (in this case 0.1 year) of the time
after storing.

Heuristic caching is a workaround that came before  Cache-Control
support became widely adopted, and basically all responses should
explicitly specify a  Cache-Control header.

Fresh and stale based on age

Stored HTTP responses have two states: fresh and stale . The fresh state
usually indicates that the response is still valid and can be reused,
while the stale state means that the cached response has already
expired.

The criterion for determining when a response is fresh and when it is
stale is age . In HTTP, age is the time elapsed since the response was
generated. This is similar to the TTL in other caching mechanisms.

Take the following example response (604800 seconds is one week):

http

    HTTP/1.1 200 OK
    Content-Type: text/html
    Content-Length: 1024
    Date: Tue, 22 Feb 2022 22:22:22 GMT
    Cache-Control: max-age=604800

    <!doctype html>
    …

The cache that stored the example response calculates the time elapsed
since the response was generated and uses the result as the response's
age .

For the example response, the meaning of  max-age is the following:

-   If the age of the response is less than one week, the response is
    fresh .
-   If the age of the response is more than one week, the response is
    stale .

As long as the stored response remains fresh, it will be used to fulfill
client requests.

When a response is stored in a shared cache, it is possible to tell the
client the age of the response. Continuing with the example, if the
shared cache stored the response for one day, the shared cache would
send the following response to subsequent client requests.

http

    HTTP/1.1 200 OK
    Content-Type: text/html
    Content-Length: 1024
    Date: Tue, 22 Feb 2022 22:22:22 GMT
    Cache-Control: max-age=604800
    Age: 86400

    <!doctype html>
    …

The client which receives that response will find it to be fresh for the
remaining 518400 seconds, the difference between the response's  max-age
and  Age .

Expires or max-age

In HTTP/1.0, freshness used to be specified by the  Expires header.

The  Expires header specifies the lifetime of the cache using an
explicit time rather than by specifying an elapsed time.

http

    Expires: Tue, 28 Feb 2022 22:22:22 GMT

However, the time format is difficult to parse, many implementation bugs
were found, and it is possible to induce problems by intentionally
shifting the system clock; therefore,  max-age — for specifying an
elapsed time — was adopted for  Cache-Control in HTTP/1.1.

If both  Expires and  Cache-Control: max-age are available,  max-age is
defined to be preferred. So it is not necessary to provide  Expires now
that HTTP/1.1 is widely used.

Vary

The way that responses are distinguished from one another is essentially
based on their URLs:

[keyed with url]

But the contents of responses are not always the same, even if they have
the same URL. Especially when content negotiation is performed, the
response from the server can depend on the values of the  Accept ,
 Accept-Language , and  Accept-Encoding request headers.

For example, for English content returned with an  Accept-Language: en
header and cached, it is undesirable to then reuse that cached response
for requests that have an  Accept-Language: ja request header. In this
case, you can cause the responses to be cached separately — based on
language — by adding "  Accept-Language " to the value of the  Vary
header.

http

    Vary: Accept-Language

That causes the cache to be keyed based on a composite of the response
URL and the  Accept-Language request header — rather than being based
just on the response URL.

[keyed with url and language]

Also, if you are providing content optimization (for example, for
responsive design) based on the user agent, you may be tempted to
include "  User-Agent " in the value of the  Vary header. However, the
 User-Agent request header generally has a very large number of
variations, which drastically reduces the chance that the cache will be
reused. So if possible, instead consider a way to vary behavior based on
feature detection rather than based on the  User-Agent request header.

For applications that employ cookies to prevent others from reusing
cached personalized content, you should specify  Cache-Control: private
instead of specifying a cookie for  Vary .

Validation

Stale responses are not immediately discarded. HTTP has a mechanism to
transform a stale response into a fresh one by asking the origin server.
This is called validation , or sometimes, revalidation .

Validation is done by using a conditional request that includes an
 If-Modified-Since or  If-None-Match request header.

If-Modified-Since

The following response was generated at 22:22:22 and has a  max-age of 1
hour, so you know that it is fresh until 23:22:22.

http

    HTTP/1.1 200 OK
    Content-Type: text/html
    Content-Length: 1024
    Date: Tue, 22 Feb 2022 22:22:22 GMT
    Last-Modified: Tue, 22 Feb 2022 22:00:00 GMT
    Cache-Control: max-age=3600

    <!doctype html>
    …

At 23:22:22, the response becomes stale and the cache cannot be reused.
So the request below shows a client sending a request with an
 If-Modified-Since request header, to ask the server if there have been
any changes made since the specified time.

http

    GET /index.html HTTP/1.1
    Host: example.com
    Accept: text/html
    If-Modified-Since: Tue, 22 Feb 2022 22:00:00 GMT

The server will respond with  304 Not Modified if the content has not
changed since the specified time.

Since this response only indicates "no change", there is no response
body — there's just a status code — so the transfer size is extremely
small.

http

    HTTP/1.1 304 Not Modified
    Content-Type: text/html
    Date: Tue, 22 Feb 2022 23:22:22 GMT
    Last-Modified: Tue, 22 Feb 2022 22:00:00 GMT
    Cache-Control: max-age=3600

Upon receiving that response, the client reverts the stored stale
response back to being fresh and can reuse it during the remaining 1
hour.

The server can obtain the modification time from the operating-system
file system, which is relatively easy to do for the case of serving
static files. However, there are some problems; for example, the time
format is complex and difficult to parse, and distributed servers have
difficulty synchronizing file-update times.

To solve such problems, the  ETag response header was standardized as an
alternative.

ETag/If-None-Match

The value of the  ETag response header is an arbitrary value generated
by the server. There are no restrictions on how the server must generate
the value, so servers are free to set the value based on whatever means
they choose — such as a hash of the body contents or a version number.

As an example, if a hash value is used for the  ETag header and the hash
value of the  index.html resource is  33a64df5 , the response will be as
follows:

http

    HTTP/1.1 200 OK
    Content-Type: text/html
    Content-Length: 1024
    Date: Tue, 22 Feb 2022 22:22:22 GMT
    ETag: "33a64df5"
    Cache-Control: max-age=3600

    <!doctype html>
    …

If that response is stale, the client takes the value of the  ETag
response header for the cached response, and puts it into the
 If-None-Match request header, to ask the server if the resource has
been modified:

http

    GET /index.html HTTP/1.1
    Host: example.com
    Accept: text/html
    If-None-Match: "33a64df5"

The server will return  304 Not Modified if the value of the  ETag
header it determines for the requested resource is the same as the
 If-None-Match value in the request.

But if the server determines the requested resource should now have a
different  ETag value, the server will instead respond with a  200 OK
and the latest version of the resource.

Note: RFC9110 prefers that servers send both  ETag and  Last-Modified
for a  200 response if possible. During cache revalidation, if both
 If-Modified-Since and  If-None-Match are present, then  If-None-Match
takes precedence for the validator. If you are only considering caching,
you may think that  Last-Modified is unnecessary. However,
 Last-Modified is not just useful for caching; it is a standard HTTP
header that is also used by content-management (CMS) systems to display
the last-modified time, by crawlers to adjust crawl frequency, and for
other various purposes. So considering the overall HTTP ecosystem, it is
better to provide both  ETag and  Last-Modified .

Force Revalidation

If you do not want a response to be reused, but instead want to always
fetch the latest content from the server, you can use the  no-cache
directive to force validation.

By adding  Cache-Control: no-cache to the response along with
 Last-Modified and  ETag — as shown below — the client will receive a
 200 OK response if the requested resource has been updated, or will
otherwise receive a  304 Not Modified response if the requested resource
has not been updated.

http

    HTTP/1.1 200 OK
    Content-Type: text/html
    Content-Length: 1024
    Date: Tue, 22 Feb 2022 22:22:22 GMT
    Last-Modified: Tue, 22 Feb 2022 22:00:00 GMT
    ETag: deadbeef
    Cache-Control: no-cache

    <!doctype html>
    …

It is often stated that the combination of  max-age=0 and
 must-revalidate has the same meaning as  no-cache .

http

    Cache-Control: max-age=0, must-revalidate

 max-age=0 means that the response is immediately stale, and
 must-revalidate means that it must not be reused without revalidation
once it is stale — so, in combination, the semantics seem to be the same
as  no-cache .

However, that usage of  max-age=0 is a remnant of the fact that many
implementations prior to HTTP/1.1 were unable to handle the  no-cache
directive — and so to deal with that limitation,  max-age=0 was used as
a workaround.

But now that HTTP/1.1-conformant servers are widely deployed, there's no
reason to ever use that  max-age=0 and  must-revalidate combination —
you should instead just use  no-cache .

Don't cache

The  no-cache directive does not prevent the storing of responses but
instead prevents the reuse of responses without revalidation.

If you don't want a response stored in any cache, use  no-store .

http

    Cache-Control: no-store

However, in general, a "do not cache" requirement in practice amounts to
the following set of circumstances:

-   Don't want the response stored by anyone other than the specific
    client, for privacy reasons.
-   Want to provide up-to-date information always.
-   Don't know what could happen in outdated implementations.

Under that set of circumstances,  no-store is not always the
most-appropriate directive.

The following sections look at the circumstances in more detail.

Do not share with others

It would be problematic if a response with personalized content is
unexpectedly visible to other users of a cache.

In such a case, using the  private directive will cause the personalized
response to only be stored with the specific client and not be leaked to
any other user of the cache.

http

    Cache-Control: private

In such a case, even if  no-store is given,  private must also be given.

Provide up-to-date content every time

The  no-store directive prevents a response from being stored, but does
not delete any already-stored response for the same URL.

In other words, if there is an old response already stored for a
particular URL, returning  no-store will not prevent the old response
from being reused.

However, a  no-cache directive will force the client to send a
validation request before reusing any stored response.

http

    Cache-Control: no-cache

If the server does not support conditional requests, you can force the
client to access the server every time and always get the latest
response with  200 OK .

Dealing with outdated implementations

As a workaround for outdated implementations that ignore  no-store , you
may see kitchen-sink headers such as the following being used.

http

    Cache-Control: no-store, no-cache, max-age=0, must-revalidate, proxy-revalidate

It is recommended to use  no-cache as an alternative for dealing with
such outdated implementations, and it is not a problem if  no-cache is
given from the beginning, since the server will always receive the
request.

If it is the shared cache that you are concerned about, you can make
sure to prevent unintended caching by also adding  private :

http

    Cache-Control: no-cache, private

What's lost by  no-store

You may think adding  no-store would be the right way to opt-out of
caching.

However, it's not recommended to grant  no-store liberally, because you
lose many advantages that HTTP and browsers have, including the
browser's back/forward cache.

Therefore, to get the advantages of the full feature set of the web
platform, prefer the use of  no-cache in combination with  private .

Reload and force reload

Validation can be performed for requests as well as responses.

The reload and force reload actions are common examples of validation
performed from the browser side.

Reload

For recovering from window corruption or updating to the latest version
of the resource, browsers provide a reload function for users.

A simplified view of the HTTP request sent during a browser reload looks
as follows:

http

    GET / HTTP/1.1
    Host: example.com
    Cache-Control: max-age=0
    If-None-Match: "deadbeef"
    If-Modified-Since: Tue, 22 Feb 2022 20:20:20 GMT

(The requests from Chrome, Edge, and Firefox look very much like the
above; the requests from Safari will look a bit different.)

The  max-age=0 directive in the request specifies "reuse of responses
with an age of 0 or less" — so, in effect, intermediately stored
responses are not reused.

As a result, a request is validated by  If-None-Match and
 If-Modified-Since .

That behavior is also defined in the Fetch standard and can be
reproduced in JavaScript by calling  fetch() with the cache mode set to
 no-cache (note that  reload is not the right mode for this case):

js

    // Note: "reload" is not the right mode for a normal reload; "no-cache" is
    fetch("/", { cache: "no-cache" });

Force reload

Browsers use  max-age=0 during reloads for backward-compatibility
reasons — because many outdated implementations prior to HTTP/1.1 did
not understand  no-cache . But  no-cache is fine now in this use case,
and force reload is an additional way to bypass cached responses.

The HTTP Request during a browser force reload looks as follows:

http

    GET / HTTP/1.1
    Host: example.com
    Pragma: no-cache
    Cache-Control: no-cache

(The requests from Chrome, Edge, and Firefox look very much like the
above; the requests from Safari will look a bit different.)

Since that's not a conditional request with  no-cache , you can be sure
you'll get a  200 OK from the origin server.

That behavior is also defined in the Fetch standard and can be
reproduced in JavaScript by calling  fetch() with the cache mode set to
 reload (note that it's not  force-reload ):

js

    // Note: "reload" — rather than "no-cache" — is the right mode for a "force reload"
    fetch("/", { cache: "reload" });

Avoiding revalidation

Content that never changes should be given a long  max-age by using
cache busting — that is, by including a version number, hash value,
etc., in the request URL.

However, when the user reloads, a revalidation request is sent even
though the server knows that the content is immutable.

To prevent that, the  immutable directive can be used to explicitly
indicate that revalidation is not required because the content never
changes.

http

    Cache-Control: max-age=31536000, immutable

That prevents unnecessary revalidation during reloads.

Note that, instead of implementing that directive, Chrome has changed
its implementation so that revalidation is not performed during reloads
for subresources.

Deleting stored responses

There is basically no way to delete responses that have already been
stored with a long  max-age .

Imagine that the following response from  https://example.com/ was
stored.

http

    HTTP/1.1 200 OK
    Content-Type: text/html
    Content-Length: 1024
    Cache-Control: max-age=31536000

    <!doctype html>
    …

You may want to overwrite that response once it expired on the server,
but there is nothing the server can do once the response is stored —
since no more requests reach the server due to caching.

One of the methods mentioned in the specification is to send a request
for the same URL with an unsafe method such as  POST , but that is
usually difficult to intentionally do for many clients.

There is also a specification for a  Clear-Site-Data: cache header and
value, but not all browsers support it — and even when it's used, it
only affects browser caches and has no effect on intermediate caches.

Therefore, it should be assumed that any stored response will remain for
its  max-age period unless the user manually performs a reload,
force-reload, or clear-history action.

Caching reduces access to the server, which means that the server loses
control of that URL. If the server does not want to lose control of a
URL — for example, in the case that a resource is frequently updated —
you should add  no-cache so that the server will always receive requests
and send the intended responses.

Request collapse

The shared cache is primarily located before the origin server and is
intended to reduce traffic to the origin server.

Thus, if multiple identical requests arrive at a shared cache at the
same time, the intermediate cache will forward a single request on
behalf of itself to the origin, which can then reuse the result for all
clients. This is called request collapse .

Request collapse occurs when requests are arriving at the same time, so
even if  max-age=0 or  no-cache is given in the response, it will be
reused.

If the response is personalized to a particular user and you do not want
it to be shared in collapse, you should add the  private directive:

[Request Collapse]

Common caching patterns

There are many directives in the  Cache-Control spec, and it may be
difficult to understand all of them. But most websites can be covered by
a combination of a handful of patterns.

This section describes the common patterns in designing caches.

Default settings

As mentioned above, the default behavior for caching (that is, for a
response without  Cache-Control ) is not simply "don't cache" but
implicit caching according to so-called "heuristic caching".

To avoid that heuristic caching, it's preferable to explicitly give all
responses a default  Cache-Control header.

To ensure that by default the latest versions of resources will always
be transferred, it's common practice to make the default  Cache-Control
value include  no-cache :

http

    Cache-Control: no-cache

In addition, if the service implements cookies or other login methods,
and the content is personalized for each user,  private must be given
too, to prevent sharing with other users:

http

    Cache-Control: no-cache, private

Cache Busting

The resources that work best with caching are static immutable files
whose contents never change. And for resources that do change, it is a
common best practice to change the URL each time the content changes, so
that the URL unit can be cached for a longer period.

As an example, consider the following HTML:

html

    <script src="bundle.js"></script>
    <link rel="stylesheet" href="build.css" />
    <body>
      hello
    </body>

In modern web development, JavaScript and CSS resources are frequently
updated as development progresses. Also, if the versions of JavaScript
and CSS resources that a client uses are out of sync, the display will
break.

So the HTML above makes it difficult to cache  bundle.js and  build.css
with  max-age .

Therefore, you can serve the JavaScript and CSS with URLs that include a
changing part based on a version number or hash value. Some of the ways
to do that are shown below.

    # version in filename
    bundle.v123.js

    # version in query
    bundle.js?v=123

    # hash in filename
    bundle.YsAIAAAA-QG4G6kCMAMBAAAAAAAoK.js

    # hash in query
    bundle.js?v=YsAIAAAA-QG4G6kCMAMBAAAAAAAoK

Since the cache distinguishes resources from one another based on their
URLs, the cache will not be reused again if the URL changes when a
resource is updated.

html

    <script src="bundle.v123.js"></script>
    <link rel="stylesheet" href="build.v123.css" />
    <body>
      hello
    </body>

With that design, both JavaScript and CSS resources can be cached for a
long time. So how long should  max-age be set to? The QPACK
specification provides an answer to that question.

QPACK is a standard for compressing HTTP header fields, with tables of
commonly-used field values defined.

Some commonly-used cache-header values are shown below.

    36 cache-control max-age=0
    37 cache-control max-age=604800
    38 cache-control max-age=2592000
    39 cache-control no-cache
    40 cache-control no-store
    41 cache-control public, max-age=31536000

If you select one of those numbered options, you can compress values in
1 byte when transferred via HTTP3.

Numbers  37 ,  38 , and  41 are for periods of one week, one month, and
one year.

Because the cache removes old entries when new entries are saved, the
probability that a stored response still exists after one week is not
that high — even if  max-age is set to 1 week. Therefore, in practice,
it does not make much difference which one you choose.

Note that number  41 has the longest  max-age (1 year), but with  public
.

The  public value has the effect of making the response storable even if
the  Authorization header is present.

Note: The  public directive should only be used if there is a need to
store the response when the  Authorization header is set. It is not
required otherwise, because a response will be stored in the shared
cache as long as  max-age is given.

So if the response is personalized with basic authentication, the
presence of  public may cause problems. If you are concerned about that,
you can choose the second-longest value,  38 (1 month).

http

    # response for bundle.v123.js

    # If you never personalize responses via Authorization
    Cache-Control: public, max-age=31536000

    # If you can't be certain
    Cache-Control: max-age=2592000

Validation

Don't forget to set the  Last-Modified and  ETag headers, so that you
don't have to re-transmit a resource when reloading. It's easy to
generate those headers for pre-built static files.

The  ETag value here may be a hash of the file.

http

    # response for bundle.v123.js
    Last-Modified: Tue, 22 Feb 2022 20:20:20 GMT
    ETag: YsAIAAAA-QG4G6kCMAMBAAAAAAAoK

In addition,  immutable can be added to prevent validation on reload.

The combined result is shown below.

http

    # bundle.v123.js
    HTTP/1.1 200 OK
    Content-Type: application/javascript
    Content-Length: 1024
    Cache-Control: public, max-age=31536000, immutable
    Last-Modified: Tue, 22 Feb 2022 20:20:20 GMT
    ETag: YsAIAAAA-QG4G6kCMAMBAAAAAAAoK

Cache busting is a technique to make a response cacheable over a long
period by changing the URL when the content changes. The technique can
be applied to all subresources, such as images.

Note: When evaluating the use of  immutable and QPACK: If you're
concerned that  immutable changes the predefined value provided by
QPACK, consider that in this case, the  immutable part can be encoded
separately by splitting the  Cache-Control value into two lines — though
this is dependent on the encoding algorithm a particular QPACK
implementation uses.

http

    Cache-Control: public, max-age=31536000
    Cache-Control: immutable

Main resources

Unlike subresources, main resources cannot be cache busted because their
URLs can't be decorated in the same way that subresource URLs can be.

If the following HTML itself is stored, the latest version cannot be
displayed even if the content is updated on the server side.

html

    <script src="bundle.v123.js"></script>
    <link rel="stylesheet" href="build.v123.css" />
    <body>
      hello
    </body>

For that case,  no-cache would be appropriate — rather than  no-store —
since we don't want to store HTML, but instead just want it to always be
up-to-date.

Furthermore, adding  Last-Modified and  ETag will allow clients to send
conditional requests, and a  304 Not Modified can be returned if there
have been no updates to the HTML:

http

    HTTP/1.1 200 OK
    Content-Type: text/html
    Content-Length: 1024
    Cache-Control: no-cache
    Last-Modified: Tue, 22 Feb 2022 20:20:20 GMT
    ETag: AAPuIbAOdvAGEETbgAAAAAAABAAE

That setting is appropriate for non-personalized HTML, but for a
response that gets personalized using cookies — for example, after a
login — don't forget to also specify  private :

http

    HTTP/1.1 200 OK
    Content-Type: text/html
    Content-Length: 1024
    Cache-Control: no-cache, private
    Last-Modified: Tue, 22 Feb 2022 20:20:20 GMT
    ETag: AAPuIbAOdvAGEETbgAAAAAAABAAE
    Set-Cookie: __Host-SID=AHNtAyt3fvJrUL5g5tnGwER; Secure; Path=/; HttpOnly

The same can be used for  favicon.ico ,  manifest.json ,  .well-known ,
and API endpoints whose URLs cannot be changed using cache busting.

Most web content can be covered by a combination of the two patterns
described above.

More about managed caches

With the method described in previous sections, subresources can be
cached for a long time by using cache busting, but main resources (which
are usually HTML documents) can't be.

Caching main resources is difficult because, using just standard
directives from the HTTP Caching specification, there's no way to
actively delete cache contents when content is updated on the server.

However, it is possible by deploying a managed cache such as a CDN or
service worker.

For example, a CDN that allows cache purging via an API or dashboard
operation would allow for a more aggressive caching strategy by storing
the main resource and explicitly purging the relevant cache only when an
update occurs on the server.

A service worker could do the same if it could delete the contents in
the Cache API when an update occurs on the server.

For more information, see the documentation for your CDN, and consult
the service worker documentation .

See also

-   RFC 9111: Hypertext Transfer Protocol (HTTP/1.1): Caching
-   Caching Tutorial - Mark Nottingham

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Oct 4, 2023 by MDN contributors .
# HTTP Client hints #
 _   _ _____ _____ ____     ____ _ _            _     _     _       _       
| | | |_   _|_   _|  _ \   / ___| (_) ___ _ __ | |_  | |__ (_)_ __ | |_ ___ 
| |_| | | |   | | | |_) | | |   | | |/ _ \ '_ \| __| | '_ \| | '_ \| __/ __|
|  _  | | |   | | |  __/  | |___| | |  __/ | | | |_  | | | | | | | | |_\__ \
|_| |_| |_|   |_| |_|      \____|_|_|\___|_| |_|\__| |_| |_|_|_| |_|\__|___/
                                                                            
HTTP Client hints

Client hints are a set of HTTP request header fields that a server can
proactively request from a client to get information about the device,
network, user, and user-agent-specific preferences. The server can
determine which resources to send, based on the information that the
client chooses to provide.

The set of "hint" headers are listed in the topic HTTP Headers and
summarized below .

Overview

A server must announce that it supports client hints, using the
 Accept-CH header to specify the hints that it is interested in
receiving. When a client that supports client hints receives the
 Accept-CH header it can choose to append some or all of the listed
client hint headers in its subsequent requests.

For example, following  Accept-CH in a response below, the client could
append  Width ,  Downlink and  Sec-CH-UA headers to all subsequent
requests.

http

    Accept-CH: Width, Downlink, Sec-CH-UA

This approach is efficient in that the server only requests the
information that it is able to usefully handle. It is also relatively
"privacy-preserving", in that it is up to the client to decide what
information it can safely share.

There is a small set of low entropy client hint headers that may be sent
by a client even if not requested.

Note: Client hints can also be specified in HTML using the  <meta>
element with the  http-equiv attribute.

html

    <meta http-equiv="Accept-CH" content="Width, Downlink, Sec-CH-UA" />

Caching and Client Hints

Client hints that determine which resources are sent in responses should
generally also be included in the affected response's  Vary header. This
ensures that a different resource is cached for every different value of
the hint header.

http

    Vary: Accept, Width, ECT

You may prefer to omit specifying  Vary or use some other strategy for
client hint headers where the value changes a lot, as this effectively
makes the resource uncacheable. (A new cache entry is created for every
unique value.) This applies in particular to network client hints like
 Downlink and  RTT . For more information see HTTP Caching > Vary .

Hint life-time

A server specifies the client hint headers that it is interested in
getting in the  Accept-CH response header. The user agent appends the
requested client hint headers, or at least the subset that it wants to
share with that server, to all subsequent requests in the current
browsing session.

In other words, the request for a specific set of hints does not expire
until the browser is shut down.

A server can replace the set of client hints it is interested in
receiving by resending the  Accept-CH response header with a new list.
For example, to stop requesting any hints it would send  Accept-CH with
an empty list.

Note: The client hints set for a particular origin can also be cleared
by sending a  Clear-Site-Data: "clientHints" response header for a URL
inside that origin.

Low entropy hints

Client hints are broadly divided into high and low entropy hints.

The low entropy hints are those that don't give away much information
that might be used to create a fingerprinting for a user. They may be
sent by default on every client request, irrespective of the server
 Accept-CH response header, depending on the permission policy. These
hints include:  Save-Data ,  Sec-CH-UA ,  Sec-CH-UA-Mobile ,
 Sec-CH-UA-Platform .

The high entropy hints are those that have the potential to give away
more information that can be used for user fingerprinting, and therefore
are gated in such a way that the user agent can make a decision whether
to provide them. The decision might be based on user preferences, a
permission request, or the permission policy. All client hints that are
not low entropy hints are considered high entropy hints.

Critical client hints

A critical client hint is one where applying the response may
significantly change the rendered page, potentially in a way that is
jarring or will affect usability, and therefore which must be applied
before the content is rendered. For example,
 Sec-CH-Prefers-Reduced-Motion is commonly treated as a critical hint,
because it might markedly affect the behavior of animations, and because
a user who chooses this preference needs it to be set.

A server can use the  Critical-CH response header along with  Accept-CH
to specify that an accepted client hint is also a critical client hint
(a header in  Critical-CH must also appear in  Accept-CH ). User agents
receiving a response with  Critical-CH must check if the indicated
critical headers were sent in the original request. If not, then the
user agent will retry the request rather than render the page. This
approach ensures that client preferences set using critical client hints
are always used, even if not included in the first request, or if the
server configuration changes.

For example, in this case, the server tells a client via  Accept-CH that
it accepts  Sec-CH-Prefers-Reduced-Motion , and  Critical-CH is used to
specify that  Sec-CH-Prefers-Reduced-Motion is considered a critical
client hint:

http

    HTTP/1.1 200 OK
    Content-Type: text/html
    Accept-CH: Sec-CH-Prefers-Reduced-Motion
    Vary: Sec-CH-Prefers-Reduced-Motion
    Critical-CH: Sec-CH-Prefers-Reduced-Motion

Note: We've also specified  Sec-CH-Prefers-Reduced-Motion in the  Vary
header to indicate to the browser that the served content will differ
based on this header value, even if the URL stays the same, so the
browser shouldn't just use an existing cached response and instead
should cache this response separately. Each header listed in the
 Critical-CH header should also be present in the  Accept-CH and  Vary
headers.

As  Sec-CH-Prefers-Reduced-Motion is a critical hint that was not in the
original request, the client automatically retries the request — this
time telling the server via  Sec-CH-Prefers-Reduced-Motion that it has a
user preference for reduced-motion animations.

http

    GET / HTTP/1.1
    Host: example.com
    Sec-CH-Prefers-Reduced-Motion: "reduce"

Hint types

User-agent client hints

User agent (UA) client hint headers allow a server to vary responses
based on the user agent (browser), operating system, and device. Headers
include:  Sec-CH-UA ,  Sec-CH-UA-Arch ,  Sec-CH-UA-Bitness ,
 Sec-CH-UA-Full-Version-List ,  Sec-CH-UA-Full-Version ,
 Sec-CH-UA-Mobile ,  Sec-CH-UA-Model ,  Sec-CH-UA-Platform , and
 Sec-CH-UA-Platform-Version .

Client hints are available to web page JavaScript via the User Agent
Client Hints API .

Note: Servers currently get most of the same information by parsing the
 User-Agent header. For historical reasons this header contains a lot of
largely irrelevant information, and information that might be used to
identify a particular user . UA client hints provide a more efficient
and privacy preserving way of getting the desired information. They are
eventually expected to replace this older approach.

User preference media features client hints

User Preference Media Features Client Hints allow a server to vary
responses based on a user agent's preferences for CSS media features
such as color scheme or reduced motion. Headers include:
 Sec-CH-Prefers-Reduced-Motion ,  Sec-CH-Prefers-Color-Scheme .

Device client hints

Device client hints allow a server to vary responses based on device
characteristics including available memory and screen properties.
Headers include:  Device-Memory ,  Width ,  Viewport-Width .

Network client hints

Network client hints allow a server to vary responses based on the
user's choice, network bandwidth, and latency. Headers include:
 Save-Data ,  Downlink ,  ECT ,  RTT .

See also

-   Client Hints headers
-    Vary HTTP Header
-   Client Hints Infrastructure
-   User Agent Client Hints API
-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 17, 2024 by MDN contributors .
# Compression in HTTP #
  ____                                        _               _       
 / ___|___  _ __ ___  _ __  _ __ ___  ___ ___(_) ___  _ __   (_)_ __  
| |   / _ \| '_ ` _ \| '_ \| '__/ _ \/ __/ __| |/ _ \| '_ \  | | '_ \ 
| |__| (_) | | | | | | |_) | | |  __/\__ \__ \ | (_) | | | | | | | | |
 \____\___/|_| |_| |_| .__/|_|  \___||___/___/_|\___/|_| |_| |_|_| |_|
                     |_|                                              
 _   _ _____ _____ ____  
| | | |_   _|_   _|  _ \ 
| |_| | | |   | | | |_) |
|  _  | | |   | | |  __/ 
|_| |_| |_|   |_| |_|    
                         
Compression in HTTP

Compression is an important way to increase the performance of a
website. For some documents, size reduction of up to 70% lowers the
bandwidth capacity needs. Over the years, algorithms also got more
efficient, and new ones are supported by clients and servers.

In practice, web developers don't need to implement compression
mechanisms, both browsers and servers have it implemented already, but
they have to be sure that the server is configured adequately.
Compression happens at three different levels:

-   first some file formats are compressed with specific optimized
    methods,
-   then general encryption can happen at the HTTP level (the resource
    is transmitted compressed from end to end),
-   and finally compression can be defined at the connection level,
    between two nodes of an HTTP connection.

File format compression

Each data type has some redundancy, that is wasted space , in it. If
text can typically have as much as 60% redundancy, this rate can be much
higher for some other media like audio and video. Unlike text, these
other media types use a lot of space to store their data and the need to
optimize storage and regain space was apparent very early. Engineers
designed the optimized compression algorithm used by file formats
designed for this specific purpose. Compression algorithms used for
files can be grouped into two broad categories:

-   Loss-less compression , where the compression-uncompression cycle
    doesn't alter the data that is recovered. It matches (byte to byte)
    with the original. For images,  gif or  png are using lossless
    compression.
-   Lossy compression , where the cycle alters the original data in a
    (hopefully) imperceptible way for the user. Video formats on the Web
    are lossy; the  jpeg image format is also lossy.

Some formats can be used for both loss-less or lossy compression, like
 webp , and usually lossy algorithm can be configured to compress more
or less, which then of course leads to less or more quality. For better
performance of a website, it is ideal to compress as much as possible,
while keeping an acceptable level of quality. For images, an image
generated by a tool could be not optimized enough for the Web; it is
recommended to use tools that will compress as much as possible with the
required quality. There are numerous tools that are specialized for
this.

Lossy compression algorithms are usually more efficient than loss-less
ones.

Note: As compression works better on a specific kind of files, it
usually provides nothing to compress them a second time. In fact, this
is often counterproductive as the cost of the overhead (algorithms
usually need a dictionary that adds to the initial size) can be higher
than the extra gain in compression resulting in a larger file. Do not
use the two following techniques for files in a compressed format.

End-to-end compression

For compression, end-to-end compression is where the largest performance
improvements of websites reside. End-to-end compression refers to a
compression of the body of a message that is done by the server and will
last unchanged until it reaches the client. Whatever the intermediate
nodes are, they leave the body untouched.

[A server sending a compressed HTTP body to a client via network nodes.
The body is not decompressed at any hop through the network until it
reaches the client.]

All modern browsers and servers do support it and the only thing to
negotiate is the compression algorithm to use. These algorithms are
optimized for text. In the 1990s, compression technology was advancing
at a rapid pace and numerous successive algorithms have been added to
the set of possible choices. Nowadays, only two are relevant:  gzip ,
the most common one, and  br the new challenger.

To select the algorithm to use, browsers and servers use proactive
content negotiation . The browser sends an  Accept-Encoding header with
the algorithm it supports and its order of precedence, the server picks
one, uses it to compress the body of the response and uses the
 Content-Encoding header to tell the browser the algorithm it has
chosen. As content negotiation has been used to choose a representation
based on its encoding, the server must send a  Vary header containing at
least  Accept-Encoding alongside this header in the response; that way,
caches will be able to cache the different representations of the
resource.

[A client requesting content with an 'Accept-Encoding: br, gzip' header.
The server responds with a body compressed using the Brotli algorithm
and the required 'Content-Encoding' and 'Vary' headers.]

As compression brings significant performance improvements, it is
recommended to activate it for all files, but already compressed ones
like images, audio files and videos.

Apache supports compression and uses mod_deflate ; for Nginx there is
ngx_http_gzip_module ; for IIS, the  <httpCompression> element.

Hop-by-hop compression

Hop-by-hop compression, though similar to end-to-end compression,
differs by one fundamental element: the compression doesn't happen on
the resource in the server, creating a specific representation that is
then transmitted, but on the body of the message between any two nodes
on the path between the client and the server. Connections between
successive intermediate nodes may apply a different compression.

[A server sending an uncompressed HTTP body to a client via network
nodes. The body is compressed and decompressed by nodes on the network
depending on 'Transfer-Encoding' headers before it reaches the client.]

To do this, HTTP uses a mechanism similar to the content negotiation for
end-to-end compression: the node transmitting the request advertizes its
will using the  TE header and the other node chooses the adequate
method, applies it, and indicates its choice with the  Transfer-Encoding
header.

[A client requesting content from a server with no compression-related
headers. The server responds with an uncompressed body. The body is
compressed and decompressed by nodes on the network before it reaches
the client.]

In practice, hop-by-hop compression is transparent for the server and
the client, and is rarely used.  TE and  Transfer-Encoding are mostly
used to send a response by chunks, allowing to start transmitting a
resource without knowing its length.

Note that using  Transfer-Encoding and compression at the hop level is
so rare that most servers, like Apache, Nginx, or IIS, have no easy way
to configure it. Such configuration usually happens at the proxy level.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 10, 2023 by MDN contributors .
# HTTP conditional requests #
 _   _ _____ _____ ____                        _ _ _   _                   _ 
| | | |_   _|_   _|  _ \    ___ ___  _ __   __| (_) |_(_) ___  _ __   __ _| |
| |_| | | |   | | | |_) |  / __/ _ \| '_ \ / _` | | __| |/ _ \| '_ \ / _` | |
|  _  | | |   | | |  __/  | (_| (_) | | | | (_| | | |_| | (_) | | | | (_| | |
|_| |_| |_|   |_| |_|      \___\___/|_| |_|\__,_|_|\__|_|\___/|_| |_|\__,_|_|
                                                                             
                                _       
 _ __ ___  __ _ _   _  ___  ___| |_ ___ 
| '__/ _ \/ _` | | | |/ _ \/ __| __/ __|
| | |  __/ (_| | |_| |  __/\__ \ |_\__ \
|_|  \___|\__, |\__,_|\___||___/\__|___/
             |_|                        
HTTP conditional requests

HTTP has a concept of conditional requests , where the result, and even
the success of a request, can be changed by comparing the affected
resources with the value of a validator . Such requests can be useful to
validate the content of a cache, and sparing a useless control, to
verify the integrity of a document, like when resuming a download, or
when preventing lost updates when uploading or modifying a document on
the server.

Principles

HTTP conditional requests are requests that are executed differently,
depending on the value of specific headers. These headers define a
precondition, and the result of the request will be different if the
precondition is matched or not.

The different behaviors are defined by the method of the request used,
and by the set of headers used for a precondition:

-   for safe methods, like  GET , which usually tries to fetch a
    document, the conditional request can be used to send back the
    document, if relevant only. Therefore, this spares bandwidth.
-   for unsafe methods, like  PUT , which usually uploads a document,
    the conditional request can be used to upload the document, only if
    the original it is based on is the same as that stored on the
    server.

Validators

All conditional headers try to check if the resource stored on the
server matches a specific version. To achieve this, the conditional
requests need to indicate the version of the resource. As comparing the
whole resource byte to byte is impracticable, and not always what is
wanted, the request transmits a value describing the version. Such
values are called validators , and are of two kinds:

-   the date of last modification of the document, the last-modified
    date.
-   an opaque string, uniquely identifying each version, called the
    entity tag , or the etag .

Comparing versions of the same resource is a bit tricky: depending on
the context, there are two kinds of equality checks :

-   Strong validation is used when byte to byte identity is expected,
    for example when resuming a download.
-   Weak validation is used when the user-agent only needs to determine
    if two resources have the same content. The resources may be
    considered the same even if minor differences exist, such as
    different ads or a footer with a different date.

The kind of validation is independent of the validator used. Both
 Last-Modified and  ETag allow both types of validation, though the
complexity to implement it on the server side may vary. HTTP uses strong
validation by default, and it specifies when weak validation can be
used.

Strong validation

Strong validation consists of guaranteeing that the resource is, byte to
byte, identical to the one it is compared to. This is mandatory for some
conditional headers, and the default for the others. Strong validation
is very strict and may be difficult to guarantee at the server level,
but it does guarantee no data loss at any time, sometimes at the expense
of performance.

It is quite difficult to have a unique identifier for strong validation
with  Last-Modified . Often this is done using an  ETag with the MD5
hash of the resource (or a derivative).

Weak validation

Weak validation differs from strong validation, as it considers two
versions of the document as identical if the content is equivalent. For
example, a page that would differ from another only by a different date
in its footer, or different advertising, would be considered identical
to the other with weak validation. These same two versions are
considered different when using strong validation. Building a system of
etags that creates weak validation may be complex, as it involves
knowing the importance of the different elements of a page, but is very
useful towards optimizing cache performance.

Conditional headers

Several HTTP headers, called conditional headers, lead to conditional
requests. These are:

 If-Match

    Succeeds if the  ETag of the distant resource is equal to one listed
    in this header. It performs a strong validation.

 If-None-Match

    Succeeds if the  ETag of the distant resource is different to each
    listed in this header. It performs a weak validation.

 If-Modified-Since

    Succeeds if the  Last-Modified date of the distant resource is more
    recent than the one given in this header.

 If-Unmodified-Since

    Succeeds if the  Last-Modified date of the distant resource is older
    or the same as the one given in this header.

 If-Range

    Similar to  If-Match , or  If-Unmodified-Since , but can have only
    one single etag, or one date. If it fails, the range request fails,
    and instead of a  206  Partial Content response, a  200  OK is sent
    with the complete resource.

Use cases

Cache update

The most common use case for conditional requests is updating a cache.
With an empty cache, or without a cache, the requested resource is sent
back with a status of  200  OK .

[The request issued when the cache is empty triggers the resource to be
downloaded, with both validator values sent as headers. The cache is
then filled.]

Together with the resource, the validators are sent in the headers. In
this example, both  Last-Modified and  ETag are sent, but it could
equally have been only one of them. These validators are cached with the
resource (like all headers) and will be used to craft conditional
requests, once the cache becomes stale.

As long as the cache is not stale, no requests are issued at all. But
once it has become stale, this is mostly controlled by the
 Cache-Control header, the client doesn't use the cached value directly
but issues a conditional request . The value of the validator is used as
a parameter of the  If-Modified-Since and  If-None-Match headers.

If the resource has not changed, the server sends back a  304
 Not Modified response. This makes the cache fresh again, and the client
uses the cached resource. Although there is a response/request
round-trip that consumes some resources, this is more efficient than to
transmit the whole resource over the wire again.

[With a stale cache, the conditional request is sent. The server can
determine if the resource changed, and, as in this case, decide not to
send it again as it is the same.]

If the resource has changed, the server just sends back a  200 OK
response, with the new version of the resource (as though the request
wasn't conditional). The client uses this new resource (and caches it).

[In the case where the resource was changed, it is sent back as if the
request wasn't conditional.]

Besides the setting of the validators on the server side, this mechanism
is transparent: all browsers manage a cache and send such conditional
requests without any special work to be done by Web developers.

Integrity of a partial download

Partial downloading of files is a functionality of HTTP that allows
resuming previous operations, saving bandwidth and time, by keeping the
already obtained information:

[A download has been stopped and only partial content has been
retrieved.]

A server supporting partial downloads broadcasts this by sending the
 Accept-Ranges header. Once this happens, the client can resume a
download by sending a  Ranges header with the missing ranges:

[The client resumes the requests by indicating the range he needs and
preconditions checking the validators of the partially obtained
request.]

The principle is simple, but there is one potential problem: if the
downloaded resource has been modified between both downloads, the
obtained ranges will correspond to two different versions of the
resource, and the final document will be corrupted.

To prevent this, conditional requests are used. For ranges, there are
two ways of doing this. The more flexible one makes use of
 If-Unmodified-Since and  If-Match and the server returns an error if
the precondition fails; the client then restarts the download from the
beginning:

[When the partially downloaded resource has been modified, the
preconditions will fail and the resource will have to be downloaded
again completely.]

Even if this method works, it adds an extra response/request exchange
when the document has been changed. This impairs performance, and HTTP
has a specific header to avoid this scenario:  If-Range :

[The If-Range headers allows the server to directly send back the
complete resource if it has been modified, no need to send a 412 error
and wait for the client to re-initiate the download.]

This solution is more efficient, but slightly less flexible, as only one
etag can be used in the condition. Rarely is such additional flexibility
needed.

Avoiding the lost update problem with optimistic locking

A common operation in Web applications is to update a remote document.
This is very common in any file system or source control applications,
but any application that allows to store remote resources needs such a
mechanism. Common websites, like wikis and other CMS, have such a need.

With the  PUT method you are able to implement this. The client first
reads the original files, modifies them, and finally pushes them to the
server:

[Updating a file with a PUT is very simple when concurrency is not
involved.]

Unfortunately, things get a little inaccurate as soon as we take into
account concurrency. While a client is locally modifying its new copy of
the resource, a second client can fetch the same resource and do the
same on its copy. What happens next is very unfortunate: when they
commit back to the server, the modifications from the first client are
discarded by the next client push, as this second client is unaware of
the first client's changes to the resource. The decision on who wins is
not communicated to the other party. Which client's changes are to be
kept, will vary with the speed they commit; this depends on the
performance of the clients, of the server, and even of the human editing
the document at the client. The winner will change from one time to the
next. This is a race condition and leads to problematic behaviors, which
are difficult to detect and to debug:

[When several clients update the same resource in parallel, we are
facing a race condition: the slowest win, and the others don't even know
they lost. Problematic!]

There is no way to deal with this problem without annoying one of the
two clients. However, lost updates and race conditions are to be
avoided. We want predictable results, and expect that the clients are
notified when their changes are rejected.

Conditional requests allow implementing the optimistic locking algorithm
(used by most wikis or source control systems). The concept is to allow
all clients to get copies of the resource, then let them modify it
locally, controlling concurrency by successfully allowing the first
client to submit an update. All subsequent updates, based on the now
obsolete version of the resource, are rejected:

[Conditional requests allow to implement optimistic locking: now the
quickest wins, and the others get an error.]

This is implemented using the  If-Match or  If-Unmodified-Since headers.
If the etag doesn't match the original file, or if the file has been
modified since it has been obtained, the change is rejected with a  412
 Precondition Failed error. It is then up to the client to deal with the
error: either by notifying the user to start again (this time on the
newest version), or by showing the user a diff of both versions, helping
them decide which changes they wish to keep.

Dealing with the first upload of a resource

The first upload of a resource is an edge case of the previous. Like any
update of a resource, it is subject to a race condition if two clients
try to perform at similar times. To prevent this, conditional requests
can be used: by adding  If-None-Match with the special value of  '*' ,
representing any etag. The request will succeed, only if the resource
didn't exist before:

[Like for a regular upload, the first upload of a resource is subject to
a race condition: If-None-Match can prevent it.]

 If-None-Match will only work with HTTP/1.1 (and later) compliant
servers. If unsure if the server will be compliant, you need first to
issue a  HEAD request to the resource to check this.

Conclusion

Conditional requests are a key feature of HTTP, and allow the building
of efficient and complex applications. For caching or resuming
downloads, the only work required for webmasters is to configure the
server correctly; setting correct etags in some environments can be
tricky. Once achieved, the browser will serve the expected conditional
requests.

For locking mechanisms, it is the opposite: Web developers need to issue
a request with the proper headers, while webmasters can mostly rely on
the application to carry out the checks for them.

In both cases it's clear, conditional requests are a fundamental feature
behind the Web.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 10, 2024 by MDN contributors .
# Connection management in HTTP/1.x #
  ____                            _   _             
 / ___|___  _ __  _ __   ___  ___| |_(_) ___  _ __  
| |   / _ \| '_ \| '_ \ / _ \/ __| __| |/ _ \| '_ \ 
| |__| (_) | | | | | | |  __/ (__| |_| | (_) | | | |
 \____\___/|_| |_|_| |_|\___|\___|\__|_|\___/|_| |_|
                                                    
                                                             _     _       
 _ __ ___   __ _ _ __   __ _  __ _  ___ _ __ ___   ___ _ __ | |_  (_)_ __  
| '_ ` _ \ / _` | '_ \ / _` |/ _` |/ _ \ '_ ` _ \ / _ \ '_ \| __| | | '_ \ 
| | | | | | (_| | | | | (_| | (_| |  __/ | | | | |  __/ | | | |_  | | | | |
|_| |_| |_|\__,_|_| |_|\__,_|\__, |\___|_| |_| |_|\___|_| |_|\__| |_|_| |_|
                             |___/                                         
 _   _ _____ _____ ____   ___        
| | | |_   _|_   _|  _ \ / / | __  __
| |_| | | |   | | | |_) / /| | \ \/ /
|  _  | | |   | | |  __/ / | |_ >  < 
|_| |_| |_|   |_| |_| /_/  |_(_)_/\_\
                                     
Connection management in HTTP/1.x

Connection management is a key topic in HTTP: opening and maintaining
connections largely impacts the performance of websites and Web
applications. In HTTP/1.x, there are several models: short-lived
connections , persistent connections , and HTTP pipelining.

HTTP mostly relies on TCP for its transport protocol, providing a
connection between the client and the server. In its infancy, HTTP used
a single model to handle such connections. These connections were
short-lived: a new one created each time a request needed sending, and
closed once the answer had been received.

This simple model held an innate limitation on performance: opening each
TCP connection is a resource-consuming operation. Several messages must
be exchanged between the client and the server. Network latency and
bandwidth affect performance when a request needs sending. Modern Web
pages require many requests (a dozen or more) to serve the amount of
information needed, proving this earlier model inefficient.

Two newer models were created in HTTP/1.1. The persistent-connection
model keeps connections opened between successive requests, reducing the
time needed to open new connections. The HTTP pipelining model goes one
step further, by sending several successive requests without even
waiting for an answer, reducing much of the latency in the network.

[Compares the performance of the three HTTP/1.x connection models:
short-lived connections, persistent connections, and HTTP pipelining.]

Note: HTTP/2 adds additional models for connection management.

It's important to note that connection management in HTTP applies to the
connection between two consecutive nodes, which is hop-by-hop and not
end-to-end . The model used in connections between a client and its
first proxy may differ from the model between a proxy and the
destination server (or any intermediate proxies). The HTTP headers
involved in defining the connection model, like  Connection and
 Keep-Alive , are hop-by-hop headers with their values able to be
changed by intermediary nodes.

A related topic is the concept of HTTP connection upgrades, wherein an
HTTP/1.1 connection is upgraded to a different protocol, such as
TLS/1.0, WebSocket, or even HTTP/2 in cleartext. This protocol upgrade
mechanism is documented in more detail elsewhere.

Short-lived connections

The original model of HTTP, and the default one in HTTP/1.0, is
short-lived connections . Each HTTP request is completed on its own
connection; this means a TCP handshake happens before each HTTP request,
and these are serialized.

The TCP handshake itself is time-consuming, but a TCP connection adapts
to its load, becoming more efficient with more sustained (or warm)
connections. Short-lived connections do not make use of this efficiency
feature of TCP, and performance degrades from optimum by persisting to
transmit over a new, cold connection.

This model is the default model used in HTTP/1.0 (if there is no
 Connection header, or if its value is set to  close ). In HTTP/1.1,
this model is only used when the  Connection header is sent with a value
of  close .

Note: Unless dealing with a very old system, which doesn't support a
persistent connection, there is no compelling reason to use this model.

Persistent connections

Short-lived connections have two major hitches: the time taken to
establish a new connection is significant, and performance of the
underlying TCP connection gets better only when this connection has been
in use for some time (warm connection). To ease these problems, the
concept of a persistent connection has been designed, even prior to
HTTP/1.1. Alternatively this may be called a keep-alive connection .

A persistent connection is one which remains open for a period of time,
and can be reused for several requests, saving the need for a new TCP
handshake, and utilizing TCP's performance enhancing capabilities. This
connection will not stay open forever: idle connections are closed after
some time (a server may use the  Keep-Alive header to specify a minimum
time the connection should be kept open).

Persistent connections also have drawbacks; even when idling they
consume server resources, and under heavy load, DoS attacks can be
conducted. In such cases, using non-persistent connections, which are
closed as soon as they are idle, can provide better performance.

HTTP/1.0 connections are not persistent by default. Setting  Connection
to anything other than  close , usually  retry-after , will make them
persistent.

In HTTP/1.1, persistence is the default, and the header is no longer
needed (but it is often added as a defensive measure against cases
requiring a fallback to HTTP/1.0).

HTTP pipelining

Note: HTTP pipelining is not activated by default in modern browsers:

-   Buggy proxies are still common and these lead to strange and erratic
    behaviors that Web developers cannot foresee and diagnose easily.
-   Pipelining is complex to implement correctly: the size of the
    resource being transferred, the effective RTT that will be used, as
    well as the effective bandwidth, have a direct incidence on the
    improvement provided by the pipeline. Without knowing these,
    important messages may be delayed behind unimportant ones. The
    notion of important even evolves during page layout! HTTP pipelining
    therefore brings a marginal improvement in most cases only.
-   Pipelining is subject to the HOL problem.

For these reasons, pipelining has been superseded by a better algorithm,
multiplexing , that is used by HTTP/2.

By default, HTTP requests are issued sequentially. The next request is
only issued once the response to the current request has been received.
As they are affected by network latencies and bandwidth limitations,
this can result in significant delay before the next request is seen by
the server.

Pipelining is the process to send successive requests, over the same
persistent connection, without waiting for the answer. This avoids
latency of the connection. Theoretically, performance could also be
improved if two HTTP requests were to be packed into the same TCP
message. The typical MSS (Maximum Segment Size), is big enough to
contain several simple requests, although the demand in size of HTTP
requests continues to grow.

Not all types of HTTP requests can be pipelined: only idempotent
methods, that is  GET ,  HEAD ,  PUT and  DELETE , can be replayed
safely. Should a failure happen, the pipeline content can be repeated.

Today, every HTTP/1.1-compliant proxy and server should support
pipelining, though many have limitations in practice: a significant
reason no modern browser activates this feature by default.

Domain sharding

Note: Unless you have a very specific immediate need, don't use this
deprecated technique; switch to HTTP/2 instead. In HTTP/2, domain
sharding is no longer useful: the HTTP/2 connection is able to handle
parallel unprioritized requests very well. Domain sharding is even
detrimental to performance. Most HTTP/2 implementations use a technique
called connection coalescing to revert eventual domain sharding.

As an HTTP/1.x connection is serializing requests, even without any
ordering, it can't be optimal without large enough available bandwidth.
As a solution, browsers open several connections to each domain, sending
parallel requests. Default was once 2 to 3 connections, but this has now
increased to a more common use of 6 parallel connections. There is a
risk of triggering DoS protection on the server side if attempting more
than this number.

If the server wishes a faster website or application response, it is
possible for the server to force the opening of more connections. For
example, instead of having all resources on the same domain, say
 www.example.com , it could split over several domains,
 www1.example.com ,  www2.example.com ,  www3.example.com . Each of
these domains resolves to the same server, and the Web browser will open
6 connections to each (in our example, boosting the connections to 18).
This technique is called domain sharding .

[Without domain sharding, a client requests six images from a domain
with a maximum of two requests taking place in parallel. With domain
sharding, the images are available from two domains and the client can
run four requests in parallel, downloading the images in less time.]

Conclusion

Improved connection management allows considerable boosting of
performance in HTTP. With HTTP/1.1 or HTTP/1.0, using a persistent
connection – at least until it becomes idle – leads to the best
performance. However, the failure of pipelining has lead to designing
superior connection management models, which have been incorporated into
HTTP/2.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 10, 2023 by MDN contributors .
# Content negotiation #
  ____            _             _   
 / ___|___  _ __ | |_ ___ _ __ | |_ 
| |   / _ \| '_ \| __/ _ \ '_ \| __|
| |__| (_) | | | | ||  __/ | | | |_ 
 \____\___/|_| |_|\__\___|_| |_|\__|
                                    
                        _   _       _   _             
 _ __   ___  __ _  ___ | |_(_) __ _| |_(_) ___  _ __  
| '_ \ / _ \/ _` |/ _ \| __| |/ _` | __| |/ _ \| '_ \ 
| | | |  __/ (_| | (_) | |_| | (_| | |_| | (_) | | | |
|_| |_|\___|\__, |\___/ \__|_|\__,_|\__|_|\___/|_| |_|
            |___/                                     
Content negotiation

In HTTP , content negotiation is the mechanism that is used for serving
different representations of a resource to the same URI to help the user
agent specify which representation is best suited for the user (for
example, which document language, which image format, or which content
encoding).

Note: You'll find some disadvantages of HTTP content negotiation in a
wiki page from WHATWG . HTML provides alternatives to content
negotiation via, for example, the  <source> element .

Principles of content negotiation

A specific document is called a resource . When a client wants to obtain
a resource, the client requests it via a URL. The server uses this URL
to choose one of the variants available–each variant is called a
representation –and returns a specific representation to the client. The
overall resource, as well as each of the representations, has a specific
URL. Content negotiation determines how a specific representation is
chosen when the resource is called. There are several ways of
negotiating between the client and the server.

[A client requesting a URL. The server has multiple resources
represented by the URL and sends back appropriate content based on the
request.]

The best-suited representation is identified through one of two
mechanisms:

-   Specific HTTP headers by the client ( server-driven negotiation or
    proactive negotiation ), which is the standard way of negotiating a
    specific kind of resource.
-   The  300 (Multiple Choices) or  406 (Not Acceptable),  415
    (Unsupported Media Type) HTTP response codes by the server (
    agent-driven negotiation or reactive negotiation ), that are used as
    fallback mechanisms.

Over the years, other content negotiation proposals, like transparent
content negotiation and the  Alternates header, have been proposed. They
failed to get traction and were abandoned.

Server-driven content negotiation

In server-driven content negotiation , or proactive content negotiation,
the browser (or any other kind of user agent) sends several HTTP headers
along with the URL. These headers describe the user's preferred choice.
The server uses them as hints and an internal algorithm chooses the best
content to serve to the client. If it can't provide a suitable resource,
it might respond with  406 (Not Acceptable) or  415 (Unsupported Media
Type) and set headers for the types of media that it does support (e.g.,
using the  Accept-Post or  Accept-Patch for POST and PATCH requests,
respectively). The algorithm is server-specific and not defined in the
standard. See the Apache negotiation algorithm .

[A client requesting a URL with headers denoting a preference for
content types. The server has multiple resources represented by the URL
and sends back the content for the preferred language and compresses the
request body based, respecting the client's request headers.]

The HTTP/1.1 standard defines list of the standard headers that start
server-driven negotiation (such as  Accept ,  Accept-Encoding , and
 Accept-Language ). Though  User-Agent isn't in this list, it's
sometimes also used to send a specific representation of the requested
resource. However, this isn't always considered a good practice. The
server uses the  Vary header to indicate which headers it actually used
for content negotiation (or more precisely, the associated request
headers), so that caches can work optimally.

In addition to these, there's an experimental proposal to add more
headers to the list of available headers, called client hints . Client
hints advertise what kind of device the user agent runs on (for example,
a desktop computer or a mobile device).

Even if server-driven content negotiation is the most common way to
agree on a specific representation of a resource, it has several
drawbacks:

-   The server doesn't have total knowledge of the browser. Even with
    the Client Hints extension, it doesn't have a complete knowledge of
    the capabilities of the browser. Unlike reactive content negotiation
    where the client makes the choice, the server choice is always
    somewhat arbitrary.
-   The information from the client is quite verbose (HTTP/2 header
    compression mitigates this problem) and a privacy risk (HTTP
    fingerprinting ).
-   As several representations of a given resource are sent, shared
    caches are less efficient and server implementations are more
    complex.

The  Accept header

The  Accept header lists the MIME types of media resources that the
agent is willing to process. This is a comma-separated list of MIME
types, each combined with a quality factor, a parameter that indicates
the relative degree of preference between the different MIME types.

The  Accept header is defined by the browser, or any other user agent,
and can vary according to the context. For example, fetching an HTML
page or an image, a video, or a script. It's different when fetching a
document entered in the address bar or an element linked via an  <img> ,
 <video> , or  <audio> element. Browsers are free to use the value of
the header that they think is the most adequate; an exhaustive list of
default values for common browsers is available.

The  Accept-CH header  Experimental 

Note: This is part of an experimental technology called Client Hints .
Initial support comes in Chrome 46 or later. The Device-Memory value is
in Chrome 61 or later.

The experimental  Accept-CH lists configuration data that the server can
use to select an appropriate response. Valid values are:

  Value             Meaning
  ----------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   Device-Memory    Indicates the approximate amount of device RAM. This value is an approximation given by rounding to the nearest power of 2 and dividing that number by 1024. For example, 512 megabytes will be reported as  0.5 .
   Viewport-Width   Indicates the layout viewport width in CSS pixels.
   Width            Indicates the resource width in physical pixels (in other words the intrinsic size of an image).

The  Accept-CH-Lifetime header

Note: This is part of an experimental technology called Client Hints and
is only available in Chrome 61 or later.

The  Accept-CH-Lifetime header is used with the  Device-Memory value of
the  Accept-CH header and indicates the amount of time the device should
opt in to sharing the device memory with the server. The value is given
in milliseconds and it's optional.

The  Accept-Encoding header

The  Accept-Encoding header defines the acceptable content encoding
(supported compressions). The value is a q-factor list (e.g.,
 br, gzip;q=0.8 ) that indicates the priority of the encoding values.
The default value  identity is at the lowest priority (unless otherwise
noted).

Compressing HTTP messages is one of the most important ways to improve
the performance of a website. It shrinks the size of the data
transmitted and makes better use of the available bandwidth. Browsers
always send this header and the server should be configured to use
compression.

The  Accept-Language header

The  Accept-Language header is used to indicate the language preference
of the user. It's a list of values with quality factors (e.g.,
 "de, en;q=0.7 "). A default value is often set according to the
language of the graphical interface of the user agent, but most browsers
allow different language preferences to be set.

Due to the configuration-based entropy increase, a modified value can be
used to fingerprint the user. It's not recommended to change it and a
website can't trust this value to reflect the actual intention of the
user. It's best for site designers to avoid using language detection via
this header as it can lead to a poor user experience.

-   They should always provide a way to override the server-chosen
    language, e.g., by providing a language menu on the site. Most user
    agents provide a default value for the  Accept-Language header
    that's adapted to the user interface language. End users often don't
    modify it because they either don't know how or aren't able to do so
    based on their computing environment.
-   Once a user has overridden the server-chosen language, a site should
    no longer use language detection and should stick with the
    explicitly chosen language. In other words, only entry pages for a
    site should use this header to select the proper language.

The  User-Agent header

Note: Though there are legitimate uses of this header for selecting
content, it's considered bad practice to rely on it to define what
features are supported by the user agent.

The  User-Agent header identifies the browser sending the request. This
string may contain a space-separated list of product tokens and comments
.

A product token is a name followed by a '  / ' and a version number,
like  Firefox/4.0.1 . The user agent can include as many of these as it
wants. A comment is an optional string delimited by parentheses. The
information provided in a comment isn't standardized, though several
browsers add several tokens to it separated by '  ; '.

The  Vary response header

In contrast to the previous  Accept-* headers, which are sent by the
client, the  Vary HTTP header is sent by the web server in its response.
It indicates the list of headers the server uses during the
server-driven content negotiation phase. The  Vary header is needed to
inform the cache of the decision criteria so that it can reproduce it.
This allows the cache to be functional while ensuring that the right
content is served to the user.

The special value '  * ' means that the server-driven content
negotiation also uses information not conveyed in a header to choose the
appropriate content.

The  Vary header was added in version 1.1 of HTTP and allows caches to
work appropriately. To work with server-driven content negotiation, a
cache needs to know which criteria the server used to select the
transmitted content. That way, the cache can replay the algorithm and
will be able to serve acceptable content directly, without more requests
to the server. Obviously, the wildcard '  * ' prevents caching from
occurring, as the cache can't know what element is behind it. For more
information, see HTTP caching > Varying responses .

Agent-driven negotiation

Server-driven negotiation has a few drawbacks: it doesn't scale well.
One header per feature is used in the negotiation. If you want to use
screen size, resolution, or other dimensions, you need to create a new
HTTP header. The headers must then be sent with every request. This
isn't an issue if there are only a few headers, but as the number of
headers increases, the message size could eventually affect performance.
The more precisely headers are sent, the more entropy is sent, allowing
for more HTTP fingerprinting and corresponding privacy concerns.

HTTP allows another negotiation type: agent-driven negotiation or
reactive negotiation . In this case, the server sends back a page that
contains links to the available alternative resources when faced with an
ambiguous request. The user is presented the resources and chooses the
one to use.

[A client requesting a URL with headers denoting a preference for
content types. The server has multiple resources represented by the URL
and sends back multiple responses so the client may choose a body with a
preferred compression algorithms applied.]

Unfortunately, the HTTP standard doesn't specify the format of the page
for choosing between the available resources, which prevents the process
from being automated. Besides falling back to the server-driven
negotiation , this method is almost always used with scripting,
especially with JavaScript redirection: after having checked for the
negotiation criteria, the script performs the redirection. A second
problem is that one more request is needed to fetch the real resource,
slowing the availability of the resource to the user.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# List of default Accept values #
 _     _     _            __       _       __             _ _   
| |   (_)___| |_    ___  / _|   __| | ___ / _| __ _ _   _| | |_ 
| |   | / __| __|  / _ \| |_   / _` |/ _ \ |_ / _` | | | | | __|
| |___| \__ \ |_  | (_) |  _| | (_| |  __/  _| (_| | |_| | | |_ 
|_____|_|___/\__|  \___/|_|    \__,_|\___|_|  \__,_|\__,_|_|\__|
                                                                
    _                      _                _                 
   / \   ___ ___ ___ _ __ | |_  __   ____ _| |_   _  ___  ___ 
  / _ \ / __/ __/ _ \ '_ \| __| \ \ / / _` | | | | |/ _ \/ __|
 / ___ \ (_| (_|  __/ |_) | |_   \ V / (_| | | |_| |  __/\__ \
/_/   \_\___\___\___| .__/ \__|   \_/ \__,_|_|\__,_|\___||___/
                    |_|                                       
List of default Accept values

This article documents the default values for the HTTP  Accept header
for specific inputs and browser versions.

Default values

These are the values sent when the context doesn't give better
information. Note that all browsers add the  */* MIME Type to cover all
cases. This is typically used for requests initiated via the address bar
of a browser, or via an HTML  <a> element.

  User Agent                   Value
  ---------------------------- ------------------------------------------------------------------------------------------------------------------------------------
  Firefox 92 and later [1]      text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
  Firefox 72 to 91 [1]          text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
  Firefox 66 to 71 [1]          text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
  Firefox 65 [1]                text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
  Firefox 64 and earlier [1]    text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
  Safari, Chrome                text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
  Safari 5 [2]                  text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
  Edge                          text/html, application/xhtml+xml, image/jxr, */*
  Opera                         text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1

[1] This value can be modified using the  network.http.accept.default
parameter.

[2] This is an improvement over earlier  Accept headers as it no longer
ranks  image/png above  text/html .

Values for an image

When requesting an image, like through an HTML  <img> element,
user-agent often sets a specific list of media types to be welcomed.

  User Agent                       Value
  -------------------------------- ---------------------------------------------------------------------------
  Firefox 92 and later [1]          image/avif,image/webp,*/*
  Firefox 65 to 91 [1]              image/webp,*/*
  Firefox 47 to 63 [1]              */*
  Firefox prior to 47 [1]           image/png,image/*;q=0.8,*/*;q=0.5
  Safari (since Mac OS Big Sur)     image/webp,image/png,image/svg+xml,image/*;q=0.8,video/*;q=0.8,*/*;q=0.5
  Safari (before Mac OS Big Sur)    image/png,image/svg+xml,image/*;q=0.8,video/*;q=0.8,*/*;q=0.5
  Chrome and Edge 121 and later     image/avif,image/webp,image/apng,image/*,*/*;q=0.8

[1] This value can be modified using the  image.http.accept parameter (
source ).

Values for a video

When a video is requested, via the  <video> HTML element, most browsers
use specific values.

  User Agent                 Value
  -------------------------- -----------------------------------------------------------------------------------
  Firefox 3.6 and later       video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5
  Firefox earlier than 3.6   no support for  <video>
  Chrome                      */*

Values for audio resources

When an audio file is requested, like via the  <audio> HTML element,
most browsers use specific values.

  User Agent                  Value
  --------------------------- ---------------------------------------------------------------------------------------------
  Firefox 3.6 and later [1]    audio/webm,audio/ogg,audio/wav,audio/*;q=0.9,application/ogg;q=0.7,video/*;q=0.6,*/*;q=0.5
  Safari, Chrome               */*

[1] See bug 489071 .

Values for scripts

When a script is requested, like via the  <script> HTML element, some
browsers use specific values.

  User Agent       Value
  ---------------- -------
  Firefox [1]       */*
  Safari, Chrome    */*

[1] See bug 170789 .

Values for a CSS stylesheet

When a CSS stylesheet is requested, via the  <link rel="stylesheet">
HTML element, most browsers use specific values.

  User Agent       Value
  ---------------- ------------------------------------------------------------------------------------------------------------------------------------
  Firefox 4 [1]     text/css,*/*;q=0.1
  Safari, Chrome    text/css,*/*;q=0.1
  Opera 11.10       text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1
  Konqueror 4.6     text/css,*/*;q=0.1

[1] See bug 170789 .

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 19, 2023 by MDN contributors .
# Using HTTP cookies #
 _   _     _               _   _ _____ _____ ____  
| | | |___(_)_ __   __ _  | | | |_   _|_   _|  _ \ 
| | | / __| | '_ \ / _` | | |_| | | |   | | | |_) |
| |_| \__ \ | | | | (_| | |  _  | | |   | | |  __/ 
 \___/|___/_|_| |_|\__, | |_| |_| |_|   |_| |_|    
                   |___/                           
                 _    _           
  ___ ___   ___ | | _(_) ___  ___ 
 / __/ _ \ / _ \| |/ / |/ _ \/ __|
| (_| (_) | (_) |   <| |  __/\__ \
 \___\___/ \___/|_|\_\_|\___||___/
                                  
Using HTTP cookies

An HTTP cookie (web cookie, browser cookie) is a small piece of data
that a server sends to a user's web browser. The browser may store the
cookie and send it back to the same server with later requests.
Typically, an HTTP cookie is used to tell if two requests come from the
same browser—keeping a user logged in, for example. It remembers
stateful information for the stateless HTTP protocol.

Cookies are mainly used for three purposes:

Session management

    Logins, shopping carts, game scores, or anything else the server
    should remember

Personalization

    User preferences, themes, and other settings

Tracking

    Recording and analyzing user behavior

Cookies were once used for general client-side storage. While this made
sense when they were the only way to store data on the client, modern
storage APIs are now recommended. Cookies are sent with every request,
so they can worsen performance (especially for mobile data connections).
Modern APIs for client storage are the Web Storage API (  localStorage
and  sessionStorage ) and IndexedDB .

Note: To see stored cookies (and other storage that a web page can use),
you can enable the Storage Inspector in Developer Tools and select
Cookies from the storage tree.

Creating cookies

After receiving an HTTP request, a server can send one or more
 Set-Cookie headers with the response. The browser usually stores the
cookie and sends it with requests made to the same server inside a
 Cookie HTTP header. You can specify an expiration date or time period
after which the cookie shouldn't be sent. You can also set additional
restrictions to a specific domain and path to limit where the cookie is
sent. For details about the header attributes mentioned below, refer to
the  Set-Cookie reference article.

The  Set-Cookie and  Cookie headers

The  Set-Cookie HTTP response header sends cookies from the server to
the user agent. A simple cookie is set like this:

http

    Set-Cookie: <cookie-name>=<cookie-value>

This instructs the server sending headers to tell the client to store a
pair of cookies:

http

    HTTP/2.0 200 OK
    Content-Type: text/html
    Set-Cookie: yummy_cookie=choco
    Set-Cookie: tasty_cookie=strawberry

    [page content]

Then, with every subsequent request to the server, the browser sends all
previously stored cookies back to the server using the  Cookie header.

http

    GET /sample_page.html HTTP/2.0
    Host: www.example.org
    Cookie: yummy_cookie=choco; tasty_cookie=strawberry

Note: Here's how to use the  Set-Cookie header in various server-side
applications:

-   PHP
-   Node.JS
-   Python
-   Ruby on Rails

Define the lifetime of a cookie

Cookies can persist for two different periods, depending on the
attributes used with the  Set-Cookie header when they were created:

-   Permanent cookies are deleted at a date specified by the  Expires
    attribute or after a period prescribed by the  Max-Age attribute.
-   Session cookies – cookies without a  Max age or  Expires attribute –
    are deleted when the current session ends. The browser defines when
    the "current session" ends, and some browsers use session restoring
    when restarting. This can cause session cookies to last
    indefinitely.

For example:

http

    Set-Cookie: id=a3fWa; Expires=Thu, 31 Oct 2021 07:28:00 GMT;

Note: When you set an  Expires date and time, they're relative to the
client the cookie is being set on, not the server.

If your site authenticates users, it should regenerate and resend
session cookies, even ones that already exist, whenever a user
authenticates. This approach helps prevent session fixation attacks ,
where a third party can reuse a user's session.

Restrict access to cookies

You can ensure that cookies are sent securely and aren't accessed by
unintended parties or scripts in one of two ways: with the  Secure
attribute and the  HttpOnly attribute.

A cookie with the  Secure attribute is only sent to the server with an
encrypted request over the HTTPS protocol. It's never sent with
unsecured HTTP (except on localhost), which means man-in-the-middle
attackers can't access it easily. Insecure sites (with  http: in the
URL) can't set cookies with the  Secure attribute. However, don't assume
that  Secure prevents all access to sensitive information in cookies.
For example, someone with access to the client's hard disk (or
JavaScript if the  HttpOnly attribute isn't set) can read and modify the
information.

A cookie with the  HttpOnly attribute is inaccessible to the JavaScript
 Document.cookie API; it's only sent to the server. For example, cookies
that persist in server-side sessions don't need to be available to
JavaScript and should have the  HttpOnly attribute. This precaution
helps mitigate cross-site scripting ( XSS ) attacks.

Here's an example:

http

    Set-Cookie: id=a3fWa; Expires=Thu, 21 Oct 2021 07:28:00 GMT; Secure; HttpOnly

Define where cookies are sent

The  Domain and  Path attributes define the scope of a cookie: what URLs
the cookies should be sent to.

Domain attribute

The  Domain attribute specifies which server can receive a cookie.

If specified, then cookies are available on the server and its
subdomains. For example, if you set  Domain=mozilla.org , cookies are
available on mozilla.org and its subdomains like  developer.mozilla.org
.

If the server does not specify a  Domain , the cookies are available on
the server but not on its subdomains . Therefore, specifying  Domain is
less restrictive than omitting it. However, it can be helpful when
subdomains need to share information about a user.

Path attribute

The  Path attribute indicates a URL path that must exist in the
requested URL in order to send the  Cookie header. The  %x2F ("/")
character is considered a directory separator, and subdirectories match
as well.

For example, if you set  Path=/docs , these request paths match:

-    /docs
-    /docs/
-    /docs/Web/
-    /docs/Web/HTTP

But these request paths don't:

-    /
-    /docsets
-    /fr/docs

Path default value

If the  Path attribute is not set, its default value is computed from
the path of the URI that set the cookie, as follows:

-   If the path is empty, does not start with  "/" , or contains no more
    than one  "/" character, then the default value for  Path is  "/" .
-   Otherwise, the default value for  Path is the path from the start up
    to but not including the final  "/" character.

For example, if the cookie was set from  "https://example.org/a/b/c ,
then the default value of  Path would be  "/a/b" .

SameSite attribute

The  SameSite attribute lets servers specify whether/when cookies are
sent with cross-site requests (where Site is defined by the registrable
domain and the scheme : http or https). This provides some protection
against cross-site request forgery attacks ( CSRF ). It takes three
possible values:  Strict ,  Lax , and  None .

With  Strict , the browser only sends the cookie with requests from the
cookie's origin site.  Lax is similar, except the browser also sends the
cookie when the user navigates to the cookie's origin site (even if the
user is coming from a different site). For example, by following a link
from an external site.  None specifies that cookies are sent on both
originating and cross-site requests, but only in secure contexts (i.e.,
if  SameSite=None then the  Secure attribute must also be set). If no
 SameSite attribute is set, the cookie is treated as  Lax .

Here's an example:

http

    Set-Cookie: mykey=myvalue; SameSite=Strict

Note: The standard related to  SameSite recently changed (MDN documents
the new behavior above). See the cookies Browser compatibility table for
information about how the attribute is handled in specific browser
versions:

-    SameSite=Lax is the new default if  SameSite isn't specified.
    Previously, cookies were sent for all requests by default.
-   Cookies with  SameSite=None must now also specify the  Secure
    attribute (they require a secure context).
-   Cookies from the same domain are no longer considered to be from the
    same site if sent using a different scheme (  http: or  https: ).

Cookie prefixes

Because of the design of the cookie mechanism, a server can't confirm
that a cookie was set from a secure origin or even tell where a cookie
was originally set.

A vulnerable application on a subdomain can set a cookie with the
 Domain attribute, which gives access to that cookie on all other
subdomains. This mechanism can be abused in a session fixation attack.
See session fixation for primary mitigation methods.

As a defense-in-depth measure , however, you can use cookie prefixes to
assert specific facts about the cookie. Two prefixes are available:

 __Host-

    If a cookie name has this prefix, it's accepted in a  Set-Cookie
    header only if it's also marked with the  Secure attribute, was sent
    from a secure origin, does not include a  Domain attribute, and has
    the  Path attribute set to  / . This way, these cookies can be seen
    as "domain-locked".

 __Secure-

    If a cookie name has this prefix, it's accepted in a  Set-Cookie
    header only if it's marked with the  Secure attribute and was sent
    from a secure origin. This is weaker than the  __Host- prefix.

The browser will reject cookies with these prefixes that don't comply
with their restrictions. Note that this ensures that subdomain-created
cookies with prefixes are either confined to the subdomain or ignored
completely. As the application server only checks for a specific cookie
name when determining if the user is authenticated or a CSRF token is
correct, this effectively acts as a defense measure against session
fixation.

Note: On the application server, the web application must check for the
full cookie name including the prefix. User agents do not strip the
prefix from the cookie before sending it in a request's  Cookie header.

For more information about cookie prefixes and the current state of
browser support, see the Prefixes section of the Set-Cookie reference
article .

JavaScript access using Document.cookie

You can create new cookies via JavaScript using the  Document.cookie
property. You can access existing cookies from JavaScript as well if the
 HttpOnly flag isn't set.

js

    document.cookie = "yummy_cookie=choco";
    document.cookie = "tasty_cookie=strawberry";
    console.log(document.cookie);
    // logs "yummy_cookie=choco; tasty_cookie=strawberry"

Cookies created via JavaScript can't include the  HttpOnly flag.

Please note the security issues in the Security section below. Cookies
available to JavaScript can be stolen through XSS.

Security

Note: When you store information in cookies, keep in mind that all
cookie values are visible to, and can be changed by, the end user.
Depending on the application, you may want to use an opaque identifier
that the server looks up, or investigate alternative
authentication/confidentiality mechanisms such as JSON Web Tokens.

Ways to mitigate attacks involving cookies:

-   Use the  HttpOnly attribute to prevent access to cookie values via
    JavaScript.
-   Cookies that are used for sensitive information (such as indicating
    authentication) should have a short lifetime, with the  SameSite
    attribute set to  Strict or  Lax . (See SameSite attribute , above.)
    In browsers that support SameSite , this ensures that the
    authentication cookie isn't sent with cross-site requests. This
    would make the request effectively unauthenticated to the
    application server.

Tracking and privacy

Third-party cookies

A cookie is associated with a particular domain and scheme (such as
 http or  https ), and may also be associated with subdomains if the
 Set-Cookie  Domain attribute is set. If the cookie domain and scheme
match the current page, the cookie is considered to be from the same
site as the page, and is referred to as a first-party cookie .

If the domain and scheme are different, the cookie is not considered to
be from the same site, and is referred to as a third-party cookie .
While the server hosting a web page sets first-party cookies, the page
may contain components stored on servers in other domains, such as
images or other documents embedded in  <iframe> s. These components may
set third-party cookies.

Note: Third-party cookies are sometimes referred to as cross-site
cookies . This is arguably a more accurate name, as third-party cookies
imply ownership by a third-party company or organization. However, the
behavior and potential issues are the same whether or not you own all
the involved sites.

Typical use cases for third-party cookies include sharing user profile
information or collecting analytics across different related domains.
They are also often used for advertising and tracking users across the
web.

Note: Companies should disclose the types of cookies they use on their
sites for transparency purposes and to comply with regulations . For
example, see Google's notice on the types of cookies it uses and
Mozilla's Websites, Communications & Cookies Privacy Notice .

A third-party server can create a profile of a user's browsing history
and habits based on cookies sent to it by the same browser when
accessing multiple sites. Firefox, by default, blocks third-party
cookies that are known to contain trackers. Third-party cookies (or just
tracking cookies) may also be blocked by other browser settings or
extensions. Cookie blocking can cause some third-party components (such
as social media widgets) not to function as intended.

There are some useful features available for developers who wish to
respect user privacy, and minimize third-party tracking:

-   Servers can (and should) set the cookie SameSite attribute to
    specify whether or not third-party cookies may be sent.
-   Cookies Having Independent Partitioned State (CHIPS) enables
    developers to opt-in their cookies to partitioned storage, with a
    separate cookie jar per top-level site. This enables valid
    non-tracking uses of third-party cookies to continue working in
    browsers that do not allow cookies to be used for third-party
    tracking.

Cookie-related regulations

Legislation or regulations that cover the use of cookies include:

-   The General Data Privacy Regulation (GDPR) in the European Union
-   The ePrivacy Directive in the EU
-   The California Consumer Privacy Act

These regulations have global reach. They apply to any site on the World
Wide Web that users from these jurisdictions access (the EU and
California, with the caveat that California's law applies only to
entities with gross revenue over 25 million USD, among things).

These regulations include requirements such as:

-   Notifying users that your site uses cookies.
-   Allowing users to opt out of receiving some or all cookies.
-   Allowing users to use the bulk of your service without receiving
    cookies.

There may be other regulations that govern the use of cookies in your
locality. The burden is on you to know and comply with these
regulations. There are companies that offer "cookie banner" code that
helps you comply with these regulations.

Other ways to store information in the browser

Another approach to storing data in the browser is the Web Storage API .
The window.sessionStorage and window.localStorage properties correspond
to session and permanent cookies in duration, but have larger storage
limits than cookies, and are never sent to a server. More structured and
larger amounts of data can be stored using the IndexedDB API , or a
library built on it.

There are some techniques designed to recreate cookies after they're
deleted. These are known as "zombie" cookies. These techniques violate
the principles of user privacy and user control, may violate data
privacy regulations, and could expose a website using them to legal
liability.

See also

-    Set-Cookie
-    Cookie
-    Document.cookie
-    Navigator.cookieEnabled
-   Inspecting cookies using the Storage Inspector
-   Cookie specification: RFC 6265
-   HTTP cookie on Wikipedia
-   Cookies, the GDPR, and the ePrivacy Directive

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 20, 2024 by MDN contributors .
# Reason: CORS header 'Access-Control-Allow-Origin' does not match 'xyz' #
 ____                                 ____ ___  ____  ____  
|  _ \ ___  __ _ ___  ___  _ __  _   / ___/ _ \|  _ \/ ___| 
| |_) / _ \/ _` / __|/ _ \| '_ \(_) | |  | | | | |_) \___ \ 
|  _ <  __/ (_| \__ \ (_) | | | |_  | |__| |_| |  _ < ___) |
|_| \_\___|\__,_|___/\___/|_| |_(_)  \____\___/|_| \_\____/ 
                                                            
 _                    _           
| |__   ___  __ _  __| | ___ _ __ 
| '_ \ / _ \/ _` |/ _` |/ _ \ '__|
| | | |  __/ (_| | (_| |  __/ |   
|_| |_|\___|\__,_|\__,_|\___|_|   
                                  
 _    _                                ____            _             _       
( )  / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
|/  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
   / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
  /_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                             
    _    _ _                     ___       _       _       _ 
   / \  | | | _____      __     / _ \ _ __(_) __ _(_)_ __ ( )
  / _ \ | | |/ _ \ \ /\ / /____| | | | '__| |/ _` | | '_ \|/ 
 / ___ \| | | (_) \ V  V /_____| |_| | |  | | (_| | | | | |  
/_/   \_\_|_|\___/ \_/\_/       \___/|_|  |_|\__, |_|_| |_|  
                                             |___/           
     _                               _                     _       _     
  __| | ___   ___  ___   _ __   ___ | |_   _ __ ___   __ _| |_ ___| |__  
 / _` |/ _ \ / _ \/ __| | '_ \ / _ \| __| | '_ ` _ \ / _` | __/ __| '_ \ 
| (_| | (_) |  __/\__ \ | | | | (_) | |_  | | | | | | (_| | || (__| | | |
 \__,_|\___/ \___||___/ |_| |_|\___/ \__| |_| |_| |_|\__,_|\__\___|_| |_|
                                                                         
 _                _ 
( )_  ___   _ ___( )
|/\ \/ / | | |_  // 
   >  <| |_| |/ /   
  /_/\_\\__, /___|  
        |___/       
Reason: CORS header 'Access-Control-Allow-Origin' does not match 'xyz'

Reason

    Reason: CORS header 'Access-Control-Allow-Origin' does not match 'xyz'

What went wrong?

The origin making the request does not match the origin permitted by the
 Access-Control-Allow-Origin header. This error can also occur if the
response includes more than one  Access-Control-Allow-Origin header.

If the service your code is accessing uses a CORS request under your
control, make sure it is configured to include your origin in its
 Access-Control-Allow-Origin header. In addition, confirm that only one
such header is included in responses, and that it includes only a single
origin.

For example, in Apache, add a line such as the following to the server's
configuration (within the appropriate  <Directory> ,  <Location> ,
 <Files> , or  <VirtualHost> section). The configuration is typically
found in a  .conf file (  httpd.conf and  apache.conf are common names
for these), or in an  .htaccess file.

Warning: You must include the HTTPS or HTTP protocol as part of the
origin.

apacheconf

    Header set Access-Control-Allow-Origin 'origin'

For Nginx, the command to set up this header is:

nginx

    add_header 'Access-Control-Allow-Origin' 'origin'

See also

-   CORS errors
-   Glossary: CORS
-   CORS introduction
-   Enable CORS: I want to add CORS support to my server

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 25, 2023 by MDN contributors .
# Reason: CORS request did not succeed #
 ____                                 ____ ___  ____  ____  
|  _ \ ___  __ _ ___  ___  _ __  _   / ___/ _ \|  _ \/ ___| 
| |_) / _ \/ _` / __|/ _ \| '_ \(_) | |  | | | | |_) \___ \ 
|  _ <  __/ (_| \__ \ (_) | | | |_  | |__| |_| |  _ < ___) |
|_| \_\___|\__,_|___/\___/|_| |_(_)  \____\___/|_| \_\____/ 
                                                            
                                _         _ _     _               _   
 _ __ ___  __ _ _   _  ___  ___| |_    __| (_) __| |  _ __   ___ | |_ 
| '__/ _ \/ _` | | | |/ _ \/ __| __|  / _` | |/ _` | | '_ \ / _ \| __|
| | |  __/ (_| | |_| |  __/\__ \ |_  | (_| | | (_| | | | | | (_) | |_ 
|_|  \___|\__, |\__,_|\___||___/\__|  \__,_|_|\__,_| |_| |_|\___/ \__|
             |_|                                                      
                                 _ 
 ___ _   _  ___ ___ ___  ___  __| |
/ __| | | |/ __/ __/ _ \/ _ \/ _` |
\__ \ |_| | (_| (_|  __/  __/ (_| |
|___/\__,_|\___\___\___|\___|\__,_|
                                   
Reason: CORS request did not succeed

Reason

    Reason: CORS request did not succeed

What went wrong?

The HTTP request which makes use of CORS failed because the HTTP
connection failed at either the network or protocol level. The error is
not directly related to CORS, but is a fundamental network error of some
kind.

In many cases, it is caused by a browser plugin (e.g. an ad blocker or
privacy protector) blocking the request.

Other possible causes include:

-   Trying to access an  https resource that has an invalid certificate
    will cause this error.
-   Trying to access an  http resource from a page with an  https origin
    will also cause this error.
-   From Firefox 68 to Firefox 84,  https pages were not permitted to
    access  http://localhost . This has been changed with Bug 1488740 .
-   The server did not respond to the actual request (even if it
    responded to the Preflight request ). One scenario might be an HTTP
    service being developed that panicked without returning any data.

See also

-   CORS errors
-   Glossary: CORS
-   CORS introduction

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Sep 11, 2023 by MDN contributors .
# Reason: CORS disabled #
 ____                                 ____ ___  ____  ____  
|  _ \ ___  __ _ ___  ___  _ __  _   / ___/ _ \|  _ \/ ___| 
| |_) / _ \/ _` / __|/ _ \| '_ \(_) | |  | | | | |_) \___ \ 
|  _ <  __/ (_| \__ \ (_) | | | |_  | |__| |_| |  _ < ___) |
|_| \_\___|\__,_|___/\___/|_| |_(_)  \____\___/|_| \_\____/ 
                                                            
     _ _           _     _          _ 
  __| (_)___  __ _| |__ | | ___  __| |
 / _` | / __|/ _` | '_ \| |/ _ \/ _` |
| (_| | \__ \ (_| | |_) | |  __/ (_| |
 \__,_|_|___/\__,_|_.__/|_|\___|\__,_|
                                      
Reason: CORS disabled

Reason

    Reason: CORS disabled

What went wrong?

A request that needs to use CORS was attempted, but CORS is disabled in
the user's browser. When this happens, the user needs to turn CORS back
on in their browser.

In Firefox, the preference that disables CORS is  content.cors.disable .
Setting this to  true disables CORS, so whenever that's the case, CORS
requests will always fail with this error.

See also

-   CORS errors
-   Glossary: CORS
-   CORS introduction

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Reason: CORS request external redirect not allowed #
 ____                                 ____ ___  ____  ____  
|  _ \ ___  __ _ ___  ___  _ __  _   / ___/ _ \|  _ \/ ___| 
| |_) / _ \/ _` / __|/ _ \| '_ \(_) | |  | | | | |_) \___ \ 
|  _ <  __/ (_| \__ \ (_) | | | |_  | |__| |_| |  _ < ___) |
|_| \_\___|\__,_|___/\___/|_| |_(_)  \____\___/|_| \_\____/ 
                                                            
                                _               _                        _ 
 _ __ ___  __ _ _   _  ___  ___| |_    _____  _| |_ ___ _ __ _ __   __ _| |
| '__/ _ \/ _` | | | |/ _ \/ __| __|  / _ \ \/ / __/ _ \ '__| '_ \ / _` | |
| | |  __/ (_| | |_| |  __/\__ \ |_  |  __/>  <| ||  __/ |  | | | | (_| | |
|_|  \___|\__, |\__,_|\___||___/\__|  \___/_/\_\\__\___|_|  |_| |_|\__,_|_|
             |_|                                                           
              _ _               _                 _   
 _ __ ___  __| (_)_ __ ___  ___| |_   _ __   ___ | |_ 
| '__/ _ \/ _` | | '__/ _ \/ __| __| | '_ \ / _ \| __|
| | |  __/ (_| | | | |  __/ (__| |_  | | | | (_) | |_ 
|_|  \___|\__,_|_|_|  \___|\___|\__| |_| |_|\___/ \__|
                                                      
       _ _                       _ 
  __ _| | | _____      _____  __| |
 / _` | | |/ _ \ \ /\ / / _ \/ _` |
| (_| | | | (_) \ V  V /  __/ (_| |
 \__,_|_|_|\___/ \_/\_/ \___|\__,_|
                                   
Reason: CORS request external redirect not allowed

Reason

    Reason: CORS request external redirect not allowed

What went wrong?

The CORS request was responded to by the server with an HTTP redirect to
a URL on a different origin than the original request, which is not
permitted during CORS requests.

For example, if the page  https://service.tld/fetchdata were requested,
and the HTTP response is "301 Moved Permanently", "307 Temporary
Redirect", or "308 Permanent Redirect" with a  Location of
 https://anotherservice.net/getdata , the CORS request will fail in this
manner.

To fix the problem, update your code to use the new URL as reported by
the redirect, thereby avoiding the redirect.

See also

-   CORS errors
-   Glossary: CORS
-   CORS introduction

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Reason: invalid token 'xyz' in CORS header 'Access-Control-Allow-Headers' #
 ____                                _                 _ _     _ 
|  _ \ ___  __ _ ___  ___  _ __  _  (_)_ ____   ____ _| (_) __| |
| |_) / _ \/ _` / __|/ _ \| '_ \(_) | | '_ \ \ / / _` | | |/ _` |
|  _ <  __/ (_| \__ \ (_) | | | |_  | | | | \ V / (_| | | | (_| |
|_| \_\___|\__,_|___/\___/|_| |_(_) |_|_| |_|\_/ \__,_|_|_|\__,_|
                                                                 
 _        _                _                _   _       
| |_ ___ | | _____ _ __   ( )_  ___   _ ___( ) (_)_ __  
| __/ _ \| |/ / _ \ '_ \  |/\ \/ / | | |_  //  | | '_ \ 
| || (_) |   <  __/ | | |    >  <| |_| |/ /    | | | | |
 \__\___/|_|\_\___|_| |_|   /_/\_\\__, /___|   |_|_| |_|
                                  |___/                 
  ____ ___  ____  ____    _                    _           
 / ___/ _ \|  _ \/ ___|  | |__   ___  __ _  __| | ___ _ __ 
| |  | | | | |_) \___ \  | '_ \ / _ \/ _` |/ _` |/ _ \ '__|
| |__| |_| |  _ < ___) | | | | |  __/ (_| | (_| |  __/ |   
 \____\___/|_| \_\____/  |_| |_|\___|\__,_|\__,_|\___|_|   
                                                           
 _    _                                ____            _             _       
( )  / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
|/  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
   / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
  /_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                             
    _    _ _                    _   _                _               _ 
   / \  | | | _____      __    | | | | ___  __ _  __| | ___ _ __ ___( )
  / _ \ | | |/ _ \ \ /\ / /____| |_| |/ _ \/ _` |/ _` |/ _ \ '__/ __|/ 
 / ___ \| | | (_) \ V  V /_____|  _  |  __/ (_| | (_| |  __/ |  \__ \  
/_/   \_\_|_|\___/ \_/\_/      |_| |_|\___|\__,_|\__,_|\___|_|  |___/  
                                                                       
Reason: invalid token 'xyz' in CORS header 'Access-Control-Allow-Headers'

Reason

    Reason: invalid token 'xyz' in CORS header 'Access-Control-Allow-Headers'

What went wrong?

The response to the CORS request that was sent by the server includes an
 Access-Control-Allow-Headers header which includes at least one invalid
header name.

The  Access-Control-Allow-Headers header is sent by the server in
response to a preflight request ; it lets the client know which HTTP
headers are permitted in CORS requests. If the client user agent finds
among the comma-delineated values provided by the header any header name
it does not recognize, this error occurs.

This is a problem that most likely can only be fixed on the server side,
by modifying the server's configuration to no longer send the invalid or
unknown header name with the  Access-Control-Allow-Headers header. It
may also be worth checking to ensure that the user agent or HTTP library
you're using on the client is up-to-date.

See also

-   CORS errors
-   Glossary: CORS
-   CORS introduction
-   HTTP headers

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Reason: invalid token 'xyz' in CORS header 'Access-Control-Allow-Methods' #
 ____                                _                 _ _     _ 
|  _ \ ___  __ _ ___  ___  _ __  _  (_)_ ____   ____ _| (_) __| |
| |_) / _ \/ _` / __|/ _ \| '_ \(_) | | '_ \ \ / / _` | | |/ _` |
|  _ <  __/ (_| \__ \ (_) | | | |_  | | | | \ V / (_| | | | (_| |
|_| \_\___|\__,_|___/\___/|_| |_(_) |_|_| |_|\_/ \__,_|_|_|\__,_|
                                                                 
 _        _                _                _   _       
| |_ ___ | | _____ _ __   ( )_  ___   _ ___( ) (_)_ __  
| __/ _ \| |/ / _ \ '_ \  |/\ \/ / | | |_  //  | | '_ \ 
| || (_) |   <  __/ | | |    >  <| |_| |/ /    | | | | |
 \__\___/|_|\_\___|_| |_|   /_/\_\\__, /___|   |_|_| |_|
                                  |___/                 
  ____ ___  ____  ____    _                    _           
 / ___/ _ \|  _ \/ ___|  | |__   ___  __ _  __| | ___ _ __ 
| |  | | | | |_) \___ \  | '_ \ / _ \/ _` |/ _` |/ _ \ '__|
| |__| |_| |  _ < ___) | | | | |  __/ (_| | (_| |  __/ |   
 \____\___/|_| \_\____/  |_| |_|\___|\__,_|\__,_|\___|_|   
                                                           
 _    _                                ____            _             _       
( )  / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
|/  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
   / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
  /_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                             
    _    _ _                    __  __      _   _               _     _ 
   / \  | | | _____      __    |  \/  | ___| |_| |__   ___   __| |___( )
  / _ \ | | |/ _ \ \ /\ / /____| |\/| |/ _ \ __| '_ \ / _ \ / _` / __|/ 
 / ___ \| | | (_) \ V  V /_____| |  | |  __/ |_| | | | (_) | (_| \__ \  
/_/   \_\_|_|\___/ \_/\_/      |_|  |_|\___|\__|_| |_|\___/ \__,_|___/  
                                                                        
Reason: invalid token 'xyz' in CORS header 'Access-Control-Allow-Methods'

Reason

    Reason: invalid token 'xyz' in CORS header 'Access-Control-Allow-Methods'

What went wrong?

The response to the CORS request that was sent by the server includes an
 Access-Control-Allow-Methods header which includes at least one invalid
method name.

The  Access-Control-Allow-Methods header is sent by the server to let
the client know what HTTP request methods it supports for CORS requests.
The header's value is a comma-delineated string of HTTP method names,
such as  GET ,  POST , or  HEAD . If any of the specified values are not
recognized by the client user agent , this error occurs.

This is a problem that most likely can only be fixed on the server side,
by modifying the server's configuration to no longer send the invalid or
unknown method name with the  Access-Control-Allow-Methods header. It
may also be worth checking to ensure that the user agent or HTTP library
you're using on the client is up-to-date.

See also

-   CORS errors
-   Glossary: CORS
-   CORS introduction
-   HTTP request methods

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Reason: Did not find method in CORS header 'Access-Control-Allow-Methods' #
 ____                                ____  _     _               _   
|  _ \ ___  __ _ ___  ___  _ __  _  |  _ \(_) __| |  _ __   ___ | |_ 
| |_) / _ \/ _` / __|/ _ \| '_ \(_) | | | | |/ _` | | '_ \ / _ \| __|
|  _ <  __/ (_| \__ \ (_) | | | |_  | |_| | | (_| | | | | | (_) | |_ 
|_| \_\___|\__,_|___/\___/|_| |_(_) |____/|_|\__,_| |_| |_|\___/ \__|
                                                                     
  __ _           _                  _   _               _   _       
 / _(_)_ __   __| |  _ __ ___   ___| |_| |__   ___   __| | (_)_ __  
| |_| | '_ \ / _` | | '_ ` _ \ / _ \ __| '_ \ / _ \ / _` | | | '_ \ 
|  _| | | | | (_| | | | | | | |  __/ |_| | | | (_) | (_| | | | | | |
|_| |_|_| |_|\__,_| |_| |_| |_|\___|\__|_| |_|\___/ \__,_| |_|_| |_|
                                                                    
  ____ ___  ____  ____    _                    _           
 / ___/ _ \|  _ \/ ___|  | |__   ___  __ _  __| | ___ _ __ 
| |  | | | | |_) \___ \  | '_ \ / _ \/ _` |/ _` |/ _ \ '__|
| |__| |_| |  _ < ___) | | | | |  __/ (_| | (_| |  __/ |   
 \____\___/|_| \_\____/  |_| |_|\___|\__,_|\__,_|\___|_|   
                                                           
 _    _                                ____            _             _       
( )  / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
|/  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
   / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
  /_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                             
    _    _ _                    __  __      _   _               _     _ 
   / \  | | | _____      __    |  \/  | ___| |_| |__   ___   __| |___( )
  / _ \ | | |/ _ \ \ /\ / /____| |\/| |/ _ \ __| '_ \ / _ \ / _` / __|/ 
 / ___ \| | | (_) \ V  V /_____| |  | |  __/ |_| | | | (_) | (_| \__ \  
/_/   \_\_|_|\___/ \_/\_/      |_|  |_|\___|\__|_| |_|\___/ \__,_|___/  
                                                                        
Reason: Did not find method in CORS header 'Access-Control-Allow-Methods'

Reason

    Reason: Did not find method in CORS header 'Access-Control-Allow-Methods'

What went wrong?

The HTTP method being used by the CORS request is not included in the
list of methods specified by the response's
 Access-Control-Allow-Methods header. This header specifies a
comma-delimited list of the HTTP methods which may be used when using
CORS to access the URL specified in the request; if the request is using
any other method, this error occurs.

For example, if the response includes:

http

    Access-Control-Allow-Methods: GET,HEAD,POST

Trying to use a  PUT request will fail with this error.

Make sure your code only uses the permitted HTTP methods when accessing
the service.

Note: If the server includes any unrecognized or undefined method names
in its  Access-Control-Allow-methods header, a different error occurs:
 Reason: invalid token 'xyz' in CORS header 'Access-Control-Allow-Methods'
.

See also

-   CORS errors
-   Glossary: CORS
-   CORS introduction
-   HTTP request methods

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 14, 2023 by MDN contributors .
# Reason: expected 'true' in CORS header 'Access-Control-Allow-Credentials' #
 ____                                                          _           _ 
|  _ \ ___  __ _ ___  ___  _ __  _    _____  ___ __   ___  ___| |_ ___  __| |
| |_) / _ \/ _` / __|/ _ \| '_ \(_)  / _ \ \/ / '_ \ / _ \/ __| __/ _ \/ _` |
|  _ <  __/ (_| \__ \ (_) | | | |_  |  __/>  <| |_) |  __/ (__| ||  __/ (_| |
|_| \_\___|\__,_|___/\___/|_| |_(_)  \___/_/\_\ .__/ \___|\___|\__\___|\__,_|
                                              |_|                            
 _ _                   _   _          ____ ___  ____  ____  
( ) |_ _ __ _   _  ___( ) (_)_ __    / ___/ _ \|  _ \/ ___| 
|/| __| '__| | | |/ _ \/  | | '_ \  | |  | | | | |_) \___ \ 
  | |_| |  | |_| |  __/   | | | | | | |__| |_| |  _ < ___) |
   \__|_|   \__,_|\___|   |_|_| |_|  \____\___/|_| \_\____/ 
                                                            
 _                    _           
| |__   ___  __ _  __| | ___ _ __ 
| '_ \ / _ \/ _` |/ _` |/ _ \ '__|
| | | |  __/ (_| | (_| |  __/ |   
|_| |_|\___|\__,_|\__,_|\___|_|   
                                  
 _    _                                ____            _             _       
( )  / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
|/  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
   / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
  /_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                             
    _    _ _                     ____              _            _   _       _ 
   / \  | | | _____      __     / ___|_ __ ___  __| | ___ _ __ | |_(_) __ _| |
  / _ \ | | |/ _ \ \ /\ / /____| |   | '__/ _ \/ _` |/ _ \ '_ \| __| |/ _` | |
 / ___ \| | | (_) \ V  V /_____| |___| | |  __/ (_| |  __/ | | | |_| | (_| | |
/_/   \_\_|_|\___/ \_/\_/       \____|_|  \___|\__,_|\___|_| |_|\__|_|\__,_|_|
                                                                              
     _ 
 ___( )
/ __|/ 
\__ \  
|___/  
       
Reason: expected 'true' in CORS header 'Access-Control-Allow-Credentials'

Reason

    Reason: expected 'true' in CORS header 'Access-Control-Allow-Credentials'

What went wrong?

The CORS request requires that the server permit the use of credentials,
but the server's  Access-Control-Allow-Credentials header's value isn't
set to  true to enable their use.

To fix this problem on the client side, revise the code to not request
the use of credentials.

-   If using the Fetch API , make sure  Request.credentials is  "omit" .
-   If the request is being issued using  XMLHttpRequest , make sure
    you're not setting  withCredentials to  true .
-   If using Server-sent events , make sure  EventSource.withCredentials
    is  false (it's the default value).

To eliminate this error by changing the server's configuration, adjust
the server's configuration to set the  Access-Control-Allow-Credentials
header's value to  true .

See also

-   CORS errors
-   Glossary: CORS
-   CORS introduction

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 16, 2023 by MDN contributors .
# Reason: missing token 'xyz' in CORS header 'Access-Control-Allow-Headers' from CORS preflight channel #
 ____                                          _         _             
|  _ \ ___  __ _ ___  ___  _ __  _   _ __ ___ (_)___ ___(_)_ __   __ _ 
| |_) / _ \/ _` / __|/ _ \| '_ \(_) | '_ ` _ \| / __/ __| | '_ \ / _` |
|  _ <  __/ (_| \__ \ (_) | | | |_  | | | | | | \__ \__ \ | | | | (_| |
|_| \_\___|\__,_|___/\___/|_| |_(_) |_| |_| |_|_|___/___/_|_| |_|\__, |
                                                                 |___/ 
 _        _                _                _   _       
| |_ ___ | | _____ _ __   ( )_  ___   _ ___( ) (_)_ __  
| __/ _ \| |/ / _ \ '_ \  |/\ \/ / | | |_  //  | | '_ \ 
| || (_) |   <  __/ | | |    >  <| |_| |/ /    | | | | |
 \__\___/|_|\_\___|_| |_|   /_/\_\\__, /___|   |_|_| |_|
                                  |___/                 
  ____ ___  ____  ____    _                    _           
 / ___/ _ \|  _ \/ ___|  | |__   ___  __ _  __| | ___ _ __ 
| |  | | | | |_) \___ \  | '_ \ / _ \/ _` |/ _` |/ _ \ '__|
| |__| |_| |  _ < ___) | | | | |  __/ (_| | (_| |  __/ |   
 \____\___/|_| \_\____/  |_| |_|\___|\__,_|\__,_|\___|_|   
                                                           
 _    _                                ____            _             _       
( )  / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
|/  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
   / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
  /_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                             
    _    _ _                    _   _                _               _ 
   / \  | | | _____      __    | | | | ___  __ _  __| | ___ _ __ ___( )
  / _ \ | | |/ _ \ \ /\ / /____| |_| |/ _ \/ _` |/ _` |/ _ \ '__/ __|/ 
 / ___ \| | | (_) \ V  V /_____|  _  |  __/ (_| | (_| |  __/ |  \__ \  
/_/   \_\_|_|\___/ \_/\_/      |_| |_|\___|\__,_|\__,_|\___|_|  |___/  
                                                                       
  __                        ____ ___  ____  ____  
 / _|_ __ ___  _ __ ___    / ___/ _ \|  _ \/ ___| 
| |_| '__/ _ \| '_ ` _ \  | |  | | | | |_) \___ \ 
|  _| | | (_) | | | | | | | |__| |_| |  _ < ___) |
|_| |_|  \___/|_| |_| |_|  \____\___/|_| \_\____/ 
                                                  
                 __ _ _       _     _          _                            _ 
 _ __  _ __ ___ / _| (_) __ _| |__ | |_    ___| |__   __ _ _ __  _ __   ___| |
| '_ \| '__/ _ \ |_| | |/ _` | '_ \| __|  / __| '_ \ / _` | '_ \| '_ \ / _ \ |
| |_) | | |  __/  _| | | (_| | | | | |_  | (__| | | | (_| | | | | | | |  __/ |
| .__/|_|  \___|_| |_|_|\__, |_| |_|\__|  \___|_| |_|\__,_|_| |_|_| |_|\___|_|
|_|                     |___/                                                 
Reason: missing token 'xyz' in CORS header 'Access-Control-Allow-Headers' from CORS preflight channel

Reason

    Reason: missing token 'xyz' in CORS header 'Access-Control-Allow-Headers' from CORS preflight channel

What went wrong?

The  Access-Control-Allow-Headers header is sent by the server to let
the client know which headers it supports for CORS requests. The value
of  Access-Control-Allow-Headers should be a comma-delineated list of
header names, such as "  X-Custom-Information " or any of the standard
but non-basic header names (which are always allowed).

This error occurs when attempting to preflight a header that is not
expressly allowed (that is, it's not included in the list specified by
the  Access-Control-Allow-Headers header sent by the server). To fix
this, the server needs to be updated so that it allows the indicated
header, or you need to avoid using that header.

See also

-   CORS errors
-   Glossary: CORS
-   CORS introduction
-   HTTP headers

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 3, 2023 by MDN contributors .
# Reason: CORS header 'Access-Control-Allow-Origin' missing #
 ____                                 ____ ___  ____  ____  
|  _ \ ___  __ _ ___  ___  _ __  _   / ___/ _ \|  _ \/ ___| 
| |_) / _ \/ _` / __|/ _ \| '_ \(_) | |  | | | | |_) \___ \ 
|  _ <  __/ (_| \__ \ (_) | | | |_  | |__| |_| |  _ < ___) |
|_| \_\___|\__,_|___/\___/|_| |_(_)  \____\___/|_| \_\____/ 
                                                            
 _                    _           
| |__   ___  __ _  __| | ___ _ __ 
| '_ \ / _ \/ _` |/ _` |/ _ \ '__|
| | | |  __/ (_| | (_| |  __/ |   
|_| |_|\___|\__,_|\__,_|\___|_|   
                                  
 _    _                                ____            _             _       
( )  / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
|/  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
   / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
  /_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                             
    _    _ _                     ___       _       _       _ 
   / \  | | | _____      __     / _ \ _ __(_) __ _(_)_ __ ( )
  / _ \ | | |/ _ \ \ /\ / /____| | | | '__| |/ _` | | '_ \|/ 
 / ___ \| | | (_) \ V  V /_____| |_| | |  | | (_| | | | | |  
/_/   \_\_|_|\___/ \_/\_/       \___/|_|  |_|\__, |_|_| |_|  
                                             |___/           
           _         _             
 _ __ ___ (_)___ ___(_)_ __   __ _ 
| '_ ` _ \| / __/ __| | '_ \ / _` |
| | | | | | \__ \__ \ | | | | (_| |
|_| |_| |_|_|___/___/_|_| |_|\__, |
                             |___/ 
Reason: CORS header 'Access-Control-Allow-Origin' missing

Reason

    Reason: CORS header 'Access-Control-Allow-Origin' missing

What went wrong?

The response to the CORS request is missing the required
 Access-Control-Allow-Origin header, which is used to determine whether
or not the resource can be accessed by content operating within the
current origin.

If the server is under your control, add the origin of the requesting
site to the set of domains permitted access by adding it to the
 Access-Control-Allow-Origin header's value.

For example, to allow a site at  https://example.com to access the
resource using CORS, the header should be:

http

    Access-Control-Allow-Origin: https://example.com

You can also configure a site to allow any site to access it by using
the  * wildcard. You should only use this for public APIs. Private APIs
should never use  * , and should instead have a specific domain or
domains set. In addition, the wildcard only works for requests made with
the  crossorigin attribute set to  anonymous , and it prevents sending
credentials like cookies in requests.

http

    Access-Control-Allow-Origin: *

Warning: Using the wildcard to allow all sites to access a private API
is a bad idea.

To allow any site to make CORS requests without using the  * wildcard
(for example, to enable credentials), your server must read the value of
the request's  Origin header and use that value to set
 Access-Control-Allow-Origin , and must also set a  Vary: Origin header
to indicate that some headers are being set dynamically depending on the
origin.

Examples for common web servers

The exact directive for setting headers depends on your web server.

In the examples below,

In Apache ( docs ), add a line such as the following to the server's
configuration (within the appropriate  <Directory> ,  <Location> ,
 <Files> , or  <VirtualHost> section). The configuration is typically
found in a  .conf file (  httpd.conf and  apache.conf are common names
for these), or in an  .htaccess file:

apacheconf

    Header set Access-Control-Allow-Origin 'https://example.com'

For Nginx ( docs ), the command to set up this header is:

nginx

    add_header 'Access-Control-Allow-Origin' 'https://example.com' always;

See also

-   CORS errors
-   Glossary: CORS
-   CORS introduction

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 25, 2023 by MDN contributors .
# Reason: Multiple CORS header 'Access-Control-Allow-Origin' not allowed #
 ____                                __  __       _ _   _       _      
|  _ \ ___  __ _ ___  ___  _ __  _  |  \/  |_   _| | |_(_)_ __ | | ___ 
| |_) / _ \/ _` / __|/ _ \| '_ \(_) | |\/| | | | | | __| | '_ \| |/ _ \
|  _ <  __/ (_| \__ \ (_) | | | |_  | |  | | |_| | | |_| | |_) | |  __/
|_| \_\___|\__,_|___/\___/|_| |_(_) |_|  |_|\__,_|_|\__|_| .__/|_|\___|
                                                         |_|           
  ____ ___  ____  ____    _                    _           
 / ___/ _ \|  _ \/ ___|  | |__   ___  __ _  __| | ___ _ __ 
| |  | | | | |_) \___ \  | '_ \ / _ \/ _` |/ _` |/ _ \ '__|
| |__| |_| |  _ < ___) | | | | |  __/ (_| | (_| |  __/ |   
 \____\___/|_| \_\____/  |_| |_|\___|\__,_|\__,_|\___|_|   
                                                           
 _    _                                ____            _             _       
( )  / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
|/  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
   / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
  /_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                             
    _    _ _                     ___       _       _       _               _   
   / \  | | | _____      __     / _ \ _ __(_) __ _(_)_ __ ( )  _ __   ___ | |_ 
  / _ \ | | |/ _ \ \ /\ / /____| | | | '__| |/ _` | | '_ \|/  | '_ \ / _ \| __|
 / ___ \| | | (_) \ V  V /_____| |_| | |  | | (_| | | | | |   | | | | (_) | |_ 
/_/   \_\_|_|\___/ \_/\_/       \___/|_|  |_|\__, |_|_| |_|   |_| |_|\___/ \__|
                                             |___/                             
       _ _                       _ 
  __ _| | | _____      _____  __| |
 / _` | | |/ _ \ \ /\ / / _ \/ _` |
| (_| | | | (_) \ V  V /  __/ (_| |
 \__,_|_|_|\___/ \_/\_/ \___|\__,_|
                                   
Reason: Multiple CORS header 'Access-Control-Allow-Origin' not allowed

Reason

    Reason: Multiple CORS header 'Access-Control-Allow-Origin' not allowed

What went wrong?

More than one  Access-Control-Allow-Origin header was sent by the
server. This isn't allowed.

If you have access to the server you can change your implementation to
echo back an origin in the  Access-Control-Allow-Origin header. You
cannot send back a list of origins, because browsers only accept a value
that is either a single origin or null

See also

-   CORS errors
-   Glossary: CORS
-   CORS introduction
-   Enable CORS: I want to add CORS support to my server

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Reason: Credential is not supported if the CORS header 'Access-Control-Allow-Origin' is '*' #
 ____                              
|  _ \ ___  __ _ ___  ___  _ __  _ 
| |_) / _ \/ _` / __|/ _ \| '_ \(_)
|  _ <  __/ (_| \__ \ (_) | | | |_ 
|_| \_\___|\__,_|___/\___/|_| |_(_)
                                   
  ____              _            _   _       _   _                   _   
 / ___|_ __ ___  __| | ___ _ __ | |_(_) __ _| | (_)___   _ __   ___ | |_ 
| |   | '__/ _ \/ _` |/ _ \ '_ \| __| |/ _` | | | / __| | '_ \ / _ \| __|
| |___| | |  __/ (_| |  __/ | | | |_| | (_| | | | \__ \ | | | | (_) | |_ 
 \____|_|  \___|\__,_|\___|_| |_|\__|_|\__,_|_| |_|___/ |_| |_|\___/ \__|
                                                                         
                                  _           _   _  __   _   _          
 ___ _   _ _ __  _ __   ___  _ __| |_ ___  __| | (_)/ _| | |_| |__   ___ 
/ __| | | | '_ \| '_ \ / _ \| '__| __/ _ \/ _` | | | |_  | __| '_ \ / _ \
\__ \ |_| | |_) | |_) | (_) | |  | ||  __/ (_| | | |  _| | |_| | | |  __/
|___/\__,_| .__/| .__/ \___/|_|   \__\___|\__,_| |_|_|    \__|_| |_|\___|
          |_|   |_|                                                      
  ____ ___  ____  ____    _                    _           
 / ___/ _ \|  _ \/ ___|  | |__   ___  __ _  __| | ___ _ __ 
| |  | | | | |_) \___ \  | '_ \ / _ \/ _` |/ _` |/ _ \ '__|
| |__| |_| |  _ < ___) | | | | |  __/ (_| | (_| |  __/ |   
 \____\___/|_| \_\____/  |_| |_|\___|\__,_|\__,_|\___|_|   
                                                           
 _    _                                ____            _             _       
( )  / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
|/  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
   / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
  /_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                             
    _    _ _                     ___       _       _       _   _     
   / \  | | | _____      __     / _ \ _ __(_) __ _(_)_ __ ( ) (_)___ 
  / _ \ | | |/ _ \ \ /\ / /____| | | | '__| |/ _` | | '_ \|/  | / __|
 / ___ \| | | (_) \ V  V /_____| |_| | |  | | (_| | | | | |   | \__ \
/_/   \_\_|_|\___/ \_/\_/       \___/|_|  |_|\__, |_|_| |_|   |_|___/
                                             |___/                   
 _      _ 
( )_/\_( )
|/\    // 
  /_  _\  
    \/    
          
Reason: Credential is not supported if the CORS header 'Access-Control-Allow-Origin' is '*'

Reason

    Reason: Credential is not supported if the CORS header 'Access-Control-Allow-Origin' is '*'

What went wrong?

The CORS request was attempted with the credentials flag set, but the
server is configured using the wildcard (  "*" ) as the value of
 Access-Control-Allow-Origin , which doesn't allow the use of
credentials.

To correct this problem on the client side, ensure that the credentials
flag's value is  false when issuing your CORS request.

-   If using the Fetch API , make sure  Request.credentials is  "omit" .
-   If the request is being issued using  XMLHttpRequest , make sure
    you're not setting  withCredentials to  true .
-   If using Server-sent events , make sure  EventSource.withCredentials
    is  false (it's the default value).

If, instead, you need to adjust the server's behavior, you'll need to
change the value of  Access-Control-Allow-Origin to grant access to the
origin from which the client is loaded.

See also

-   CORS errors
-   Glossary: CORS
-   CORS introduction

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 16, 2023 by MDN contributors .
# Reason: CORS header 'Origin' cannot be added #
 ____                                 ____ ___  ____  ____  
|  _ \ ___  __ _ ___  ___  _ __  _   / ___/ _ \|  _ \/ ___| 
| |_) / _ \/ _` / __|/ _ \| '_ \(_) | |  | | | | |_) \___ \ 
|  _ <  __/ (_| \__ \ (_) | | | |_  | |__| |_| |  _ < ___) |
|_| \_\___|\__,_|___/\___/|_| |_(_)  \____\___/|_| \_\____/ 
                                                            
 _                    _             _  ___       _       _       _ 
| |__   ___  __ _  __| | ___ _ __  ( )/ _ \ _ __(_) __ _(_)_ __ ( )
| '_ \ / _ \/ _` |/ _` |/ _ \ '__| |/| | | | '__| |/ _` | | '_ \|/ 
| | | |  __/ (_| | (_| |  __/ |      | |_| | |  | | (_| | | | | |  
|_| |_|\___|\__,_|\__,_|\___|_|       \___/|_|  |_|\__, |_|_| |_|  
                                                   |___/           
                             _     _                      _     _          _ 
  ___ __ _ _ __  _ __   ___ | |_  | |__   ___    __ _  __| | __| | ___  __| |
 / __/ _` | '_ \| '_ \ / _ \| __| | '_ \ / _ \  / _` |/ _` |/ _` |/ _ \/ _` |
| (_| (_| | | | | | | | (_) | |_  | |_) |  __/ | (_| | (_| | (_| |  __/ (_| |
 \___\__,_|_| |_|_| |_|\___/ \__| |_.__/ \___|  \__,_|\__,_|\__,_|\___|\__,_|
                                                                             
Reason: CORS header 'Origin' cannot be added

Reason

    Reason: CORS header 'Origin' cannot be added

What went wrong?

The user agent was unable to add the required  Origin header to the HTTP
request. All CORS requests must have an  Origin header.

This can happen if the JavaScript code is running with enhanced
privileges allowing it access to multiple domains' content, for example.

See also

-   CORS errors
-   Glossary: CORS
-   CORS introduction

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Reason: CORS preflight channel did not succeed #
 ____                                 ____ ___  ____  ____  
|  _ \ ___  __ _ ___  ___  _ __  _   / ___/ _ \|  _ \/ ___| 
| |_) / _ \/ _` / __|/ _ \| '_ \(_) | |  | | | | |_) \___ \ 
|  _ <  __/ (_| \__ \ (_) | | | |_  | |__| |_| |  _ < ___) |
|_| \_\___|\__,_|___/\___/|_| |_(_)  \____\___/|_| \_\____/ 
                                                            
                 __ _ _       _     _          _                            _ 
 _ __  _ __ ___ / _| (_) __ _| |__ | |_    ___| |__   __ _ _ __  _ __   ___| |
| '_ \| '__/ _ \ |_| | |/ _` | '_ \| __|  / __| '_ \ / _` | '_ \| '_ \ / _ \ |
| |_) | | |  __/  _| | | (_| | | | | |_  | (__| | | | (_| | | | | | | |  __/ |
| .__/|_|  \___|_| |_|_|\__, |_| |_|\__|  \___|_| |_|\__,_|_| |_|_| |_|\___|_|
|_|                     |___/                                                 
     _ _     _               _                                     _ 
  __| (_) __| |  _ __   ___ | |_   ___ _   _  ___ ___ ___  ___  __| |
 / _` | |/ _` | | '_ \ / _ \| __| / __| | | |/ __/ __/ _ \/ _ \/ _` |
| (_| | | (_| | | | | | (_) | |_  \__ \ |_| | (_| (_|  __/  __/ (_| |
 \__,_|_|\__,_| |_| |_|\___/ \__| |___/\__,_|\___\___\___|\___|\__,_|
                                                                     
Reason: CORS preflight channel did not succeed

Reason

    Reason: CORS preflight channel did not succeed

What went wrong?

The CORS request requires preflight, preflighting could not be
performed. There are a couple of reasons why preflighting might fail:

-   A cross-site request has previously been performed that already did
    a preflight, and doing the preflight again is not permitted. Make
    sure your code only preflights once per connection.
-   The preflight request suffered any kind of networking error that
    might ordinarily occur.

See also

-   CORS errors
-   Glossary: CORS
-   CORS introduction

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Reason: CORS request not HTTP #
 ____                                 ____ ___  ____  ____  
|  _ \ ___  __ _ ___  ___  _ __  _   / ___/ _ \|  _ \/ ___| 
| |_) / _ \/ _` / __|/ _ \| '_ \(_) | |  | | | | |_) \___ \ 
|  _ <  __/ (_| \__ \ (_) | | | |_  | |__| |_| |  _ < ___) |
|_| \_\___|\__,_|___/\___/|_| |_(_)  \____\___/|_| \_\____/ 
                                                            
                                _                 _   
 _ __ ___  __ _ _   _  ___  ___| |_   _ __   ___ | |_ 
| '__/ _ \/ _` | | | |/ _ \/ __| __| | '_ \ / _ \| __|
| | |  __/ (_| | |_| |  __/\__ \ |_  | | | | (_) | |_ 
|_|  \___|\__, |\__,_|\___||___/\__| |_| |_|\___/ \__|
             |_|                                      
 _   _ _____ _____ ____  
| | | |_   _|_   _|  _ \ 
| |_| | | |   | | | |_) |
|  _  | | |   | | |  __/ 
|_| |_| |_|   |_| |_|    
                         
Reason: CORS request not HTTP

Reason

    Reason: CORS request not HTTP

What went wrong?

CORS requests may only use the HTTP or HTTPS URL scheme, but the URL
specified by the request is of a different type. This often occurs if
the URL specifies a local file, using the  file:/// scheme.

To fix this problem, make sure you use HTTPS URLs when issuing requests
involving CORS, such as  fetch() ,  XMLHttpRequest , Web Fonts (
 @font-face ), and WebGL textures , and XSL stylesheets.

Loading a local file

Local files from the same directory and subdirectories were historically
treated as being from the same origin . This meant that a file and all
its resources could be loaded from a local directory or subdirectory
during testing, without triggering a CORS error.

Unfortunately this had security implications, as noted in this advisory:
CVE-2019-11730 . Many browsers, including Firefox and Chrome, now treat
all local files as having opaque origins (by default). As a result,
loading a local file with included local resources will now result in
CORS errors.

Developers who need to perform local testing should now set up a local
server . As all files are served from the same scheme and domain (
 localhost ) they all have the same origin, and do not trigger
cross-origin errors.

Note: This change is in line with the URL specification , which leaves
the origin behavior for files to the implementation, but recommends that
file origins are treated as opaque if in doubt.

See also

-   CORS errors
-   CORS introduction
-   What is a URL?

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 16, 2023 by MDN contributors .
# CORS errors #
  ____ ___  ____  ____                                 
 / ___/ _ \|  _ \/ ___|    ___ _ __ _ __ ___  _ __ ___ 
| |  | | | | |_) \___ \   / _ \ '__| '__/ _ \| '__/ __|
| |__| |_| |  _ < ___) | |  __/ |  | | | (_) | |  \__ \
 \____\___/|_| \_\____/   \___|_|  |_|  \___/|_|  |___/
                                                       
CORS errors

Cross-Origin Resource Sharing ( CORS ) is a standard that allows a
server to relax the same-origin policy . This is used to explicitly
allow some cross-origin requests while rejecting others. For example, if
a site offers an embeddable service, it may be necessary to relax
certain restrictions. Setting up such a CORS configuration isn't
necessarily easy and may present some challenges. In these pages, we'll
look into some common CORS error messages and how to resolve them.

If the CORS configuration isn't set up correctly, the browser console
will present an error like
 "Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at $somesite"
indicating that the request was blocked due to violating the CORS
security rules. This might not necessarily be a set-up mistake, though.
It's possible that the request is in fact intentionally being disallowed
by the user's web application and remote external service. However, If
the endpoint is meant to be available, some debugging is needed to
succeed.

Identifying the issue

To understand the underlying issue with the CORS configuration, you need
to find out which request is at fault and why. These steps may help you
do so:

1.  Navigate to the website or web app in question and open the
    Developer Tools .
2.  Now try to reproduce the failing transaction and check the console
    if you are seeing a CORS violation error message. It will probably
    look like this:

[Firefox console showing CORS error]

The text of the error message will be something similar to the
following:

    Cross-Origin Request Blocked: The Same Origin Policy disallows
    reading the remote resource at https://some-url-here. (Reason:
    additional information here).

Note: For security reasons, specifics about what went wrong with a CORS
request are not available to JavaScript code . All the code knows is
that an error occurred. The only way to determine what specifically went
wrong is to look at the browser's console for details.

CORS error messages

Firefox's console displays messages in its console when requests fail
due to CORS. Part of the error text is a "reason" message that provides
added insight into what went wrong. The reason messages are listed
below; click the message to open an article explaining the error in more
detail and offering possible solutions.

-   Reason: CORS disabled
-   Reason: CORS request did not succeed
-   Reason: CORS header 'Origin' cannot be added
-   Reason: CORS request external redirect not allowed
-   Reason: CORS request not http
-   Reason: CORS header 'Access-Control-Allow-Origin' missing
-   Reason: CORS header 'Access-Control-Allow-Origin' does not match
    'xyz'
-   Reason: Credential is not supported if the CORS header
    'Access-Control-Allow-Origin' is '*'
-   Reason: Did not find method in CORS header
    'Access-Control-Allow-Methods'
-   Reason: expected 'true' in CORS header
    'Access-Control-Allow-Credentials'
-   Reason: CORS preflight channel did not succeed
-   Reason: invalid token 'xyz' in CORS header
    'Access-Control-Allow-Methods'
-   Reason: invalid token 'xyz' in CORS header
    'Access-Control-Allow-Headers'
-   Reason: missing token 'xyz' in CORS header
    'Access-Control-Allow-Headers' from CORS preflight channel
-   Reason: Multiple CORS header 'Access-Control-Allow-Origin' not
    allowed

See also

-   Glossary: CORS
-   CORS introduction
-   Server-side CORS settings
-   CORS enabled image
-   CORS settings attributes
-   https://www.test-cors.org – page to test CORS requests

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 15, 2023 by MDN contributors .
# Cross-Origin Resource Sharing (CORS) #
  ____                          ___       _       _       
 / ___|_ __ ___  ___ ___       / _ \ _ __(_) __ _(_)_ __  
| |   | '__/ _ \/ __/ __|_____| | | | '__| |/ _` | | '_ \ 
| |___| | | (_) \__ \__ \_____| |_| | |  | | (_| | | | | |
 \____|_|  \___/|___/___/      \___/|_|  |_|\__, |_|_| |_|
                                            |___/         
 ____                                    
|  _ \ ___  ___  ___  _   _ _ __ ___ ___ 
| |_) / _ \/ __|/ _ \| | | | '__/ __/ _ \
|  _ <  __/\__ \ (_) | |_| | | | (_|  __/
|_| \_\___||___/\___/ \__,_|_|  \___\___|
                                         
 ____  _                _                ______ ___  ____  ______  
/ ___|| |__   __ _ _ __(_)_ __   __ _   / / ___/ _ \|  _ \/ ___\ \ 
\___ \| '_ \ / _` | '__| | '_ \ / _` | | | |  | | | | |_) \___ \| |
 ___) | | | | (_| | |  | | | | | (_| | | | |__| |_| |  _ < ___) | |
|____/|_| |_|\__,_|_|  |_|_| |_|\__, | | |\____\___/|_| \_\____/| |
                                |___/   \_\                    /_/ 
Cross-Origin Resource Sharing (CORS)

Cross-Origin Resource Sharing ( CORS ) is an HTTP -header based
mechanism that allows a server to indicate any origins (domain, scheme,
or port) other than its own from which a browser should permit loading
resources. CORS also relies on a mechanism by which browsers make a
"preflight" request to the server hosting the cross-origin resource, in
order to check that the server will permit the actual request. In that
preflight, the browser sends headers that indicate the HTTP method and
headers that will be used in the actual request.

An example of a cross-origin request: the front-end JavaScript code
served from  https://domain-a.com uses  fetch() to make a request for
 https://domain-b.com/data.json .

For security reasons, browsers restrict cross-origin HTTP requests
initiated from scripts. For example,  fetch() and  XMLHttpRequest follow
the same-origin policy . This means that a web application using those
APIs can only request resources from the same origin the application was
loaded from unless the response from other origins includes the right
CORS headers.

[Diagrammatic representation of CORS mechanism]

The CORS mechanism supports secure cross-origin requests and data
transfers between browsers and servers. Browsers use CORS in APIs such
as  fetch() or  XMLHttpRequest to mitigate the risks of cross-origin
HTTP requests.

What requests use CORS?

This cross-origin sharing standard can enable cross-origin HTTP requests
for:

-   Invocations of  fetch() or  XMLHttpRequest , as discussed above.
-   Web Fonts (for cross-domain font usage in  @font-face within CSS),
    so that servers can deploy TrueType fonts that can only be loaded
    cross-origin and used by websites that are permitted to do so.
-   WebGL textures .
-   Images/video frames drawn to a canvas using  drawImage() .
-   CSS Shapes from images.

This is a general article about Cross-Origin Resource Sharing and
includes a discussion of the necessary HTTP headers.

Functional overview

The Cross-Origin Resource Sharing standard works by adding new HTTP
headers that let servers describe which origins are permitted to read
that information from a web browser. Additionally, for HTTP request
methods that can cause side-effects on server data (in particular, HTTP
methods other than  GET , or  POST with certain MIME types ), the
specification mandates that browsers "preflight" the request, soliciting
supported methods from the server with the HTTP  OPTIONS request method,
and then, upon "approval" from the server, sending the actual request.
Servers can also inform clients whether "credentials" (such as Cookies
and HTTP Authentication ) should be sent with requests.

CORS failures result in errors but for security reasons, specifics about
the error are not available to JavaScript . All the code knows is that
an error occurred. The only way to determine what specifically went
wrong is to look at the browser's console for details.

Subsequent sections discuss scenarios, as well as provide a breakdown of
the HTTP headers used.

Examples of access control scenarios

We present three scenarios that demonstrate how Cross-Origin Resource
Sharing works. All these examples use  fetch() , which can make
cross-origin requests in any supporting browser.

Simple requests

Some requests don't trigger a CORS preflight . Those are called simple
requests from the obsolete CORS spec , though the Fetch spec (which now
defines CORS) doesn't use that term.

The motivation is that the  <form> element from HTML 4.0 (which predates
cross-site  fetch() and  XMLHttpRequest ) can submit simple requests to
any origin, so anyone writing a server must already be protecting
against cross-site request forgery (CSRF). Under this assumption, the
server doesn't have to opt-in (by responding to a preflight request) to
receive any request that looks like a form submission, since the threat
of CSRF is no worse than that of form submission. However, the server
still must opt-in using  Access-Control-Allow-Origin to share the
response with the script.

A simple request is one that meets all the following conditions :

-   One of the allowed methods:
    -    GET
    -    HEAD
    -    POST
-   Apart from the headers automatically set by the user agent (for
    example,  Connection ,  User-Agent , or the other headers defined in
    the Fetch spec as a forbidden header name ), the only headers which
    are allowed to be manually set are those which the Fetch spec
    defines as a CORS-safelisted request-header , which are:
    -    Accept
    -    Accept-Language
    -    Content-Language
    -    Content-Type (please note the additional requirements below)
    -    Range (only with a simple range header value ; e.g.,
         bytes=256- or  bytes=127-255 )
-   The only type/subtype combinations allowed for the media type
    specified in the  Content-Type header are:
    -    application/x-www-form-urlencoded
    -    multipart/form-data
    -    text/plain
-   If the request is made using an  XMLHttpRequest object, no event
    listeners are registered on the object returned by the
     XMLHttpRequest.upload property used in the request; that is, given
    an  XMLHttpRequest instance  xhr , no code has called
     xhr.upload.addEventListener() to add an event listener to monitor
    the upload.
-   No  ReadableStream object is used in the request.

Note: WebKit Nightly and Safari Technology Preview place additional
restrictions on the values allowed in the  Accept ,  Accept-Language ,
and  Content-Language headers. If any of those headers have
"nonstandard" values, WebKit/Safari does not consider the request to be
a "simple request". What values WebKit/Safari consider "nonstandard" is
not documented, except in the following WebKit bugs:

-   Require preflight for non-standard CORS-safelisted request headers
    Accept, Accept-Language, and Content-Language
-   Allow commas in Accept, Accept-Language, and Content-Language
    request headers for simple CORS
-   Switch to a blacklist model for restricted Accept headers in simple
    CORS requests

No other browsers implement these extra restrictions because they're not
part of the spec.

For example, suppose web content at  https://foo.example wishes to fetch
JSON content from domain  https://bar.other . Code of this sort might be
used in JavaScript deployed on  foo.example :

js

    const fetchPromise = fetch("https://bar.other");

    fetchPromise
      .then((response) => response.json())
      .then((data) => {
        console.log(data);
      });

This operation performs a simple exchange between the client and the
server, using CORS headers to handle the privileges:

[Diagram of simple CORS GET request]

Let's look at what the browser will send to the server in this case:

http

    GET /resources/public-data/ HTTP/1.1
    Host: bar.other
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-us,en;q=0.5
    Accept-Encoding: gzip,deflate
    Connection: keep-alive
    Origin: https://foo.example

The request header of note is  Origin , which shows that the invocation
is coming from  https://foo.example .

Now let's see how the server responds:

http

    HTTP/1.1 200 OK
    Date: Mon, 01 Dec 2008 00:23:53 GMT
    Server: Apache/2
    Access-Control-Allow-Origin: *
    Keep-Alive: timeout=2, max=100
    Connection: Keep-Alive
    Transfer-Encoding: chunked
    Content-Type: application/xml

    […XML Data…]

In response, the server returns a  Access-Control-Allow-Origin header
with  Access-Control-Allow-Origin: * , which means that the resource can
be accessed by any origin.

http

    Access-Control-Allow-Origin: *

This pattern of the  Origin and  Access-Control-Allow-Origin headers is
the simplest use of the access control protocol. If the resource owners
at  https://bar.other wished to restrict access to the resource to
requests only from  https://foo.example (i.e., no domain other than
 https://foo.example can access the resource in a cross-origin manner),
they would send:

http

    Access-Control-Allow-Origin: https://foo.example

Note: When responding to a credentialed requests request, the server
must specify an origin in the value of the  Access-Control-Allow-Origin
header, instead of specifying the "  * " wildcard.

Preflighted requests

Unlike simple requests , for "preflighted" requests the browser first
sends an HTTP request using the  OPTIONS method to the resource on the
other origin, in order to determine if the actual request is safe to
send. Such cross-origin requests are preflighted since they may have
implications for user data.

The following is an example of a request that will be preflighted:

js

    const fetchPromise = fetch("https://bar.other/doc", {
      method: "POST",
      mode: "cors",
      headers: {
        "Content-Type": "text/xml",
        "X-PINGOTHER": "pingpong",
      },
      body: "<person><name>Arun</name></person>",
    });

    fetchPromise.then((response) => {
      console.log(response.status);
    });

The example above creates an XML body to send with the  POST request.
Also, a non-standard HTTP  X-PINGOTHER request header is set. Such
headers are not part of HTTP/1.1, but are generally useful to web
applications. Since the request uses a  Content-Type of  text/xml , and
since a custom header is set, this request is preflighted.

[Diagram of a request that is preflighted]

Note: As described below, the actual  POST request does not include the
 Access-Control-Request-* headers; they are needed only for the  OPTIONS
request.

Let's look at the full exchange between client and server. The first
exchange is the preflight request/response :

http

    OPTIONS /doc HTTP/1.1
    Host: bar.other
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-us,en;q=0.5
    Accept-Encoding: gzip,deflate
    Connection: keep-alive
    Origin: https://foo.example
    Access-Control-Request-Method: POST
    Access-Control-Request-Headers: X-PINGOTHER, Content-Type

    HTTP/1.1 204 No Content
    Date: Mon, 01 Dec 2008 01:15:39 GMT
    Server: Apache/2
    Access-Control-Allow-Origin: https://foo.example
    Access-Control-Allow-Methods: POST, GET, OPTIONS
    Access-Control-Allow-Headers: X-PINGOTHER, Content-Type
    Access-Control-Max-Age: 86400
    Vary: Accept-Encoding, Origin
    Keep-Alive: timeout=2, max=100
    Connection: Keep-Alive

Lines 1 - 10 above represent the preflight request with the  OPTIONS
method. The browser determines that it needs to send this based on the
request parameters that the JavaScript code snippet above was using, so
that the server can respond whether it is acceptable to send the request
with the actual request parameters. OPTIONS is an HTTP/1.1 method that
is used to determine further information from servers, and is a safe
method, meaning that it can't be used to change the resource. Note that
along with the OPTIONS request, two other request headers are sent
(lines 9 and 10 respectively):

http

    Access-Control-Request-Method: POST
    Access-Control-Request-Headers: X-PINGOTHER, Content-Type

The  Access-Control-Request-Method header notifies the server as part of
a preflight request that when the actual request is sent, it will do so
with a  POST request method. The  Access-Control-Request-Headers header
notifies the server that when the actual request is sent, it will do so
with  X-PINGOTHER and  Content-Type custom headers. Now the server has
an opportunity to determine whether it can accept a request under these
conditions.

Lines 12 - 21 above are the response that the server returns, which
indicate that the request method (  POST ) and request headers (
 X-PINGOTHER ) are acceptable. Let's have a closer look at lines 15-18:

http

    Access-Control-Allow-Origin: https://foo.example
    Access-Control-Allow-Methods: POST, GET, OPTIONS
    Access-Control-Allow-Headers: X-PINGOTHER, Content-Type
    Access-Control-Max-Age: 86400

The server responds with
 Access-Control-Allow-Origin: https://foo.example , restricting access
to the requesting origin domain only. It also responds with
 Access-Control-Allow-Methods , which says that  POST and  GET are valid
methods to query the resource in question (this header is similar to the
 Allow response header, but used strictly within the context of access
control).

The server also sends  Access-Control-Allow-Headers with a value of "
 X-PINGOTHER, Content-Type ", confirming that these are permitted
headers to be used with the actual request. Like
 Access-Control-Allow-Methods ,  Access-Control-Allow-Headers is a
comma-separated list of acceptable headers.

Finally,  Access-Control-Max-Age gives the value in seconds for how long
the response to the preflight request can be cached without sending
another preflight request. The default value is 5 seconds. In the
present case, the max age is 86400 seconds (= 24 hours). Note that each
browser has a maximum internal value that takes precedence when the
 Access-Control-Max-Age exceeds it.

Once the preflight request is complete, the real request is sent:

http

    POST /doc HTTP/1.1
    Host: bar.other
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-us,en;q=0.5
    Accept-Encoding: gzip,deflate
    Connection: keep-alive
    X-PINGOTHER: pingpong
    Content-Type: text/xml; charset=UTF-8
    Referer: https://foo.example/examples/preflightInvocation.html
    Content-Length: 55
    Origin: https://foo.example
    Pragma: no-cache
    Cache-Control: no-cache

    <person><name>Arun</name></person>

    HTTP/1.1 200 OK
    Date: Mon, 01 Dec 2008 01:15:40 GMT
    Server: Apache/2
    Access-Control-Allow-Origin: https://foo.example
    Vary: Accept-Encoding, Origin
    Content-Encoding: gzip
    Content-Length: 235
    Keep-Alive: timeout=2, max=99
    Connection: Keep-Alive
    Content-Type: text/plain

    [Some XML payload]

Preflighted requests and redirects

Not all browsers currently support following redirects after a
preflighted request. If a redirect occurs after such a request, some
browsers currently will report an error message such as the following:

  The request was redirected to ' https://example.com/foo ', which is
  disallowed for cross-origin requests that require preflight. Request
  requires preflight, which is disallowed to follow cross-origin
  redirects.

The CORS protocol originally required that behavior but was subsequently
changed to no longer require it . However, not all browsers have
implemented the change, and thus still exhibit the originally required
behavior.

Until browsers catch up with the spec, you may be able to work around
this limitation by doing one or both of the following:

-   Change the server-side behavior to avoid the preflight and/or to
    avoid the redirect
-   Change the request such that it is a simple request that doesn't
    cause a preflight

If that's not possible, then another way is to:

1.  Make a simple request (using  Response.url for the Fetch API, or
     XMLHttpRequest.responseURL ) to determine what URL the real
    preflighted request would end up at.
2.  Make another request (the real request) using the URL you obtained
    from  Response.url or  XMLHttpRequest.responseURL in the first step.

However, if the request is one that triggers a preflight due to the
presence of the  Authorization header in the request, you won't be able
to work around the limitation using the steps above. And you won't be
able to work around it at all unless you have control over the server
the request is being made to.

Requests with credentials

Note: When making credentialed requests to a different domain,
third-party cookie policies will still apply. The policy is always
enforced regardless of any setup on the server and the client as
described in this chapter.

The most interesting capability exposed by both  fetch() or
 XMLHttpRequest and CORS is the ability to make "credentialed" requests
that are aware of HTTP cookies and HTTP Authentication information. By
default, in cross-origin  fetch() or  XMLHttpRequest calls, browsers
will not send credentials.

To ask for a  fetch() request to include credentials, set the
 credentials option in the  Request() constructor to  "include" .

To ask for an  XMLHttpRequest request to include credentials, set the
 XMLHttpRequest.withCredentials property to  true .

In this example, content originally loaded from  https://foo.example
makes a simple GET request to a resource on  https://bar.other which
sets Cookies. Content on foo.example might contain JavaScript like this:

js

    const url = "https://bar.other/resources/credentialed-content/";

    const request = new Request(url, { credentials: "include" });

    const fetchPromise = fetch(request);
    fetchPromise.then((response) => console.log(response));

This code creates a  Request object, setting the  credentials option to
 "include" in the constructor, then passes this request into  fetch() .
Since this is a simple  GET request, it is not preflighted but the
browser will reject any response that does not have the
 Access-Control-Allow-Credentials  : true header, and not make the
response available to the invoking web content.

[Diagram of a simple GET request with Access-Control-Allow-Credentials]

Here is a sample exchange between client and server:

http

    GET /resources/credentialed-content/ HTTP/1.1
    Host: bar.other
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-us,en;q=0.5
    Accept-Encoding: gzip,deflate
    Connection: keep-alive
    Referer: https://foo.example/examples/credential.html
    Origin: https://foo.example
    Cookie: pageAccess=2

    HTTP/1.1 200 OK
    Date: Mon, 01 Dec 2008 01:34:52 GMT
    Server: Apache/2
    Access-Control-Allow-Origin: https://foo.example
    Access-Control-Allow-Credentials: true
    Cache-Control: no-cache
    Pragma: no-cache
    Set-Cookie: pageAccess=3; expires=Wed, 31-Dec-2008 01:34:53 GMT
    Vary: Accept-Encoding, Origin
    Content-Encoding: gzip
    Content-Length: 106
    Keep-Alive: timeout=2, max=100
    Connection: Keep-Alive
    Content-Type: text/plain

    [text/plain payload]

Although line 10 contains the Cookie destined for the content on
 https://bar.other , if bar.other did not respond with an
 Access-Control-Allow-Credentials  : true (line 16), the response would
be ignored and not made available to the web content.

Preflight requests and credentials

CORS-preflight requests must never include credentials. The response to
a preflight request must specify  Access-Control-Allow-Credentials: true
to indicate that the actual request can be made with credentials.

Note: Some enterprise authentication services require that TLS client
certificates be sent in preflight requests, in contravention of the
Fetch specification.

Firefox 87 allows this non-compliant behavior to be enabled by setting
the preference:  network.cors_preflight.allow_client_cert to  true (
Firefox bug 1511151 ). Chromium-based browsers currently always send TLS
client certificates in CORS preflight requests ( Chrome bug 775438 ).

Credentialed requests and wildcards

When responding to a credentialed request:

-   The server must not specify the "  * " wildcard for the
     Access-Control-Allow-Origin response-header value, but must instead
    specify an explicit origin; for example:
     Access-Control-Allow-Origin: https://example.com
-   The server must not specify the "  * " wildcard for the
     Access-Control-Allow-Headers response-header value, but must
    instead specify an explicit list of header names; for example,
     Access-Control-Allow-Headers: X-PINGOTHER, Content-Type
-   The server must not specify the "  * " wildcard for the
     Access-Control-Allow-Methods response-header value, but must
    instead specify an explicit list of method names; for example,
     Access-Control-Allow-Methods: POST, GET
-   The server must not specify the "  * " wildcard for the
     Access-Control-Expose-Headers response-header value, but must
    instead specify an explicit list of header names; for example,
     Access-Control-Expose-Headers: Content-Encoding, Kuma-Revision

If a request includes a credential (most commonly a  Cookie header) and
the response includes an  Access-Control-Allow-Origin: * header (that
is, with the wildcard), the browser will block access to the response,
and report a CORS error in the devtools console.

But if a request does include a credential (like the  Cookie header) and
the response includes an actual origin rather than the wildcard (like,
for example,  Access-Control-Allow-Origin: https://example.com ), then
the browser will allow access to the response from the specified origin.

Also note that any  Set-Cookie response header in a response would not
set a cookie if the  Access-Control-Allow-Origin value in that response
is the "  * " wildcard rather an actual origin.

Third-party cookies

Note that cookies set in CORS responses are subject to normal
third-party cookie policies. In the example above, the page is loaded
from  foo.example but the cookie on line 19 is sent by  bar.other , and
would thus not be saved if the user's browser is configured to reject
all third-party cookies.

Cookie in the request (line 10) may also be suppressed in normal
third-party cookie policies. The enforced cookie policy may therefore
nullify the capability described in this chapter, effectively preventing
you from making credentialed requests whatsoever.

Cookie policy around the SameSite attribute would apply.

The HTTP response headers

This section lists the HTTP response headers that servers return for
access control requests as defined by the Cross-Origin Resource Sharing
specification. The previous section gives an overview of these in
action.

Access-Control-Allow-Origin

A returned resource may have one  Access-Control-Allow-Origin header
with the following syntax:

http

    Access-Control-Allow-Origin: <origin> | *

 Access-Control-Allow-Origin specifies either a single origin which
tells browsers to allow that origin to access the resource; or else —
for requests without credentials — the "  * " wildcard tells browsers to
allow any origin to access the resource.

For example, to allow code from the origin  https://mozilla.org to
access the resource, you can specify:

http

    Access-Control-Allow-Origin: https://mozilla.org
    Vary: Origin

If the server specifies a single origin (that may dynamically change
based on the requesting origin as part of an allowlist) rather than the
"  * " wildcard, then the server should also include  Origin in the
 Vary response header to indicate to clients that server responses will
differ based on the value of the  Origin request header.

Access-Control-Expose-Headers

The  Access-Control-Expose-Headers header adds the specified headers to
the allowlist that JavaScript (such as  Response.headers ) in browsers
is allowed to access.

http

    Access-Control-Expose-Headers: <header-name>[, <header-name>]*

For example, the following:

http

    Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header

…would allow the  X-My-Custom-Header and  X-Another-Custom-Header
headers to be exposed to the browser.

Access-Control-Max-Age

The  Access-Control-Max-Age header indicates how long the results of a
preflight request can be cached. For an example of a preflight request,
see the above examples.

http

    Access-Control-Max-Age: <delta-seconds>

The  delta-seconds parameter indicates the number of seconds the results
can be cached.

Access-Control-Allow-Credentials

The  Access-Control-Allow-Credentials header indicates whether or not
the response to the request can be exposed when the  credentials flag is
true. When used as part of a response to a preflight request, this
indicates whether or not the actual request can be made using
credentials. Note that simple  GET requests are not preflighted, and so
if a request is made for a resource with credentials, if this header is
not returned with the resource, the response is ignored by the browser
and not returned to web content.

http

    Access-Control-Allow-Credentials: true

Credentialed requests are discussed above.

Access-Control-Allow-Methods

The  Access-Control-Allow-Methods header specifies the method or methods
allowed when accessing the resource. This is used in response to a
preflight request. The conditions under which a request is preflighted
are discussed above.

http

    Access-Control-Allow-Methods: <method>[, <method>]*

An example of a preflight request is given above, including an example
which sends this header to the browser.

Access-Control-Allow-Headers

The  Access-Control-Allow-Headers header is used in response to a
preflight request to indicate which HTTP headers can be used when making
the actual request. This header is the server side response to the
browser's  Access-Control-Request-Headers header.

http

    Access-Control-Allow-Headers: <header-name>[, <header-name>]*

The HTTP request headers

This section lists headers that clients may use when issuing HTTP
requests in order to make use of the cross-origin sharing feature. Note
that these headers are set for you when making invocations to servers.
Developers making cross-origin requests do not have to set any
cross-origin sharing request headers programmatically.

Origin

The  Origin header indicates the origin of the cross-origin access
request or preflight request.

http

    Origin: <origin>

The origin is a URL indicating the server from which the request is
initiated. It does not include any path information, only the server
name.

Note: The  origin value can be  null .

Note that in any access control request, the  Origin header is always
sent.

Access-Control-Request-Method

The  Access-Control-Request-Method is used when issuing a preflight
request to let the server know what HTTP method will be used when the
actual request is made.

http

    Access-Control-Request-Method: <method>

Examples of this usage can be found above.

Access-Control-Request-Headers

The  Access-Control-Request-Headers header is used when issuing a
preflight request to let the server know what HTTP headers will be used
when the actual request is made (for example, by passing them as the
 headers option to the  Request() constructor). This browser-side header
will be answered by the complementary server-side header of
 Access-Control-Allow-Headers .

http

    Access-Control-Request-Headers: <field-name>[, <field-name>]*

Examples of this usage can be found above .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Standard
  # http-access-control-allow-origin

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   CORS errors
-   Enable CORS: I want to add CORS support to my server
-   Fetch API
-    XMLHttpRequest
-   Will it CORS? - an interactive CORS explainer & generator
-   How to run Chrome browser without CORS
-   Using CORS with All (Modern) Browsers
-   Stack Overflow answer with "how to" info for dealing with common
    problems :
    -   How to avoid the CORS preflight
    -   How to use a CORS proxy to get around "No
        Access-Control-Allow-Origin header"
    -   How to fix "Access-Control-Allow-Origin header must not be the
        wildcard"

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 19, 2023 by MDN contributors .
# Cross-Origin Resource Policy (CORP) #
  ____                          ___       _       _       
 / ___|_ __ ___  ___ ___       / _ \ _ __(_) __ _(_)_ __  
| |   | '__/ _ \/ __/ __|_____| | | | '__| |/ _` | | '_ \ 
| |___| | | (_) \__ \__ \_____| |_| | |  | | (_| | | | | |
 \____|_|  \___/|___/___/      \___/|_|  |_|\__, |_|_| |_|
                                            |___/         
 ____                                      ____       _ _            
|  _ \ ___  ___  ___  _   _ _ __ ___ ___  |  _ \ ___ | (_) ___ _   _ 
| |_) / _ \/ __|/ _ \| | | | '__/ __/ _ \ | |_) / _ \| | |/ __| | | |
|  _ <  __/\__ \ (_) | |_| | | | (_|  __/ |  __/ (_) | | | (__| |_| |
|_| \_\___||___/\___/ \__,_|_|  \___\___| |_|   \___/|_|_|\___|\__, |
                                                               |___/ 
  ______ ___  ____  ______  
 / / ___/ _ \|  _ \|  _ \ \ 
| | |  | | | | |_) | |_) | |
| | |__| |_| |  _ <|  __/| |
| |\____\___/|_| \_\_|   | |
 \_\                    /_/ 
Cross-Origin Resource Policy (CORP)

Cross-Origin Resource Policy is a policy set by the
 Cross-Origin-Resource-Policy HTTP header that lets websites and
applications opt in to protection against certain requests from other
origins (such as those issued with elements like  <script> and  <img> ),
to mitigate speculative side-channel attacks, like Spectre , as well as
Cross-Site Script Inclusion attacks.

CORP is an additional layer of protection beyond the default same-origin
policy . Cross-Origin Resource Policy complements Cross-Origin Read
Blocking (CORB), which is a mechanism to prevent some cross-origin reads
by default.

Note: The policy is only effective for  no-cors requests, which are
issued by default for CORS-safelisted methods/headers.

As this policy is expressed via a response header , the actual request
is not prevented—rather, the browser prevents the result from being
leaked by stripping the response body.

Usage

Note: Due to a bug in Chrome , setting Cross-Origin-Resource-Policy can
break PDF rendering, preventing visitors from being able to read past
the first page of some PDFs. Exercise caution using this header in a
production environment.

Web applications set a Cross-Origin Resource Policy via the
 Cross-Origin-Resource-Policy HTTP response header, which accepts one of
three values:

 same-site

    Only requests from the same Site can read the resource.

    Warning: This is less secure than an origin . The algorithm for
    checking if two origins are same site is defined in the HTML
    standard and involves checking the registrable domain .

 same-origin

    Only requests from the same origin (i.e. scheme + host + port) can
    read the resource.

 cross-origin

    Requests from any origin (both same-site and cross-site) can read
    the resource. This is useful when COEP is used (see below).

http

    Cross-Origin-Resource-Policy: same-site | same-origin | cross-origin

During a cross-origin resource policy check, if the header is set, the
browser will deny  no-cors requests issued from a different origin/site.

Relationship to cross-origin embedder policy (COEP)

The  Cross-Origin-Embedder-Policy HTTP response header, when used upon a
document, can be used to require subresources to either be same-origin
with the document, or come with a  Cross-Origin-Resource-Policy HTTP
response header to indicate they are okay with being embedded. This is
why the  cross-origin value exists.

History

The concept was originally proposed in 2012 (as  From-Origin ), but
resurrected in Q2 of 2018 and implemented in Safari and Chromium.

In early 2018, two side-channel hardware vulnerabilities known as
Meltdown and Spectre were disclosed. These vulnerabilities allowed
sensitive data disclosure due to a race condition which arose as part of
speculative execution functionality, designed to improve performance.

In response, Chromium shipped Cross-Origin Read Blocking , which
automatically protects certain resources (of  Content-Type HTML, JSON
and XML) against cross-origin reads. If the application does not serve a
 no-sniff directive , Chromium will attempt to guess the  Content-Type
and apply the protection anyway.

 Cross-Origin-Resource-Policy is an opt-in response header which can
protect any resource; there is no need for browsers to sniff MIME types.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Standard
  # cross-origin-resource-policy-header

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Cross-Origin-Resource-Policy HTTP Header

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 10, 2023 by MDN contributors .
# Content Security Policy (CSP) #
  ____            _             _     ____                       _ _         
 / ___|___  _ __ | |_ ___ _ __ | |_  / ___|  ___  ___ _   _ _ __(_) |_ _   _ 
| |   / _ \| '_ \| __/ _ \ '_ \| __| \___ \ / _ \/ __| | | | '__| | __| | | |
| |__| (_) | | | | ||  __/ | | | |_   ___) |  __/ (__| |_| | |  | | |_| |_| |
 \____\___/|_| |_|\__\___|_| |_|\__| |____/ \___|\___|\__,_|_|  |_|\__|\__, |
                                                                       |___/ 
 ____       _ _               ______ ____  ______  
|  _ \ ___ | (_) ___ _   _   / / ___/ ___||  _ \ \ 
| |_) / _ \| | |/ __| | | | | | |   \___ \| |_) | |
|  __/ (_) | | | (__| |_| | | | |___ ___) |  __/| |
|_|   \___/|_|_|\___|\__, | | |\____|____/|_|   | |
                     |___/   \_\               /_/ 
Content Security Policy (CSP)

Content Security Policy ( CSP ) is an added layer of security that helps
to detect and mitigate certain types of attacks, including Cross-Site
Scripting ( XSS ) and data injection attacks. These attacks are used for
everything from data theft, to site defacement, to malware distribution.

CSP is designed to be fully backward compatible (except CSP version 2
where there are some explicitly-mentioned inconsistencies in backward
compatibility; more details here section 1.1). Browsers that don't
support it still work with servers that implement it, and vice versa:
browsers that don't support CSP ignore it, functioning as usual,
defaulting to the standard same-origin policy for web content. If the
site doesn't offer the CSP header, browsers likewise use the standard
same-origin policy .

To enable CSP, you need to configure your web server to return the
 Content-Security-Policy HTTP header. (Sometimes you may see mentions of
the  X-Content-Security-Policy header, but that's an older version and
you don't need to specify it anymore.)

Alternatively, the  <meta> element can be used to configure a policy,
for example:

html

    <meta
      http-equiv="Content-Security-Policy"
      content="default-src 'self'; img-src https://*; child-src 'none';" />

Note: Some features, such as sending CSP violation reports, are only
available when using the HTTP headers.

Threats

Mitigating cross-site scripting

A primary goal of CSP is to mitigate and report XSS attacks. XSS attacks
exploit the browser's trust in the content received from the server.
Malicious scripts are executed by the victim's browser because the
browser trusts the source of the content, even when it's not coming from
where it seems to be coming from.

CSP makes it possible for server administrators to reduce or eliminate
the vectors by which XSS can occur by specifying the domains that the
browser should consider to be valid sources of executable scripts. A CSP
compatible browser will then only execute scripts loaded in source files
received from those allowed domains, ignoring all other scripts
(including inline scripts and event-handling HTML attributes).

As an ultimate form of protection, sites that want to never allow
scripts to be executed can opt to globally disallow script execution.

Mitigating packet sniffing attacks

In addition to restricting the domains from which content can be loaded,
the server can specify which protocols are allowed to be used; for
example (and ideally, from a security standpoint), a server can specify
that all content must be loaded using HTTPS. A complete data
transmission security strategy includes not only enforcing HTTPS for
data transfer, but also marking all cookies with the  secure attribute
and providing automatic redirects from HTTP pages to their HTTPS
counterparts. Sites may also use the  Strict-Transport-Security HTTP
header to ensure that browsers connect to them only over an encrypted
channel.

Using CSP

Configuring Content Security Policy involves adding the
 Content-Security-Policy HTTP header to a web page and giving it values
to control what resources the user agent is allowed to load for that
page. For example, a page that uploads and displays images could allow
images from anywhere, but restrict a form action to a specific endpoint.
A properly designed Content Security Policy helps protect a page against
a cross-site scripting attack. This article explains how to construct
such headers properly, and provides examples.

Specifying your policy

You can use the  Content-Security-Policy HTTP header to specify your
policy, like this:

http

    Content-Security-Policy: policy

The policy is a string containing the policy directives describing your
Content Security Policy.

Writing a policy

A policy is described using a series of policy directives, each of which
describes the policy for a certain resource type or policy area. Your
policy should include a  default-src policy directive, which is a
fallback for other resource types when they don't have policies of their
own (for a complete list, see the description of the  default-src
directive). A policy needs to include a  default-src or  script-src
directive to prevent inline scripts from running, as well as blocking
the use of  eval() . A policy needs to include a  default-src or
 style-src directive to restrict inline styles from being applied from a
 <style> element or a  style attribute. There are specific directives
for a wide variety of types of items, so that each type can have its own
policy, including fonts, frames, images, audio and video media, scripts,
and workers.

For a complete list of policy directives, see the reference page for the
Content-Security-Policy header .

Examples: Common use cases

This section provides examples of some common security policy scenarios.

Example 1

A website administrator wants all content to come from the site's own
origin (this excludes subdomains.)

http

    Content-Security-Policy: default-src 'self'

Example 2

A website administrator wants to allow content from a trusted domain and
all its subdomains (it doesn't have to be the same domain that the CSP
is set on.)

http

    Content-Security-Policy: default-src 'self' example.com *.example.com

Example 3

A website administrator wants to allow users of a web application to
include images from any origin in their own content, but to restrict
audio or video media to trusted providers, and all scripts only to a
specific server that hosts trusted code.

http

    Content-Security-Policy: default-src 'self'; img-src *; media-src example.org example.net; script-src userscripts.example.com

Here, by default, content is only permitted from the document's origin,
with the following exceptions:

-   Images may load from anywhere (note the "*" wildcard).
-   Media is only allowed from example.org and example.net (and not from
    subdomains of those sites).
-   Executable script is only allowed from userscripts.example.com.

Example 4

A website administrator for an online banking site wants to ensure that
all its content is loaded using TLS, in order to prevent attackers from
eavesdropping on requests.

http

    Content-Security-Policy: default-src https://onlinebanking.example.com

The server permits access only to documents being loaded specifically
over HTTPS through the single origin onlinebanking.example.com.

Example 5

A website administrator of a web mail site wants to allow HTML in email,
as well as images loaded from anywhere, but not JavaScript or other
potentially dangerous content.

http

    Content-Security-Policy: default-src 'self' *.example.com; img-src *

Note that this example doesn't specify a  script-src ; with the example
CSP, this site uses the setting specified by the  default-src directive,
which means that scripts can be loaded only from the originating server.

Testing your policy

To ease deployment, CSP can be deployed in report-only mode. The policy
is not enforced, but any violations are reported to a provided URI.
Additionally, a report-only header can be used to test a future revision
to a policy without actually deploying it.

You can use the  Content-Security-Policy-Report-Only HTTP header to
specify your policy, like this:

http

    Content-Security-Policy-Report-Only: policy

If both a  Content-Security-Policy-Report-Only header and a
 Content-Security-Policy header are present in the same response, both
policies are honored. The policy specified in  Content-Security-Policy
headers is enforced while the  Content-Security-Policy-Report-Only
policy generates reports but is not enforced.

Enabling reporting

By default, violation reports aren't sent. To enable violation
reporting, you need to specify the  report-to policy directive,
providing at least one URI to which to deliver the reports:

http

    Content-Security-Policy: default-src 'self'; report-to http://reportcollector.example.com/collector.cgi

Then you need to set up your server to receive the reports; it can store
or process them in whatever manner you determine is appropriate.

Violation report syntax

The report JSON object is sent with an  application/csp-report
 Content-Type and contains the following data:

 blocked-uri

    The URI of the resource that was blocked from loading by the Content
    Security Policy. If the blocked URI is from a different origin than
    the  document-uri , then the blocked URI is truncated to contain
    just the scheme, host, and port.

 disposition

    Either  "enforce" or  "report" depending on whether the
     Content-Security-Policy-Report-Only header or the
     Content-Security-Policy header is used.

 document-uri

    The URI of the document in which the violation occurred.

 effective-directive

    The directive whose enforcement caused the violation. Some browsers
    may provide different values, such as Chrome providing
     style-src-elem /  style-src-attr , even when the actually enforced
    directive was  style-src .

 original-policy

    The original policy as specified by the  Content-Security-Policy
    HTTP header.

 referrer  Deprecated   Non-standard 

    The referrer of the document in which the violation occurred.

 script-sample

    The first 40 characters of the inline script, event handler, or
    style that caused the violation. Only applicable to  script-src* and
     style-src* violations, when they contain the  'report-sample'

 status-code

    The HTTP status code of the resource on which the global object was
    instantiated.

 violated-directive  Deprecated 

    The directive whose enforcement caused the violation. The
     violated-directive is a historic name for the  effective-directive
    field and contains the same value.

Sample violation report

Let's consider a page located at  http://example.com/signup.html . It
uses the following policy, disallowing everything but stylesheets from
 cdn.example.com .

http

    Content-Security-Policy: default-src 'none'; style-src cdn.example.com; report-to /_/csp-reports

The HTML of  signup.html looks like this:

html

    <!doctype html>
    <html lang="en-US">
      <head>
        <meta charset="UTF-8" />
        <title>Sign Up</title>
        <link rel="stylesheet" href="css/style.css" />
      </head>
      <body>
        Here be content.
      </body>
    </html>

Can you spot the mistake? Stylesheets are allowed to be loaded only from
 cdn.example.com , yet the website tries to load one from its own origin
(  http://example.com ). A browser capable of enforcing CSP would send
the following violation report as a POST request to
 http://example.com/_/csp-reports , when the document is visited:

json

    {
      "csp-report": {
        "blocked-uri": "http://example.com/css/style.css",
        "disposition": "report",
        "document-uri": "http://example.com/signup.html",
        "effective-directive": "style-src-elem",
        "original-policy": "default-src 'none'; style-src cdn.example.com; report-to /_/csp-reports",
        "referrer": "",
        "status-code": 200,
        "violated-directive": "style-src-elem"
      }
    }

As you can see, the report includes the full path to the violating
resource in  blocked-uri . This is not always the case. For example, if
the  signup.html attempted to load CSS from
 http://anothercdn.example.com/stylesheet.css , the browser would not
include the full path, but only the origin (
 http://anothercdn.example.com ). The CSP specification gives an
explanation of this odd behavior. In summary, this is done to prevent
leaking sensitive information about cross-origin resources.

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Compatibility notes

A specific incompatibility exists in some versions of the Safari web
browser, whereby if a Content Security Policy header is set, but not a
Same Origin header, the browser will block self-hosted content and
off-site content, and incorrectly report that this is due to the Content
Security Policy not allowing the content.

See also

-    Content-Security-Policy HTTP Header
-    Content-Security-Policy-Report-Only HTTP Header
-   Content Security in WebExtensions
-   CSP in Web Workers
-   Privacy, permissions, and information security
-   CSP Evaluator - Evaluate your Content Security Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 7, 2023 by MDN contributors .
# Accept-Charset #
    _                      _         ____ _                         _   
   / \   ___ ___ ___ _ __ | |_      / ___| |__   __ _ _ __ ___  ___| |_ 
  / _ \ / __/ __/ _ \ '_ \| __|____| |   | '_ \ / _` | '__/ __|/ _ \ __|
 / ___ \ (_| (_|  __/ |_) | ||_____| |___| | | | (_| | |  \__ \  __/ |_ 
/_/   \_\___\___\___| .__/ \__|     \____|_| |_|\__,_|_|  |___/\___|\__|
                    |_|                                                 
Accept-Charset

Warning: Do not use this header. Browsers omit this header and servers
should ignore it.

The  Accept-Charset request HTTP header was a header that advertised a
client's supported character encodings . It is no longer widely used.

UTF-8 is well-supported and the overwhelmingly preferred choice for
character encoding. To guarantee better privacy through less
configuration-based entropy , all browsers omit the  Accept-Charset
header.

Today,  Accept-Charset is most notable for being one of several
forbidden header names .

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   yes
  ----------------------- ----------------

See also

-   HTTP content negotiation
-   Accept-Charset is no more
-   Header with the result of the content negotiation:  Content-Type
-   Other similar headers:  TE ,  Accept-Encoding ,  Accept-Language ,
     Accept

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Accept-CH #
    _                      _         ____ _   _ 
   / \   ___ ___ ___ _ __ | |_      / ___| | | |
  / _ \ / __/ __/ _ \ '_ \| __|____| |   | |_| |
 / ___ \ (_| (_|  __/ |_) | ||_____| |___|  _  |
/_/   \_\___\___\___| .__/ \__|     \____|_| |_|
                    |_|                         
Accept-CH

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

The  Accept-CH header may be set by a server to specify which client
hints headers a client should include in subsequent requests.

  --------------------------------- -----------------
  Header type                       Response header
  Forbidden header name             no
  CORS-safelisted response header   no
  --------------------------------- -----------------

Note: Client hints are accessible only on secure origins (via TLS).
 Accept-CH (and  Accept-CH-Lifetime ) headers should be persisted for
all secure requests to ensure client hints are sent reliably.

Syntax

http

    Accept-CH: <comma separated list of client hint headers>

Examples

http

    Accept-CH: Viewport-Width, Width
    Vary: Viewport-Width, Width

Note: Remember to vary the response based on the accepted client hints.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Client Hints
  # section-3.1

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Accept-CH-Lifetime #
    _                      _         ____ _   _       _     _  __      _   _ 
   / \   ___ ___ ___ _ __ | |_      / ___| | | |     | |   (_)/ _| ___| |_(_)
  / _ \ / __/ __/ _ \ '_ \| __|____| |   | |_| |_____| |   | | |_ / _ \ __| |
 / ___ \ (_| (_|  __/ |_) | ||_____| |___|  _  |_____| |___| |  _|  __/ |_| |
/_/   \_\___\___\___| .__/ \__|     \____|_| |_|     |_____|_|_|  \___|\__|_|
                    |_|                                                      
                
 _ __ ___   ___ 
| '_ ` _ \ / _ \
| | | | | |  __/
|_| |_| |_|\___|
                
Accept-CH-Lifetime

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

Non-standard: This feature is non-standard and is not on a standards
track. Do not use it on production sites facing the Web: it will not
work for every user. There may also be large incompatibilities between
implementations and the behavior may change in the future.

Warning: The header was removed from the specification in draft 8 .

The  Accept-CH-Lifetime header is set by the server to specify the
persistence of the client hint headers it specified using  Accept-CH ,
that the client should include in subsequent requests.

  --------------------------------- -----------------
  Header type                       Response header
  Forbidden header name             no
  CORS-safelisted response header   no
  --------------------------------- -----------------

Note: Client Hints are accessible only on secure origins (via TLS).
 Accept-CH and  Accept-CH-Lifetime headers should be persisted for all
secure requests to ensure Client Hints are sent reliably.

Syntax

http

    Accept-CH-Lifetime: <age>

Examples

http

    Accept-CH: Viewport-Width
    Accept-CH-Lifetime: 86400

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Accept-CH
-    Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Accept-Encoding #
    _                      _        _____                     _ _             
   / \   ___ ___ ___ _ __ | |_     | ____|_ __   ___ ___   __| (_)_ __   __ _ 
  / _ \ / __/ __/ _ \ '_ \| __|____|  _| | '_ \ / __/ _ \ / _` | | '_ \ / _` |
 / ___ \ (_| (_|  __/ |_) | ||_____| |___| | | | (_| (_) | (_| | | | | | (_| |
/_/   \_\___\___\___| .__/ \__|    |_____|_| |_|\___\___/ \__,_|_|_| |_|\__, |
                    |_|                                                 |___/ 
Accept-Encoding

The  Accept-Encoding request HTTP header indicates the content encoding
(usually a compression algorithm) that the client can understand. The
server uses content negotiation to select one of the proposals and
informs the client of that choice with the  Content-Encoding response
header.

Even if both the client and the server support the same compression
algorithms, the server may choose not to compress the body of a response
if the  identity value is also acceptable. Two common cases lead to
this:

-   The data to be sent is already compressed, therefore a second
    compression will not reduce the transmitted data size. This is true
    for pre-compressed image formats (JPEG, for instance);
-   The server is overloaded and cannot allocate computing resources to
    perform the compression. For example, Microsoft recommends not to
    compress if a server uses more than 80% of its computational power.

As long as the  identity;q=0 or  *;q=0 directives do not explicitly
forbid the  identity value that means no encoding, the server must never
return a  406  Not Acceptable error.

Note:

-   An IANA registry maintains a complete list of official content
    encodings .
-   Two other content encodings, namely  bzip and  bzip2 , are sometimes
    used, These non-standard encodings implement the algorithm that
    these two UNIX programs use. Note that  bzip was discontinued due to
    patent licensing issues.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   yes
  ----------------------- ----------------

Syntax

http

    Accept-Encoding: gzip
    Accept-Encoding: compress
    Accept-Encoding: deflate
    Accept-Encoding: br
    Accept-Encoding: identity
    Accept-Encoding: *

    // Multiple algorithms, weighted with the quality value syntax:
    Accept-Encoding: deflate, gzip;q=1.0, *;q=0.5

Directives

 gzip

    A compression format that uses the Lempel-Ziv coding (LZ77) with a
    32-bit CRC.

 compress

    A compression format that uses the Lempel-Ziv-Welch (LZW) algorithm.

 deflate

    A compression format that uses the zlib structure with the deflate
    compression algorithm.

 br

    A compression format that uses the Brotli algorithm.

 identity

    Indicates the identity function (that is, without modification or
    compression). This value is always considered as acceptable, even if
    omitted.

 *

    Matches any content encoding not already listed in the header. This
    is the default value if the header is not present. This directive
    does not suggest that any algorithm is supported but indicates that
    no preference is expressed.

 ;q= (qvalues weighting)

    Any value is placed in an order of preference expressed using a
    relative quality value called weight .

Examples

http

    Accept-Encoding: gzip

    Accept-Encoding: gzip, compress, br

    Accept-Encoding: br;q=1.0, gzip;q=0.8, *;q=0.1

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.accept-encoding

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP content negotiation
-   A header with the result of the content negotiation:
     Content-Encoding
-   Other similar headers:  TE ,  Accept ,  Accept-Language

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Accept #
    _                      _   
   / \   ___ ___ ___ _ __ | |_ 
  / _ \ / __/ __/ _ \ '_ \| __|
 / ___ \ (_| (_|  __/ |_) | |_ 
/_/   \_\___\___\___| .__/ \__|
                    |_|        
Accept

The  Accept request HTTP header indicates which content types, expressed
as MIME types , the client is able to understand. The server uses
content negotiation to select one of the proposals and informs the
client of the choice with the  Content-Type response header. Browsers
set required values for this header based on the context of the request.
For example, a browser uses different values in a request when fetching
a CSS stylesheet, image, video, or a script.

  -------------------------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Header type                      Request header
  Forbidden header name            no
  CORS-safelisted request header   yes, with the additional restriction that values can't contain a CORS-unsafe request header byte : 0x00-0x1F (except 0x09 (HT)),  "():<>?@[\]{} , and 0x7F (DEL).
  -------------------------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------

Syntax

http

    Accept: <MIME_type>/<MIME_subtype>
    Accept: <MIME_type>/*
    Accept: */*

    // Multiple types, weighted with the quality value syntax:
    Accept: text/html, application/xhtml+xml, application/xml;q=0.9, image/webp, */*;q=0.8

Directives

 <MIME_type>/<MIME_subtype>

    A single, precise MIME type , like  text/html .

 <MIME_type>/*

    A MIME type, but without a subtype.  image/* corresponds to
     image/png ,  image/svg ,  image/gif , and other image types.

 */*

    Any MIME type

 ;q= (q-factor weighting)

    A value used is placed in an order of preference expressed using a
    relative quality value called the weight .

Examples

http

    Accept: text/html

    Accept: image/*

    // General default
    Accept: */*

    // Default for navigation requests
    Accept: text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.accept

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP content negotiation
-   List of default Accept values
-   A header with the result of the content negotiation:  Content-Type
-   Other similar headers:  TE ,  Accept-Encoding ,  Accept-Language

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Accept-Language #
    _                      _        _                                        
   / \   ___ ___ ___ _ __ | |_     | |    __ _ _ __   __ _ _   _  __ _  __ _ 
  / _ \ / __/ __/ _ \ '_ \| __|____| |   / _` | '_ \ / _` | | | |/ _` |/ _` |
 / ___ \ (_| (_|  __/ |_) | ||_____| |__| (_| | | | | (_| | |_| | (_| | (_| |
/_/   \_\___\___\___| .__/ \__|    |_____\__,_|_| |_|\__, |\__,_|\__,_|\__, |
                    |_|                              |___/             |___/ 
      
  ___ 
 / _ \
|  __/
 \___|
      
Accept-Language

The  Accept-Language request HTTP header indicates the natural language
and locale that the client prefers. The server uses content negotiation
to select one of the proposals and informs the client of the choice with
the  Content-Language response header. Browsers set required values for
this header according to their active user interface language. Users
rarely change it, and such changes are not recommended because they may
lead to fingerprinting .

This header serves as a hint when the server cannot determine the target
content language otherwise (for example, use a specific URL that depends
on an explicit user decision). The server should never override an
explicit user language choice. The content of  Accept-Language is often
out of a user's control (when traveling, for instance). A user may also
want to visit a page in a language different from the user interface
language.

The server possibly can send back a  406 (Not Acceptable) error code
when unable to serve content in a matching language. However, such a
behavior is rarely implemented for a better user experience, and servers
often ignore the  Accept-Language header in such cases.

  -------------------------------- ------------------------------------------------------------------------------------------------------
  Header type                      Request header
  Forbidden header name            no
  CORS-safelisted request header   yes, with the additional restriction that values can only be  0-9 ,  A-Z ,  a-z , space or  *,-.;= .
  -------------------------------- ------------------------------------------------------------------------------------------------------

Syntax

http

    Accept-Language: <language>
    Accept-Language: *

    // Multiple types, weighted with the quality value syntax:
    Accept-Language: fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5

Directives

 <language>

    A language tag (which is sometimes referred to as a "locale
    identifier"). This consists of a 2-3 letter base language tag that
    indicates a language, optionally followed by additional subtags
    separated by  '-' . The most common extra information is the country
    or region variant (like  'en-US' or  'fr-CA' ) or the type of
    alphabet to use (like  'sr-Latn' ). Other variants, like the type of
    orthography (  'de-DE-1996' ), are usually not used in the context
    of this header.

 *

    Any language;  '*' is used as a wildcard.

 ;q= (q-factor weighting)

    Any value placed in an order of preference expressed using a
    relative quality value called weight .

Examples

http

    Accept-Language: de

http

    Accept-Language: de-CH

http

    Accept-Language: en-US,en;q=0.5

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.accept-language

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP content negotiation
-   A header with the result of the content negotiation:
     Content-Language
-   Other similar headers:  TE ,  Accept-Encoding ,  Accept

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Accept-Patch #
    _                      _        ____       _       _     
   / \   ___ ___ ___ _ __ | |_     |  _ \ __ _| |_ ___| |__  
  / _ \ / __/ __/ _ \ '_ \| __|____| |_) / _` | __/ __| '_ \ 
 / ___ \ (_| (_|  __/ |_) | ||_____|  __/ (_| | || (__| | | |
/_/   \_\___\___\___| .__/ \__|    |_|   \__,_|\__\___|_| |_|
                    |_|                                      
Accept-Patch

The  Accept-Patch response HTTP header advertises which media-type the
server is able to understand in a PATCH request.

 Accept-Patch in response to any method means that PATCH is allowed on
the resource identified by the Request-URI. Two common cases lead to
this:

A server receiving a PATCH request with an unsupported media type could
reply with  415  Unsupported Media Type and an Accept-Patch header
referencing one or more supported media types.

Note:

-   An IANA registry maintains a complete list of official content
    encodings .
-   Two others content encoding,  bzip and  bzip2 , are sometimes used,
    though not standard. They implement the algorithm used by these two
    UNIX programs. Note that the first one was discontinued due to
    patent licensing problems.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   yes
  ----------------------- -----------------

Syntax

http

    Accept-Patch: application/example, text/example
    Accept-Patch: text/example;charset=utf-8
    Accept-Patch: application/merge-patch+json

Directives

None

Examples

http

    Accept-Patch: application/example, text/example

    Accept-Patch: text/example;charset=utf-8

    Accept-Patch: application/merge-patch+json

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  RFC 5789
  # section-3.1

  -----------------------------------------------------------------------

Browser compatibility

Browser compatibility is not relevant for this header (header is sent by
server, and the specification does not define client behavior).

See also

-   Http method  PATCH
-   HTTP Semantic and context RFC 7231, section 4.3.4: PUT

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Accept-Post #
    _                      _        ____           _   
   / \   ___ ___ ___ _ __ | |_     |  _ \ ___  ___| |_ 
  / _ \ / __/ __/ _ \ '_ \| __|____| |_) / _ \/ __| __|
 / ___ \ (_| (_|  __/ |_) | ||_____|  __/ (_) \__ \ |_ 
/_/   \_\___\___\___| .__/ \__|    |_|   \___/|___/\__|
                    |_|                                
Accept-Post

The  Accept-Post response HTTP header advertises which media types are
accepted by the server for HTTP post requests.

 Accept-Post in response to any method means that  POST is allowed on
the requested resource (any document/media format in the header further
indicates that the document format is allowed).

For example, a server receiving a  POST request with an unsupported
media type could reply with  415  Unsupported Media Type and an
 Accept-Post header referencing one or more supported media types.

Note: An IANA registry maintains a complete list of official content
encodings .

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   yes
  ----------------------- -----------------

Syntax

http

    Accept-Post: <MIME_type>/<MIME_subtype>
    Accept-Post: <MIME_type>/*
    Accept-Post: */*

Note: The  Accept-Post header specifies a media range in the same way as
 Accept , except that it has no notion of preference (i.e., no  q
arguments). This is because  Accept-Post is a response header while
 Accept is a request header.

Directives

None.

Examples

http

    Accept-Post: application/example, text/example
    Accept-Post: image/webp
    Accept-Post: */*

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Linked Data Platform
  # header-accept-post

  -----------------------------------------------------------------------

Browser compatibility

Browser compatibility is not relevant for this header (header is sent by
server, and the specification does not define client behavior).

See also

-   Http method  POST
-   HTTP Semantic and context RFC 7231, section 4.3.3: POST

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Accept-Ranges #
    _                      _        ____                             
   / \   ___ ___ ___ _ __ | |_     |  _ \ __ _ _ __   __ _  ___  ___ 
  / _ \ / __/ __/ _ \ '_ \| __|____| |_) / _` | '_ \ / _` |/ _ \/ __|
 / ___ \ (_| (_|  __/ |_) | ||_____|  _ < (_| | | | | (_| |  __/\__ \
/_/   \_\___\___\___| .__/ \__|    |_| \_\__,_|_| |_|\__, |\___||___/
                    |_|                              |___/           
Accept-Ranges

The  Accept-Ranges HTTP response header is a marker used by the server
to advertise its support for partial requests from the client for file
downloads. The value of this field indicates the unit that can be used
to define a range.

In the presence of an  Accept-Ranges header, the browser may try to
resume an interrupted download instead of trying to restart the
download.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Accept-Ranges: <range-unit>
    Accept-Ranges: none

Directives

 <range-unit>

    Defines the range unit that the server supports. Though  bytes is
    the only range unit formally defined by RFC 7233 , additional range
    units may be registered in the HTTP Range Unit Registry .

 none

    Indicates that no range unit is supported. This makes the header
    equivalent of its own absence and is therefore, rarely used.
    Although in some browsers, like IE9, this setting is used to disable
    or remove the pause buttons in the download manager.

Examples

http

    Accept-Ranges: bytes

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.accept-ranges

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    If-Range
-    Range
-   IANA HTTP Range Unit Registry

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jun 4, 2023 by MDN contributors .
# Access-Control-Allow-Credentials #
    _                                ____            _             _       
   / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
 / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
/_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                           
    _    _ _                     ____              _            _   _       _ 
   / \  | | | _____      __     / ___|_ __ ___  __| | ___ _ __ | |_(_) __ _| |
  / _ \ | | |/ _ \ \ /\ / /____| |   | '__/ _ \/ _` |/ _ \ '_ \| __| |/ _` | |
 / ___ \| | | (_) \ V  V /_____| |___| | |  __/ (_| |  __/ | | | |_| | (_| | |
/_/   \_\_|_|\___/ \_/\_/       \____|_|  \___|\__,_|\___|_| |_|\__|_|\__,_|_|
                                                                              
     
 ___ 
/ __|
\__ \
|___/
     
Access-Control-Allow-Credentials

The  Access-Control-Allow-Credentials response header tells browsers
whether the server allows cross-origin HTTP requests to include
credentials.

Credentials are cookies, TLS client certificates, or authentication
headers containing a username and password. By default, these
credentials are not sent in cross-origin requests, and doing so can make
a site vulnerable to CSRF attacks.

A client can ask that credentials should be included in cross-site
requests in one of two ways:

-   Using  fetch() , by setting the  credentials option in the
     Request() constructor to  "include" .
-   Using  XMLHttpRequest , by setting the
     XMLHttpRequest.withCredentials property to  true .

If the client has asked for credentials to be included:

-   If the request is preflighted , then the preflight request does not
    include credentials. If the server's response to the preflight
    request sets the  Access-Control-Allow-Credentials header to  true ,
    then the real request will include credentials: otherwise, the
    browser reports a network error.
-   If the request is not preflighted, then the request will include
    credentials, and if the server's response does not set the
     Access-Control-Allow-Credentials header to  true , the browser
    reports a network error.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Access-Control-Allow-Credentials: true

Directives

 true

    The only valid value for this header is  true (case-sensitive). If
    you don't need credentials, omit this header entirely (rather than
    setting its value to  false ).

Examples

Allow credentials:

http

    Access-Control-Allow-Credentials: true

Using  fetch() with credentials:

js

    fetch(url, {
      credentials: "include",
    });

Using  XMLHttpRequest with credentials:

js

    const xhr = new XMLHttpRequest();
    xhr.open("GET", "http://example.com/", true);
    xhr.withCredentials = true;
    xhr.send(null);

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Standard
  # http-access-control-allow-credentials

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    XMLHttpRequest.withCredentials
-    Request()

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 16, 2023 by MDN contributors .
# Access-Control-Allow-Headers #
    _                                ____            _             _       
   / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
 / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
/_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                           
    _    _ _                    _   _                _               
   / \  | | | _____      __    | | | | ___  __ _  __| | ___ _ __ ___ 
  / _ \ | | |/ _ \ \ /\ / /____| |_| |/ _ \/ _` |/ _` |/ _ \ '__/ __|
 / ___ \| | | (_) \ V  V /_____|  _  |  __/ (_| | (_| |  __/ |  \__ \
/_/   \_\_|_|\___/ \_/\_/      |_| |_|\___|\__,_|\__,_|\___|_|  |___/
                                                                     
Access-Control-Allow-Headers

The  Access-Control-Allow-Headers response header is used in response to
a preflight request which includes the  Access-Control-Request-Headers
to indicate which HTTP headers can be used during the actual request.

This header is required if the request has an
 Access-Control-Request-Headers header.

Note: CORS-safelisted request headers are always allowed and usually
aren't listed in  Access-Control-Allow-Headers (unless there is a need
to circumvent the safelist additional restrictions ).

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Access-Control-Allow-Headers: [<header-name>[, <header-name>]*]
    Access-Control-Allow-Headers: *

Directives

 <header-name>

    The name of a supported request header. The header may list any
    number of headers, separated by commas.

 * (wildcard)

    The value "  * " only counts as a special wildcard value for
    requests without credentials (requests without HTTP cookies or HTTP
    authentication information). In requests with credentials, it is
    treated as the literal header name "  * " without special semantics.
    Note that the  Authorization header can't be wildcarded and always
    needs to be listed explicitly.

Examples

A custom header

Here's an example of what an  Access-Control-Allow-Headers header might
look like. It indicates that a custom header named  X-Custom-Header is
supported by CORS requests to the server (in addition to the
CORS-safelisted request headers ).

http

    Access-Control-Allow-Headers: X-Custom-Header

Multiple headers

This example shows  Access-Control-Allow-Headers when it specifies
support for multiple headers.

http

    Access-Control-Allow-Headers: X-Custom-Header, Upgrade-Insecure-Requests

Bypassing additional restrictions

Although CORS-safelisted request headers are always allowed and don't
usually need to be listed in  Access-Control-Allow-Headers , listing
them anyway will circumvent the additional restrictions that apply.

http

    Access-Control-Allow-Headers: Accept

Example preflight request

Let's look at an example of a preflight request involving
 Access-Control-Allow-Headers .

Request

First, the request. The preflight request is an  OPTIONS request that
includes some combination of the three preflight request headers:
 Access-Control-Request-Method ,  Access-Control-Request-Headers , and
 Origin .

The preflight request below tells the server that we want to send a CORS
 GET request with the headers listed in  Access-Control-Request-Headers
(  Content-Type and  x-requested-with ).

http

    OPTIONS /resource/foo
    Access-Control-Request-Method: GET
    Access-Control-Request-Headers: Content-Type, x-requested-with
    Origin: https://foo.bar.org

Response

If the CORS request indicated by the preflight request is authorized,
the server will respond to the preflight request with a message that
indicates the allowed origin, methods, and headers. Below we see that
 Access-Control-Allow-Headers includes the headers that were requested.

http

    HTTP/1.1 200 OK
    Content-Length: 0
    Connection: keep-alive
    Access-Control-Allow-Origin: https://foo.bar.org
    Access-Control-Allow-Methods: POST, GET, OPTIONS, DELETE
    Access-Control-Allow-Headers: Content-Type, x-requested-with
    Access-Control-Max-Age: 86400

If the requested method isn't supported, the server will respond with an
error.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Standard
  # http-access-control-allow-headers

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Access-Control-Allow-Origin
-    Access-Control-Expose-Headers
-    Access-Control-Allow-Methods
-    Access-Control-Request-Headers

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Access-Control-Allow-Methods #
    _                                ____            _             _       
   / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
 / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
/_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                           
    _    _ _                    __  __      _   _               _     
   / \  | | | _____      __    |  \/  | ___| |_| |__   ___   __| |___ 
  / _ \ | | |/ _ \ \ /\ / /____| |\/| |/ _ \ __| '_ \ / _ \ / _` / __|
 / ___ \| | | (_) \ V  V /_____| |  | |  __/ |_| | | | (_) | (_| \__ \
/_/   \_\_|_|\___/ \_/\_/      |_|  |_|\___|\__|_| |_|\___/ \__,_|___/
                                                                      
Access-Control-Allow-Methods

The  Access-Control-Allow-Methods response header specifies one or more
methods allowed when accessing a resource in response to a preflight
request .

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Access-Control-Allow-Methods: <method>, <method>, …
    Access-Control-Allow-Methods: *

Directives

<method>

    A comma-delimited list of the allowed HTTP request methods .

 * (wildcard)

    The value "  * " only counts as a special wildcard value for
    requests without credentials (requests without HTTP cookies or HTTP
    authentication information). In requests with credentials, it is
    treated as the literal method name "  * " without special semantics.

Examples

http

    Access-Control-Allow-Methods: GET, POST
    Access-Control-Allow-Methods: *

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Standard
  # http-access-control-allow-methods

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Access-Control-Allow-Origin
-    Access-Control-Expose-Headers
-    Access-Control-Allow-Headers
-    Access-Control-Request-Method

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 12, 2024 by MDN contributors .
# Access-Control-Allow-Origin #
    _                                ____            _             _       
   / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
 / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
/_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                           
    _    _ _                     ___       _       _       
   / \  | | | _____      __     / _ \ _ __(_) __ _(_)_ __  
  / _ \ | | |/ _ \ \ /\ / /____| | | | '__| |/ _` | | '_ \ 
 / ___ \| | | (_) \ V  V /_____| |_| | |  | | (_| | | | | |
/_/   \_\_|_|\___/ \_/\_/       \___/|_|  |_|\__, |_|_| |_|
                                             |___/         
Access-Control-Allow-Origin

The  Access-Control-Allow-Origin response header indicates whether the
response can be shared with requesting code from the given origin .

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Access-Control-Allow-Origin: *
    Access-Control-Allow-Origin: <origin>
    Access-Control-Allow-Origin: null

Directives

 *

    For requests without credentials , the literal value "  * " can be
    specified as a wildcard; the value tells browsers to allow
    requesting code from any origin to access the resource. Attempting
    to use the wildcard with credentials results in an error .

 <origin>

    Specifies an origin. Only a single origin can be specified. If the
    server supports clients from multiple origins, it must return the
    origin for the specific client making the request.

 null

    Specifies the origin "null".

    Note:  null should not be used : "It may seem safe to return
     Access-Control-Allow-Origin: "null" , but the serialization of the
    Origin of any resource that uses a non-hierarchical scheme (such as
     data: or  file: ) and sandboxed documents is defined to be "null".
    Many User Agents will grant such documents access to a response with
    an  Access-Control-Allow-Origin: "null" header, and any origin can
    create a hostile document with a "null" Origin. The "null" value for
    the ACAO header should therefore be avoided."

Examples

A response that tells the browser to allow code from any origin to
access a resource will include the following:

http

    Access-Control-Allow-Origin: *

A response that tells the browser to allow requesting code from the
origin  https://developer.mozilla.org to access a resource will include
the following:

http

    Access-Control-Allow-Origin: https://developer.mozilla.org

Limiting the possible  Access-Control-Allow-Origin values to a set of
allowed origins requires code on the server side to check the value of
the  Origin request header, compare that to a list of allowed origins,
and then if the  Origin value is in the list, set the
 Access-Control-Allow-Origin value to the same value as the  Origin
value.

CORS and caching

Suppose the server sends a response with an  Access-Control-Allow-Origin
value with an explicit origin (rather than the "  * " wildcard). In that
case, the response should also include a  Vary response header with the
value  Origin — to indicate to browsers that server responses can differ
based on the value of the  Origin request header.

http

    Access-Control-Allow-Origin: https://developer.mozilla.org
    Vary: Origin

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Standard
  # http-access-control-allow-origin

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Origin
-    Vary
-   Cross-Origin Resource Sharing (CORS)
-    Cross-Origin-Resource-Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Access-Control-Expose-Headers #
    _                                ____            _             _       
   / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
 / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
/_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                           
 _____                                 _   _                _               
| ____|_  ___ __   ___  ___  ___      | | | | ___  __ _  __| | ___ _ __ ___ 
|  _| \ \/ / '_ \ / _ \/ __|/ _ \_____| |_| |/ _ \/ _` |/ _` |/ _ \ '__/ __|
| |___ >  <| |_) | (_) \__ \  __/_____|  _  |  __/ (_| | (_| |  __/ |  \__ \
|_____/_/\_\ .__/ \___/|___/\___|     |_| |_|\___|\__,_|\__,_|\___|_|  |___/
           |_|                                                              
Access-Control-Expose-Headers

The  Access-Control-Expose-Headers response header allows a server to
indicate which response headers should be made available to scripts
running in the browser, in response to a cross-origin request.

Only the CORS-safelisted response headers are exposed by default. For
clients to be able to access other headers, the server must list them
using the  Access-Control-Expose-Headers header.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Access-Control-Expose-Headers: [<header-name>[, <header-name>]*]
    Access-Control-Expose-Headers: *

Directives

<header-name>

    A list of zero or more comma-separated header names that clients are
    allowed to access from a response. These are in addition to the
    CORS-safelisted response headers .

 * (wildcard)

    The value "  * " only counts as a special wildcard value for
    requests without credentials (requests without HTTP cookies or HTTP
    authentication information). In requests with credentials, it is
    treated as the literal header name "  * ".

Examples

The CORS-safelisted response headers are:  Cache-Control ,
 Content-Language ,  Content-Length ,  Content-Type ,  Expires ,
 Last-Modified ,  Pragma . To expose a non-CORS-safelisted response
header, you can specify:

http

    Access-Control-Expose-Headers: Content-Encoding

To additionally expose a custom header, like  Kuma-Revision , you can
specify multiple headers separated by a comma:

http

    Access-Control-Expose-Headers: Content-Encoding, Kuma-Revision

For requests without credentials, a server can also respond with a
wildcard value:

http

    Access-Control-Expose-Headers: *

A server can also respond with the  * value for requests with
credentials, but in this case it would refer to a header named  * .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Standard
  # http-access-control-expose-headers

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Access-Control-Allow-Headers
-    Access-Control-Allow-Origin

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jun 23, 2023 by MDN contributors .
# Access-Control-Max-Age #
    _                                ____            _             _       
   / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
 / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
/_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                           
 __  __                   _              
|  \/  | __ ___  __      / \   __ _  ___ 
| |\/| |/ _` \ \/ /____ / _ \ / _` |/ _ \
| |  | | (_| |>  <_____/ ___ \ (_| |  __/
|_|  |_|\__,_/_/\_\   /_/   \_\__, |\___|
                              |___/      
Access-Control-Max-Age

The  Access-Control-Max-Age response header indicates how long the
results of a preflight request (that is the information contained in the
 Access-Control-Allow-Methods and  Access-Control-Allow-Headers headers)
can be cached.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Access-Control-Max-Age: <delta-seconds>

Directives

<delta-seconds>

    Maximum number of seconds the results can be cached, as an unsigned
    non-negative integer. Firefox caps this at 24 hours (86400 seconds).
    Chromium (prior to v76) caps at 10 minutes (600 seconds). Chromium
    (starting in v76) caps at 2 hours (7200 seconds). The default value
    is 5 seconds.

Examples

Cache results of a preflight request for 10 minutes:

http

    Access-Control-Max-Age: 600

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Standard
  # http-access-control-max-age

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Access-Control-Allow-Headers
-    Access-Control-Allow-Methods

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Access-Control-Request-Headers #
    _                                ____            _             _       
   / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
 / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
/_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                           
 ____                            _        _   _                _               
|  _ \ ___  __ _ _   _  ___  ___| |_     | | | | ___  __ _  __| | ___ _ __ ___ 
| |_) / _ \/ _` | | | |/ _ \/ __| __|____| |_| |/ _ \/ _` |/ _` |/ _ \ '__/ __|
|  _ <  __/ (_| | |_| |  __/\__ \ ||_____|  _  |  __/ (_| | (_| |  __/ |  \__ \
|_| \_\___|\__, |\__,_|\___||___/\__|    |_| |_|\___|\__,_|\__,_|\___|_|  |___/
              |_|                                                              
Access-Control-Request-Headers

The  Access-Control-Request-Headers request header is used by browsers
when issuing a preflight request to let the server know which HTTP
headers the client might send when the actual request is made (such as
with  fetch() or  XMLHttpRequest.setRequestHeader() ). The complementary
server-side header of  Access-Control-Allow-Headers will answer this
browser-side header.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   yes
  ----------------------- ----------------

Syntax

http

    Access-Control-Request-Headers: <header-name>, <header-name>, …

Directives

<header-name>

    A comma-delimited list of HTTP headers that are included in the
    request.

Examples

http

    Access-Control-Request-Headers: X-PINGOTHER, Content-Type

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Standard
  # http-access-control-request-headers

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Access-Control-Request-Method

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 16, 2023 by MDN contributors .
# Access-Control-Request-Method #
    _                                ____            _             _       
   / \   ___ ___ ___  ___ ___       / ___|___  _ __ | |_ _ __ ___ | |      
  / _ \ / __/ __/ _ \/ __/ __|_____| |   / _ \| '_ \| __| '__/ _ \| |_____ 
 / ___ \ (_| (_|  __/\__ \__ \_____| |__| (_) | | | | |_| | | (_) | |_____|
/_/   \_\___\___\___||___/___/      \____\___/|_| |_|\__|_|  \___/|_|      
                                                                           
 ____                            _        __  __      _   _               _ 
|  _ \ ___  __ _ _   _  ___  ___| |_     |  \/  | ___| |_| |__   ___   __| |
| |_) / _ \/ _` | | | |/ _ \/ __| __|____| |\/| |/ _ \ __| '_ \ / _ \ / _` |
|  _ <  __/ (_| | |_| |  __/\__ \ ||_____| |  | |  __/ |_| | | | (_) | (_| |
|_| \_\___|\__, |\__,_|\___||___/\__|    |_|  |_|\___|\__|_| |_|\___/ \__,_|
              |_|                                                           
Access-Control-Request-Method

The  Access-Control-Request-Method request header is used by browsers
when issuing a preflight request , to let the server know which HTTP
method will be used when the actual request is made. This header is
necessary as the preflight request is always an  OPTIONS and doesn't use
the same method as the actual request.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   yes
  ----------------------- ----------------

Syntax

http

    Access-Control-Request-Method: <method>

Directives

<method>

    One of the HTTP request methods , for example  GET ,  POST , or
     DELETE .

Examples

http

    Access-Control-Request-Method: POST

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Standard
  # http-access-control-request-method

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Access-Control-Request-Headers

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Age #
    _              
   / \   __ _  ___ 
  / _ \ / _` |/ _ \
 / ___ \ (_| |  __/
/_/   \_\__, |\___|
        |___/      
Age

The  Age header contains the time in seconds the object was in a proxy
cache.

The  Age header is usually close to zero. If it is  Age: 0 , it was
probably fetched from the origin server; otherwise, it was usually
calculated as a difference between the proxy's current date and the
 Date general header included in the HTTP response.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Age: <delta-seconds>

Directives

<delta-seconds>

    A non-negative integer that is time in seconds the object was in a
    proxy cache.

Examples

http

    Age: 24

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Caching
  # field.age

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Cache-Control
-    Expires

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Allow #
    _    _ _               
   / \  | | | _____      __
  / _ \ | | |/ _ \ \ /\ / /
 / ___ \| | | (_) \ V  V / 
/_/   \_\_|_|\___/ \_/\_/  
                           
Allow

The  Allow header lists the set of methods supported by a resource.

This header must be sent if the server responds with a  405
 Method Not Allowed status code to indicate which request methods can be
used. An empty  Allow header indicates that the resource allows no
request methods, which might occur temporarily for a given resource, for
example.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Allow: <http-methods>

Directives

<http-methods>

    The comma-separated list of allowed HTTP request methods .

Examples

http

    Allow: GET, POST, HEAD

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.allow

  -----------------------------------------------------------------------

See also

-    405
-    Server

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Alt-Svc #
    _    _ _       ____           
   / \  | | |_    / ___|_   _____ 
  / _ \ | | __|___\___ \ \ / / __|
 / ___ \| | ||_____|__) \ V / (__ 
/_/   \_\_|\__|   |____/ \_/ \___|
                                  
Alt-Svc

The  Alt-Svc HTTP header allows a server to indicate that another
network location (the "alternative service") can be treated as
authoritative for that origin when making future requests.

Doing so allows new protocol versions to be advertised without affecting
in-flight requests, and can also help servers manage traffic. Using an
alternative service is not visible to the end user; it does not change
the URL or the origin of the request, and does not introduce extra round
trips.

Syntax

http

    Alt-Svc: clear
    Alt-Svc: <protocol-id>=<alt-authority>; ma=<max-age>
    Alt-Svc: <protocol-id>=<alt-authority>; ma=<max-age>; persist=1

 clear

    The special value  clear indicates that the origin requests all
    alternative services for that origin to be invalidated.

 <protocol-id>

    The ALPN protocol identifier. Examples include  h2 for HTTP/2 and
     h3-25 for draft 25 of the HTTP/3 protocol.

 <alt-authority>

    The quoted string specifying the alternative authority which
    consists of an optional host override, a colon, and a mandatory port
    number.

 ma=<max-age>  Optional 

    The number of seconds for which the alternative service is
    considered fresh. If omitted, it defaults to 24 hours. Alternative
    service entries can be cached for up to <max-age> seconds, minus the
    age of the response (from the  Age header). Once the cached entry
    expires, the client can no longer use this alternative service for
    new connections.

 persist=1  Optional 

    Usually cached alternative service entries are cleared on network
    configuration changes. Use of the  persist=1 parameter requests that
    the entry not be deleted by such changes.

Multiple entries can be specified in a single  Alt-Svc header using
comma as separator. In that case, early entries are considered more
preferable.

Example

http

    Alt-Svc: h2=":443"; ma=2592000;
    Alt-Svc: h2=":443"; ma=2592000; persist=1
    Alt-Svc: h2="alt.example.com:443", h2=":443"
    Alt-Svc: h3-25=":443"; ma=3600, h2=":443"; ma=3600

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Alternative Services
  # alt-svc

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Alternative Services (article about  Alt-Svc by HTTP Working Group
    chair Mark Nottingham)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Alt-Used #
    _    _ _        _   _              _ 
   / \  | | |_     | | | |___  ___  __| |
  / _ \ | | __|____| | | / __|/ _ \/ _` |
 / ___ \| | ||_____| |_| \__ \  __/ (_| |
/_/   \_\_|\__|     \___/|___/\___|\__,_|
                                         
Alt-Used

The  Alt-Used HTTP header is used in requests to identify the
alternative service in use, just as the  Host HTTP header field
identifies the host and port of the origin.

The is intended to allow alternative services to detect loops,
differentiate traffic for purposes of load balancing, and generally to
ensure that it is possible to identify the intended destination of
traffic, since introducing this information after a protocol is in use
has proven to be problematic.

When a client uses an alternative service for a request, it can indicate
this to the server using the  Alt-Used HTTP header.

Syntax

http

    Alt-Used: <host>:<port>

Directives

<host>

    the domain name of the server.

<port>  Optional 

    TCP port number on which the server is listening.

Examples

http

    Alt-Used: alternate.example.net

See also

-    Alt-Svc
-    Host

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 19, 2023 by MDN contributors .
# Authorization #
    _         _   _                _          _   _             
   / \  _   _| |_| |__   ___  _ __(_)______ _| |_(_) ___  _ __  
  / _ \| | | | __| '_ \ / _ \| '__| |_  / _` | __| |/ _ \| '_ \ 
 / ___ \ |_| | |_| | | | (_) | |  | |/ / (_| | |_| | (_) | | | |
/_/   \_\__,_|\__|_| |_|\___/|_|  |_/___\__,_|\__|_|\___/|_| |_|
                                                                
Authorization

The HTTP  Authorization request header can be used to provide
credentials that authenticate a user agent with a server, allowing
access to a protected resource.

The  Authorization header is usually, but not always, sent after the
user agent first attempts to request a protected resource without
credentials. The server responds with a  401  Unauthorized message that
includes at least one  WWW-Authenticate header. This header indicates
what authentication schemes can be used to access the resource (and any
additional information needed by the client to use them). The user-agent
should select the most secure authentication scheme that it supports
from those offered, prompt the user for their credentials, and then
re-request the resource (including the encoded credentials in the
 Authorization header).

This header is stripped from cross-origin redirects.

Note: This header is part of the General HTTP authentication framework .
It can be used with a number of authentication schemes .

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

http

    Authorization: <auth-scheme> <authorization-parameters>

Basic authentication

http

    Authorization: Basic <credentials>

Digest authentication

http

    Authorization: Digest username=<username>,
        realm="<realm>",
        uri="<url>",
        algorithm=<algorithm>,
        nonce="<nonce>",
        nc=<nc>,
        cnonce="<cnonce>",
        qop=<qop>,
        response="<response>",
        opaque="<opaque>"

Directives

 <auth-scheme>

    The Authentication scheme that defines how the credentials are
    encoded. Some of the more common types are (case-insensitive):
     Basic ,  Digest ,  Negotiate and  AWS4-HMAC-SHA256 .

    Note: For more information/options see HTTP Authentication >
    Authentication schemes

Other than  <auth-scheme> the remaining directives are specific to each
authentication scheme . Generally you will need to check the relevant
specifications for these (keys for a small subset of schemes are listed
below).

Basic

<credentials>

    The credentials, encoded according to the specified scheme.

    Note: For information about the encoding algorithm, see the
    examples: below, in  WWW-Authenticate , in HTTP Authentication , and
    in the relevant specifications.

Digest

<response>

    A string of the hex digits that proves that the user knows a
    password. The algorithm encodes the username and password, realm,
    cnonce, qop, nc, and so on. It is described in detail in the
    specification.

 username

    A quoted string containing user's name for the specified  realm in
    either plain text or the hash code in hexadecimal notation. If the
    name contains characters that aren't allowed in the field, then
     username* can be used instead (not "as well").

 username*

    The user's name formatted using an extended notation defined in
    RFC5987. This should be used only if the name can't be encoded in
     username and if  userhash is set  "false" .

 uri

    The Effective Request URI . See the specification for more
    information.

 realm

    Realm of the requested username/password (again, should match the
    value in the corresponding  WWW-Authenticate response for the
    resource being requested).

 opaque

    The value in the corresponding  WWW-Authenticate response for the
    resource being requested.

 algorithm

    The algorithm used to calculate the digest. Must be a supported
    algorithm from the  WWW-Authenticate response for the resource being
    requested.

 qop

    A token indicating the quality of protection applied to the message.
    Must match the one value in the set specified in the
     WWW-Authenticate response for the resource being requested.

    -    "auth" : Authentication
    -    "auth-int" : Authentication with integrity protection

 cnonce

    An quoted ASCII -only string value provided by the client. This is
    used by both the client and server to provide mutual authentication,
    provide some message integrity protection, and avoid "chosen
    plaintext attacks". See the specification for additional
    information.

 nc

    Nonce count. The hexadecimal count of requests in which the client
    has sent the current  cnonce value (including the current request).
    The server can use duplicate  nc values to recognize replay
    requests.

 userhash  Optional 

     "true" if the username has been hashed.  "false" by default.

Examples

Basic authentication

For  "Basic" authentication the credentials are constructed by first
combining the username and the password with a colon (
 aladdin:opensesame ), and then by encoding the resulting string in
 base64 (  YWxhZGRpbjpvcGVuc2VzYW1l ).

http

    Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l

Warning: Base64 -encoding can easily be reversed to obtain the original
name and password, so Basic authentication is completely insecure. HTTPS
is always recommended when using authentication, but is even more so
when using  Basic authentication.

See also HTTP authentication for examples on how to configure Apache or
Nginx servers to password protect your site with HTTP basic
authentication.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.authorization

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP authentication
-    WWW-Authenticate
-    Proxy-Authorization
-    Proxy-Authenticate
-    401 ,  403 ,  407

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 29, 2023 by MDN contributors .
# Cache-Control #
  ____           _                 ____            _             _ 
 / ___|__ _  ___| |__   ___       / ___|___  _ __ | |_ _ __ ___ | |
| |   / _` |/ __| '_ \ / _ \_____| |   / _ \| '_ \| __| '__/ _ \| |
| |__| (_| | (__| | | |  __/_____| |__| (_) | | | | |_| | | (_) | |
 \____\__,_|\___|_| |_|\___|      \____\___/|_| |_|\__|_|  \___/|_|
                                                                   
Cache-Control

The  Cache-Control HTTP header field holds directives (instructions) —
in both requests and responses — that control caching in browsers and
shared caches (e.g. Proxies, CDNs).

  --------------------------------- ----------------------------------
  Header type                       Request header , Response header
  Forbidden header name             no
  CORS-safelisted response header   yes
  --------------------------------- ----------------------------------

Syntax

Cache directives follow these rules:

-   Caching directives are case-insensitive. However, lowercase is
    recommended because some implementations do not recognize uppercase
    directives.
-   Multiple directives are permitted and must be comma-separated (e.g.,
     Cache-control: max-age=180, public ).
-   Some directives have an optional argument. When an argument is
    provided, it is separated from the directive name by an equals
    symbol (  = ). Typically, arguments for the directives are integers
    and are therefore not enclosed in quote characters (e.g.,
     Cache-control: max-age=12 ).

Cache directives

The following table lists the standard  Cache-Control directives:

  Request           Response
  ----------------- -------------------------
   max-age           max-age
   max-stale        -
   min-fresh        -
  -                  s-maxage
   no-cache          no-cache
   no-store          no-store
   no-transform      no-transform
   only-if-cached   -
  -                  must-revalidate
  -                  proxy-revalidate
  -                  must-understand
  -                  private
  -                  public
  -                  immutable
  -                  stale-while-revalidate
   stale-if-error    stale-if-error

Note: Check the compatibility table for their support; user agents that
don't recognize them should ignore them.

Vocabulary

This section defines the terms used in this document, some of which are
from the specification.

 (HTTP) cache

    Implementation that holds requests and responses for reusing in
    subsequent requests. It can be either a shared cache or a private
    cache.

 Shared cache

    Cache that exists between the origin server and clients (e.g. Proxy,
    CDN). It stores a single response and reuses it with multiple users
    — so developers should avoid storing personalized contents to be
    cached in the shared cache.

 Private cache

    Cache that exists in the client. It is also called local cache or
    browser cache . It can store and reuse personalized content for a
    single user.

 Store response

    Store a response in caches when the response is cacheable. However,
    the cached response is not always reused as-is. (Usually, "cache"
    means storing a response.)

 Reuse response

    Reuse cached responses for subsequent requests.

 Revalidate response

    Ask the origin server whether or not the stored response is still
    fresh . Usually, the revalidation is done through a conditional
    request.

 Fresh response

    Indicates that the response is fresh . This usually means the
    response can be reused for subsequent requests, depending on request
    directives.

 Stale response

    Indicates that the response is a stale response . This usually means
    the response can't be reused as-is. Cache storage isn't required to
    remove stale responses immediately because revalidation could change
    the response from being stale to being fresh again.

 Age

    The time since a response was generated. It is a criterion for
    whether a response is fresh or stale .

Directives

This section lists directives that affect caching — both response
directives and request directives.

Response Directives

 max-age

The  max-age=N response directive indicates that the response remains
fresh until N seconds after the response is generated.

http

    Cache-Control: max-age=604800

Indicates that caches can store this response and reuse it for
subsequent requests while it's fresh .

Note that  max-age is not the elapsed time since the response was
received; it is the elapsed time since the response was generated on the
origin server. So if the other cache(s) — on the network route taken by
the response — store the response for 100 seconds (indicated using the
 Age response header field), the browser cache would deduct 100 seconds
from its freshness lifetime .

http

    Cache-Control: max-age=604800
    Age: 100

 s-maxage

The  s-maxage response directive indicates how long the response remains
fresh in a shared cache. The  s-maxage directive is ignored by private
caches, and overrides the value specified by the  max-age directive or
the  Expires header for shared caches, if they are present.

http

    Cache-Control: s-maxage=604800

 no-cache

The  no-cache response directive indicates that the response can be
stored in caches, but the response must be validated with the origin
server before each reuse, even when the cache is disconnected from the
origin server.

http

    Cache-Control: no-cache

If you want caches to always check for content updates while reusing
stored content,  no-cache is the directive to use. It does this by
requiring caches to revalidate each request with the origin server.

Note that  no-cache does not mean "don't cache".  no-cache allows caches
to store a response but requires them to revalidate it before reuse. If
the sense of "don't cache" that you want is actually "don't store", then
 no-store is the directive to use.

 must-revalidate

The  must-revalidate response directive indicates that the response can
be stored in caches and can be reused while fresh . If the response
becomes stale , it must be validated with the origin server before
reuse.

Typically,  must-revalidate is used with  max-age .

http

    Cache-Control: max-age=604800, must-revalidate

HTTP allows caches to reuse stale responses when they are disconnected
from the origin server.  must-revalidate is a way to prevent this from
happening - either the stored response is revalidated with the origin
server or a 504 (Gateway Timeout) response is generated.

 proxy-revalidate

The  proxy-revalidate response directive is the equivalent of
 must-revalidate , but specifically for shared caches only.

 no-store

The  no-store response directive indicates that any caches of any kind
(private or shared) should not store this response.

http

    Cache-Control: no-store

 private

The  private response directive indicates that the response can be
stored only in a private cache (e.g. local caches in browsers).

http

    Cache-Control: private

You should add the  private directive for user-personalized content,
especially for responses received after login and for sessions managed
via cookies.

If you forget to add  private to a response with personalized content,
then that response can be stored in a shared cache and end up being
reused for multiple users, which can cause personal information to leak.

 public

The  public response directive indicates that the response can be stored
in a shared cache. Responses for requests with  Authorization header
fields must not be stored in a shared cache; however, the  public
directive will cause such responses to be stored in a shared cache.

http

    Cache-Control: public

In general, when pages are under Basic Auth or Digest Auth, the browser
sends requests with the  Authorization header. This means that the
response is access-controlled for restricted users (who have accounts),
and it's fundamentally not shared-cacheable, even if it has  max-age .

You can use the  public directive to unlock that restriction.

http

    Cache-Control: public, max-age=604800

Note that  s-maxage or  must-revalidate also unlock that restriction.

If a request doesn't have an  Authorization header, or you are already
using  s-maxage or  must-revalidate in the response, then you don't need
to use  public .

 must-understand

The  must-understand response directive indicates that a cache should
store the response only if it understands the requirements for caching
based on status code.

 must-understand should be coupled with  no-store for fallback behavior.

http

    Cache-Control: must-understand, no-store

If a cache doesn't support  must-understand , it will be ignored. If
 no-store is also present, the response isn't stored.

If a cache supports  must-understand , it stores the response with an
understanding of cache requirements based on its status code.

 no-transform

Some intermediaries transform content for various reasons. For example,
some convert images to reduce transfer size. In some cases, this is
undesirable for the content provider.

 no-transform indicates that any intermediary (regardless of whether it
implements a cache) shouldn't transform the response contents.

 immutable

The  immutable response directive indicates that the response will not
be updated while it's fresh .

http

    Cache-Control: public, max-age=604800, immutable

A modern best practice for static resources is to include version/hashes
in their URLs, while never modifying the resources — but instead, when
necessary, updating the resources with newer versions that have new
version-numbers/hashes, so that their URLs are different. That's called
the cache-busting pattern.

html

    <script src=https://example.com/react.0.0.0.js></script>

When a user reloads the browser, the browser will send conditional
requests for validating to the origin server. But it's not necessary to
revalidate those kinds of static resources even when a user reloads the
browser, because they're never modified.  immutable tells a cache that
the response is immutable while it's fresh and avoids those kinds of
unnecessary conditional requests to the server.

When you use a cache-busting pattern for resources and apply them to a
long  max-age , you can also add  immutable to avoid revalidation.

 stale-while-revalidate

The  stale-while-revalidate response directive indicates that the cache
could reuse a stale response while it revalidates it to a cache.

http

    Cache-Control: max-age=604800, stale-while-revalidate=86400

In the example above, the response is fresh for 7 days (604800s). After
7 days it becomes stale , but the cache is allowed to reuse it for any
requests that are made in the following day (86400s), provided that they
revalidate the response in the background.

Revalidation will make the cache be fresh again, so it appears to
clients that it was always fresh during that period — effectively hiding
the latency penalty of revalidation from them.

If no request happened during that period, the cache became stale and
the next request will revalidate normally.

 stale-if-error

The  stale-if-error response directive indicates that the cache can
reuse a stale response when an upstream server generates an error, or
when the error is generated locally. Here, an error is considered any
response with a status code of 500, 502, 503, or 504.

http

    Cache-Control: max-age=604800, stale-if-error=86400

In the example above, the response is fresh for 7 days (604800s).
Afterwards, it becomes stale , but can be used for an extra 1 day
(86400s) when an error is encountered.

After the stale-if-error period passes, the client will receive any
error generated.

Request Directives

 no-cache

The  no-cache request directive asks caches to validate the response
with the origin server before reuse.

http

    Cache-Control: no-cache

 no-cache allows clients to request the most up-to-date response even if
the cache has a fresh response.

Browsers usually add  no-cache to requests when users are force
reloading a page.

 no-store

The  no-store request directive allows a client to request that caches
refrain from storing the request and corresponding response — even if
the origin server's response could be stored.

http

    Cache-Control: no-store

 max-age

The  max-age=N request directive indicates that the client allows a
stored response that is generated on the origin server within N seconds
— where N may be any non-negative integer (including  0 ).

http

    Cache-Control: max-age=10800

In the case above, if the response with  Cache-Control: max-age=10800
was generated more than 3 hours ago (calculated from  max-age and the
 Age header), the cache couldn't reuse that response.

Many browsers use this directive for reloading , as explained below.

http

    Cache-Control: max-age=0

 max-age=0 is a workaround for  no-cache , because many old (HTTP/1.0)
cache implementations don't support  no-cache . Recently browsers are
still using  max-age=0 in "reloading" — for backward compatibility — and
alternatively using  no-cache to cause a "force reloading".

If the  max-age value isn't non-negative (for example,  -1 ) or isn't an
integer (for example,  3599.99 ), then the caching behavior is
undefined. However, the Calculating Freshness Lifetime section of the
HTTP specification states:

  Caches are encouraged to consider responses that have invalid
  freshness information to be stale.

In other words, for any  max-age value that isn't an integer or isn't
non-negative, the caching behavior that's encouraged is to treat the
value as if it were  0 .

 max-stale

The  max-stale=N request directive indicates that the client allows a
stored response that is stale within N seconds.

http

    Cache-Control: max-stale=3600

In the case above, if the response with  Cache-Control: max-age=604800
was generated more than 3 hours ago (calculated from  max-age and the
 Age header), the cache couldn't reuse that response.

Clients can use this header when the origin server is down or too slow
and can accept cached responses from caches even if they are a bit old.

Note that the major browsers do not support requests with  max-stale .

 min-fresh

The  min-fresh=N request directive indicates that the client allows a
stored response that is fresh for at least N seconds.

http

    Cache-Control: min-fresh=600

In the case above, if the response with  Cache-Control: max-age=3600 was
stored in caches 51 minutes ago, the cache couldn't reuse that response.

Clients can use this header when the user requires the response to not
only be fresh , but also requires that it won't be updated for a period
of time.

Note that the major browsers do not support requests with  min-fresh .

 no-transform

Same meaning that  no-transform has for a response, but for a request
instead.

 only-if-cached

The client indicates that an already-cached response should be returned.
If a cache has a stored response, even a stale one, it will be returned.
If no cached response is available, a 504 Gateway Timeout response will
be returned.

Use Cases

Preventing storing

If you don't want a response stored in caches, use the  no-store
directive.

http

    Cache-Control: no-store

Note that  no-cache means "it can be stored but don't reuse before
validating" — so it's not for preventing a response from being stored.

http

    Cache-Control: no-cache

In theory, if directives are conflicted, the most restrictive directive
should be honored. So the example below is basically meaningless because
 private ,  no-cache ,  max-age=0 and  must-revalidate conflict with
 no-store .

http

    # conflicted
    Cache-Control: private, no-cache, no-store, max-age=0, must-revalidate

    # equivalent to
    Cache-Control: no-store

Caching static assets with "cache busting"

When you build static assets with versioning/hashing mechanisms, adding
a version/hash to the filename or query string is a good way to manage
caching.

For example:

html

    <!-- index.html -->
    <script src="/assets/react.min.js"></script>
    <img src="/assets/hero.png" width="900" height="400" />

The React library version will change when you update the library, and
 hero.png will also change when you edit the picture. So those are hard
to store in a cache with  max-age .

In such a case, you could address the caching needs by using a specific,
numbered version of the library, and including the hash of the picture
in its URL.

html

    <!-- index.html -->
    <script src="/assets/react.0.0.0min.js"></script>
    <img src="/assets/hero.png?hash=deadbeef" width="900" height="400" />

You can add a long  max-age value and  immutable because the content
will never change.

http

    # /assets/*
    Cache-Control: max-age=31536000, immutable

When you update the library or edit the picture, new content should have
a new URL, and caches aren't reused. That is called the "cache busting"
pattern.

Use a  no-cache to make sure that the HTML response itself is not
cached.  no-cache could cause revalidation, and the client will
correctly receive a new version of the HTML response and static assets.

http

    # /index.html
    Cache-Control: no-cache

Note: If  index.html is controlled under Basic Authentication or Digest
Authentication, files under  /assets are not stored in the shared cache.
If  /assets/ files are suitable for storing in a shared cache, you also
need one of  public ,  s-maxage or  must-revalidate .

Up-to-date contents always

For content that's generated dynamically, or that's static but updated
often, you want a user to always receive the most up-to-date version.

If you don't add a  Cache-Control header because the response is not
intended to be cached, that could cause an unexpected result. Cache
storage is allowed to cache it heuristically — so if you have any
requirements on caching, you should always indicate them explicitly, in
the  Cache-Control header.

Adding  no-cache to the response causes revalidation to the server, so
you can serve a fresh response every time — or if the client already has
a new one, just respond  304 Not Modified .

http

    Cache-Control: no-cache

Most HTTP/1.0 caches don't support  no-cache directives, so historically
 max-age=0 was used as a workaround. But only  max-age=0 could cause a
stale response to be reused when caches disconnected from the origin
server.  must-revalidate addresses that. That's why the example below is
equivalent to  no-cache .

http

    Cache-Control: max-age=0, must-revalidate

But for now, you can simply use  no-cache instead.

Clearing an already-stored cache

Unfortunately, there are no cache directives for clearing already-stored
responses from caches.

Imagine that clients/caches store a fresh response for a path, with no
request flight to the server. There is nothing a server could do to that
path.

Alternatively,  Clear-Site-Data can clear a browser cache for a site.
But be careful: that clears every stored response for a site — and only
in browsers, not for a shared cache.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Caching
  # field.cache-control

  HTTP Immutable Responses
  # the-immutable-cache-control-extension
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP caching
-   Caching Tutorial for Web Authors and Webmasters
-   Caching best practices & max-age gotchas
-   Cache-Control for Civilians
-   RFC 9111 – HTTP Caching
-   RFC 5861 – HTTP Cache-Control Extensions for Stale Content
-   RFC 8246 – HTTP Immutable Responses

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 23, 2024 by MDN contributors .
# Clear-Site-Data #
  ____ _                     ____  _ _             ____        _        
 / ___| | ___  __ _ _ __    / ___|(_) |_ ___      |  _ \  __ _| |_ __ _ 
| |   | |/ _ \/ _` | '__|___\___ \| | __/ _ \_____| | | |/ _` | __/ _` |
| |___| |  __/ (_| | | |_____|__) | | ||  __/_____| |_| | (_| | || (_| |
 \____|_|\___|\__,_|_|      |____/|_|\__\___|     |____/ \__,_|\__\__,_|
                                                                        
Clear-Site-Data

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

The  Clear-Site-Data header clears browsing data (cookies, storage,
cache) associated with the requesting website. It allows web developers
to have more control over the data stored by a client browser for their
origins.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

The  Clear-Site-Data header accepts one or more directives. If all types
of data should be cleared, the wildcard directive (  "*" ) can be used.

http

    // Single directive
    Clear-Site-Data: "cache"

    // Multiple directives (comma separated)
    Clear-Site-Data: "cache", "cookies"

    // Wild card
    Clear-Site-Data: "*"

Directives

Note: All directives must comply with the quoted-string grammar . A
directive that does not include the double quotes is invalid.

 "cache"  Experimental 

    Indicates that the server wishes to remove locally cached data (the
    browser cache, see HTTP caching ) for the origin of the response
    URL. Depending on the browser, this might also clear out things like
    pre-rendered pages, script caches, WebGL shader caches, or address
    bar suggestions.

 "clientHints"  Experimental 

    Indicates that the server wishes to remove all client hints
    (requested via  Accept-CH ) stored for the origin of the response
    URL.

    Note: In browsers that support the  "clientHints" data type, client
    hints are also cleared when the  "cache" ,  "cookies" , or  "*"
    types are specified.  "clientHints" is therefore only needed when
    none of those other types are specified.

 "cookies"

    Indicates that the server wishes to remove all cookies for the
    origin of the response URL. HTTP authentication credentials are also
    cleared out. This affects the entire registered domain, including
    subdomains. So  https://example.com as well as
     https://stage.example.com , will have cookies cleared.

 "storage"

    Indicates that the server wishes to remove all DOM storage for the
    origin of the response URL. This includes storage mechanisms such
    as:

    -   localStorage (executes  localStorage.clear ),
    -   sessionStorage (executes  sessionStorage.clear ),
    -   IndexedDB (for each database execute  IDBFactory.deleteDatabase
        ),
    -   Service worker registrations (for each service worker
        registration, execute  ServiceWorkerRegistration.unregister ),
    -   Web SQL databases (deprecated),
    -   FileSystem API data ,
    -   Plugin data (Flash via  NPP_ClearSiteData ).

 "executionContexts"  Experimental 

    Indicates that the server wishes to reload all browsing contexts for
    the origin of the response (  Location.reload ).

 "*" (wildcard)

    Indicates that the server wishes to clear all types of data for the
    origin of the response. If more data types are added in future
    versions of this header, they will also be covered by it.

Examples

Sign out of a website

If a user signs out of your website or service, you might want to remove
locally stored data. To do this, add the  Clear-Site-Data header to the
page that confirms the logging out from the site has been accomplished
successfully (  https://example.com/logout , for example):

http

    Clear-Site-Data: "cache", "cookies", "storage", "executionContexts"

Clearing cookies

If this header is delivered with the response at
 https://example.com/clear-cookies , all cookies on the same domain
 https://example.com and any subdomains (like  https://stage.example.com
, etc.), will be cleared out.

http

    Clear-Site-Data: "cookies"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Clear Site Data
  # header

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Cache-Control

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 10, 2023 by MDN contributors .
# Connection #
  ____                            _   _             
 / ___|___  _ __  _ __   ___  ___| |_(_) ___  _ __  
| |   / _ \| '_ \| '_ \ / _ \/ __| __| |/ _ \| '_ \ 
| |__| (_) | | | | | | |  __/ (__| |_| | (_) | | | |
 \____\___/|_| |_|_| |_|\___|\___|\__|_|\___/|_| |_|
                                                    
Connection

The  Connection general header controls whether the network connection
stays open after the current transaction finishes. If the value sent is
 keep-alive , the connection is persistent and not closed, allowing for
subsequent requests to the same server to be done.

Warning: Connection-specific header fields such as  Connection and
 Keep-Alive are prohibited in HTTP/2 and HTTP/3 . Chrome and Firefox
ignore them in HTTP/2 responses, but Safari conforms to the HTTP/2 spec
requirements and does not load any response that contains them.

All hop-by-hop headers used by the message - including standard
hop-by-hop headers (  Keep-Alive ,  Transfer-Encoding ,  TE ,
 Connection ,  Trailer ,  Upgrade ,  Proxy-Authorization and
 Proxy-Authenticate ) - must be listed in the  Connection header, so
that the first proxy knows it has to consume them and not forward them
further.

  ----------------------- ----------------------------------
  Header type             Request header , Response header
  Forbidden header name   yes
  ----------------------- ----------------------------------

Syntax

http

    Connection: keep-alive
    Connection: close

Directives

 close

    Indicates that either the client or the server would like to close
    the connection. This is the default on HTTP/1.0 requests.

any comma-separated list of HTTP headers [Usually  keep-alive only]

    Indicates that the client would like to keep the connection open.
    Keeping a connection open is the default on HTTP/1.1 requests. The
    list of headers are the name of the header to be removed by the
    first non-transparent proxy or cache in-between: these headers
    define the connection between the emitter and the first entity, not
    the destination node.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.connection

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Content-Disposition #
  ____            _             _        ____  _                     _ _   _ 
 / ___|___  _ __ | |_ ___ _ __ | |_     |  _ \(_)___ _ __   ___  ___(_) |_(_)
| |   / _ \| '_ \| __/ _ \ '_ \| __|____| | | | / __| '_ \ / _ \/ __| | __| |
| |__| (_) | | | | ||  __/ | | | ||_____| |_| | \__ \ |_) | (_) \__ \ | |_| |
 \____\___/|_| |_|\__\___|_| |_|\__|    |____/|_|___/ .__/ \___/|___/_|\__|_|
                                                    |_|                      
             
  ___  _ __  
 / _ \| '_ \ 
| (_) | | | |
 \___/|_| |_|
             
Content-Disposition

In a regular HTTP response, the  Content-Disposition response header is
a header indicating if the content is expected to be displayed inline in
the browser, that is, as a Web page or as part of a Web page, or as an
attachment , that is downloaded and saved locally.

In a  multipart/form-data body, the HTTP  Content-Disposition general
header is a header that must be used on each subpart of a multipart body
to give information about the field it applies to. The subpart is
delimited by the boundary defined in the  Content-Type header. Used on
the body itself,  Content-Disposition has no effect.

The  Content-Disposition header is defined in the larger context of MIME
messages for email, but only a subset of the possible parameters apply
to HTTP forms and  POST requests. Only the value  form-data , as well as
the optional directive  name and  filename , can be used in the HTTP
context.

  ----------------------------------- -----------------------------------
  Header type                         Response header (for the main
                                      body),
                                      Request header , Response header
                                      (for a subpart of a multipart body)

  Forbidden header name               no
  ----------------------------------- -----------------------------------

Syntax

As a response header for the main body

The first parameter in the HTTP context is either  inline (default
value, indicating it can be displayed inside the Web page, or as the Web
page) or  attachment (indicating it should be downloaded; most browsers
presenting a 'Save as' dialog, prefilled with the value of the  filename
parameters if present).

http

    Content-Disposition: inline
    Content-Disposition: attachment
    Content-Disposition: attachment; filename="filename.jpg"

Note: Chrome, and Firefox 82 and later, prioritize the HTML <a>
element's  download attribute over the  Content-Disposition: inline
parameter (for same-origin URLs ). Earlier Firefox versions prioritize
the header and will display the content inline.

As a header for a multipart body

A  multipart/form-data body requires a  Content-Disposition header to
provide information for each subpart of the form (e.g. for every form
field and any files that are part of field data). The first directive is
always  form-data , and the header must also include a  name parameter
to identify the relevant field. Additional directives are
case-insensitive and have arguments that use quoted-string syntax after
the  '=' sign. Multiple parameters are separated by a semicolon (  ';'
).

http

    Content-Disposition: form-data; name="fieldName"
    Content-Disposition: form-data; name="fieldName"; filename="filename.jpg"

Directives

 name

    Is followed by a string containing the name of the HTML field in the
    form that the content of this subpart refers to. When dealing with
    multiple files in the same field (for example, the  multiple
    attribute of an   <input type="file">  element), there can be
    several subparts with the same name.

    A  name with a value of  '_charset_' indicates that the part is not
    an HTML field, but the default charset to use for parts without
    explicit charset information.

 filename

    Is followed by a string containing the original name of the file
    transmitted. The filename is always optional and must not be used
    blindly by the application: path information should be stripped, and
    conversion to the server file system rules should be done. This
    parameter provides mostly indicative information. When used in
    combination with  Content-Disposition: attachment , it is used as
    the default filename for an eventual "Save As" dialog presented to
    the user.

 filename*

    The parameters  filename and  filename* differ only in that
     filename* uses the encoding defined in RFC 5987 . When both
     filename and  filename* are present in a single header field value,
     filename* is preferred over  filename when both are understood.

Warning: The string following  filename should always be put into
quotes; but, for compatibility reasons, many browsers try to parse
unquoted names that contain spaces.

Examples

A response triggering the "Save As" dialog:

http

    200 OK
    Content-Type: text/html; charset=utf-8
    Content-Disposition: attachment; filename="cool.html"
    Content-Length: 21

    <HTML>Save me!</HTML>

This simple HTML file will be saved as a regular download rather than
displayed in the browser. Most browsers will propose to save it under
the  cool.html filename (by default).

An example of an HTML form posted using the  multipart/form-data format
that makes use of the  Content-Disposition header:

http

    POST /test.html HTTP/1.1
    Host: example.org
    Content-Type: multipart/form-data;boundary="boundary"

    --boundary
    Content-Disposition: form-data; name="field1"

    value1
    --boundary
    Content-Disposition: form-data; name="field2"; filename="example.txt"

    value2
    --boundary--

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Use of the Content-Disposition Header Field in the Hypertext Transfer
  Protocol (HTTP)
  # header.field.definition

  Returning Values from Forms: multipart/form-data
  # section-4.2
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Compatibility notes

-   Firefox 5 handles the  Content-Disposition HTTP response header more
    effectively if both the  filename and  filename* parameters are
    provided; it looks through all provided names, using the  filename*
    parameter if one is available, even if a  filename parameter is
    included first. Previously, the first matching parameter would be
    used, thereby preventing a more appropriate name from being used.
    See Firefox bug 588781 .
-   Firefox 82 (and later) and Chrome prioritize the HTML <a> element's
     download attribute over the  Content-Disposition: inline parameter
    (for same-origin URLs ). Earlier Firefox versions prioritize the
    header and will display the content inline.

See also

-   HTML Forms
-   The  Content-Type defining the boundary of the multipart body.
-   The  FormData interface used to prepare form data for use in the
     fetch() or  XMLHttpRequest APIs.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 16, 2023 by MDN contributors .
# Content-DPR #
  ____            _             _        ____  ____  ____  
 / ___|___  _ __ | |_ ___ _ __ | |_     |  _ \|  _ \|  _ \ 
| |   / _ \| '_ \| __/ _ \ '_ \| __|____| | | | |_) | |_) |
| |__| (_) | | | | ||  __/ | | | ||_____| |_| |  __/|  _ < 
 \____\___/|_| |_|\__\___|_| |_|\__|    |____/|_|   |_| \_\
                                                           
Content-DPR

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

Non-standard: This feature is non-standard and is not on a standards
track. Do not use it on production sites facing the Web: it will not
work for every user. There may also be large incompatibilities between
implementations and the behavior may change in the future.

The  Content-DPR response header is used to confirm the image device to
pixel ratio in requests where the screen  DPR client hint was used to
select an image resource.

  --------------------------------- -------------------------------
  Header type                       Response header , Client hint
  Forbidden header name             no
  CORS-safelisted response header   no
  --------------------------------- -------------------------------

If the  DPR client hint is used to select an image the server must
specify  Content-DPR in the response. If the value in  Content-DPR is
different from the  DPR value in the request (i.e. image DPR is not the
same as screen DPR) then the client must use the  Content-DPR for
determining intrinsic image size and scaling the image.

If the  Content-DPR header appears more than once in a message the last
occurrence is used.

Note:

-    Content-DPR was removed from the client hints specification in
    draft-ietf-httpbis-client-hints-07 . The Responsive Image Client
    Hints spec proposes to replace this header by specifying intrinsic
    resolution/dimensions in EXIF metadata.

Syntax

http

    Content-DPR: <number>

Directives

 <number>

    The image device pixel ratio, calculated according to the following
    formula: Content-DPR = Selected image resource size / ( Width / DPR
    )

Examples

See the  DPR header example.

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-   Device client hints
    -    Device-Memory
    -    DPR
    -    Viewport-Width
    -    Width
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Content-Encoding #
  ____            _             _        _____                     _ _       
 / ___|___  _ __ | |_ ___ _ __ | |_     | ____|_ __   ___ ___   __| (_)_ __  
| |   / _ \| '_ \| __/ _ \ '_ \| __|____|  _| | '_ \ / __/ _ \ / _` | | '_ \ 
| |__| (_) | | | | ||  __/ | | | ||_____| |___| | | | (_| (_) | (_| | | | | |
 \____\___/|_| |_|\__\___|_| |_|\__|    |_____|_| |_|\___\___/ \__,_|_|_| |_|
                                                                             
       
  __ _ 
 / _` |
| (_| |
 \__, |
 |___/ 
Content-Encoding

The  Content-Encoding representation header lists any encodings that
have been applied to the representation (message payload), and in what
order. This lets the recipient know how to decode the representation in
order to obtain the original payload format. Content encoding is mainly
used to compress the message data without losing information about the
origin media type.

Note that the original media/content type is specified in the
 Content-Type header, and that the  Content-Encoding applies to the
representation, or "coded form", of the data. If the original media is
encoded in some way (e.g. a zip file) then this information would not be
included in the  Content-Encoding header.

Servers are encouraged to compress data as much as possible, and should
use content encoding where appropriate. Compressing a compressed media
type such as a zip or jpeg may not be appropriate, as this can make the
payload larger.

  ----------------------- -----------------------
  Header type             Representation header
  Forbidden header name   no
  ----------------------- -----------------------

Syntax

http

    Content-Encoding: gzip
    Content-Encoding: compress
    Content-Encoding: deflate
    Content-Encoding: br

    // Multiple, in the order in which they were applied
    Content-Encoding: deflate, gzip

Directives

 gzip

    A format using the Lempel-Ziv coding (LZ77), with a 32-bit CRC. This
    is the original format of the UNIX gzip program. The HTTP/1.1
    standard also recommends that the servers supporting this
    content-encoding should recognize  x-gzip as an alias, for
    compatibility purposes.

 compress

    A format using the Lempel-Ziv-Welch (LZW) algorithm. The value name
    was taken from the UNIX compress program, which implemented this
    algorithm. Like the compress program, which has disappeared from
    most UNIX distributions, this content-encoding is not used by many
    browsers today, partly because of a patent issue (it expired in
    2003).

 deflate

    Using the zlib structure (defined in RFC 1950 ) with the deflate
    compression algorithm (defined in RFC 1951 ).

 br  Non-standard 

    A format using the Brotli algorithm.

Examples

Compressing with gzip

On the client side, you can advertise a list of compression schemes that
will be sent along in an HTTP request. The  Accept-Encoding header is
used for negotiating content encoding.

http

    Accept-Encoding: gzip, deflate

The server responds with the scheme used, indicated by the
 Content-Encoding response header.

http

    Content-Encoding: gzip

Note that the server is not obligated to use any compression method.
Compression highly depends on server settings and used server modules.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.content-encoding

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Accept-Encoding
-    Transfer-Encoding

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Content-Language #
  ____            _             _        _                                  
 / ___|___  _ __ | |_ ___ _ __ | |_     | |    __ _ _ __   __ _ _   _  __ _ 
| |   / _ \| '_ \| __/ _ \ '_ \| __|____| |   / _` | '_ \ / _` | | | |/ _` |
| |__| (_) | | | | ||  __/ | | | ||_____| |__| (_| | | | | (_| | |_| | (_| |
 \____\___/|_| |_|\__\___|_| |_|\__|    |_____\__,_|_| |_|\__, |\__,_|\__,_|
                                                          |___/             
            
  __ _  ___ 
 / _` |/ _ \
| (_| |  __/
 \__, |\___|
 |___/      
Content-Language

The  Content-Language representation header is used to describe the
language(s) intended for the audience , so users can differentiate it
according to their own preferred language.

For example, if "  Content-Language: de-DE " is set, it says that the
document is intended for German language speakers (however, it doesn't
indicate the document is written in German. For example, it might be
written in English as part of a language course for German speakers. If
you want to indicate which language the document is written in, use the
 lang attribute instead).

If no  Content-Language is specified, the default is that the content is
intended for all language audiences. Multiple language tags are also
possible, as well as applying the  Content-Language header to various
media types and not only to textual documents.

  --------------------------------- ------------------------------------------------------------------------------------------------------
  Header type                       Representation header
  Forbidden header name             no
  CORS-safelisted response header   yes
  CORS-safelisted request header    yes, with the additional restriction that values can only be  0-9 ,  A-Z ,  a-z , space or  *,-.;= .
  --------------------------------- ------------------------------------------------------------------------------------------------------

Syntax

http

    Content-Language: de-DE
    Content-Language: en-US
    Content-Language: de-DE, en-CA

Directives

 language-tag

    Multiple language tags are separated by a comma. Each language tag
    is a sequence of one or more case-insensitive subtags, each
    separated by a hyphen character ("  - ",  %x2D ). In most cases, a
    language tag consists of a primary language subtag that identifies a
    broad family of related languages (e.g., "  en " = English) and is
    optionally followed by a series of subtags that refine or narrow
    that language's range (e.g., "  en-CA " = the variety of English as
    communicated in Canada).

Note: Language tags are formally defined in BCP 47 , which rely on the
ISO 639 standard (quite often the ISO 639-1 code list ) for language
codes to be used.

Examples

Indicating the language a document is written in

The global  lang attribute is used on HTML elements to indicate the
language of an entire HTML document or parts of it.

html

    <html lang="de">
      …
    </html>

Do not use this meta element like this for stating a document language:

html

    <!-- ⚠️ This is bad practice -->
    <meta http-equiv="content-language" content="de" />

Indicating a target audience for a resource

The  Content-Language header is used to specify the page's intended
audience and can indicate that this is more than one language.

http

    Content-Language: de, en

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.content-language

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Accept-Language
-   HTTP headers, meta elements and language information
-   HTML  lang attribute

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 11, 2023 by MDN contributors .
# Content-Length #
  ____            _             _        _                     _   _     
 / ___|___  _ __ | |_ ___ _ __ | |_     | |    ___ _ __   __ _| |_| |__  
| |   / _ \| '_ \| __/ _ \ '_ \| __|____| |   / _ \ '_ \ / _` | __| '_ \ 
| |__| (_) | | | | ||  __/ | | | ||_____| |__|  __/ | | | (_| | |_| | | |
 \____\___/|_| |_|\__\___|_| |_|\__|    |_____\___|_| |_|\__, |\__|_| |_|
                                                         |___/           
Content-Length

The  Content-Length header indicates the size of the message body, in
bytes, sent to the recipient.

  --------------------------------- ---------------------------------------------------
  Header type                       Request header , Response header , Payload header
  Forbidden header name             yes
  CORS-safelisted response header   yes
  --------------------------------- ---------------------------------------------------

Syntax

http

    Content-Length: <length>

Directives

<length>

    The length in decimal number of octets.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.content-length

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Transfer-Encoding

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Content-Location #
  ____            _             _        _                    _   _       
 / ___|___  _ __ | |_ ___ _ __ | |_     | |    ___   ___ __ _| |_(_) ___  
| |   / _ \| '_ \| __/ _ \ '_ \| __|____| |   / _ \ / __/ _` | __| |/ _ \ 
| |__| (_) | | | | ||  __/ | | | ||_____| |__| (_) | (_| (_| | |_| | (_) |
 \____\___/|_| |_|\__\___|_| |_|\__|    |_____\___/ \___\__,_|\__|_|\___/ 
                                                                          
       
 _ __  
| '_ \ 
| | | |
|_| |_|
       
Content-Location

The  Content-Location header indicates an alternate location for the
returned data. The principal use is to indicate the URL of a resource
transmitted as the result of content negotiation .

 Location and  Content-Location are different.  Location indicates the
URL of a redirect, while  Content-Location indicates the direct URL to
use to access the resource, without further content negotiation in the
future.  Location is a header associated with the response, while
 Content-Location is associated with the data returned. This distinction
may seem abstract without examples .

  ----------------------- -----------------------
  Header type             Representation header
  Forbidden header name   no
  ----------------------- -----------------------

Syntax

http

    Content-Location: <url>

Directives

<url>

    A relative (to the request URL) or absolute URL.

Examples

Requesting data from a server in different formats

Let's say a site's API can return data in JSON , XML , or CSV formats.
If the URL for a particular document is at
 https://example.com/documents/foo , the site could return different
URLs for  Content-Location depending on the request's  Accept header:

  Request header                         Response header
  -------------------------------------- ----------------------------------------
   Accept: application/json, text/json    Content-Location: /documents/foo.json
   Accept: application/xml, text/xml      Content-Location: /documents/foo.xml
   Accept: text/plain, text/*             Content-Location: /documents/foo.txt

These URLs are examples — the site could serve the different filetypes
with any URL patterns it wishes, such as a query string parameter :
 /documents/foo?format=json ,  /documents/foo?format=xml , and so on.

Then the client could remember that the JSON version is available at
that particular URL, skipping content negotiation the next time it
requests that document.

The server could also consider other content negotiation headers, such
as  Accept-Language .

Pointing to a new document (HTTP 201 Created)

Say you're creating a new blog post through a site's API:

http

    POST /new/post
    Host: example.com
    Content-Type: text/markdown

    # My first blog post!

    I made this through `example.com`'s API. I hope it worked.

The site returns the published post in the response body. The server
specifies where the new post is with the  Content-Location header,
indicating that this location refers to the content (the body) of this
response:

http

    HTTP/1.1 201 Created
    Content-Type: text/markdown
    Content-Location: /my-first-blog-post

    # My first blog post

    I made this through `example.com`'s API. I hope it worked.

Indicating the URL of a transaction's result

Say you have a  <form> for sending money to another user of a site.

html

    <form action="/send-payment" method="post">
      <p>
        <label
          >Who do you want to send the money to?
          <input type="text" name="recipient" />
        </label>
      </p>

      <p>
        <label
          >How much?
          <input type="number" name="amount" />
        </label>
      </p>

      <button type="submit">Send Money</button>
    </form>

When the form is submitted, the site generates a receipt for the
transaction. The server could use  Content-Location to indicate that
receipt's URL for future access.

http

    HTTP/1.1 200 OK
    Content-Type: text/html; charset=utf-8
    Content-Location: /my-receipts/38

    <!doctype html>
    (Lots of HTML…)

    <p>You sent $38.00 to ExampleUser.</p>

    (Lots more HTML…)

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.content-location

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Location

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 25, 2023 by MDN contributors .
# Content-Range #
  ____            _             _        ____                        
 / ___|___  _ __ | |_ ___ _ __ | |_     |  _ \ __ _ _ __   __ _  ___ 
| |   / _ \| '_ \| __/ _ \ '_ \| __|____| |_) / _` | '_ \ / _` |/ _ \
| |__| (_) | | | | ||  __/ | | | ||_____|  _ < (_| | | | | (_| |  __/
 \____\___/|_| |_|\__\___|_| |_|\__|    |_| \_\__,_|_| |_|\__, |\___|
                                                          |___/      
Content-Range

The  Content-Range response HTTP header indicates where in a full body
message a partial message belongs.

  --------------------------------- ----------------------------------
  Header type                       Response header , Payload header
  Forbidden header name             no
  CORS-safelisted response-header   no
  --------------------------------- ----------------------------------

Syntax

http

    Content-Range: <unit> <range-start>-<range-end>/<size>
    Content-Range: <unit> <range-start>-<range-end>/*
    Content-Range: <unit> */<size>

Directives

<unit>

    The unit in which ranges are specified. This is usually  bytes .

<range-start>

    An integer in the given unit indicating the start position
    (zero-indexed & inclusive) of the request range.

<range-end>

    An integer in the given unit indicating the end position
    (zero-indexed & inclusive) of the requested range.

<size>

    The total length of the document (or  '*' if unknown).

Examples

http

    Content-Range: bytes 200-1000/67589

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.content-range

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    If-Range
-    Range
-    Content-Type
-    206  Partial Content
-    416  Range Not Satisfiable

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# CSP: base-uri #
  ____ ____  ____      _                                     _ 
 / ___/ ___||  _ \ _  | |__   __ _ ___  ___       _   _ _ __(_)
| |   \___ \| |_) (_) | '_ \ / _` / __|/ _ \_____| | | | '__| |
| |___ ___) |  __/ _  | |_) | (_| \__ \  __/_____| |_| | |  | |
 \____|____/|_|   (_) |_.__/ \__,_|___/\___|      \__,_|_|  |_|
                                                               
CSP: base-uri

The HTTP  Content-Security-Policy  base-uri directive restricts the URLs
which can be used in a document's  <base> element. If this value is
absent, then any URI is allowed. If this directive is absent, the user
agent will use the value in the  <base> element.

  ----------------------- --------------------------------------
  CSP version             2
  Directive type          Document directive
   default-src fallback   No. Not setting this allows any URL.
  ----------------------- --------------------------------------

Syntax

One or more sources can be allowed for the base-uri policy:

http

    Content-Security-Policy: base-uri <source>;
    Content-Security-Policy: base-uri <source> <source>;

Sources

This directive uses most of the same source values for arguments as
other CSP directives: CSP Source Values .

Note however that some of the values don't make sense for  base-uri ,
such as the keywords  'unsafe-inline' and  'strict-dynamic' .

Examples

Meta tag configuration

html

    <meta http-equiv="Content-Security-Policy" content="base-uri 'self'" />

Apache configuration

apacheconf

    <IfModule mod_headers.c>
    Header set Content-Security-Policy "base-uri 'self'";
    </IfModule>

Nginx configuration

nginx

    add_header Content-Security-Policy "base-uri 'self';"

Violation case

Since your domain isn't  example.com , a  <base> element with its  href
set to  https://example.com will result in a CSP violation.

html

    <meta http-equiv="Content-Security-Policy" content="base-uri 'self'" />
    <base href="https://example.com/" />

    <!--
    // Error: Refused to set the document's base URI to 'https://example.com/'
    // because it violates the following Content Security Policy
    // directive: "base-uri 'self'"
    -->

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-base-uri

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    <base>
-    Node.baseURI

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 25, 2023 by MDN contributors .
# CSP: block-all-mixed-content #
  ____ ____  ____    
 / ___/ ___||  _ \ _ 
| |   \___ \| |_) (_)
| |___ ___) |  __/ _ 
 \____|____/|_|   (_)
                     
 _     _            _               _ _                 _              _       
| |__ | | ___   ___| | __      __ _| | |      _ __ ___ (_)_  _____  __| |      
| '_ \| |/ _ \ / __| |/ /____ / _` | | |_____| '_ ` _ \| \ \/ / _ \/ _` |_____ 
| |_) | | (_) | (__|   <_____| (_| | | |_____| | | | | | |>  <  __/ (_| |_____|
|_.__/|_|\___/ \___|_|\_\     \__,_|_|_|     |_| |_| |_|_/_/\_\___|\__,_|      
                                                                               
                 _             _   
  ___ ___  _ __ | |_ ___ _ __ | |_ 
 / __/ _ \| '_ \| __/ _ \ '_ \| __|
| (_| (_) | | | | ||  __/ | | | |_ 
 \___\___/|_| |_|\__\___|_| |_|\__|
                                   
CSP: block-all-mixed-content

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

Warning: This directive is marked as obsolete in the specification: all
mixed content is now blocked if it can't be autoupgraded.

The HTTP  Content-Security-Policy (CSP)  block-all-mixed-content
directive prevents loading any assets over HTTP when the page uses
HTTPS.

All mixed content resource requests are blocked, including both active
and passive mixed content. This also applies to  <iframe> documents,
ensuring the entire page is mixed content-free.

Note: The  upgrade-insecure-requests directive is evaluated before
 block-all-mixed-content . If the former is set, the latter does
nothing, so set one directive or the other – not both, unless you want
to force HTTPS on older browsers that do not force it after a redirect
to HTTP.

Syntax

http

    Content-Security-Policy: block-all-mixed-content;

Examples

http

    Content-Security-Policy: block-all-mixed-content;

    <meta http-equiv="Content-Security-Policy" content="block-all-mixed-content">

To disallow http assets on a more granular level, you can also set
individual directives to  https: . For example, to disallow insecure
HTTP images:

http

    Content-Security-Policy: img-src https:

Specifications

Not part of any current specification. Used to be defined in the
outdated Mixed Content Level 1 specification.

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    upgrade-insecure-requests
-   Mixed content

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# CSP: child-src #
  ____ ____  ____           _     _ _     _                    
 / ___/ ___||  _ \ _    ___| |__ (_) | __| |      ___ _ __ ___ 
| |   \___ \| |_) (_)  / __| '_ \| | |/ _` |_____/ __| '__/ __|
| |___ ___) |  __/ _  | (__| | | | | | (_| |_____\__ \ | | (__ 
 \____|____/|_|   (_)  \___|_| |_|_|_|\__,_|     |___/_|  \___|
                                                               
CSP: child-src

The HTTP  Content-Security-Policy (CSP)  child-src directive defines the
valid sources for web workers and nested browsing contexts loaded using
elements such as  <frame> and  <iframe> . For workers, non-compliant
requests are treated as fatal network errors by the user agent.

  ----------------------- --------------------------------------------------------------------------------------------
  CSP version             2
  Directive type          Fetch directive
   default-src fallback   Yes. If this directive is absent, the user agent will look for the  default-src directive.
  ----------------------- --------------------------------------------------------------------------------------------

Syntax

One or more sources can be allowed for the  child-src policy:

http

    Content-Security-Policy: child-src <source>;
    Content-Security-Policy: child-src <source> <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

Violation cases

Given this CSP header:

http

    Content-Security-Policy: child-src https://example.com/

This  <iframe> and worker are blocked and won't load:

html

    <iframe src="https://not-example.com"></iframe>

    <script>
      const blockedWorker = new Worker("data:application/javascript,…");
    </script>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-child-src

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    <frame> and  <iframe>
-    Worker ,  SharedWorker ,  ServiceWorker

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# CSP: connect-src #
  ____ ____  ____                                      _                     
 / ___/ ___||  _ \ _    ___ ___  _ __  _ __   ___  ___| |_      ___ _ __ ___ 
| |   \___ \| |_) (_)  / __/ _ \| '_ \| '_ \ / _ \/ __| __|____/ __| '__/ __|
| |___ ___) |  __/ _  | (_| (_) | | | | | | |  __/ (__| ||_____\__ \ | | (__ 
 \____|____/|_|   (_)  \___\___/|_| |_|_| |_|\___|\___|\__|    |___/_|  \___|
                                                                             
CSP: connect-src

The HTTP  Content-Security-Policy (CSP)  connect-src directive restricts
the URLs which can be loaded using script interfaces. The APIs that are
restricted are:

-    <a>  ping ,
-    fetch() ,
-    XMLHttpRequest ,
-    WebSocket ,
-    EventSource , and
-    Navigator.sendBeacon() .

Note:  connect-src 'self' does not resolve to websocket schemes in all
browsers, more info in this issue .

  ----------------------- --------------------------------------------------------------------------------------------
  CSP version             1
  Directive type          Fetch directive
   default-src fallback   Yes. If this directive is absent, the user agent will look for the  default-src directive.
  ----------------------- --------------------------------------------------------------------------------------------

Syntax

One or more sources can be allowed for the connect-src policy:

http

    Content-Security-Policy: connect-src <source>;
    Content-Security-Policy: connect-src <source> <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

Violation cases

Given this CSP header:

http

    Content-Security-Policy: connect-src https://example.com/

The following connections are blocked and won't load:

html

    <a ping="https://not-example.com">
      <script>
        const response = fetch("https://not-example.com/");

        const xhr = new XMLHttpRequest();
        xhr.open("GET", "https://not-example.com/");
        xhr.send();

        const ws = new WebSocket("wss://not-example.com/");

        const es = new EventSource("https://not-example.com/");

        navigator.sendBeacon("https://not-example.com/", {
          /* … */
        });
      </script></a
    >

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-connect-src

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    <a>  ping
-    fetch()
-    XMLHttpRequest
-    WebSocket
-    EventSource

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 16, 2023 by MDN contributors .
# CSP: default-src #
  ____ ____  ____          _       __             _ _                     
 / ___/ ___||  _ \ _    __| | ___ / _| __ _ _   _| | |_      ___ _ __ ___ 
| |   \___ \| |_) (_)  / _` |/ _ \ |_ / _` | | | | | __|____/ __| '__/ __|
| |___ ___) |  __/ _  | (_| |  __/  _| (_| | |_| | | ||_____\__ \ | | (__ 
 \____|____/|_|   (_)  \__,_|\___|_|  \__,_|\__,_|_|\__|    |___/_|  \___|
                                                                          
CSP: default-src

The HTTP  Content-Security-Policy (CSP)  default-src directive serves as
a fallback for the other CSP fetch directives . For each of the
following directives that are absent, the user agent looks for the
 default-src directive and uses this value for it:

-    child-src
-    connect-src
-    font-src
-    frame-src
-    img-src
-    manifest-src
-    media-src
-    object-src
-    prefetch-src
-    script-src
-    script-src-elem
-    script-src-attr
-    style-src
-    style-src-elem
-    style-src-attr
-    worker-src

  ---------------- -----------------
  CSP version      1
  Directive type   Fetch directive
  ---------------- -----------------

Syntax

One or more sources can be allowed for the  default-src policy:

http

    Content-Security-Policy: default-src <source>;
    Content-Security-Policy: default-src <source> <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

No inheritance with default-src

If there are other directives specified,  default-src does not influence
them. The following header:

http

    Content-Security-Policy: default-src 'self'; script-src https://example.com

is the same as:

http

    Content-Security-Policy: connect-src 'self';
                             font-src 'self';
                             frame-src 'self';
                             img-src 'self';
                             manifest-src 'self';
                             media-src 'self';
                             object-src 'self';
                             script-src https://example.com;
                             style-src 'self';
                             worker-src 'self'

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-default-src

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-   CSP directives ( https://www.w3.org/TR/CSP/#csp-directives ):
    -   Fetch directive
    -   Document directive
    -   Navigation directive
    -   Reporting directive
    -    upgrade-insecure-requests
    -    block-all-mixed-content

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# CSP: font-src #
  ____ ____  ____       __             _                     
 / ___/ ___||  _ \ _   / _| ___  _ __ | |_      ___ _ __ ___ 
| |   \___ \| |_) (_) | |_ / _ \| '_ \| __|____/ __| '__/ __|
| |___ ___) |  __/ _  |  _| (_) | | | | ||_____\__ \ | | (__ 
 \____|____/|_|   (_) |_|  \___/|_| |_|\__|    |___/_|  \___|
                                                             
CSP: font-src

The HTTP  Content-Security-Policy (CSP)  font-src directive specifies
valid sources for fonts loaded using  @font-face .

  ----------------------- --------------------------------------------------------------------------------------------
  CSP version             1
  Directive type          Fetch directive
   default-src fallback   Yes. If this directive is absent, the user agent will look for the  default-src directive.
  ----------------------- --------------------------------------------------------------------------------------------

Syntax

One or more sources can be allowed for the  font-src policy:

http

    Content-Security-Policy: font-src <source>;
    Content-Security-Policy: font-src <source> <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

Violation cases

Given this CSP header:

http

    Content-Security-Policy: font-src https://example.com/

The following font resource loading is blocked and won't load:

html

    <style>
      @font-face {
        font-family: "MyFont";
        src: url("https://not-example.com/font");
      }
      body {
        font-family: "MyFont";
      }
    </style>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-font-src

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    @font-face

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# CSP: form-action #
  ____ ____  ____    
 / ___/ ___||  _ \ _ 
| |   \___ \| |_) (_)
| |___ ___) |  __/ _ 
 \____|____/|_|   (_)
                     
  __                                       _   _             
 / _| ___  _ __ _ __ ___         __ _  ___| |_(_) ___  _ __  
| |_ / _ \| '__| '_ ` _ \ _____ / _` |/ __| __| |/ _ \| '_ \ 
|  _| (_) | |  | | | | | |_____| (_| | (__| |_| | (_) | | | |
|_|  \___/|_|  |_| |_| |_|      \__,_|\___|\__|_|\___/|_| |_|
                                                             
CSP: form-action

The HTTP  Content-Security-Policy (CSP)  form-action directive restricts
the URLs which can be used as the target of form submissions from a
given context.

Warning: Whether  form-action should block redirects after a form
submission is debated and browser implementations of this aspect are
inconsistent (e.g. Firefox 57 doesn't block the redirects whereas Chrome
63 does).

  ----------------------- ---------------------------------------
  CSP version             2
  Directive type          Navigation directive
   default-src fallback   No. Not setting this allows anything.
  ----------------------- ---------------------------------------

Syntax

One or more sources can be set for the  form-action policy:

http

    Content-Security-Policy: form-action <source>;
    Content-Security-Policy: form-action <source> <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

Meta tag configuration

html

    <meta http-equiv="Content-Security-Policy" content="form-action 'none'" />

Apache configuration

apacheconf

    <IfModule mod_headers.c>
      Header set Content-Security-Policy "form-action 'none';"
    </IfModule>

Nginx configuration

nginx

    add_header Content-Security-Policy "form-action 'none';"

Violation case

Using a  <form> element with an action set to inline JavaScript will
result in a CSP violation.

html

    <meta http-equiv="Content-Security-Policy" content="form-action 'none'" />

    <form action="javascript:alert('Foo')" id="form1" method="post">
      <input type="text" name="fieldName" value="fieldValue" />
      <input type="submit" id="submit" value="submit" />
    </form>

    <!--
    // Error: Refused to send form data because it violates the following
    // Content Security Policy directive: "form-action 'none'".
    -->

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-form-action

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    <form>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 25, 2023 by MDN contributors .
# CSP: frame-ancestors #
  ____ ____  ____    
 / ___/ ___||  _ \ _ 
| |   \___ \| |_) (_)
| |___ ___) |  __/ _ 
 \____|____/|_|   (_)
                     
  __                                                          _             
 / _|_ __ __ _ _ __ ___   ___        __ _ _ __   ___ ___  ___| |_ ___  _ __ 
| |_| '__/ _` | '_ ` _ \ / _ \_____ / _` | '_ \ / __/ _ \/ __| __/ _ \| '__|
|  _| | | (_| | | | | | |  __/_____| (_| | | | | (_|  __/\__ \ || (_) | |   
|_| |_|  \__,_|_| |_| |_|\___|      \__,_|_| |_|\___\___||___/\__\___/|_|   
                                                                            
     
 ___ 
/ __|
\__ \
|___/
     
CSP: frame-ancestors

The HTTP  Content-Security-Policy (CSP)  frame-ancestors directive
specifies valid parents that may embed a page using  <frame> ,  <iframe>
,  <object> , or  <embed> .

Setting this directive to  'none' is similar to  X-Frame-Options  : deny
(which is also supported in older browsers).

Note:  frame-ancestors allows you to specify what parent source may
embed a page. This differs from  frame-src , which allows you to specify
where iframes in a page may be loaded from.

  --------------------------------------------------------- ---------------------------------------
  CSP version                                               2
  Directive type                                            Navigation directive
   default-src fallback                                     No. Not setting this allows anything.
  This directive is not supported in the  <meta> element.   
  --------------------------------------------------------- ---------------------------------------

Syntax

One or more sources can be set for the  frame-ancestors policy:

http

    Content-Security-Policy: frame-ancestors <source>;
    Content-Security-Policy: frame-ancestors <space separated list of sources>;

Sources

<source> can be one of the following:

Note: The  frame-ancestors directive's syntax is similar to a source
list of other directives (e.g.  default-src ), but doesn't allow
 'unsafe-eval' or  'unsafe-inline' for example. It will also not fall
back to a  default-src setting. Only the sources listed below are
allowed:

<host-source>

    Internet hosts by name or IP address, as well as an optional URL
    scheme and/or port number, separated by spaces. The site's address
    may include an optional leading wildcard (the asterisk character,
     '*' ), and you may use a wildcard (again,  '*' ) as the port
    number, indicating that all legal ports are valid for the source.
    Single quotes surrounding the host are not allowed. Examples:

    -    http://*.example.com : Matches all attempts to load from any
        subdomain of example.com using the  http: URL scheme.
    -    mail.example.com:443 : Matches all attempts to access port 443
        on mail.example.com.
    -    https://store.example.com : Matches all attempts to access
        store.example.com using  https: .

    Warning: If no URL scheme is specified for a  host-source and the
    iframe is loaded from an  https URL, the URL for the page loading
    the iframe must also be  https , per the Does URL match expression
    in origin with redirect count? section of the CSP spec.

<scheme-source>

    A scheme such as  http: or  https: . The colon is required and
    scheme should not be quoted. You can also specify data schemes (not
    recommended).

    -    data: Allows  data: URLs to be used as a content source. This
        is insecure; an attacker can also inject arbitrary  data: URLs.
        Use this sparingly and definitely not for scripts.
    -    mediastream: Allows  mediastream: URIs to be used as a content
        source.
    -    blob: Allows  blob: URIs to be used as a content source.
    -    filesystem: Allows  filesystem: URIs to be used as a content
        source.

 'self'

    Refers to the origin from which the protected document is being
    served, including the same URL scheme and port number. You must
    include the single quotes. Some browsers specifically exclude  blob
    and  filesystem from source directives. Sites needing to allow these
    content types can specify them using the Data attribute.

 'none'

    Refers to the empty set; that is, no URLs match. The single quotes
    are required.

Examples

http

    Content-Security-Policy: frame-ancestors 'none';

    Content-Security-Policy: frame-ancestors 'self' https://www.example.org;

    Content-Security-Policy: frame-ancestors 'self' https://example.org https://example.com https://store.example.com;

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-frame-ancestors

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    X-Frame-Options
-    frame-src CSP

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 19, 2023 by MDN contributors .
# CSP: frame-src #
  ____ ____  ____       __                                             
 / ___/ ___||  _ \ _   / _|_ __ __ _ _ __ ___   ___       ___ _ __ ___ 
| |   \___ \| |_) (_) | |_| '__/ _` | '_ ` _ \ / _ \_____/ __| '__/ __|
| |___ ___) |  __/ _  |  _| | | (_| | | | | | |  __/_____\__ \ | | (__ 
 \____|____/|_|   (_) |_| |_|  \__,_|_| |_| |_|\___|     |___/_|  \___|
                                                                       
CSP: frame-src

The HTTP  Content-Security-Policy (CSP)  frame-src directive specifies
valid sources for nested browsing contexts loading using elements such
as  <frame> and  <iframe> .

Note:  frame-src allows you to specify where iframes in a page may be
loaded from. This differs from  frame-ancestors , which allows you to
specify what parent source may embed a page.

  ---------------- --------------------------------------------------------------------------------------------------------------------------------------
  CSP version      1
  Directive type   Fetch directive
  Fallback         If this directive is absent, the user agent will look for the  child-src directive (which falls back to the  default-src directive).
  ---------------- --------------------------------------------------------------------------------------------------------------------------------------

Syntax

One or more sources can be allowed for the  frame-src policy:

http

    Content-Security-Policy: frame-src <source>;
    Content-Security-Policy: frame-src <source> <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

Violation cases

Given this CSP header:

http

    Content-Security-Policy: frame-src https://example.com/

The following  <iframe> is blocked and won't load:

html

    <iframe src="https://not-example.com/"></iframe>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-frame-src

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    <frame> and  <iframe>
-    frame-ancestors

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Content-Security-Policy #
  ____            _             _       ____                       _ _         
 / ___|___  _ __ | |_ ___ _ __ | |_    / ___|  ___  ___ _   _ _ __(_) |_ _   _ 
| |   / _ \| '_ \| __/ _ \ '_ \| __|___\___ \ / _ \/ __| | | | '__| | __| | | |
| |__| (_) | | | | ||  __/ | | | ||_____|__) |  __/ (__| |_| | |  | | |_| |_| |
 \____\___/|_| |_|\__\___|_| |_|\__|   |____/ \___|\___|\__,_|_|  |_|\__|\__, |
                                                                         |___/ 
       ____       _ _            
      |  _ \ ___ | (_) ___ _   _ 
 _____| |_) / _ \| | |/ __| | | |
|_____|  __/ (_) | | | (__| |_| |
      |_|   \___/|_|_|\___|\__, |
                           |___/ 
Content-Security-Policy

The HTTP  Content-Security-Policy response header allows website
administrators to control resources the user agent is allowed to load
for a given page. With a few exceptions, policies mostly involve
specifying server origins and script endpoints. This helps guard against
cross-site scripting attacks ( Cross-site_scripting ).

For more information, see the introductory article on Content Security
Policy (CSP) .

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Content-Security-Policy: <policy-directive>; <policy-directive>

where  <policy-directive> consists of:  <directive> <value> with no
internal punctuation.

Directives

Fetch directives

Fetch directives control the locations from which certain resource types
may be loaded.

 child-src

    Defines the valid sources for web workers and nested browsing
    contexts loaded using elements such as  <frame> and  <iframe> .

    Warning: Instead of  child-src , if you want to regulate nested
    browsing contexts and workers, you should use the  frame-src and
     worker-src directives, respectively.

 connect-src

    Restricts the URLs which can be loaded using script interfaces.

 default-src

    Serves as a fallback for the other fetch directives .

 font-src

    Specifies valid sources for fonts loaded using  @font-face .

 frame-src

    Specifies valid sources for nested browsing contexts loading using
    elements such as  <frame> and  <iframe> .

 img-src

    Specifies valid sources of images and favicons.

 manifest-src

    Specifies valid sources of application manifest files.

 media-src

    Specifies valid sources for loading media using the  <audio> ,
     <video> and  <track> elements.

 object-src

    Specifies valid sources for the  <object> and  <embed> elements.

    Note: Elements controlled by  object-src are perhaps coincidentally
    considered legacy HTML elements and are not receiving new
    standardized features (such as the security attributes  sandbox or
     allow for  <iframe> ). Therefore it is recommended to restrict this
    fetch-directive (e.g., explicitly set  object-src 'none' if
    possible).

 prefetch-src  Deprecated   Non-standard 

    Specifies valid sources to be prefetched or prerendered.

 script-src

    Specifies valid sources for JavaScript and WebAssembly resources.

 script-src-elem

    Specifies valid sources for JavaScript  <script> elements.

 script-src-attr

    Specifies valid sources for JavaScript inline event handlers.

 style-src

    Specifies valid sources for stylesheets.

 style-src-elem

    Specifies valid sources for stylesheets  <style> elements and
     <link> elements with  rel="stylesheet" .

 style-src-attr

    Specifies valid sources for inline styles applied to individual DOM
    elements.

 worker-src

    Specifies valid sources for  Worker ,  SharedWorker , or
     ServiceWorker scripts.

Document directives

Document directives govern the properties of a document or worker
environment to which a policy applies.

 base-uri

    Restricts the URLs which can be used in a document's  <base>
    element.

 sandbox

    Enables a sandbox for the requested resource similar to the
     <iframe>  sandbox attribute.

Navigation directives

Navigation directives govern to which locations a user can navigate or
submit a form, for example.

 form-action

    Restricts the URLs which can be used as the target of a form
    submissions from a given context.

 frame-ancestors

    Specifies valid parents that may embed a page using  <frame> ,
     <iframe> ,  <object> , or  <embed> .

Reporting directives

Reporting directives control the reporting process of CSP violations.
See also the  Content-Security-Policy-Report-Only header.

 report-uri  Deprecated 

    Instructs the user agent to report attempts to violate the Content
    Security Policy. These violation reports consist of JSON documents
    sent via an HTTP  POST request to the specified URI.

    Warning: Though the  report-to directive is intended to replace the
    deprecated  report-uri directive,  report-to is not supported in
    most browsers yet. So for compatibility with current browsers while
    also adding forward compatibility when browsers get  report-to
    support, you can specify both  report-uri and  report-to :

    http

        Content-Security-Policy: …; report-uri https://endpoint.example.com; report-to groupname

    In browsers that support  report-to , the  report-uri directive will
    be ignored.

 report-to

    Fires a  SecurityPolicyViolationEvent .

Other directives

 require-trusted-types-for  Experimental 

    Enforces Trusted Types at the DOM XSS injection sinks.

 trusted-types  Experimental 

    Used to specify an allowlist of Trusted Types policies. Trusted
    Types allows applications to lock down DOM XSS injection sinks to
    only accept non-spoofable, typed values in place of strings.

 upgrade-insecure-requests

    Instructs user agents to treat all of a site's insecure URLs (those
    served over HTTP) as though they have been replaced with secure URLs
    (those served over HTTPS). This directive is intended for websites
    with large numbers of insecure legacy URLs that need to be
    rewritten.

Deprecated directives

 block-all-mixed-content  Deprecated 

    Prevents loading any assets using HTTP when the page is loaded using
    HTTPS.

 plugin-types  Deprecated   Non-standard 

    Restricts the set of plugins that can be embedded into a document by
    limiting the types of resources which can be loaded.

 referrer  Deprecated   Non-standard 

    Used to specify information in the Referer (sic) header for links
    away from a page. Use the  Referrer-Policy header instead.

Values

An overview of the allowed values are listed below. For detailed
reference see CSP Source Values and the documentation for individual
directives.

Keyword values

 'none'

    Won't allow loading of any resources.

 'self'

    Only allow resources from the current origin.

 'strict-dynamic'

    The trust granted to a script in the page due to an accompanying
    nonce or hash is extended to the scripts it loads.

 'report-sample'

    Require a sample of the violating code to be included in the
    violation report.

 'inline-speculation-rules'

    Allows the inclusion of speculation rules in scripts (see also
     <script type="speculationrules"> ).

Unsafe keyword values

 'unsafe-inline'

    Allow use of inline resources.

 'unsafe-eval'

    Allow use of dynamic code evaluation such as  eval ,  setTimeout() ,
    and  window.execScript Non-standard .

 'unsafe-hashes'

    Allows enabling specific inline event handlers.

 'wasm-unsafe-eval'

    Allows the loading and execution of WebAssembly modules without the
    need to also allow unsafe JavaScript execution via  'unsafe-eval' .
    The single quotes are required.

Hosts values

-   Host
    -   Only allow loading of resources from a specific host, with
        optional scheme, port, and path. For example,  example.com ,
         *.example.com ,  https://*.example.com:12/path/to/file.js .
    -   Path parts in the CSP that end in  / match any path they are a
        prefix of. For example,  example.com/api/ will match URLs like
         example.com/api/users/new .
    -   Other path parts in the CSP are matched exactly; for example,
         example.com/file.js will match  http://example.com/file.js and
         https://example.com/file.js , but not
         https://example.com/file.js/file2.js .
-   Scheme
    -   Only allow loading of resources over a specific scheme, should
        always end with "  : ". For example,  https: ,  http: ,  data: ,
        etc.

Other values

 'nonce-*'

    A cryptographic nonce (only used once) to allow scripts. The server
    must generate a unique nonce value each time it transmits a policy.
    It is critical to provide a nonce that cannot be guessed as
    bypassing a resource's policy is otherwise trivial. This is used in
    conjunction with the script tag nonce attribute . For example,
     nonce-DhcnhD3khTMePgXwdayK9BsMqXjhguVV .

 'sha*-*'

    sha256, sha384, or sha512. Followed by a dash and then the sha*
    value. For example,
     sha256-jzgBGA4UWFFmpOBq0JpdsySukE1FrEN5bUpoK8Z29fY= .

CSP in workers

Workers are in general not governed by the content security policy of
the document (or parent worker) that created them. To specify a content
security policy for the worker, set a  Content-Security-Policy response
header for the request which requested the worker script itself.

The exception to this is if the worker script's origin is a globally
unique identifier (for example, if its URL has a scheme of data or
blob). In this case, the worker does inherit the content security policy
of the document or worker that created it.

Multiple content security policies

The CSP mechanism allows multiple policies being specified for a
resource, including via the  Content-Security-Policy header, the
 Content-Security-Policy-Report-Only header and a  <meta> element.

You can use the  Content-Security-Policy header more than once, as in
the example below. Pay special attention to the  connect-src directive
here. Even though the second policy would allow the connection, the
first policy contains  connect-src 'none' . Adding additional policies
can only further restrict the capabilities of the protected resource,
which means that there will be no connection allowed and, as the
strictest policy,  connect-src 'none' is enforced.

http

    Content-Security-Policy: default-src 'self' http://example.com;
                              connect-src 'none';
    Content-Security-Policy: connect-src http://example.com/;
                              script-src http://example.com/

Examples

Example: Disable unsafe inline/eval, only allow loading of resources
(images, fonts, scripts, etc.) over https:

Using the HTTP header

http

    Content-Security-Policy: default-src https:

Using the HTML meta element

html

    <meta http-equiv="Content-Security-Policy" content="default-src https:" />

Example: Pre-existing site that uses too much inline code to fix but
wants to ensure resources are loaded only over HTTPS and to disable
plugins:

http

    Content-Security-Policy: default-src https: 'unsafe-eval' 'unsafe-inline'; object-src 'none'

Example: Do not implement the above policy yet; instead just report
violations that would have occurred:

http

    Content-Security-Policy-Report-Only: default-src https:; report-uri /csp-violation-report-endpoint/

See Mozilla Web Security Guidelines for more examples.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # csp-header

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy-Report-Only
-   Learn about: Content Security Policy
-   Content Security in WebExtensions
-   Adopting a strict policy
-   CSP Evaluator - Evaluate your Content Security Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 26, 2023 by MDN contributors .
# CSP: img-src #
  ____ ____  ____      _                                    
 / ___/ ___||  _ \ _  (_)_ __ ___   __ _       ___ _ __ ___ 
| |   \___ \| |_) (_) | | '_ ` _ \ / _` |_____/ __| '__/ __|
| |___ ___) |  __/ _  | | | | | | | (_| |_____\__ \ | | (__ 
 \____|____/|_|   (_) |_|_| |_| |_|\__, |     |___/_|  \___|
                                   |___/                    
CSP: img-src

The HTTP  Content-Security-Policy  img-src directive specifies valid
sources of images and favicons.

  ----------------------- --------------------------------------------------------------------------------------------
  CSP version             1
  Directive type          Fetch directive
   default-src fallback   Yes. If this directive is absent, the user agent will look for the  default-src directive.
  ----------------------- --------------------------------------------------------------------------------------------

Syntax

One or more sources can be allowed for the  img-src policy:

http

    Content-Security-Policy: img-src <source>;
    Content-Security-Policy: img-src <source> <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

Violation cases

Given this CSP header:

http

    Content-Security-Policy: img-src https://example.com/

The following  <img> is blocked and won't load:

html

    <img src="https://not-example.com/foo.jpg" alt="example picture" />

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-img-src

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    <img>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# CSP: manifest-src #
  ____ ____  ____    
 / ___/ ___||  _ \ _ 
| |   \___ \| |_) (_)
| |___ ___) |  __/ _ 
 \____|____/|_|   (_)
                     
                       _  __           _                     
 _ __ ___   __ _ _ __ (_)/ _| ___  ___| |_      ___ _ __ ___ 
| '_ ` _ \ / _` | '_ \| | |_ / _ \/ __| __|____/ __| '__/ __|
| | | | | | (_| | | | | |  _|  __/\__ \ ||_____\__ \ | | (__ 
|_| |_| |_|\__,_|_| |_|_|_|  \___||___/\__|    |___/_|  \___|
                                                             
CSP: manifest-src

The HTTP  Content-Security-Policy  : manifest-src directive specifies
which manifest can be applied to the resource.

  ----------------------- --------------------------------------------------------------------------------------------
  CSP version             3
  Directive type          Fetch directive
   default-src fallback   Yes. If this directive is absent, the user agent will look for the  default-src directive.
  ----------------------- --------------------------------------------------------------------------------------------

Syntax

One or more sources can be allowed for the  manifest-src policy:

http

    Content-Security-Policy: manifest-src <source>;
    Content-Security-Policy: manifest-src <source> <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

Violation cases

Given this CSP header:

http

    Content-Security-Policy: manifest-src https://example.com/

The following  <link> is blocked and won't load:

html

    <link rel="manifest" href="https://not-example.com/manifest" />

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-manifest-src

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-   Web app manifest
-    <link>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# CSP: media-src #
  ____ ____  ____                         _ _                          
 / ___/ ___||  _ \ _   _ __ ___   ___  __| (_) __ _       ___ _ __ ___ 
| |   \___ \| |_) (_) | '_ ` _ \ / _ \/ _` | |/ _` |_____/ __| '__/ __|
| |___ ___) |  __/ _  | | | | | |  __/ (_| | | (_| |_____\__ \ | | (__ 
 \____|____/|_|   (_) |_| |_| |_|\___|\__,_|_|\__,_|     |___/_|  \___|
                                                                       
CSP: media-src

The HTTP  Content-Security-Policy (CSP)  media-src directive specifies
valid sources for loading media using the  <audio> and  <video>
elements.

  ----------------------- --------------------------------------------------------------------------------------------
  CSP version             1
  Directive type          Fetch directive
   default-src fallback   Yes. If this directive is absent, the user agent will look for the  default-src directive.
  ----------------------- --------------------------------------------------------------------------------------------

Syntax

One or more sources can be allowed for the  media-src policy:

http

    Content-Security-Policy: media-src <source>;
    Content-Security-Policy: media-src <source> <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

Violation cases

Given this CSP header:

http

    Content-Security-Policy: media-src https://example.com/

The following  <audio> ,  <video> and  <track> elements are blocked and
won't load:

html

    <audio src="https://not-example.com/audio"></audio>

    <video src="https://not-example.com/video">
      <track kind="subtitles" src="https://not-example.com/subtitles" />
    </video>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-media-src

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    <audio> ,  <video> and  <track>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# CSP: object-src #
  ____ ____  ____            _     _           _                     
 / ___/ ___||  _ \ _    ___ | |__ (_) ___  ___| |_      ___ _ __ ___ 
| |   \___ \| |_) (_)  / _ \| '_ \| |/ _ \/ __| __|____/ __| '__/ __|
| |___ ___) |  __/ _  | (_) | |_) | |  __/ (__| ||_____\__ \ | | (__ 
 \____|____/|_|   (_)  \___/|_.__// |\___|\___|\__|    |___/_|  \___|
                                |__/                                 
CSP: object-src

The HTTP  Content-Security-Policy  object-src directive specifies valid
sources for the  <object> and  <embed> elements.

To set allowed types for  <object> and  <embed> , use the  plugin-types
directive.

Note: Elements controlled by  object-src are perhaps coincidentally
considered legacy HTML elements and aren't receiving new standardized
features (such as the security attributes  sandbox or  allow for
 <iframe> ). Therefore it is recommended to restrict this
fetch-directive (e.g. explicitly set  object-src 'none' if possible).

  ----------------------- --------------------------------------------------------------------------------------------
  CSP version             1
  Directive type          Fetch directive
   default-src fallback   Yes. If this directive is absent, the user agent will look for the  default-src directive.
  ----------------------- --------------------------------------------------------------------------------------------

Syntax

One or more sources can be allowed for the  object-src policy:

http

    Content-Security-Policy: object-src <source>;
    Content-Security-Policy: object-src <source> <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

Violation cases

Given this CSP header:

http

    Content-Security-Policy: object-src https://example.com/

The following  <object> and  <embed> elements are blocked and won't
load:

html

    <embed src="https://not-example.com/flash"></embed>
    <object data="https://not-example.com/plugin"></object>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-object-src

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    <object> and  <embed>
-    plugin-types

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 19, 2023 by MDN contributors .
# CSP: plugin-types #
  ____ ____  ____    
 / ___/ ___||  _ \ _ 
| |   \___ \| |_) (_)
| |___ ___) |  __/ _ 
 \____|____/|_|   (_)
                     
       _             _             _                         
 _ __ | |_   _  __ _(_)_ __       | |_ _   _ _ __   ___  ___ 
| '_ \| | | | |/ _` | | '_ \ _____| __| | | | '_ \ / _ \/ __|
| |_) | | |_| | (_| | | | | |_____| |_| |_| | |_) |  __/\__ \
| .__/|_|\__,_|\__, |_|_| |_|      \__|\__, | .__/ \___||___/
|_|            |___/                   |___/|_|              
CSP: plugin-types

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

Non-standard: This feature is non-standard and is not on a standards
track. Do not use it on production sites facing the Web: it will not
work for every user. There may also be large incompatibilities between
implementations and the behavior may change in the future.

The HTTP  Content-Security-Policy (CSP)  plugin-types directive
restricts the set of plugins that can be embedded into a document by
limiting the types of resources which can be loaded.

Instantiation of an  <embed> or  <object> element will fail if:

-   the element to load does not declare a valid MIME type,
-   the declared type does not match one of specified types in the
     plugin-types directive,
-   the fetched resource does not match the declared type.

  ----------------------- ---------------------------------------
  CSP version             2
  Directive type          Document directive
   default-src fallback   No. Not setting this allows anything.
  ----------------------- ---------------------------------------

Syntax

One or more MIME types can be set for the  plugin-types policy:

http

    Content-Security-Policy: plugin-types <type>/<subtype>;
    Content-Security-Policy: plugin-types <type>/<subtype> <type>/<subtype>;

<type>/<subtype>

    A valid MIME type .

Examples

Disallowing plugins

To disallow all plugins, the  object-src directive should be set to
 'none' which will disallow plugins. The  plugin-types directive is only
used if you are allowing plugins with  object-src at all.

html

    <meta http-equiv="Content-Security-Policy" content="object-src 'none'" />

Specifications

Not part of any current specification. Used to be defined in CSP 2 .

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy :  object-src
-    <object>
-    <embed>
-    X-Content-Type-Options

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 19, 2023 by MDN contributors .
# CSP: prefetch-src #
  ____ ____  ____    
 / ___/ ___||  _ \ _ 
| |   \___ \| |_) (_)
| |___ ___) |  __/ _ 
 \____|____/|_|   (_)
                     
                 __      _       _                        
 _ __  _ __ ___ / _| ___| |_ ___| |__        ___ _ __ ___ 
| '_ \| '__/ _ \ |_ / _ \ __/ __| '_ \ _____/ __| '__/ __|
| |_) | | |  __/  _|  __/ || (__| | | |_____\__ \ | | (__ 
| .__/|_|  \___|_|  \___|\__\___|_| |_|     |___/_|  \___|
|_|                                                       
CSP: prefetch-src

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

Non-standard: This feature is non-standard and is not on a standards
track. Do not use it on production sites facing the Web: it will not
work for every user. There may also be large incompatibilities between
implementations and the behavior may change in the future.

The HTTP  Content-Security-Policy (CSP)  prefetch-src directive
specifies valid resources that may be prefetched or prerendered.

  ----------------------- --------------------------------------------------------------------------------------------
  CSP version             3
  Directive type          Fetch directive
   default-src fallback   Yes. If this directive is absent, the user agent will look for the  default-src directive.
  ----------------------- --------------------------------------------------------------------------------------------

Syntax

One or more sources can be allowed for the  prefetch-src policy:

http

    Content-Security-Policy: prefetch-src <source>;
    Content-Security-Policy: prefetch-src <source> <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Example

Prefetch resources do not match header

Given a page with the following Content Security Policy:

http

    Content-Security-Policy: prefetch-src https://example.com/

Fetches for the following code will return network errors, as the URLs
provided do not match  prefetch-src 's source list:

html

    <link rel="prefetch" href="https://example.org/" />
    <link rel="prerender" href="https://example.org/" />

Specifications

No specification found

No specification data found for
 http.headers.Content-Security-Policy.prefetch-src .
Check for problems with this page or contribute a missing  spec_url to
mdn/browser-compat-data . Also make sure the specification is included
in w3c/browser-specs .

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 19, 2023 by MDN contributors .
# CSP: referrer #
  ____ ____  ____                __                         
 / ___/ ___||  _ \ _   _ __ ___ / _| ___ _ __ _ __ ___ _ __ 
| |   \___ \| |_) (_) | '__/ _ \ |_ / _ \ '__| '__/ _ \ '__|
| |___ ___) |  __/ _  | | |  __/  _|  __/ |  | | |  __/ |   
 \____|____/|_|   (_) |_|  \___|_|  \___|_|  |_|  \___|_|   
                                                            
CSP: referrer

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

Non-standard: This feature is non-standard and is not on a standards
track. Do not use it on production sites facing the Web: it will not
work for every user. There may also be large incompatibilities between
implementations and the behavior may change in the future.

The HTTP  Content-Security-Policy (CSP)  referrer directive used to
specify information in the  Referer header (with a single  r as this was
a typo in the original spec) for links away from a page. This API is
deprecated and removed from browsers.

Note: Use the  Referrer-Policy header instead.

Syntax

http

    Content-Security-Policy: referrer <referrer-policy>;

where  <referrer-policy> can be one of the following values:

"no-referrer"

    The  Referer header will be omitted entirely. No referrer
    information is sent along with requests.

"none-when-downgrade"

    This is the user agent's default behavior if no policy is specified.
    The origin is sent as referrer to a-priori as-much-secure
    destination (HTTPS->HTTPS), but isn't sent to a less secure
    destination (HTTPS->HTTP).

"origin"

    Only send the origin of the document as the referrer in all cases.
    The document  https://example.com/page.html will send the referrer
     https://example.com/ .

"origin-when-cross-origin" / "origin-when-crossorigin"

    Send a full URL when performing a same-origin request, but only send
    the origin of the document for other cases.

"unsafe-url"

    Send a full URL (stripped from parameters) when performing a
    same-origin or cross-origin request. This policy will leak origins
    and paths from TLS-protected resources to insecure origins.
    Carefully consider the impact of this setting.

Examples

http

    Content-Security-Policy: referrer "none";

Specifications

Not part of any specification.

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    Referrer-Policy header
-    Referer header

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Content-Security-Policy-Report-Only #
  ____            _             _       ____                       _ _         
 / ___|___  _ __ | |_ ___ _ __ | |_    / ___|  ___  ___ _   _ _ __(_) |_ _   _ 
| |   / _ \| '_ \| __/ _ \ '_ \| __|___\___ \ / _ \/ __| | | | '__| | __| | | |
| |__| (_) | | | | ||  __/ | | | ||_____|__) |  __/ (__| |_| | |  | | |_| |_| |
 \____\___/|_| |_|\__\___|_| |_|\__|   |____/ \___|\___|\__,_|_|  |_|\__|\__, |
                                                                         |___/ 
       ____       _ _                  ____                       _        
      |  _ \ ___ | (_) ___ _   _      |  _ \ ___ _ __   ___  _ __| |_      
 _____| |_) / _ \| | |/ __| | | |_____| |_) / _ \ '_ \ / _ \| '__| __|____ 
|_____|  __/ (_) | | | (__| |_| |_____|  _ <  __/ |_) | (_) | |  | ||_____|
      |_|   \___/|_|_|\___|\__, |     |_| \_\___| .__/ \___/|_|   \__|     
                           |___/                |_|                        
  ___        _       
 / _ \ _ __ | |_   _ 
| | | | '_ \| | | | |
| |_| | | | | | |_| |
 \___/|_| |_|_|\__, |
               |___/ 
Content-Security-Policy-Report-Only

The HTTP  Content-Security-Policy-Report-Only response header allows web
developers to experiment with policies by monitoring (but not enforcing)
their effects. These violation reports consist of JSON documents sent
via an HTTP  POST request to the specified URI.

For more information, see also this article on Content Security Policy
(CSP) .

  -------------------------------------------------------- -----------------
  Header type                                              Response header
  Forbidden header name                                    no
  This header is not supported inside a  <meta> element.   
  -------------------------------------------------------- -----------------

Syntax

http

    Content-Security-Policy-Report-Only: <policy-directive>; <policy-directive>

Directives

The directives of the  Content-Security-Policy header can also be
applied to  Content-Security-Policy-Report-Only , except for the
 sandbox directive, which is ignored when used with
 Content-Security-Policy-Report-Only .

The CSP  report-to directive should be used with this header, otherwise
this header will be an expensive no-op machine.

Examples

This header reports violations that would have occurred. You can use
this to iteratively work on your content security policy. You observe
how your site behaves, watching for violation reports, then choose the
desired policy enforced by the  Content-Security-Policy header.

http

    Content-Security-Policy-Report-Only: default-src https:; report-to /csp-violation-report-endpoint/

If you still want to receive reporting, but also want to enforce a
policy, use the  Content-Security-Policy header with the  report-to
directive.

http

    Content-Security-Policy: default-src https:; report-to /csp-violation-report-endpoint/

Violation report syntax

The report JSON object is sent with an  application/csp-report
 Content-Type and contains the following data:

 blocked-uri

    The URI of the resource that was blocked from loading by the Content
    Security Policy. If the blocked URI is from a different origin than
    the document-uri, then the blocked URI is truncated to contain just
    the scheme, host, and port.

 disposition

    Either  "enforce" or  "report" depending on whether the
     Content-Security-Policy header or the
     Content-Security-Policy-Report-Only header is used.

 document-uri

    The URI of the document in which the violation occurred.

 effective-directive

    The directive whose enforcement caused the violation.

 original-policy

    The original policy as specified by the
     Content-Security-Policy-Report-Only HTTP header.

 referrer

    The referrer of the document in which the violation occurred.

 script-sample

    The first 40 characters of the inline script, event handler, or
    style that caused the violation.

 status-code

    The HTTP status code of the resource on which the global object was
    instantiated.

 violated-directive  Deprecated 

    The directive whose enforcement caused the violation. The
     violated-directive is a historic name for the  effective-directive
    field and contains the same value.

Sample violation report

Let's consider a page located at  http://example.com/signup.html . It
uses the following policy, disallowing everything but stylesheets from
 cdn.example.com .

http

    Content-Security-Policy-Report-Only: default-src 'none'; style-src cdn.example.com; report-to /_/csp-reports

The HTML of  signup.html looks like this:

html

    <!doctype html>
    <html lang="en-US">
      <head>
        <meta charset="UTF-8" />
        <title>Sign Up</title>
        <link rel="stylesheet" href="css/style.css" />
      </head>
      <body>
        Page content
      </body>
    </html>

Can you spot the violation? Stylesheets are only allowed to be loaded
from  cdn.example.com , yet the website tries to load one from its own
origin (  http://example.com ). A browser capable of reporting CSP
violations will send the following report as an HTTP  POST request to
 http://example.com/_/csp-reports , when the document is visited:

json

    {
      "csp-report": {
        "blocked-uri": "http://example.com/css/style.css",
        "disposition": "report",
        "document-uri": "http://example.com/signup.html",
        "effective-directive": "style-src-elem",
        "original-policy": "default-src 'none'; style-src cdn.example.com; report-to /_/csp-reports",
        "referrer": "",
        "status-code": 200,
        "violated-directive": "style-src-elem"
      }
    }

The report includes the full path to the violating resource in
 blocked-uri which may not always the case. For example, when the
 signup.html would attempt to load CSS from
 http://anothercdn.example.com/stylesheet.css , the browser would not
include the full path but only the origin (
 http://anothercdn.example.com ). This is done to prevent leaking
sensitive information about cross-origin resources.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # cspro-header

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-   CSP  report-to directive
-   CSP  report-uri directive Deprecated

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 12, 2023 by MDN contributors .
# CSP: report-to #
  ____ ____  ____                                _        _        
 / ___/ ___||  _ \ _   _ __ ___ _ __   ___  _ __| |_     | |_ ___  
| |   \___ \| |_) (_) | '__/ _ \ '_ \ / _ \| '__| __|____| __/ _ \ 
| |___ ___) |  __/ _  | | |  __/ |_) | (_) | |  | ||_____| || (_) |
 \____|____/|_|   (_) |_|  \___| .__/ \___/|_|   \__|     \__\___/ 
                               |_|                                 
CSP: report-to

The  Content-Security-Policy  Report-To HTTP response header field
instructs the user agent to store reporting endpoints for an origin.

http

    Content-Security-Policy: …; report-to groupname

The directive has no effect in and of itself, but only gains meaning in
combination with other directives.

  --------------------------------------------------------- ---------------------
  CSP version                                               1
  Directive type                                            Reporting directive
  This directive is not supported in the  <meta> element.   
  --------------------------------------------------------- ---------------------

Syntax

http

    Content-Security-Policy: report-to <json-field-value>;

Examples

See  Content-Security-Policy-Report-Only for more information and
examples.

http

    Report-To: { "group": "csp-endpoint",
                  "max_age": 10886400,
                  "endpoints": [
                    { "url": "https://example.com/csp-reports" }
                  ] },
                { "group": "hpkp-endpoint",
                  "max_age": 10886400,
                  "endpoints": [
                    { "url": "https://example.com/hpkp-reports" }
                  ] }
    Content-Security-Policy: …; report-to csp-endpoint

http

    Report-To: { "group": "endpoint-1",
                  "max_age": 10886400,
                  "endpoints": [
                    { "url": "https://example.com/reports" },
                    { "url": "https://backup.com/reports" }
                  ] }

    Content-Security-Policy: …; report-to endpoint-1

http

    Reporting-Endpoints: endpoint-1="https://example.com/reports"

    Content-Security-Policy: …; report-to endpoint-1

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-report-to

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    Content-Security-Policy-Report-Only

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# CSP: report-uri #
  ____ ____  ____                                _                   _ 
 / ___/ ___||  _ \ _   _ __ ___ _ __   ___  _ __| |_      _   _ _ __(_)
| |   \___ \| |_) (_) | '__/ _ \ '_ \ / _ \| '__| __|____| | | | '__| |
| |___ ___) |  __/ _  | | |  __/ |_) | (_) | |  | ||_____| |_| | |  | |
 \____|____/|_|   (_) |_|  \___| .__/ \___/|_|   \__|     \__,_|_|  |_|
                               |_|                                     
CSP: report-uri

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The deprecated HTTP  Content-Security-Policy (CSP)  report-uri directive
instructs the user agent to report attempts to violate the Content
Security Policy. These violation reports consist of JSON documents sent
via an HTTP POST request to the specified URI.

Warning: Though the  report-to directive is intended to replace the
deprecated  report-uri directive,  report-to isn't supported in most
browsers yet. So for compatibility with current browsers while also
adding forward compatibility when browsers get  report-to support, you
can specify both  report-uri and  report-to :

http

    Content-Security-Policy: …; report-uri https://endpoint.com; report-to groupname

In browsers that support  report-to , the  report-uri directive will be
ignored.

The directive has no effect in and of itself, but only gains meaning in
combination with other directives.

  --------------------------------------------------------- ---------------------
  CSP version                                               1
  Directive type                                            Reporting directive
  This directive is not supported in the  <meta> element.   
  --------------------------------------------------------- ---------------------

Syntax

http

    Content-Security-Policy: report-uri <uri>;
    Content-Security-Policy: report-uri <uri> <uri>;

<uri>

    A URI where to POST the report to.

Examples

See  Content-Security-Policy-Report-Only for more information and
examples.

http

    Content-Security-Policy: default-src https:; report-uri /csp-violation-report-endpoint/

 /csp-violation-report-endpoint/ could for example run a PHP something
like the following that logs the JSON detailing the violation and, if
the violation is the first one added to the log file, sends an email to
an administrator:

php

        <?php

        // Start configure
        $log_file = dirname(__FILE__) . '/csp-violations.log';
        $log_file_size_limit = 1000000; // bytes - once exceeded no further entries are added
        $email_address = 'admin@example.com';
        $email_subject = 'Content-Security-Policy violation';
        // End configuration

        $current_domain = preg_replace('/www\./i', '', $_SERVER['SERVER_NAME']);
        $email_subject = $email_subject . ' on ' . $current_domain;

        http_response_code(204); // HTTP 204 No Content

        $json_data = file_get_contents('php://input');

        // We pretty print the JSON before adding it to the log file
        if ($json_data = json_decode($json_data)) {
          $json_data = json_encode($json_data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);

          if (!file_exists($log_file)) {
            // Send an email
            $message = "The following Content-Security-Policy violation occurred on " .
              $current_domain . ":\n\n" .
              $json_data .
              "\n\nFurther CPS violations will be logged to the following log file, but no further email notifications will be sent until this log file is deleted:\n\n" .
              $log_file;
            mail($email_address, $email_subject, $message,
                 'Content-Type: text/plain;charset=utf-8');
          } else if (filesize($log_file) > $log_file_size_limit) {
            exit(0);
          }

          file_put_contents($log_file, $json_data, FILE_APPEND | LOCK_EX);
        }

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-report-uri

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    Content-Security-Policy-Report-Only
-    report-to

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# CSP: require-trusted-types-for #
  ____ ____  ____    
 / ___/ ___||  _ \ _ 
| |   \___ \| |_) (_)
| |___ ___) |  __/ _ 
 \____|____/|_|   (_)
                     
                      _                _                  _           _       
 _ __ ___  __ _ _   _(_)_ __ ___      | |_ _ __ _   _ ___| |_ ___  __| |      
| '__/ _ \/ _` | | | | | '__/ _ \_____| __| '__| | | / __| __/ _ \/ _` |_____ 
| | |  __/ (_| | |_| | | | |  __/_____| |_| |  | |_| \__ \ ||  __/ (_| |_____|
|_|  \___|\__, |\__,_|_|_|  \___|      \__|_|   \__,_|___/\__\___|\__,_|      
             |_|                                                              
 _                                __            
| |_ _   _ _ __   ___  ___       / _| ___  _ __ 
| __| | | | '_ \ / _ \/ __|_____| |_ / _ \| '__|
| |_| |_| | |_) |  __/\__ \_____|  _| (_) | |   
 \__|\__, | .__/ \___||___/     |_|  \___/|_|   
     |___/|_|                                   
CSP: require-trusted-types-for

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Content-Security-Policy (CSP)  require-trusted-types-for
Experimental directive instructs user agents to control the data passed
to DOM XSS sink functions, like  Element.innerHTML setter.

When used, those functions only accept non-spoofable, typed values
created by Trusted Type policies, and reject strings. Together with
 trusted-types directive, which guards creation of Trusted Type
policies, this allows authors to define rules guarding writing values to
the DOM and thus reducing the DOM XSS attack surface to small, isolated
parts of the web application codebase, facilitating their monitoring and
code review.

Syntax

http

    Content-Security-Policy: require-trusted-types-for 'script';

 'script'

    Disallows using strings with DOM XSS injection sink functions, and
    requires matching types created by Trusted Type policies.

Examples

js

    // Content-Security-Policy: require-trusted-types-for 'script'; trusted-types foo;

    const attackerInput = '<svg onload="alert(/cross-site-scripting/)" />';
    const el = document.createElement("div");

    if (typeof trustedTypes !== "undefined") {
      // Create a policy that can create TrustedHTML values
      // after sanitizing the input strings with DOMPurify library.
      const sanitizer = trustedTypes.createPolicy("foo", {
        createHTML: (input) => DOMPurify.sanitize(input),
      });

      el.innerHTML = sanitizer.createHTML(attackerInput); // Puts the sanitized value into the DOM.
      el.innerHTML = attackerInput; // Rejects a string value; throws a TypeError.
    }

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Trusted Types
  # require-trusted-types-for-csp-directive

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-   Cross-Site Scripting (XSS)
-   DOM XSS injection sinks covered by Trusted Types
-   Prevent DOM-based cross-site scripting vulnerabilities with Trusted
    Types
-   Trusted Types with DOMPurify XSS sanitizer
-   Trusted Types polyfill

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Oct 25, 2023 by MDN contributors .
# CSP: sandbox #
  ____ ____  ____                          _ _               
 / ___/ ___||  _ \ _   ___  __ _ _ __   __| | |__   _____  __
| |   \___ \| |_) (_) / __|/ _` | '_ \ / _` | '_ \ / _ \ \/ /
| |___ ___) |  __/ _  \__ \ (_| | | | | (_| | |_) | (_) >  < 
 \____|____/|_|   (_) |___/\__,_|_| |_|\__,_|_.__/ \___/_/\_\
                                                             
CSP: sandbox

The HTTP  Content-Security-Policy (CSP)  sandbox directive enables a
sandbox for the requested resource similar to the  <iframe>  sandbox
attribute. It applies restrictions to a page's actions including
preventing popups, preventing the execution of plugins and scripts, and
enforcing a same-origin policy.

  --------------------------------------------------------------------------------------------------------------------- --------------------
  CSP version                                                                                                           1.1 / 2
  Directive type                                                                                                        Document directive
  This directive is not supported in the  <meta> element or by the  Content-Security-policy-Report-Only header field.   
  --------------------------------------------------------------------------------------------------------------------- --------------------

Syntax

http

    Content-Security-Policy: sandbox;
    Content-Security-Policy: sandbox <value>;

where  <value> can optionally be one of the following values:

 allow-downloads

    Allows downloading files through an  <a> or  <area> element with the
    download attribute, as well as through the navigation that leads to
    a download of a file. This works regardless of whether the user
    clicked on the link, or JS code initiated it without user
    interaction.

 allow-downloads-without-user-activation  Experimental 

    Allows for downloads to occur without a gesture from the user.

 allow-forms

    Allows the page to submit forms. If this keyword is not used, form
    will be displayed as normal, but submitting it will not trigger
    input validation, sending data to a web server or closing a dialog.

 allow-modals

    Allows the page to open modal windows by  Window.alert() ,
     Window.confirm() ,  Window.print() and  Window.prompt() , while
    opening a  <dialog> is allowed regardless of this keyword. It also
    allows the page to receive  BeforeUnloadEvent event.

 allow-orientation-lock

    Lets the resource lock the screen orientation .

 allow-pointer-lock

    Allows the page to use the Pointer Lock API .

 allow-popups

    Allows popups (like from  Window.open() ,  target="_blank" ,
     Window.showModalDialog() ). If this keyword is not used, that
    functionality will silently fail.

 allow-popups-to-escape-sandbox

    Allows a sandboxed document to open new windows without forcing the
    sandboxing flags upon them. This will allow, for example, a
    third-party advertisement to be safely sandboxed without forcing the
    same restrictions upon the page the ad links to.

 allow-presentation

    Allows embedders to have control over whether an iframe can start a
    presentation session .

 allow-same-origin

    If this token is not used, the resource is treated as being from a
    special origin that always fails the same-origin policy (potentially
    preventing access to data storage/cookies and some JavaScript APIs).

 allow-scripts

    Allows the page to run scripts (but not create pop-up windows). If
    this keyword is not used, this operation is not allowed.

 allow-storage-access-by-user-activation  Experimental 

    Lets the resource request access to the parent's storage
    capabilities with the Storage Access API .

 allow-top-navigation

    Lets the resource navigate the top-level browsing context (the one
    named  _top ).

 allow-top-navigation-by-user-activation

    Lets the resource navigate the top-level browsing context, but only
    if initiated by a user gesture.

 allow-top-navigation-to-custom-protocols

    Allows navigations to non-  http protocols built into browser or
    registered by a website . This feature is also activated by
     allow-popups or  allow-top-navigation keyword.

Examples

http

    Content-Security-Policy: sandbox allow-scripts;

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-sandbox

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    sandbox attribute on  <iframe> elements

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# CSP: script-src-attr #
  ____ ____  ____    
 / ___/ ___||  _ \ _ 
| |   \___ \| |_) (_)
| |___ ___) |  __/ _ 
 \____|____/|_|   (_)
                     
               _       _                                _   _        
 ___  ___ _ __(_)_ __ | |_      ___ _ __ ___       __ _| |_| |_ _ __ 
/ __|/ __| '__| | '_ \| __|____/ __| '__/ __|____ / _` | __| __| '__|
\__ \ (__| |  | | |_) | ||_____\__ \ | | (_|_____| (_| | |_| |_| |   
|___/\___|_|  |_| .__/ \__|    |___/_|  \___|     \__,_|\__|\__|_|   
                |_|                                                  
CSP: script-src-attr

The HTTP  Content-Security-Policy (CSP)  script-src-attr directive
specifies valid sources for JavaScript inline event handlers.

This directive only specifies valid sources for inline script event
handlers like  onclick . It does not apply to other JavaScript sources
that can trigger script execution, such as URLs loaded directly into
 <script> elements and XSLT stylesheets . (Valid sources can be
specified for all JavaScript script sources using  script-src , or just
for  <script> elements using  script-src-elem .)

  ----------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------
  CSP version             3
  Directive type          Fetch directive
   default-src fallback   Yes. If this directive is absent, the user agent will look for the  script-src directive, and if both of them are absent, fallback to  default-src directive.
  ----------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------

Syntax

One or more sources can be allowed for the  script-src-attr policy:

http

    Content-Security-Policy: script-src-attr <source>;
    Content-Security-Policy: script-src-attr <source> <source>;

 script-src-attr can be used in conjunction with  script-src , and will
override that directive for checks on inline handlers:

http

    Content-Security-Policy: script-src <source>;
    Content-Security-Policy: script-src-attr <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

Violation case

Given this CSP header:

http

    Content-Security-Policy: script-src-attr 'none'

…the following inline event handler is blocked and won't be loaded or
executed:

html

    <button id="btn" onclick="doSomething()"></button>

Note that generally you should replace inline event handlers with
 addEventListener calls:

js

    document.getElementById("btn").addEventListener("click", doSomething);

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-script-src-attr

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    <script>
-    script-src
-    script-src-elem

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# CSP: script-src-elem #
  ____ ____  ____    
 / ___/ ___||  _ \ _ 
| |   \___ \| |_) (_)
| |___ ___) |  __/ _ 
 \____|____/|_|   (_)
                     
               _       _                               _                
 ___  ___ _ __(_)_ __ | |_      ___ _ __ ___       ___| | ___ _ __ ___  
/ __|/ __| '__| | '_ \| __|____/ __| '__/ __|____ / _ \ |/ _ \ '_ ` _ \ 
\__ \ (__| |  | | |_) | ||_____\__ \ | | (_|_____|  __/ |  __/ | | | | |
|___/\___|_|  |_| .__/ \__|    |___/_|  \___|     \___|_|\___|_| |_| |_|
                |_|                                                     
CSP: script-src-elem

The HTTP  Content-Security-Policy (CSP)  script-src-elem directive
specifies valid sources for JavaScript  <script> elements.

This directive only specifies valid sources in  <script> elements (both
script requests and blocks). It does not apply to other JavaScript
sources that can trigger script execution, such as inline script event
handlers (  onclick ), script execution methods gated on the
"unsafe-eval" check , and XSLT stylesheets . (Valid sources can be
specified for all JavaScript script sources using  script-src , or just
for inline script handlers using  script-src-attr .)

  ----------------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------
  CSP version             3
  Directive type          Fetch directive
   default-src fallback   Yes. If this directive is absent, the user agent will look for the  script-src directive, and if both of them are absent, fall back to  default-src directive.
  ----------------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------

Syntax

One or more sources can be allowed for the  script-src-elem policy:

http

    Content-Security-Policy: script-src-elem <source>;
    Content-Security-Policy: script-src-elem <source> <source>;

 script-src-elem can be used in conjunction with  script-src :

http

    Content-Security-Policy: script-src <source>;
    Content-Security-Policy: script-src-elem <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

Violation case

Given this CSP header:

http

    Content-Security-Policy: script-src-elem https://example.com/

…the following script is blocked and won't be loaded or executed:

html

    <script src="https://not-example.com/js/library.js"></script>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-script-src-elem

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    <script>
-    script-src
-    script-src-attr

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# CSP: script-src #
  ____ ____  ____                    _       _                     
 / ___/ ___||  _ \ _   ___  ___ _ __(_)_ __ | |_      ___ _ __ ___ 
| |   \___ \| |_) (_) / __|/ __| '__| | '_ \| __|____/ __| '__/ __|
| |___ ___) |  __/ _  \__ \ (__| |  | | |_) | ||_____\__ \ | | (__ 
 \____|____/|_|   (_) |___/\___|_|  |_| .__/ \__|    |___/_|  \___|
                                      |_|                          
CSP: script-src

The HTTP  Content-Security-Policy (CSP)  script-src directive specifies
valid sources for JavaScript. This includes not only URLs loaded
directly into  <script> elements, but also things like inline script
event handlers (  onclick ) and XSLT stylesheets which can trigger
script execution.

  ----------------------- --------------------------------------------------------------------------------------------
  CSP version             1
  Directive type          Fetch directive
   default-src fallback   Yes. If this directive is absent, the user agent will look for the  default-src directive.
  ----------------------- --------------------------------------------------------------------------------------------

Syntax

One or more sources can be allowed for the  script-src policy:

http

    Content-Security-Policy: script-src <source>;
    Content-Security-Policy: script-src <source> <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

Whitelisting resources from trusted domains

Given this CSP header that only allows scripts from  https://example.com
:

http

    Content-Security-Policy: script-src https://example.com/

the following script is blocked and won't be loaded or executed:

html

    <script src="https://not-example.com/js/library.js"></script>

Note that inline event handlers are blocked as well:

html

    <button id="btn" onclick="doSomething()"></button>

You should replace them with  addEventListener calls:

js

    document.getElementById("btn").addEventListener("click", doSomething);

If you cannot replace inline event handlers, you can use the
 'unsafe-hashes' source expression to allow them. See Unsafe hashes for
more information.

Whitelisting external scripts using hashes

Allowing trusted domains, as shown in the section above, is a
broad-brushed approach for specifying the locations from which code can
safely be loaded. This is a pragmatic approach, in particular when your
site uses many resources and you have confidence that the trusted site
will not be compromised.

An alternative method is to specify allowed scripts using file hashes.
Using this approach an external file in a  <script> element can only be
loaded and executed if all the valid hash values in its  integrity
attribute match the allowed values in the CSP header. The Subresource
integrity feature additionally checks that the downloaded file has the
indicated hash value, and therefore has not been modified. This is safer
than trusting a domain, because files will only be used if they are
unmodified, even if loaded from a compromised site. It is however more
granular, and requires that hash values are updated in CSP and script
elements whenever the associated scripts are changed.

The CSP header below demonstrates the approach. It allows scripts for
which the SHA384 hash is
 oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC or the
SHA256 hash is  fictional_value .

http

    Content-Security-Policy: script-src 'sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC' 'sha256-fictional_value'

The  example-framework.js script below should load because the hash
value in its  integrity attribute is also present in the CSP (provided
the file actually does have that hash once downloaded!)

html

    <script
      src="https://example.com/example-framework.js"
      integrity="sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC"
      crossorigin="anonymous"></script>

The  integrity attribute can have multiple values, each providing a hash
for the file calculated using a different algorithm. In order for an
external script to be loaded, CSP requires that all valid hash values in
the attribute must also be in the CSP  script-src declaration. Therefore
the script below would not load, because the second hash is not present
in the CSP header above.

html

    <script
      src="https://example.com/example-framework.js"
      integrity="sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC sha256-not-in-csp"
      crossorigin="anonymous"></script>

This rule only applies to valid hash values. Values that are not
recognized as hashes by the browser are ignored, so the following script
should load:

html

    <script
      src="https://example.com/example-framework.js"
      integrity="invalid-or-unsupported-hash sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC"
      crossorigin="anonymous"></script>

Subresource integrity contains more information about calculating hashes
and using the  integrity attribute.

Unsafe inline script

Note: Disallowing inline styles and inline scripts is one of the biggest
security wins CSP provides. If you absolutely have to use them, there
are a few mechanisms that will allow them. Hashes apply to inline
scripts and styles, but not event handlers. See Unsafe hashes for more
information.

To allow inline scripts and styles,  'unsafe-inline' , a nonce-source or
a hash-source that matches the inline block can be specified. The
following Content Security Policy will allow all inline  <script>
elements:

http

    Content-Security-Policy: script-src 'unsafe-inline';

The following  <script> element will be allowed by the policy:

html

    <script>
      const inline = 1;
      // …
    </script>

Allowing all inline scripts is considered a security risk, so it's
recommended to use a nonce-source or a hash-source instead. To allow
inline scripts and styles with a nonce-source, you need to generate a
random nonce value (using a cryptographically secure random token
generator) and include it in the policy. It is important to note, this
nonce value needs to be dynamically generated as it has to be unique for
each HTTP request:

http

    Content-Security-Policy: script-src 'nonce-2726c7f26c'

Then, you need to include the same nonce in the  <script> element:

html

    <script nonce="2726c7f26c">
      const inline = 1;
      // …
    </script>

Alternatively, you can create hashes from your inline scripts. CSP
supports sha256, sha384 and sha512.

http

    Content-Security-Policy: script-src 'sha256-B2yPHKaXnvFWtRChIbabYmUBFZdVfKKXHbWtWidDVF8='

When generating the hash, don't include the  <script> tags and note that
capitalization and whitespace matter, including leading or trailing
whitespace.

html

    <script>
      const inline = 1;
    </script>

Unsafe hashes

Policies for inline resources with hashes like
 script-src 'sha256-{HASHED_INLINE_SCRIPT}' allow scripts and styles by
their hash, but not event handlers:

html

    <!-- Allowed by CSP: script-src 'sha256-{HASHED_INLINE_SCRIPT}' -->
    <script>
      const inline = 1;
    </script>

    <!-- CSP: script-src 'sha256-{HASHED_EVENT_HANDLER}'
          will not allow this event handler -->
    <button onclick="myScript()">Submit</button>

Instead of allowing  'unsafe-inline' , you can use the  'unsafe-hashes'
source expression if code can't be updated to equivalent
 addEventListener calls. Given a HTML page that includes the following
inline event handler:

html

    <!-- I want to use addEventListener, but I can't :( -->
    <button onclick="myScript()">Submit</button>

The following CSP header will allow the script to execute:

http

    Content-Security-Policy:  script-src 'unsafe-hashes' 'sha256-{HASHED_EVENT_HANDLER}'

Unsafe eval expressions

The  'unsafe-eval' source expression controls several script execution
methods that create code from strings. If a page has a CSP header and
 'unsafe-eval' isn't specified with the  script-src directive, the
following methods are blocked and won't have any effect:

-    eval()
-    Function()
-   When passing a string literal like to methods like:
     setTimeout("alert(\"Hello World!\");", 500);
    -    setTimeout()
    -    setInterval()
    -    window.setImmediate
-    window.execScript() Non-standard (IE < 11 only)

Unsafe WebAssembly execution

The  'wasm-unsafe-eval' source expression controls WebAssembly
execution. If a page has a CSP header and  'wasm-unsafe-eval' isn't
specified in the  script-src directive, WebAssembly is blocked from
loading and executing on the page.

The  'wasm-unsafe-eval' source expression is more specific than
 'unsafe-eval' which permits both compilation (and instantiation) of
WebAssembly and, for example, the use of the  eval operation in
JavaScript. If the  'unsafe-eval' source keyword is used, then this
overrides any occurrence of  'wasm-unsafe-eval' in the CSP policy.

http

    Content-Security-Policy: script-src 'wasm-unsafe-eval'

strict-dynamic

The  'strict-dynamic' source expression specifies that the trust
explicitly given to a script present in the markup, by accompanying it
with a nonce or a hash, shall be propagated to all the scripts loaded by
that root script. At the same time, any allowlist or source expressions
such as  'self' or  'unsafe-inline' will be ignored.

For example, a policy such as
 script-src 'strict-dynamic' 'nonce-R4nd0m' https://allowlisted.example.com/
would allow loading of a root script with
 <script nonce="R4nd0m" src="https://example.com/loader.js"> and
propagate that trust to any script loaded by  loader.js , but disallow
loading scripts from  https://allowlisted.example.com/ unless
accompanied by a nonce or loaded from a trusted script.

http

    Content-Security-Policy: script-src 'strict-dynamic' 'nonce-someNonce'

Or:

http

    Content-Security-Policy: script-src 'strict-dynamic' 'sha256-base64EncodedHash'

It is possible to deploy  strict-dynamic in a backwards compatible way,
without requiring user-agent sniffing. The policy:

http

    Content-Security-Policy: script-src 'unsafe-inline' https: 'nonce-abcdefg' 'strict-dynamic'

will act like  'unsafe-inline' https: in browsers that support CSP1,
 https: 'nonce-abcdefg' in browsers that support CSP2, and
 'nonce-abcdefg' 'strict-dynamic' in browsers that support CSP3.

Allowing speculation rules

To include speculation rules in scripts (see also
 <script type="speculationrules"> ), you need to use the  script-src
directive along with the  'inline-speculation-rules' source and a hash-
or nonce-source. For example:

http

    Content-Security-Policy: script-src 'inline-speculation-rules' 'sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC'

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-script-src

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    Sources
-    <script>
-    script-src-elem
-    script-src-attr

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Oct 19, 2023 by MDN contributors .
# CSP source values #
  ____ ____  ____                                 
 / ___/ ___||  _ \   ___  ___  _   _ _ __ ___ ___ 
| |   \___ \| |_) | / __|/ _ \| | | | '__/ __/ _ \
| |___ ___) |  __/  \__ \ (_) | |_| | | | (_|  __/
 \____|____/|_|     |___/\___/ \__,_|_|  \___\___|
                                                  
            _                 
__   ____ _| |_   _  ___  ___ 
\ \ / / _` | | | | |/ _ \/ __|
 \ V / (_| | | |_| |  __/\__ \
  \_/ \__,_|_|\__,_|\___||___/
                              
CSP source values

HTTP  Content-Security-Policy (CSP) header directives that specify a
 <source> from which resources may be loaded can use any one of the
values listed below. Relevant directives include the fetch directives ,
along with others listed below .

Sources

 <host-source>

    Internet host by name or IP address. The URL scheme , port number,
    and path are optional. Wildcards (  '*' ) can be used for
    subdomains, host address, and port number, indicating that all legal
    values of each are valid. When matching schemes, secure upgrades are
    allowed (e.g. specifying  http://example.com will match
     https://example.com ). Examples:

    -    http://*.example.com : Matches all attempts to load from any
        subdomain of example.com. Also matches  https resources.
    -    mail.example.com:443 : Matches all attempts to load from port
        443 on mail.example.com.
    -    https://store.example.com : Matches all attempts to access
        store.example.com using  https: .
    -    *.example.com : Matches all attempts to load from any subdomain
        of example.com.
    -    https://*.example.com:12/path/to/file.js : Matches all attempts
        to load from any subdomain of example.com using  https: on port
        12, and only if the path is  /path/to/file.js .
    -    ws://example.com : Matches all attempts to load from
        example.com using  ws: . Also matches  wss resources.

 <scheme-source>

    A scheme such as  http: or  https: . The colon is required. Unlike
    other values below, single quotes shouldn't be used. You can also
    specify data schemes (not recommended).

    -    data: Allows  data: URLs to be used as a content source. This
        is insecure; an attacker can also inject arbitrary  data: URLs.
        Use this sparingly and definitely not for scripts.
    -    mediastream: Allows  mediastream: URIs to be used as a content
        source.
    -    blob: Allows  blob: URIs to be used as a content source.
    -    filesystem: Allows  filesystem: URIs to be used as a content
        source.

    Note: if a scheme source is missing, the document origin's scheme is
    used. Secure upgrades are allowed, so if the document is loaded
    using  https: , then  example.com will match  https://example.com
    but not  http://example.com . For more information, see CSP Level 3
    .

 'self'

    Refers to the origin from which the protected document is being
    served, including the same URL scheme and port number. You must
    include the single quotes. Some browsers specifically exclude  blob
    and  filesystem from source directives. Sites needing to allow these
    content types can specify them using the Data attribute.

 'unsafe-eval'

    Allows the use of  eval() and other unsafe methods for creating code
    from strings. You must include the single quotes.

 'wasm-unsafe-eval'

    Allows the loading and execution of WebAssembly modules without the
    need to also allow unsafe JavaScript execution via  'unsafe-eval' .
    The single quotes are required.

 'unsafe-hashes'

    Allows enabling specific inline event handlers . If you only need to
    allow inline event handlers and not inline  <script> elements or
     javascript: URLs, this is a safer method than using the
     unsafe-inline expression.

 'unsafe-inline'

    Allows the use of inline resources, such as inline  <script>
    elements,  javascript: URLs, inline event handlers, and inline
     <style> elements. The single quotes are required.

 'none'

    Refers to the empty set; that is, no URLs match. The single quotes
    are required.

 'nonce-<base64-value>'

    An allowlist for specific inline scripts using a cryptographic nonce
    (number used once). The server must generate a unique nonce value
    each time it transmits a policy. It is critical to provide an
    unguessable nonce, as bypassing a resource's policy is otherwise
    trivial. See unsafe inline script for an example. Specifying nonce
    makes a modern browser ignore  'unsafe-inline' which could still be
    set for older browsers without nonce support.

    Note: The CSP  nonce source can only be applied to nonceable
    elements (e.g., as the  <img> element has no  nonce attribute, there
    is no way to associate it with this CSP source).

 '<hash-algorithm>-<base64-value>'

    A sha256, sha384 or sha512 hash of scripts or styles. This value
    consists of the algorithm used to create the hash followed by a
    hyphen and the base64-encoded hash of the script or style. When
    generating the hash, exclude <script> or <style> tags and note that
    capitalization and whitespace matter, including leading or trailing
    whitespace. In CSP 2.0, hash sources can be applied to inline
    scripts and styles. Hash source expressions are allowed in CSP 3.0
    for external scripts in  script-src directives. See the script-src
    and style-src pages for more information and examples.

 'strict-dynamic'

    The  strict-dynamic source expression specifies that the trust
    explicitly given to a script present in the markup, by accompanying
    it with a nonce or a hash, shall be propagated to all the scripts
    loaded by that root script. At the same time, any allowlist or
    source expressions such as  'self' or  'unsafe-inline' are ignored.
    See script-src for an example.

 'report-sample'

    Requires a sample of the violating code to be included in the
    violation report.

 'inline-speculation-rules'

    Allows the inclusion of speculation rules in scripts (see also
     <script type="speculationrules"> ).

Relevant directives

Directives for which the above sources apply include:

-   Fetch directives :
    -    default-src
    -    child-src
    -    connect-src
    -    font-src
    -    frame-src
    -    img-src
    -    manifest-src
    -    media-src
    -    object-src
    -    prefetch-src
    -    script-src
    -    script-src-elem
    -    script-src-attr
    -    style-src
    -    style-src-elem
    -    style-src-attr
    -    worker-src
-   Document directives :
    -    base-uri
    -    sandbox
-   Navigation directives :
    -    form-action
    -    frame-ancestors

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 26, 2023 by MDN contributors .
# CSP: style-src-attr #
  ____ ____  ____    
 / ___/ ___||  _ \ _ 
| |   \___ \| |_) (_)
| |___ ___) |  __/ _ 
 \____|____/|_|   (_)
                     
     _         _                                    _   _        
 ___| |_ _   _| | ___       ___ _ __ ___       __ _| |_| |_ _ __ 
/ __| __| | | | |/ _ \_____/ __| '__/ __|____ / _` | __| __| '__|
\__ \ |_| |_| | |  __/_____\__ \ | | (_|_____| (_| | |_| |_| |   
|___/\__|\__, |_|\___|     |___/_|  \___|     \__,_|\__|\__|_|   
         |___/                                                   
CSP: style-src-attr

The HTTP  Content-Security-Policy (CSP)  style-src-attr directive
specifies valid sources for inline styles applied to individual DOM
elements.

The directive does not set valid sources for  <style> elements and
 <link> elements with  rel="stylesheet" . These are set using
 style-src-elem (and valid sources for all styles may be set with
 style-src ).

  ----------------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------
  CSP version             3
  Directive type          Fetch directive
   default-src fallback   Yes. If this directive is absent, the user agent will look for the  style-src directive, and if both of them are absent, fallback to  default-src directive.
  ----------------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------

Syntax

One or more sources can be allowed for the  style-src-attr policy:

http

    Content-Security-Policy: style-src-attr <source>;
    Content-Security-Policy: style-src-attr <source> <source>;

 style-src-attr can be used in conjunction with  style-src :

http

    Content-Security-Policy: style-src <source>;
    Content-Security-Policy: style-src-attr <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

Violation cases

Given this CSP header:

http

    Content-Security-Policy: style-src-attr 'none'

…the inline style applied to the element below will not be applied:

html

    <div style="display:none">Foo</div>

The policy would also block any styles applied in JavaScript by setting
the  style attribute directly, or by setting  cssText :

js

    document.querySelector("div").setAttribute("style", "display:none;");
    document.querySelector("div").style.cssText = "display:none;";

Style properties that are set directly on the element's  style property
will not be blocked, allowing users to safely manipulate styles via
JavaScript:

js

    document.querySelector("div").style.display = "none";

Note that using JavaScript might independently be blocked using the
 script-src CSP directive.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-style-src-attr

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    style-src
-    style-src-elem
-    Link header
-    <style> ,  <link>
-    @import
-    CSSStyleSheet.insertRule()
-    CSSGroupingRule.insertRule()
-    CSSStyleDeclaration.cssText

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Oct 10, 2023 by MDN contributors .
# CSP: style-src-elem #
  ____ ____  ____    
 / ___/ ___||  _ \ _ 
| |   \___ \| |_) (_)
| |___ ___) |  __/ _ 
 \____|____/|_|   (_)
                     
     _         _                                   _                
 ___| |_ _   _| | ___       ___ _ __ ___       ___| | ___ _ __ ___  
/ __| __| | | | |/ _ \_____/ __| '__/ __|____ / _ \ |/ _ \ '_ ` _ \ 
\__ \ |_| |_| | |  __/_____\__ \ | | (_|_____|  __/ |  __/ | | | | |
|___/\__|\__, |_|\___|     |___/_|  \___|     \___|_|\___|_| |_| |_|
         |___/                                                      
CSP: style-src-elem

The HTTP  Content-Security-Policy (CSP)  style-src-elem directive
specifies valid sources for stylesheet  <style> elements and  <link>
elements with  rel="stylesheet" .

The directive does not set valid sources for inline style attributes;
these are set using  style-src-attr (and valid sources for all styles
may be set with  style-src ).

  ----------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------
  CSP version             3
  Directive type          Fetch directive
   default-src fallback   Yes. If this directive is absent, the user agent will look for the  style-src directive, and if both of them are absent, fall back to  default-src directive.
  ----------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------

Syntax

One or more sources can be allowed for the  style-src-elem policy:

http

    Content-Security-Policy: style-src-elem <source>;
    Content-Security-Policy: style-src-elem <source> <source>;

 style-src-elem can be used in conjunction with  style-src :

http

    Content-Security-Policy: style-src <source>;
    Content-Security-Policy: style-src-elem <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

Violation cases

Given this CSP header:

http

    Content-Security-Policy: style-src-elem https://example.com/

…the following stylesheets are blocked and won't load:

html

    <link href="https://not-example.com/styles/main.css" rel="stylesheet" />

    <style>
      #inline-style {
        background: red;
      }
    </style>

    <style>
      @import url("https://not-example.com/styles/print.css") print;
    </style>

…as well as styles loaded using the  Link header:

http

    Link: <https://not-example.com/styles/stylesheet.css>;rel=stylesheet

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-style-src-elem

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    style-src
-    style-src-attr
-    Link header
-    <style> ,  <link>
-    @import
-    CSSStyleSheet.insertRule()
-    CSSGroupingRule.insertRule()
-    CSSStyleDeclaration.cssText

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# CSP: style-src #
  ____ ____  ____          _         _                         
 / ___/ ___||  _ \ _   ___| |_ _   _| | ___       ___ _ __ ___ 
| |   \___ \| |_) (_) / __| __| | | | |/ _ \_____/ __| '__/ __|
| |___ ___) |  __/ _  \__ \ |_| |_| | |  __/_____\__ \ | | (__ 
 \____|____/|_|   (_) |___/\__|\__, |_|\___|     |___/_|  \___|
                               |___/                           
CSP: style-src

The HTTP  Content-Security-Policy (CSP)  style-src directive specifies
valid sources for stylesheets.

  ----------------------- --------------------------------------------------------------------------------------------
  CSP version             1
  Directive type          Fetch directive
   default-src fallback   Yes. If this directive is absent, the user agent will look for the  default-src directive.
  ----------------------- --------------------------------------------------------------------------------------------

Syntax

One or more sources can be allowed for the  style-src policy:

http

    Content-Security-Policy: style-src <source>;
    Content-Security-Policy: style-src <source> <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

Violation cases

Given this CSP header:

http

    Content-Security-Policy: style-src https://example.com/

the following stylesheets are blocked and won't load:

html

    <link href="https://not-example.com/styles/main.css" rel="stylesheet" />

    <style>
      #inline-style {
        background: red;
      }
    </style>

    <style>
      @import url("https://not-example.com/styles/print.css") print;
    </style>

as well as styles loaded using the  Link header:

http

    Link: <https://not-example.com/styles/stylesheet.css>;rel=stylesheet

Inline style attributes are also blocked:

html

    <div style="display:none">Foo</div>

As well as styles that are applied in JavaScript by setting the  style
attribute directly, or by setting  cssText :

js

    document.querySelector("div").setAttribute("style", "display:none;");
    document.querySelector("div").style.cssText = "display:none;";

However, styles properties that are set directly on the element's  style
property will not be blocked, allowing users to safely manipulate styles
via JavaScript:

js

    document.querySelector("div").style.display = "none";

These types of manipulations can be prevented by disallowing JavaScript
via the  script-src CSP directive.

Unsafe inline styles

Note: Disallowing inline styles and inline scripts is one of the biggest
security wins CSP provides. However, if you absolutely have to use it,
there are a few mechanisms that will allow them.

To allow inline styles,  'unsafe-inline' , a nonce-source or a
hash-source that matches the inline block can be specified. The
following Content Security Policy will allow inline styles like the
 <style> element, and the  style attribute on any element:

http

    Content-Security-Policy: style-src 'unsafe-inline';

The following  <style> element and  style attribute will be allowed by
the policy:

html

    <style>
      #inline-style {
        background: red;
      }
    </style>

    <div style="display:none">Foo</div>

You can use a nonce-source to only allow specific inline style blocks.
You need to generate a random nonce value (using a cryptographically
secure random token generator) and include it in the policy. It is
important to note, this nonce value needs to be dynamically generated as
it has to be unique for each HTTP request:

http

    Content-Security-Policy: style-src 'nonce-2726c7f26c'

You will have to set the same nonce on the  <style> element:

html

    <style nonce="2726c7f26c">
      #inline-style {
        background: red;
      }
    </style>

Alternatively, you can create hashes from your inline styles. CSP
supports sha256, sha384 and sha512. The binary form of the hash has to
be encoded with base64. You can obtain the hash of a string on the
command line via the  openssl program:

bash

    echo -n "#inline-style { background: red; }" | openssl dgst -sha256 -binary | openssl enc -base64

You can use a hash-source to only allow specific inline style blocks:

http

    Content-Security-Policy: style-src 'sha256-ozBpjL6dxO8fsS4u6fwG1dFDACYvpNxYeBA6tzR+FY8='

When generating the hash, don't include the  <style> tags and note that
capitalization and whitespace matter, including leading or trailing
whitespace.

html

    <style>
      #inline-style {
        background: red;
      }
    </style>

Unsafe style expressions

The  'unsafe-eval' source expression controls several style methods that
create style declarations from strings. If  'unsafe-eval' isn't
specified with the  style-src directive, the following methods are
blocked and won't have any effect:

-    CSSStyleSheet.insertRule()
-    CSSGroupingRule.insertRule()
-    CSSStyleDeclaration.cssText

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-style-src

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    style-src-elem
-    style-src-attr
-    Link header
-    <style> ,  <link>
-    @import
-    CSSStyleSheet.insertRule()
-    CSSGroupingRule.insertRule()
-    CSSStyleDeclaration.cssText

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 28, 2023 by MDN contributors .
# CSP: trusted-types #
  ____ ____  ____    
 / ___/ ___||  _ \ _ 
| |   \___ \| |_) (_)
| |___ ___) |  __/ _ 
 \____|____/|_|   (_)
                     
 _                  _           _       _                         
| |_ _ __ _   _ ___| |_ ___  __| |     | |_ _   _ _ __   ___  ___ 
| __| '__| | | / __| __/ _ \/ _` |_____| __| | | | '_ \ / _ \/ __|
| |_| |  | |_| \__ \ ||  __/ (_| |_____| |_| |_| | |_) |  __/\__ \
 \__|_|   \__,_|___/\__\___|\__,_|      \__|\__, | .__/ \___||___/
                                            |___/|_|              
CSP: trusted-types

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Content-Security-Policy (CSP)  trusted-types Experimental
directive instructs user agents to restrict the creation of Trusted
Types policies - functions that build non-spoofable, typed values
intended to be passed to DOM XSS sinks in place of strings.

Together with  require-trusted-types-for directive, this allows authors
to define rules guarding writing values to the DOM and thus reducing the
DOM XSS attack surface to small, isolated parts of the web application
codebase, facilitating their monitoring and code review. This directive
declares an allowlist of trusted type policy names created with
 trustedTypes.createPolicy from Trusted Types API.

Syntax

http

    Content-Security-Policy: trusted-types;
    Content-Security-Policy: trusted-types 'none';
    Content-Security-Policy: trusted-types <policyName>;
    Content-Security-Policy: trusted-types <policyName> <policyName> 'allow-duplicates';

<policyName>

    A valid policy name consists only of alphanumeric characters, or one
    of "  -#=_/@.% ". A star (  * ) as a policy name instructs the user
    agent to allow any unique policy name ('  allow-duplicates ' may
    relax that further).

 'none'

    Disallows creating any Trusted Type policy (same as not specifying
    any <policyName> ).

 'allow-duplicates'

    Allows for creating policies with a name that was already used.

Examples

js

    // Content-Security-Policy: trusted-types foo bar 'allow-duplicates';

    if (typeof trustedTypes !== "undefined") {
      const policyFoo = trustedTypes.createPolicy("foo", {});
      const policyFoo2 = trustedTypes.createPolicy("foo", {});
      const policyBaz = trustedTypes.createPolicy("baz", {}); // Throws and dispatches a SecurityPolicyViolationEvent.
    }

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Trusted Types
  # trusted-types-csp-directive

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-   Cross-Site Scripting (XSS)
-   Prevent DOM-based cross-site scripting vulnerabilities with Trusted
    Types
-   Trusted Types with DOMPurify XSS sanitizer
-   Trusted Types polyfill

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Oct 25, 2023 by MDN contributors .
# CSP: upgrade-insecure-requests #
  ____ ____  ____    
 / ___/ ___||  _ \ _ 
| |   \___ \| |_) (_)
| |___ ___) |  __/ _ 
 \____|____/|_|   (_)
                     
                                 _            _                                
 _   _ _ __   __ _ _ __ __ _  __| | ___      (_)_ __  ___  ___  ___ _   _ _ __ 
| | | | '_ \ / _` | '__/ _` |/ _` |/ _ \_____| | '_ \/ __|/ _ \/ __| | | | '__|
| |_| | |_) | (_| | | | (_| | (_| |  __/_____| | | | \__ \  __/ (__| |_| | |   
 \__,_| .__/ \__, |_|  \__,_|\__,_|\___|     |_|_| |_|___/\___|\___|\__,_|_|   
      |_|    |___/                                                             
                                           _       
  ___       _ __ ___  __ _ _   _  ___  ___| |_ ___ 
 / _ \_____| '__/ _ \/ _` | | | |/ _ \/ __| __/ __|
|  __/_____| | |  __/ (_| | |_| |  __/\__ \ |_\__ \
 \___|     |_|  \___|\__, |\__,_|\___||___/\__|___/
                        |_|                        
CSP: upgrade-insecure-requests

The HTTP  Content-Security-Policy (CSP)  upgrade-insecure-requests
directive instructs user agents to treat all of a site's insecure URLs
(those served over HTTP) as though they have been replaced with secure
URLs (those served over HTTPS). This directive is intended for websites
with large numbers of insecure legacy URLs that need to be rewritten.

Note: The  upgrade-insecure-requests directive is evaluated before
 block-all-mixed-content and if it is set, the latter is effectively a
no-op. It is recommended to set either directive, but not both, unless
you want to force HTTPS on older browsers that do not force it after a
redirect to HTTP.

The  upgrade-insecure-requests directive will not ensure that users
visiting your site via links on third-party sites will be upgraded to
HTTPS for the top-level navigation and thus does not replace the
 Strict-Transport-Security ( HSTS ) header, which should still be set
with an appropriate  max-age to ensure that users are not subject to SSL
stripping attacks.

Syntax

http

    Content-Security-Policy: upgrade-insecure-requests;

Examples

Using the HTTP header

http

    Content-Security-Policy: upgrade-insecure-requests;

Using the HTML meta element

html

    <meta
      http-equiv="Content-Security-Policy"
      content="upgrade-insecure-requests" />

With the above header set on a domain example.com that wants to migrate
from HTTP to HTTPS, non-navigational insecure resource requests are
automatically upgraded (first-party as well as third-party requests).

html

    <img src="http://example.com/image.png" />
    <img src="http://not-example.com/image.png" />

These URLs will be rewritten before the request is made, meaning that no
insecure requests will hit the network. Note that, if the requested
resource is not actually available via HTTPS, the request will fail
without any fallback to HTTP.

html

    <img src="https://example.com/image.png" />
    <img src="https://not-example.com/image.png" />

Navigational upgrades to third-party resources brings a significantly
higher potential for breakage, these are not upgraded:

html

    <a href="https://example.com/">Home</a>
    <a href="http://not-example.com/">Home</a>

Finding insecure requests

With the help of the  Content-Security-Policy-Report-Only header and the
 report-uri directive, you can set-up an enforced policy and a reported
policy like this:

http

    Content-Security-Policy: upgrade-insecure-requests; default-src https:
    Content-Security-Policy-Report-Only: default-src https:; report-uri /endpoint

That way, you still upgrade insecure requests on your secure site, but
the only monitoring policy is violated and reports insecure resources to
your endpoint.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Upgrade Insecure Requests
  # delivery

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-    Upgrade-Insecure-Requests header
-    Strict-Transport-Security ( HSTS ) header
-    block-all-mixed-content
-   Mixed content

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 10, 2023 by MDN contributors .
# CSP: worker-src #
  ____ ____  ____                         _                               
 / ___/ ___||  _ \ _  __      _____  _ __| | _____ _ __      ___ _ __ ___ 
| |   \___ \| |_) (_) \ \ /\ / / _ \| '__| |/ / _ \ '__|____/ __| '__/ __|
| |___ ___) |  __/ _   \ V  V / (_) | |  |   <  __/ | |_____\__ \ | | (__ 
 \____|____/|_|   (_)   \_/\_/ \___/|_|  |_|\_\___|_|       |___/_|  \___|
                                                                          
CSP: worker-src

The HTTP  Content-Security-Policy (CSP)  worker-src directive specifies
valid sources for  Worker ,  SharedWorker , or  ServiceWorker scripts.

  ---------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  CSP version      3
  Directive type   Fetch directive
  Fallback         If this directive is absent, the user agent will first look for the  child-src directive, then the  script-src directive, then finally for the  default-src directive, when governing worker execution.
  ---------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Syntax

One or more sources can be allowed for the  worker-src policy:

http

    Content-Security-Policy: worker-src <source>;
    Content-Security-Policy: worker-src <source> <source>;

Sources

 <source> can be any one of the values listed in CSP Source Values .

Note that this same set of values can be used in all fetch directives
(and a number of other directives ).

Examples

Violation cases

Given this CSP header:

http

    Content-Security-Policy: worker-src https://example.com/

 Worker ,  SharedWorker ,  ServiceWorker are blocked and won't load:

html

    <script>
      let blockedWorker = new Worker("data:application/javascript,…");
      blockedWorker = new SharedWorker("https://not-example.com/");
      navigator.serviceWorker.register("https://not-example.com/sw.js");
    </script>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Content Security Policy Level 3
  # directive-worker-src

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-   CSP for Web Workers
-    Worker ,  SharedWorker ,  ServiceWorker

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Content-Type #
  ____            _             _      _____                 
 / ___|___  _ __ | |_ ___ _ __ | |_   |_   _|   _ _ __   ___ 
| |   / _ \| '_ \| __/ _ \ '_ \| __|____| || | | | '_ \ / _ \
| |__| (_) | | | | ||  __/ | | | ||_____| || |_| | |_) |  __/
 \____\___/|_| |_|\__\___|_| |_|\__|    |_| \__, | .__/ \___|
                                            |___/|_|         
Content-Type

The  Content-Type representation header is used to indicate the original
media type of the resource (prior to any content encoding applied for
sending).

In responses, a  Content-Type header provides the client with the actual
content type of the returned content. This header's value may be
ignored, for example when browsers perform MIME sniffing; set the
 X-Content-Type-Options header value to  nosniff to prevent this
behavior.

In requests, (such as  POST or  PUT ), the client tells the server what
type of data is actually sent.

  ----------------------------------- ------------------------------------
  Header type                         Representation header

  Forbidden header name               no

  CORS-safelisted response header     yes

  CORS-safelisted request header      yes, with the additional restriction
                                      that values can't contain a
                                      CORS-unsafe request header byte :
                                      0x00-0x1F (except 0x09 (HT)),
                                       "():<>?@[\]{} , and 0x7F (DEL).
                                      It also needs to have a MIME type of
                                      its parsed value (ignoring
                                      parameters) of either
                                       application/x-www-form-urlencoded ,
                                       multipart/form-data , or
                                       text/plain .
  ----------------------------------- ------------------------------------

Syntax

http

    Content-Type: text/html; charset=utf-8
    Content-Type: multipart/form-data; boundary=something

Directives

 media-type

    The MIME type of the resource or the data.

charset

    The character encoding standard. Case insensitive, lowercase is
    preferred.

boundary

    For multipart entities the  boundary directive is required. The
    directive consists of 1 to 70 characters from a set of characters
    (and not ending with white space) known to be very robust through
    email gateways. It is used to encapsulate the boundaries of the
    multiple parts of the message. Often, the header boundary is
    prepended with two dashes and the final boundary has two dashes
    appended at the end.

Examples

 Content-Type in HTML forms

In a  POST request, resulting from an HTML form submission, the
 Content-Type of the request is specified by the  enctype attribute on
the  <form> element.

html

    <form action="/" method="post" enctype="multipart/form-data">
      <input type="text" name="description" value="some text" />
      <input type="file" name="myFile" />
      <button type="submit">Submit</button>
    </form>

The request looks something like this (less interesting headers are
omitted here):

http

    POST /foo HTTP/1.1
    Content-Length: 68137
    Content-Type: multipart/form-data; boundary=---------------------------974767299852498929531610575

    -----------------------------974767299852498929531610575
    Content-Disposition: form-data; name="description"

    some text
    -----------------------------974767299852498929531610575
    Content-Disposition: form-data; name="myFile"; filename="foo.txt"
    Content-Type: text/plain

    (content of the uploaded file foo.txt)
    -----------------------------974767299852498929531610575--

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.206

  HTTP Semantics
  # field.content-type
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Accept
-    Content-Disposition
-    206 Partial Content
-    X-Content-Type-Options

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Cookie #
  ____            _    _      
 / ___|___   ___ | | _(_) ___ 
| |   / _ \ / _ \| |/ / |/ _ \
| |__| (_) | (_) |   <| |  __/
 \____\___/ \___/|_|\_\_|\___|
                              
Cookie

The  Cookie HTTP request header contains stored HTTP cookies associated
with the server (i.e. previously sent by the server with the  Set-Cookie
header or set in JavaScript using  Document.cookie ).

The  Cookie header is optional and may be omitted if, for example, the
browser's privacy settings block cookies.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   yes
  ----------------------- ----------------

Syntax

http

    Cookie: <cookie-list>
    Cookie: name=value
    Cookie: name=value; name2=value2; name3=value3

Directives

<cookie-list>

    A list of name-value pairs in the form of
     <cookie-name>=<cookie-value> . Pairs in the list are separated by a
    semicolon and a space (  '; ' ).

Examples

http

    Cookie: PHPSESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP State Management Mechanism
  # cookie

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Set-Cookie
-    Document.cookie

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Critical-CH #
  ____      _ _   _           _        ____ _   _ 
 / ___|_ __(_) |_(_) ___ __ _| |      / ___| | | |
| |   | '__| | __| |/ __/ _` | |_____| |   | |_| |
| |___| |  | | |_| | (_| (_| | |_____| |___|  _  |
 \____|_|  |_|\__|_|\___\__,_|_|      \____|_| |_|
                                                  
Critical-CH

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

The  Critical-CH client hint response header is used along with
 Accept-CH to specify that accepted client hints are also critical
client hints .

User agents receiving a response with  Critical-CH must check if the
indicated critical headers were sent in the original request. If not,
the user agent will retry the request along with the critical headers
rather than render the page. This approach ensures that client
preferences set using critical client hints are always used, even if not
included in the first request, or following server configuration
changes.

Each header listed in the  Critical-CH header should also be present in
the  Accept-CH and  Vary headers.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Critical-CH: <ch-list>

Directives

 <ch-list>

    A list of one or more comma-delimited client hint headers that the
    server considers to be critical client hints.

Examples

The client makes an initial request to the server:

http

    GET / HTTP/1.1
    Host: example.com

The server responds, telling the client via  Accept-CH that it accepts
 Sec-CH-Prefers-Reduced-Motion . In this example  Critical-CH is also
used, indicating that  Sec-CH-Prefers-Reduced-Motion is considered a
critical client hint.

http

    HTTP/1.1 200 OK
    Content-Type: text/html
    Accept-CH: Sec-CH-Prefers-Reduced-Motion
    Vary: Sec-CH-Prefers-Reduced-Motion
    Critical-CH: Sec-CH-Prefers-Reduced-Motion

Note: We've also specified  Sec-CH-Prefers-Reduced-Motion in the  Vary
header to indicate that responses should be separately cached based on
the value of this header (even if the URL stays the same). Each header
listed in the  Critical-CH header should also be present in the
 Accept-CH and  Vary headers.

The client automatically retries the request (due to  Critical-CH being
specified above), telling the server via  Sec-CH-Prefers-Reduced-Motion
that it has a user preference for reduced-motion animations:

http

    GET / HTTP/1.1
    Host: example.com
    Sec-CH-Prefers-Reduced-Motion: "reduce"

The client will include the header in subsequent requests in the current
session unless the  Accept-CH changes in responses to indicate that it
is no longer supported by the server.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Client Hint Reliability
  # name-the-critical-ch-response-he

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Client hints
-   User-Agent Client Hints API
-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Cross-Origin-Embedder-Policy #
  ____                          ___       _       _             _____ 
 / ___|_ __ ___  ___ ___       / _ \ _ __(_) __ _(_)_ __       | ____|
| |   | '__/ _ \/ __/ __|_____| | | | '__| |/ _` | | '_ \ _____|  _|  
| |___| | | (_) \__ \__ \_____| |_| | |  | | (_| | | | | |_____| |___ 
 \____|_|  \___/|___/___/      \___/|_|  |_|\__, |_|_| |_|     |_____|
                                            |___/                     
           _              _     _                ____       _ _            
 _ __ ___ | |__   ___  __| | __| | ___ _ __     |  _ \ ___ | (_) ___ _   _ 
| '_ ` _ \| '_ \ / _ \/ _` |/ _` |/ _ \ '__|____| |_) / _ \| | |/ __| | | |
| | | | | | |_) |  __/ (_| | (_| |  __/ | |_____|  __/ (_) | | | (__| |_| |
|_| |_| |_|_.__/ \___|\__,_|\__,_|\___|_|       |_|   \___/|_|_|\___|\__, |
                                                                     |___/ 
Cross-Origin-Embedder-Policy

The HTTP  Cross-Origin-Embedder-Policy (COEP) response header configures
embedding cross-origin resources into the document.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Cross-Origin-Embedder-Policy: unsafe-none | require-corp | credentialless

Directives

 unsafe-none

    This is the default value. Allows the document to fetch cross-origin
    resources without giving explicit permission through the CORS
    protocol or the  Cross-Origin-Resource-Policy header.

 require-corp

    A document can only load resources from the same origin, or
    resources explicitly marked as loadable from another origin. If a
    cross origin resource supports CORS, the  crossorigin attribute or
    the  Cross-Origin-Resource-Policy header must be used to load it
    without being blocked by COEP.

 credentialless

    no-cors cross-origin requests are sent without credentials. In
    particular, it means Cookies are omitted from the request, and
    ignored from the response. The responses are allowed without an
    explicit permission via the  Cross-Origin-Resource-Policy header.
    Navigate responses behave similarly as the  require-corp mode: They
    require  Cross-Origin-Resource-Policy response header.

Examples

Certain features depend on cross-origin isolation

You can only access certain features like  SharedArrayBuffer objects or
 Performance.now() with unthrottled timers, if your document has a COEP
header with a value of  require-corp or  credentialless set.

http

    Cross-Origin-Embedder-Policy: require-corp
    Cross-Origin-Opener-Policy: same-origin

See also the  Cross-Origin-Opener-Policy header which you'll need to set
as well.

To check if cross origin isolation has been successful, you can test
against the  crossOriginIsolated property available to window and worker
contexts:

js

    const myWorker = new Worker("worker.js");

    if (crossOriginIsolated) {
      const buffer = new SharedArrayBuffer(16);
      myWorker.postMessage(buffer);
    } else {
      const buffer = new ArrayBuffer(16);
      myWorker.postMessage(buffer);
    }

Avoiding COEP blockage with CORS

If you enable COEP using  require-corp and have a cross origin resource
that needs to be loaded, it needs to support CORS and you need to
explicitly mark the resource as loadable from another origin to avoid
blockage from COEP. For example, you can use the  crossorigin attribute
for this image from a third-party site:

html

    <img src="https://thirdparty.com/img.png" crossorigin />

If CORS is not supported for some images, a COEP value of
 credentialless can be used as an alternative to load the image without
any explicit opt-in from the cross-origin server, at the cost of
requesting it without cookies.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTML Standard
  # coep

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Cross-Origin-Opener-Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Oct 9, 2023 by MDN contributors .
# Cross-Origin-Opener-Policy #
  ____                          ___       _       _              ___        
 / ___|_ __ ___  ___ ___       / _ \ _ __(_) __ _(_)_ __        / _ \ _ __  
| |   | '__/ _ \/ __/ __|_____| | | | '__| |/ _` | | '_ \ _____| | | | '_ \ 
| |___| | | (_) \__ \__ \_____| |_| | |  | | (_| | | | | |_____| |_| | |_) |
 \____|_|  \___/|___/___/      \___/|_|  |_|\__, |_|_| |_|      \___/| .__/ 
                                            |___/                    |_|    
                           ____       _ _            
  ___ _ __   ___ _ __     |  _ \ ___ | (_) ___ _   _ 
 / _ \ '_ \ / _ \ '__|____| |_) / _ \| | |/ __| | | |
|  __/ | | |  __/ | |_____|  __/ (_) | | | (__| |_| |
 \___|_| |_|\___|_|       |_|   \___/|_|_|\___|\__, |
                                               |___/ 
Cross-Origin-Opener-Policy

The HTTP  Cross-Origin-Opener-Policy (COOP) response header allows you
to ensure a top-level document does not share a browsing context group
with cross-origin documents.

COOP will process-isolate your document and potential attackers can't
access your global object if they were to open it in a popup, preventing
a set of cross-origin attacks dubbed XS-Leaks .

If a cross-origin document with COOP is opened in a new window, the
opening document will not have a reference to it, and the  window.opener
property of the new window will be  null . This allows you to have more
control over references to a window than  rel=noopener , which only
affects outgoing navigations.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Cross-Origin-Opener-Policy: unsafe-none
    Cross-Origin-Opener-Policy: same-origin-allow-popups
    Cross-Origin-Opener-Policy: same-origin

Directives

 unsafe-none

    This is the default value. Allows the document to be added to its
    opener's browsing context group unless the opener itself has a COOP
    of  same-origin or  same-origin-allow-popups .

 same-origin-allow-popups

    Retains references to newly opened windows or tabs that either don't
    set COOP or that opt out of isolation by setting a COOP of
     unsafe-none .

 same-origin

    Isolates the browsing context exclusively to same-origin documents.
    Cross-origin documents are not loaded in the same browsing context.

Examples

Certain features depend on cross-origin isolation

Certain features like  SharedArrayBuffer objects or  Performance.now()
with unthrottled timers are only available if your document has a COOP
header with the value  same-origin set.

http

    Cross-Origin-Opener-Policy: same-origin
    Cross-Origin-Embedder-Policy: require-corp

See also the  Cross-Origin-Embedder-Policy header which you'll need to
set to  require-corp or  credentialless as well.

To check if cross-origin isolation has been successful, you can test
against the  crossOriginIsolated property available to window and worker
contexts:

js

    const myWorker = new Worker("worker.js");

    if (crossOriginIsolated) {
      const buffer = new SharedArrayBuffer(16);
      myWorker.postMessage(buffer);
    } else {
      const buffer = new ArrayBuffer(16);
      myWorker.postMessage(buffer);
    }

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTML Standard
  # the-coop-headers

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Cross-Origin-Embedder-Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Cross-Origin-Resource-Policy #
  ____                          ___       _       _             ____           
 / ___|_ __ ___  ___ ___       / _ \ _ __(_) __ _(_)_ __       |  _ \ ___  ___ 
| |   | '__/ _ \/ __/ __|_____| | | | '__| |/ _` | | '_ \ _____| |_) / _ \/ __|
| |___| | | (_) \__ \__ \_____| |_| | |  | | (_| | | | | |_____|  _ <  __/\__ \
 \____|_|  \___/|___/___/      \___/|_|  |_|\__, |_|_| |_|     |_| \_\___||___/
                                            |___/                              
                                ____       _ _            
  ___  _   _ _ __ ___ ___      |  _ \ ___ | (_) ___ _   _ 
 / _ \| | | | '__/ __/ _ \_____| |_) / _ \| | |/ __| | | |
| (_) | |_| | | | (_|  __/_____|  __/ (_) | | | (__| |_| |
 \___/ \__,_|_|  \___\___|     |_|   \___/|_|_|\___|\__, |
                                                    |___/ 
Cross-Origin-Resource-Policy

The HTTP  Cross-Origin-Resource-Policy response header conveys a desire
that the browser blocks no-cors cross-origin/cross-site requests to the
given resource.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Cross-Origin-Resource-Policy: same-site | same-origin | cross-origin

Examples

The response header below will cause compatible user agents to disallow
cross-origin no-cors requests:

http

    Cross-Origin-Resource-Policy: same-origin

For more examples, see https://resourcepolicy.fyi/ .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Standard
  # cross-origin-resource-policy-header

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Cross-Origin Resource Policy (CORP) explainer
-   Consider deploying Cross-Origin Resource Policy
-    Access-Control-Allow-Origin

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 2, 2023 by MDN contributors .
# Date #
 ____        _       
|  _ \  __ _| |_ ___ 
| | | |/ _` | __/ _ \
| |_| | (_| | ||  __/
|____/ \__,_|\__\___|
                     
Date

The  Date general HTTP header contains the date and time at which the
message originated.

Warning:  Date is listed in the forbidden header names in the fetch
spec, so this code will not send the  Date header:

js

    fetch("https://httpbin.org/get", {
      headers: {
        Date: new Date().toUTCString(),
      },
    });

  ----------------------- ----------------------------------
  Header type             Request header , Response header
  Forbidden header name   yes
  ----------------------- ----------------------------------

Syntax

http

    Date: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT

Directives

<day-name>

    One of "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", or "Sun"
    (case-sensitive).

<day>

    2 digit day number, e.g. "04" or "23".

<month>

    One of "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug",
    "Sep", "Oct", "Nov", "Dec" (case sensitive).

<year>

    4 digit year number, e.g. "1990" or "2016".

<hour>

    2 digit hour number, e.g. "09" or "23".

<minute>

    2 digit minute number, e.g. "04" or "59".

<second>

    2 digit second number, e.g. "04" or "59".

GMT

    Greenwich Mean Time. HTTP dates are always expressed in GMT, never
    in local time.

Examples

http

    Date: Wed, 21 Oct 2015 07:28:00 GMT

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.date

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Age

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Device-Memory #
 ____             _                __  __                                 
|  _ \  _____   _(_) ___ ___      |  \/  | ___ _ __ ___   ___  _ __ _   _ 
| | | |/ _ \ \ / / |/ __/ _ \_____| |\/| |/ _ \ '_ ` _ \ / _ \| '__| | | |
| |_| |  __/\ V /| | (_|  __/_____| |  | |  __/ | | | | | (_) | |  | |_| |
|____/ \___| \_/ |_|\___\___|     |_|  |_|\___|_| |_| |_|\___/|_|   \__, |
                                                                    |___/ 
Device-Memory

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

The  Device-Memory device client hint request header field indicates the
approximate amount of available RAM on the client device. The header is
part of the Device Memory API .

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   no
  ----------------------- ------------------------------

Note:

-   Client Hints are accessible only on secure origins (via TLS).
-   A server has to opt in to receive the  Device-Memory header from the
    client, by sending the  Accept-CH response header.
-   Servers that opt in to the  Device-Memory client hint will typically
    also specify it in the  Vary header. This informs caches that the
    server may send different responses based on the header value in a
    request.

Syntax

http

    Device-Memory: <number>

Directives

 <number>

    The approximate amount of device RAM. Possible values are:  0.25 ,
     0.5 ,  1 ,  2 ,  4 ,  8 .

The amount of device RAM can be used as a fingerprinting variable, so
values for the header are intentionally coarse to reduce the potential
for its misuse.

Examples

The server first needs to opt in to receive  Device-Memory header by
sending the response headers  Accept-CH containing  Device-Memory .

http

    Accept-CH: Device-Memory

Then on subsequent requests the client might send  Device-Memory header
back:

http

    Device-Memory: 1

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Device Memory
  # iana-device-memory

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-   Device Memory API
-    Navigator.deviceMemory
-    WorkerNavigator.deviceMemory
-   Device client hints
    -    Content-DPR
    -    DPR
    -    Viewport-Width
    -    Width
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Digest #
 ____  _                 _   
|  _ \(_) __ _  ___  ___| |_ 
| | | | |/ _` |/ _ \/ __| __|
| |_| | | (_| |  __/\__ \ |_ 
|____/|_|\__, |\___||___/\__|
         |___/               
Digest

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  Digest response HTTP header provides a digest of the selected
representation of the requested resource.

Representations are different forms of a particular resource that might
be returned from a request: for example, the same resource might be
formatted in a particular media type such as XML or JSON, localized to a
particular written language or geographical region, and/or compressed or
otherwise encoded for transmission. The selected representation is the
actual format of a resource that is returned following content
negotiation , and can be determined from the response's Representation
headers .

The digest applies to the whole representation of a resource, not to a
particular message. It can be used to verify that the representation
data has not been modified during transmission.

Note: While a representation may be fully contained in the message body
of a single response, it can also be sent using multiple messages in
response to a range request , or omitted altogether in response to a
 HEAD request.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Digest: <digest-algorithm>=<digest-value>
    Digest: <digest-algorithm>=<digest-value>,<digest-algorithm>=<digest-value>

Directives

 <digest-algorithm>

    Digest algorithms are defined in Digest Headers .

    -   Permitted digest algorithms values include:  unixsum ,
         unixcksum ,  crc32c ,  sha-256 and  sha-512 ,  id-sha-256 ,
         id-sha-512
    -   Deprecated algorithms values include:  md5 ,  sha ,  adler32 .

 <digest-value>

    The result of applying the digest algorithm to the resource
    representation and encoding the result. The choice of digest
    algorithm also determines the encoding to use: for example  SHA-256
    uses base64 encoding.

Examples

http

    Digest: sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=
    Digest: sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=,unixsum=30637

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Digest Fields
  # section-3

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Want-Digest
-   HTTP range requests
-    206 Partial Content

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jun 5, 2023 by MDN contributors .
# DNT #
 ____  _   _ _____ 
|  _ \| \ | |_   _|
| | | |  \| | | |  
| |_| | |\  | | |  
|____/|_| \_| |_|  
                   
DNT

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

Non-standard: This feature is non-standard and is not on a standards
track. Do not use it on production sites facing the Web: it will not
work for every user. There may also be large incompatibilities between
implementations and the behavior may change in the future.

The  DNT ( D o N ot T rack) request header indicates the user's tracking
preference. It lets users indicate whether they would prefer privacy
rather than personalized content.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   yes
  ----------------------- ----------------

Syntax

http

    DNT: 0
    DNT: 1
    DNT: null

Directives

0

    The user prefers to allow tracking on the target site.

1

    The user prefers not to be tracked on the target site.

null

    The user has not specified a preference about tracking.

Examples

Reading Do Not Track status from JavaScript

The user's DNT preference can also be read from JavaScript using the
 Navigator.doNotTrack property:

js

    navigator.doNotTrack; // "0", "1" or null

Specifications

No specification found

No specification data found for  http.headers.DNT .
Check for problems with this page or contribute a missing  spec_url to
mdn/browser-compat-data . Also make sure the specification is included
in w3c/browser-specs .

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Navigator.doNotTrack
-    Tk header
-   Do Not Track on Wikipedia
-   What Does the "Track" in "Do Not Track" Mean? – EFF
-   DNT on Electronic Frontier Foundation
-   DNT browser settings help:
    -   Firefox
    -   Chrome

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Nov 10, 2023 by MDN contributors .
# Downlink #
 ____                      _ _       _    
|  _ \  _____      ___ __ | (_)_ __ | | __
| | | |/ _ \ \ /\ / / '_ \| | | '_ \| |/ /
| |_| | (_) \ V  V /| | | | | | | | |   < 
|____/ \___/ \_/\_/ |_| |_|_|_|_| |_|_|\_\
                                          
Downlink

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The  Downlink Client hint request header field provides the approximate
bandwidth of the client's connection to the server, in Mbps.

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   no
  ----------------------- ------------------------------

The  Downlink value is given in Mbps and rounded to the nearest 25
kilobits per second to prevent fingerprinting . There are many other
mechanisms an attacker might use to obtain similar information.

The hint allows a server to choose what information is sent based on the
network bandwidth. For example, a server might choose to send smaller
versions of images and other resources on low bandwidth networks.

Note: The  Vary header is used in responses to indicate that a different
resource is sent for every different value of the header (see HTTP
Caching Vary ). Even if  Downlink is used to configure what resources
are sent, consider omitting it in the  Vary header — it is likely to
change often, which effectively makes the resource uncacheable.

Syntax

http

    Downlink: <number>

Directives

<number>

    The downlink rate in Mbps, rounded to the nearest 25 kilobits.

Examples

A server first needs to opt in to receive the  Downlink header by
sending the  Accept-CH response header containing  Downlink .

http

    Accept-CH: Downlink

Then on subsequent requests the client might send a  Downlink header
back:

http

    Downlink: 1.7

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Network Information API
  # downlink-request-header-field

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-   Network client hints
    -    RTT
    -    ECT
    -    Save-Data
-    Accept-CH
-   HTTP Caching > Vary and  Vary
-    NetworkInformation.effectiveType

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# DPR #
 ____  ____  ____  
|  _ \|  _ \|  _ \ 
| | | | |_) | |_) |
| |_| |  __/|  _ < 
|____/|_|   |_| \_\
                   
DPR

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

Non-standard: This feature is non-standard and is not on a standards
track. Do not use it on production sites facing the Web: it will not
work for every user. There may also be large incompatibilities between
implementations and the behavior may change in the future.

The  DPR device client hint request header provides the client device
pixel ratio. This ratio is the number of physical device pixels
corresponding to every CSS pixel .

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   no
  ----------------------- ------------------------------

The hint is useful when selecting image sources that best correspond to
a screen's pixel density. This is similar to the role played by  x
descriptors in the  <img>  srcset attribute to allow user agents to
select a preferred image.

If a server uses the  DPR hint to choose which resource is sent in a
response, the response must include the  Content-DPR header. The client
must use the value in  Content-DPR for layout if it differs from the
value in the request's  DPR header.

If the  DPR header appears more than once in a message the last
occurrence is used.

Note:

-   Client Hints are accessible only on secure origins (via TLS).
-   A server has to opt in to receive the  DPR header from the client,
    by sending the  Accept-CH response header.
-   Servers that opt in to the  DPR client hint will typically also
    specify it in the  Vary header. This informs caches that the server
    may send different responses based on the header value in a request.
-    DPR was removed from the client hints specification in
    draft-ietf-httpbis-client-hints-07 . The proposed replacement is
     Sec-CH-DPR (Responsive Image Client Hints).

Syntax

http

    DPR: <number>

Directives

 <number>

    The client device pixel ratio.

Examples

A server must first opt in to receive the  DPR header by sending the
response header  Accept-CH containing the directive  DPR .

http

    Accept-CH: DPR

Then on subsequent requests the client might send  DPR header to the
server:

http

    DPR: 2.0

If a request with the  DPR header (as shown above) is for an image
resource, then the server response must include the  Content-DPR header:

http

    Content-DPR: 2.0

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-   Device client hints
    -    Content-DPR
    -    Device-Memory
    -    Viewport-Width
    -    Width
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Early-Data #
 _____           _             ____        _        
| ____|__ _ _ __| |_   _      |  _ \  __ _| |_ __ _ 
|  _| / _` | '__| | | | |_____| | | |/ _` | __/ _` |
| |__| (_| | |  | | |_| |_____| |_| | (_| | || (_| |
|_____\__,_|_|  |_|\__, |     |____/ \__,_|\__\__,_|
                   |___/                            
Early-Data

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The  Early-Data header is set by an intermediary to indicate that the
request has been conveyed in TLS early data , and also indicates that
the intermediary understands the  425 (Too Early) status code.

The  Early-Data header is not set by the originator of the request
(i.e., a browser).

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

http

    Early-Data: 1

Examples

http

    GET /resource HTTP/1.0
    Host: example.com
    Early-Data: 1

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Using Early Data in HTTP
  # header

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# ECT #
 _____ ____ _____ 
| ____/ ___|_   _|
|  _|| |     | |  
| |__| |___  | |  
|_____\____| |_|  
                  
ECT

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The  ECT Client hint request header field indicates the effective
connection type :  slow-2g ,  2g ,  3g ,  4g .

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   no
  ----------------------- ------------------------------

The value represents the "network profile" that best matches the
connection's latency and bandwidth, rather than the actual mechanisms
used for transferring the data. For example,  2g might be used to
represent a slow Wi-Fi connection with high latency and low bandwidth,
while  4g might be used to represent a fast fibre-based broadband
network.

The hint allows a server to choose what information is sent based on the
broad characteristics of the network. For example, a server might choose
to send smaller versions of images and other resources on less capable
connections. The value might also be used as a starting point for
determining what information is sent, which is further refined using
information in  RTT and  Downlink hints.

Note: A server that specifies  ECT in  Accept-CH may also specify it in
 Vary to indicate that responses should be cached for different ECT
values.

Syntax

http

    ECT: <value>

Directives

<value>

    A value indicating effective connection type . This is one of:
     slow-2g ,  2g ,  3g , or  4g .

Examples

A server first needs to opt in to receive the  ECT header by sending the
 Accept-CH response header containing  ECT .

http

    Accept-CH: ECT

Then on subsequent requests the client might send an  ECT header back:

http

    ECT: 2g

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Network Information API
  # ect-request-header-field

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-   Network client hints
    -    Downlink
    -    RTT
    -    Save-Data
-    Accept-CH
-   HTTP Caching > Vary and  Vary
-    NetworkInformation.effectiveType

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# ETag #
 _____ _____           
| ____|_   _|_ _  __ _ 
|  _|   | |/ _` |/ _` |
| |___  | | (_| | (_| |
|_____| |_|\__,_|\__, |
                 |___/ 
ETag

The  ETag (or entity tag ) HTTP response header is an identifier for a
specific version of a resource. It lets caches be more efficient and
save bandwidth, as a web server does not need to resend a full response
if the content was not changed. Additionally, etags help to prevent
simultaneous updates of a resource from overwriting each other (
"mid-air collisions" ).

If the resource at a given URL changes, a new  Etag value must be
generated. A comparison of them can determine whether two
representations of a resource are the same.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    ETag: W/"<etag_value>"
    ETag: "<etag_value>"

Directives

 W/  Optional 

     'W/' (case-sensitive) indicates that a weak validator is used. Weak
    etags are easy to generate, but are far less useful for comparisons.
    Strong validators are ideal for comparisons but can be very
    difficult to generate efficiently. Weak  ETag values of two
    representations of the same resources might be semantically
    equivalent, but not byte-for-byte identical. This means weak etags
    prevent caching when byte range requests are used, but strong etags
    mean range requests can still be cached.

"<etag_value>"

    Entity tag that uniquely represents the requested resource. It is a
    string of ASCII characters placed between double quotes, like
     "675af34563dc-tr34" . The method by which  ETag values are
    generated is not specified. Typically, the ETag value is a hash of
    the content, a hash of the last modification timestamp, or just a
    revision number. For example, a wiki engine can use a hexadecimal
    hash of the documentation article content.

Examples

http

    ETag: "33a64df551425fcc55e4d42a148795d9f25f89d4"
    ETag: W/"0815"

Avoiding mid-air collisions

With the help of the  ETag and the  If-Match headers, you can detect
mid-air edit collisions.

For example, when editing a wiki, the current wiki content may be hashed
and put into an  Etag header in the response:

http

    ETag: "33a64df551425fcc55e4d42a148795d9f25f89d4"

When saving changes to a wiki page (posting data), the  POST request
will contain the  If-Match header containing the  ETag values to check
freshness against.

http

    If-Match: "33a64df551425fcc55e4d42a148795d9f25f89d4"

If the hashes don't match, it means that the document has been edited
in-between and a  412  Precondition Failed error is thrown.

Caching of unchanged resources

Another typical use of the  ETag header is to cache resources that are
unchanged. If a user visits a given URL again (that has an  ETag set),
and it is stale (too old to be considered usable), the client will send
the value of its  ETag along in an  If-None-Match header field:

http

    If-None-Match: "33a64df551425fcc55e4d42a148795d9f25f89d4"

The server compares the client's  ETag (sent with  If-None-Match ) with
the  ETag for its current version of the resource, and if both values
match (that is, the resource has not changed), the server sends back a
 304  Not Modified status, without a body, which tells the client that
the cached version of the response is still good to use ( fresh ).

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.etag

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    If-Match
-    If-None-Match
-    304 Not Modified
-    Precondition Failed
-   W3C Note: Editing the Web – Detecting the Lost Update Problem Using
    Unreserved Checkout

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 29, 2023 by MDN contributors .
# Expect-CT #
 _____                      _         ____ _____ 
| ____|_  ___ __   ___  ___| |_      / ___|_   _|
|  _| \ \/ / '_ \ / _ \/ __| __|____| |     | |  
| |___ >  <| |_) |  __/ (__| ||_____| |___  | |  
|_____/_/\_\ .__/ \___|\___|\__|     \____| |_|  
           |_|                                   
Expect-CT

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  Expect-CT header lets sites opt in to reporting and/or enforcement
of Certificate Transparency requirements. Certificate Transparency (CT)
aims to prevent the use of misissued certificates for that site from
going unnoticed.

Only Google Chrome and other Chromium-based browsers implemented
 Expect-CT , and Chromium has deprecated the header from version 107,
because Chromium now enforces CT by default. See the Chrome Platform
Status update.

CT requirements can be satisfied via any one of the following
mechanisms:

-   X.509v3 certificate extension to allow embedding of signed
    certificate timestamps issued by individual logs. Most TLS
    certificates issued by publicly-trusted CAs and used online contain
    embedded CT.
-   A TLS extension of type  signed_certificate_timestamp sent during
    the handshake
-   Supporting OCSP stapling (that is, the  status_request TLS
    extension) and providing a  SignedCertificateTimestampList

Note: When a site enables the  Expect-CT header, they are requesting
that the browser check that any certificate for that site appears in
public CT logs .

Note: Browsers ignore the  Expect-CT header over HTTP; the header only
has effect on HTTPS connections.

Note: The  Expect-CT is mostly obsolete since June 2021. Since May 2018,
all new TLS certificates are expected to support SCTs by default.
Certificates issued before March 2018 were allowed to have a lifetime of
39 months, so they had expired in June 2021. Chromium plans to deprecate
 Expect-CT header and to eventually remove it.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   yes
  ----------------------- -----------------

Syntax

http

    Expect-CT: report-uri="<uri>",
               enforce,
               max-age=<age>

Directives

 max-age

    The number of seconds after reception of the  Expect-CT header field
    during which the user agent should regard the host of the received
    message as a known  Expect-CT host.

    If a cache receives a value greater than it can represent, or if any
    of its subsequent calculations overflows, the cache will consider
    this value to be either 2,147,483,648 (2^31) or the greatest
    positive integer it can represent.

 report-uri="<uri>"  Optional 

    The URI where the user agent should report  Expect-CT failures.

    When present with the  enforce directive, the configuration is
    referred to as an "enforce-and-report" configuration, signalling to
    the user agent both that compliance to the Certificate Transparency
    policy should be enforced and that violations should be reported.

 enforce  Optional 

    Signals to the user agent that compliance with the Certificate
    Transparency policy should be enforced (rather than only reporting
    compliance) and that the user agent should refuse future connections
    that violate its Certificate Transparency policy.

    When both the  enforce directive and the  report-uri directive are
    present, the configuration is referred to as an "enforce-and-report"
    configuration, signalling to the user agent both that compliance to
    the Certificate Transparency policy should be enforced and that
    violations should be reported.

Example

The following example specifies enforcement of Certificate Transparency
for 24 hours and reports violations to  foo.example.com .

http

    Expect-CT: max-age=86400, enforce, report-uri="https://foo.example.com/report"

Notes

Root CAs manually added to the trust store override and suppress
 Expect-CT reports/enforcement.

Browsers will not remember an  Expect-CT policy, unless the site has
'proven' it can serve a certificate satisfying the certificate
transparency requirements. Browsers implement their own trust model
regarding which CT logs are considered trusted for the certificate to
have been logged to.

Builds of Chrome are designed to stop enforcing the  Expect-CT policy 10
weeks after the installation's build date.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Expect-CT Extension for HTTP
  # section-2.1

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 6, 2023 by MDN contributors .
# Expect #
 _____                      _   
| ____|_  ___ __   ___  ___| |_ 
|  _| \ \/ / '_ \ / _ \/ __| __|
| |___ >  <| |_) |  __/ (__| |_ 
|_____/_/\_\ .__/ \___|\___|\__|
           |_|                  
Expect

The  Expect HTTP request header indicates expectations that need to be
met by the server to handle the request successfully.

Upon  Expect: 100-continue , the server responds with:

-    100 (Continue) if the information from the request header is
    insufficient to resolve the response and the client should proceed
    with sending the body.
-    417 (Expectation Failed) if the server cannot meet the expectation

or any other status otherwise (e.g. a 4xx status for a client error, or
a 2xx status if the request can be resolved successfully without further
processing).

For example, the server may reject a request if its  Content-Length is
too large.

No common browsers send the  Expect header, but some other clients such
as cURL do so by default.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   yes
  ----------------------- ----------------

Syntax

http

    Expect: 100-continue

Directives

There is only one defined expectation:

 100-continue

    Informs recipients that the client is about to send a (presumably
    large) message body in this request and wishes to receive a  100
    (Continue) interim response.

Examples

Large message body

A client sends a request with  Expect header and waits for the server to
respond before sending the message body.

http

    PUT /somewhere/fun HTTP/1.1
    Host: origin.example.com
    Content-Type: video/h264
    Content-Length: 1234567890987
    Expect: 100-continue

The server checks the headers and generates the response. The server
sends  100 (Continue), which instructs the client to send the message
body.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.expect

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    417 Expectation Failed
-    100 Continue

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Expires #
 _____            _               
| ____|_  ___ __ (_)_ __ ___  ___ 
|  _| \ \/ / '_ \| | '__/ _ \/ __|
| |___ >  <| |_) | | | |  __/\__ \
|_____/_/\_\ .__/|_|_|  \___||___/
           |_|                    
Expires

The  Expires HTTP header contains the date/time after which the response
is considered expired.

Invalid expiration dates with value 0 represent a date in the past and
mean that the resource is already expired.

Note: If there is a  Cache-Control header with the  max-age or  s-maxage
directive in the response, the  Expires header is ignored.

  --------------------------------- -----------------
  Header type                       Response header
  Forbidden header name             no
  CORS-safelisted response header   yes
  --------------------------------- -----------------

Syntax

http

    Expires: <http-date>

Directives

<http-date>

    An HTTP-date timestamp.

Examples

http

    Expires: Wed, 21 Oct 2015 07:28:00 GMT

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Caching
  # field.expires

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Cache-Control
-    Age

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Forwarded #
 _____                                _          _ 
|  ___|__  _ ____      ____ _ _ __ __| | ___  __| |
| |_ / _ \| '__\ \ /\ / / _` | '__/ _` |/ _ \/ _` |
|  _| (_) | |   \ V  V / (_| | | | (_| |  __/ (_| |
|_|  \___/|_|    \_/\_/ \__,_|_|  \__,_|\___|\__,_|
                                                   
Forwarded

The  Forwarded request header contains information that may be added by
reverse proxy servers (load balancers, CDNs, and so on) that would
otherwise be altered or lost when proxy servers are involved in the path
of the request.

For example, if a client is connecting to a web server through an HTTP
proxy (or load balancer), server logs will only contain the IP address,
host address, and protocol of the proxy; this header can be used to
identify the IP address, host, and protocol, of the original request.
The header is optional and may be added to, modified, or removed, by any
of the proxy servers on the path to the server.

This header is used for debugging, statistics, and generating
location-dependent content. By design, it exposes privacy sensitive
information, such as the IP address of the client. Therefore, the user's
privacy must be kept in mind when deploying this header.

The alternative and de-facto standard versions of this header are the
 X-Forwarded-For ,  X-Forwarded-Host and  X-Forwarded-Proto headers.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

The syntax for the forwarding header from a single proxy is shown below.
Directives are  key=value pairs, separated by a semicolon.

http

    Forwarded: by=<identifier>;for=<identifier>;host=<host>;proto=<http|https>

If there are multiple proxy servers between the client and server, they
may each specify their own forwarding information. This can be done by
adding a new  Forwarded header to the end of the header block, or by
appending the information to the end of the last  Forwarded header in a
comma-separated list.

Directives

 by  Optional 

    The interface where the request came in to the proxy server. The
    identifier can be:

    -   an obfuscated identifier (such as "hidden" or "secret"). This
        should be treated as the default.
    -   an IP address (v4 or v6, optionally with a port, and ipv6 quoted
        and enclosed in square brackets)
    -   "unknown" when the preceding entity is not known (and you still
        want to indicate that forwarding of the request was made)

 for  Optional 

    The client that initiated the request and subsequent proxies in a
    chain of proxies. The identifier has the same possible values as the
     by directive.

 host  Optional 

    The  Host request header field as received by the proxy.

 proto  Optional 

    Indicates which protocol was used to make the request (typically
    "http" or "https").

Examples

Using the  Forwarded header

http

    Forwarded: for="_mdn"

    # case insensitive
    Forwarded: For="[2001:db8:cafe::17]:4711"

    # separated by semicolon
    Forwarded: for=192.0.2.60;proto=http;by=203.0.113.43

    # Values from multiple proxy servers can be appended using a comma
    Forwarded: for=192.0.2.43, for=198.51.100.17

Transitioning from  X-Forwarded-For to  Forwarded

If your application, server, or proxy supports the standardized
 Forwarded header, the  X-Forwarded-For header can be replaced. Note
that an IPv6 address is quoted and enclosed in square brackets in
 Forwarded (unlike in the  X-Forwarded-For header).

http

    X-Forwarded-For: 192.0.2.172
    Forwarded: for=192.0.2.172

    X-Forwarded-For: 192.0.2.43, 2001:db8:cafe::17
    Forwarded: for=192.0.2.43, for="[2001:db8:cafe::17]"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Forwarded HTTP Extension
  # section-4

  -----------------------------------------------------------------------

See also

-    X-Forwarded-For
-    X-Forwarded-Host
-    X-Forwarded-Proto
-    Via – provides information about the proxy itself, not about the
    client connecting to it.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Oct 24, 2023 by MDN contributors .
# From #
 _____                    
|  ___| __ ___  _ __ ___  
| |_ | '__/ _ \| '_ ` _ \ 
|  _|| | | (_) | | | | | |
|_|  |_|  \___/|_| |_| |_|
                          
From

The  From request header contains an Internet email address for a human
user who controls the requesting user agent.

If you are running a robotic user agent (e.g. a crawler), the  From
header must be sent, so you can be contacted if problems occur on
servers, such as if the robot is sending excessive, unwanted, or invalid
requests.

Warning: You must not use the  From header for access control or
authentication.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

http

    From: <email>

Directives

<email>

    A machine-usable email address.

Examples

http

    From: webmaster@example.org

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.from

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Host

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Host #
 _   _           _   
| | | | ___  ___| |_ 
| |_| |/ _ \/ __| __|
|  _  | (_) \__ \ |_ 
|_| |_|\___/|___/\__|
                     
Host

The  Host request header specifies the host and port number of the
server to which the request is being sent.

If no port is included, the default port for the service requested is
implied (e.g.,  443 for an HTTPS URL, and  80 for an HTTP URL).

A  Host header field must be sent in all HTTP/1.1 request messages. A
 400 (Bad Request) status code may be sent to any HTTP/1.1 request
message that lacks or contains more than one  Host header field.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   yes
  ----------------------- ----------------

Syntax

http

    Host: <host>:<port>

Directives

<host>

    the domain name of the server (for virtual hosting).

<port>  Optional 

    TCP port number on which the server is listening.

Examples

http

    Host: developer.mozilla.org

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.host

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    400
-    <base>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# HTTP headers #
 _   _ _____ _____ ____    _                    _               
| | | |_   _|_   _|  _ \  | |__   ___  __ _  __| | ___ _ __ ___ 
| |_| | | |   | | | |_) | | '_ \ / _ \/ _` |/ _` |/ _ \ '__/ __|
|  _  | | |   | | |  __/  | | | |  __/ (_| | (_| |  __/ |  \__ \
|_| |_| |_|   |_| |_|     |_| |_|\___|\__,_|\__,_|\___|_|  |___/
                                                                
HTTP headers

HTTP headers let the client and the server pass additional information
with an HTTP request or response. An HTTP header consists of its
case-insensitive name followed by a colon (  : ), then by its value.
Whitespace before the value is ignored.

Custom proprietary headers have historically been used with an  X-
prefix, but this convention was deprecated in June 2012 because of the
inconveniences it caused when nonstandard fields became standard in RFC
6648 ; others are listed in an IANA registry , whose original content
was defined in RFC 4229 . IANA also maintains a registry of proposed new
HTTP headers .

Headers can be grouped according to their contexts:

Request headers

    Contain more information about the resource to be fetched, or about
    the client requesting the resource.

Response headers

    Hold additional information about the response, like its location or
    about the server providing it.

Representation headers

    Contain information about the body of the resource, like its MIME
    type , or encoding/compression applied.

Payload headers

    Contain representation-independent information about payload data,
    including content length and the encoding used for transport.

Headers can also be grouped according to how proxies handle them:

End-to-end headers

    These headers must be transmitted to the final recipient of the
    message: the server for a request, or the client for a response.
    Intermediate proxies must retransmit these headers unmodified and
    caches must store them.

Hop-by-hop headers

    These headers are meaningful only for a single transport-level
    connection, and must not be retransmitted by proxies or cached. Note
    that only hop-by-hop headers may be set using the  Connection
    header.

Authentication

 WWW-Authenticate

    Defines the authentication method that should be used to access a
    resource.

 Authorization

    Contains the credentials to authenticate a user-agent with a server.

 Proxy-Authenticate

    Defines the authentication method that should be used to access a
    resource behind a proxy server.

 Proxy-Authorization

    Contains the credentials to authenticate a user agent with a proxy
    server.

Caching

 Age

    The time, in seconds, that the object has been in a proxy cache.

 Cache-Control

    Directives for caching mechanisms in both requests and responses.

 Clear-Site-Data

    Clears browsing data (e.g. cookies, storage, cache) associated with
    the requesting website.

 Expires

    The date/time after which the response is considered stale.

Conditionals

 Last-Modified

    The last modification date of the resource, used to compare several
    versions of the same resource. It is less accurate than  ETag , but
    easier to calculate in some environments. Conditional requests using
     If-Modified-Since and  If-Unmodified-Since use this value to change
    the behavior of the request.

 ETag

    A unique string identifying the version of the resource. Conditional
    requests using  If-Match and  If-None-Match use this value to change
    the behavior of the request.

 If-Match

    Makes the request conditional, and applies the method only if the
    stored resource matches one of the given ETags.

 If-None-Match

    Makes the request conditional, and applies the method only if the
    stored resource doesn't match any of the given ETags. This is used
    to update caches (for safe requests), or to prevent uploading a new
    resource when one already exists.

 If-Modified-Since

    Makes the request conditional, and expects the resource to be
    transmitted only if it has been modified after the given date. This
    is used to transmit data only when the cache is out of date.

 If-Unmodified-Since

    Makes the request conditional, and expects the resource to be
    transmitted only if it has not been modified after the given date.
    This ensures the coherence of a new fragment of a specific range
    with previous ones, or to implement an optimistic concurrency
    control system when modifying existing documents.

 Vary

    Determines how to match request headers to decide whether a cached
    response can be used rather than requesting a fresh one from the
    origin server.

Connection management

 Connection

    Controls whether the network connection stays open after the current
    transaction finishes.

 Keep-Alive

    Controls how long a persistent connection should stay open.

Content negotiation

For more details, refer to the Content negotiation article .

 Accept

    Informs the server about the types of data that can be sent back.

 Accept-Encoding

    The encoding algorithm, usually a compression algorithm , that can
    be used on the resource sent back.

 Accept-Language

    Informs the server about the human language the server is expected
    to send back. This is a hint and is not necessarily under the full
    control of the user: the server should always pay attention not to
    override an explicit user choice (like selecting a language from a
    dropdown).

Controls

 Expect

    Indicates expectations that need to be fulfilled by the server to
    properly handle the request.

 Max-Forwards

    When using  TRACE , indicates the maximum number of hops the request
    can do before being reflected to the sender.

Cookies

 Cookie

    Contains stored HTTP cookies previously sent by the server with the
     Set-Cookie header.

 Set-Cookie

    Send cookies from the server to the user-agent.

CORS

For more information, refer to the CORS documentation .

 Access-Control-Allow-Credentials

    Indicates whether the response to the request can be exposed when
    the credentials flag is true.

 Access-Control-Allow-Headers

    Used in response to a preflight request to indicate which HTTP
    headers can be used when making the actual request.

 Access-Control-Allow-Methods

    Specifies the methods allowed when accessing the resource in
    response to a preflight request.

 Access-Control-Allow-Origin

    Indicates whether the response can be shared.

 Access-Control-Expose-Headers

    Indicates which headers can be exposed as part of the response by
    listing their names.

 Access-Control-Max-Age

    Indicates how long the results of a preflight request can be cached.

 Access-Control-Request-Headers

    Used when issuing a preflight request to let the server know which
    HTTP headers will be used when the actual request is made.

 Access-Control-Request-Method

    Used when issuing a preflight request to let the server know which
    HTTP method will be used when the actual request is made.

 Origin

    Indicates where a fetch originates from.

 Timing-Allow-Origin

    Specifies origins that are allowed to see values of attributes
    retrieved via features of the Resource Timing API , which would
    otherwise be reported as zero due to cross-origin restrictions.

Downloads

 Content-Disposition

    Indicates if the resource transmitted should be displayed inline
    (default behavior without the header), or if it should be handled
    like a download and the browser should present a "Save As" dialog.

Message body information

 Content-Length

    The size of the resource, in decimal number of bytes.

 Content-Type

    Indicates the media type of the resource.

 Content-Encoding

    Used to specify the compression algorithm.

 Content-Language

    Describes the human language(s) intended for the audience, so that
    it allows a user to differentiate according to the users' own
    preferred language.

 Content-Location

    Indicates an alternate location for the returned data.

Proxies

 Forwarded

    Contains information from the client-facing side of proxy servers
    that is altered or lost when a proxy is involved in the path of the
    request.

 Via

    Added by proxies, both forward and reverse proxies, and can appear
    in the request headers and the response headers.

Redirects

 Location

    Indicates the URL to redirect a page to.

 Refresh

    Directs the browser to reload the page or redirect to another. Takes
    the same value as the  meta element with  http-equiv="refresh" .

Request context

 From

    Contains an Internet email address for a human user who controls the
    requesting user agent.

 Host

    Specifies the domain name of the server (for virtual hosting), and
    (optionally) the TCP port number on which the server is listening.

 Referer

    The address of the previous web page from which a link to the
    currently requested page was followed.

 Referrer-Policy

    Governs which referrer information sent in the  Referer header
    should be included with requests made.

 User-Agent

    Contains a characteristic string that allows the network protocol
    peers to identify the application type, operating system, software
    vendor or software version of the requesting software user agent.

Response context

 Allow

    Lists the set of HTTP request methods supported by a resource.

 Server

    Contains information about the software used by the origin server to
    handle the request.

Range requests

 Accept-Ranges

    Indicates if the server supports range requests, and if so in which
    unit the range can be expressed.

 Range

    Indicates the part of a document that the server should return.

 If-Range

    Creates a conditional range request that is only fulfilled if the
    given etag or date matches the remote resource. Used to prevent
    downloading two ranges from incompatible version of the resource.

 Content-Range

    Indicates where in a full body message a partial message belongs.

Security

 Cross-Origin-Embedder-Policy (COEP)

    Allows a server to declare an embedder policy for a given document.

 Cross-Origin-Opener-Policy (COOP)

    Prevents other domains from opening/controlling a window.

 Cross-Origin-Resource-Policy (CORP)

    Prevents other domains from reading the response of the resources to
    which this header is applied. See also CORP explainer article .

 Content-Security-Policy ( CSP )

    Controls resources the user agent is allowed to load for a given
    page.

 Content-Security-Policy-Report-Only

    Allows web developers to experiment with policies by monitoring, but
    not enforcing, their effects. These violation reports consist of
    JSON documents sent via an HTTP  POST request to the specified URI.

 Permissions-Policy

    Provides a mechanism to allow and deny the use of browser features
    in a website's own frame, and in  <iframe> s that it embeds.

 Strict-Transport-Security ( HSTS )

    Force communication using HTTPS instead of HTTP.

 Upgrade-Insecure-Requests

    Sends a signal to the server expressing the client's preference for
    an encrypted and authenticated response, and that it can
    successfully handle the  upgrade-insecure-requests directive.

 X-Content-Type-Options

    Disables MIME sniffing and forces browser to use the type given in
     Content-Type .

 X-Frame-Options (XFO)

    Indicates whether a browser should be allowed to render a page in a
     <frame> ,  <iframe> ,  <embed> or  <object> .

 X-Permitted-Cross-Domain-Policies

    Specifies if a cross-domain policy file (  crossdomain.xml ) is
    allowed. The file may define a policy to grant clients, such as
    Adobe's Flash Player (now obsolete), Adobe Acrobat, Microsoft
    Silverlight (now obsolete), or Apache Flex, permission to handle
    data across domains that would otherwise be restricted due to the
    Same-Origin Policy . See the Cross-domain Policy File Specification
    for more information.

 X-Powered-By

    May be set by hosting environments or other frameworks and contains
    information about them while not providing any usefulness to the
    application or its visitors. Unset this header to avoid exposing
    potential vulnerabilities.

 X-XSS-Protection

    Enables cross-site scripting filtering.

Fetch metadata request headers

Fetch metadata request headers provide information about the context
from which the request originated. A server can use them to make
decisions about whether a request should be allowed, based on where the
request came from and how the resource will be used.

 Sec-Fetch-Site

    Indicates the relationship between a request initiator's origin and
    its target's origin. It is a Structured Header whose value is a
    token with possible values  cross-site ,  same-origin ,  same-site ,
    and  none .

 Sec-Fetch-Mode

    Indicates the request's mode to a server. It is a Structured Header
    whose value is a token with possible values  cors ,  navigate ,
     no-cors ,  same-origin , and  websocket .

 Sec-Fetch-User

    Indicates whether or not a navigation request was triggered by user
    activation. It is a Structured Header whose value is a boolean so
    possible values are  ?0 for false and  ?1 for true.

 Sec-Fetch-Dest

    Indicates the request's destination. It is a Structured Header whose
    value is a token with possible values  audio ,  audioworklet ,
     document ,  embed ,  empty ,  font ,  image ,  manifest ,  object ,
     paintworklet ,  report ,  script ,  serviceworker ,  sharedworker ,
     style ,  track ,  video ,  worker , and  xslt .

The following request headers are not strictly "fetch metadata request
headers", but similarly provide information about the context of how a
resource will be used. A server might use them to modify its caching
behavior, or the information that is returned:

 Sec-Purpose

    Indicates the purpose of the request, when the purpose is something
    other than immediate use by the user-agent. The header currently has
    one possible value,  prefetch , which indicates that the resource is
    being fetched preemptively for a possible future navigation.

 Service-Worker-Navigation-Preload

    A request header sent in preemptive request to  fetch() a resource
    during service worker boot. The value, which is set with
     NavigationPreloadManager.setHeaderValue() , can be used to inform a
    server that a different resource should be returned than in a normal
     fetch() operation.

Server-sent events

 Report-To

    Used to specify a server endpoint for the browser to send warning
    and error reports to.

Transfer coding

 Transfer-Encoding

    Specifies the form of encoding used to safely transfer the resource
    to the user.

 TE

    Specifies the transfer encodings the user agent is willing to
    accept.

 Trailer

    Allows the sender to include additional fields at the end of chunked
    message.

Other

 Alt-Svc

    Used to list alternate ways to reach this service.

 Alt-Used

    Used to identify the alternative service in use.

 Date

    Contains the date and time at which the message was originated.

 Link

    This entity-header field provides a means for serializing one or
    more links in HTTP headers. It is semantically equivalent to the
    HTML  <link> element.

 Retry-After

    Indicates how long the user agent should wait before making a
    follow-up request.

 Server-Timing

    Communicates one or more metrics and descriptions for the given
    request-response cycle.

 Service-Worker-Allowed

    Used to remove the path restriction by including this header in the
    response of the Service Worker script .

 SourceMap

    Links generated code to a source map .

 Upgrade

    This HTTP/1.1 (only) header can be used to upgrade an already
    established client/server connection to a different protocol (over
    the same transport protocol). For example, it can be used by a
    client to upgrade a connection from HTTP 1.1 to HTTP 2.0, or an HTTP
    or HTTPS connection into a WebSocket.

Experimental headers

Client hints

HTTP Client hints are a set of request headers that provide useful
information about the client such as device type and network conditions,
and allow servers to optimize what is served for those conditions.

Servers proactively requests the client hint headers they are interested
in from the client using  Accept-CH . The client may then choose to
include the requested headers in subsequent requests.

 Accept-CH  Experimental 

    Servers can advertise support for Client Hints using the  Accept-CH
    header field or an equivalent HTML  <meta> element with  http-equiv
    attribute.

 Critical-CH  Experimental 

    Servers use  Critical-CH along with  Accept-CH to specify that
    accepted client hints are also critical client hints .

The different categories of client hints are listed below.

User agent client hints

The UA client hints are request headers that provide information about
the user agent, the platform/architecture it is running on, and user
preferences set on the user agent or platform:

 Sec-CH-UA  Experimental 

    User agent's branding and version.

 Sec-CH-UA-Arch  Experimental 

    User agent's underlying platform architecture.

 Sec-CH-UA-Bitness  Experimental 

    User agent's underlying CPU architecture bitness (for example "64"
    bit).

 Sec-CH-UA-Full-Version-List  Experimental 

    Full version for each brand in the user agent's brand list.

 Sec-CH-UA-Mobile  Experimental 

    User agent is running on a mobile device or, more generally, prefers
    a "mobile" user experience.

 Sec-CH-UA-Model  Experimental 

    User agent's device model.

 Sec-CH-UA-Platform  Experimental 

    User agent's underlying operation system/platform.

 Sec-CH-UA-Platform-Version  Experimental 

    User agent's underlying operation system version.

 Sec-CH-UA-Prefers-Color-Scheme  Experimental 

    User's preference of dark or light color scheme.

 Sec-CH-UA-Prefers-Reduced-Motion  Experimental 

    User's preference to see fewer animations and content layout shifts.

Device client hints

 Device-Memory  Experimental 

    Approximate amount of available client RAM memory. This is part of
    the Device Memory API .

Network client hints

Network client hints allow a server to choose what information is sent
based on the user choice and network bandwidth and latency.

 Downlink  Experimental 

    Approximate bandwidth of the client's connection to the server, in
    Mbps. This is part of the Network Information API .

 ECT  Experimental 

    The effective connection type ("network profile") that best matches
    the connection's latency and bandwidth. This is part of the Network
    Information API .

 RTT  Experimental 

    Application layer round trip time (RTT) in milliseconds, which
    includes the server processing time. This is part of the Network
    Information API .

 Save-Data  Experimental 

    A string  on that indicates the user agent's preference for reduced
    data usage.

Privacy

 Sec-GPC  Non-standard   Experimental 

    Indicates whether the user consents to a website or service selling
    or sharing their personal information with third parties.

Security

 Origin-Isolation  Experimental 

    Provides a mechanism to allow web applications to isolate their
    origins.

Server-sent events

 NEL  Experimental 

    Defines a mechanism that enables developers to declare a network
    error reporting policy.

Other

 Accept-Push-Policy  Experimental 

    A client can express the desired push policy for a request by
    sending an  Accept-Push-Policy header field in the request.

 Accept-Signature  Experimental 

    A client can send the  Accept-Signature header field to indicate
    intention to take advantage of any available signatures and to
    indicate what kinds of signatures it supports.

 Early-Data  Experimental 

    Indicates that the request has been conveyed in TLS early data.

 Push-Policy  Experimental 

    A  Push-Policy defines the server behavior regarding push when
    processing a request.

 Signature  Experimental 

    The  Signature header field conveys a list of signatures for an
    exchange, each one accompanied by information about how to determine
    the authority of and refresh that signature.

 Signed-Headers  Experimental 

    The  Signed-Headers header field identifies an ordered list of
    response header fields to include in a signature.

 Supports-Loading-Mode  Experimental 

    Set by a navigation target to opt-in to using various higher-risk
    loading modes. For example, cross-origin, same-site prerendering
    requires a  Supports-Loading-Mode value of  credentialed-prerender .

Non-standard headers

 X-Forwarded-For  Non-standard 

    Identifies the originating IP addresses of a client connecting to a
    web server through an HTTP proxy or a load balancer.

 X-Forwarded-Host  Non-standard 

    Identifies the original host requested that a client used to connect
    to your proxy or load balancer.

 X-Forwarded-Proto  Non-standard 

    Identifies the protocol (HTTP or HTTPS) that a client used to
    connect to your proxy or load balancer.

 X-DNS-Prefetch-Control  Non-standard 

    Controls DNS prefetching, a feature by which browsers proactively
    perform domain name resolution on both links that the user may
    choose to follow as well as URLs for items referenced by the
    document, including images, CSS, JavaScript, and so forth.

 X-Robots-Tag  Non-standard 

    The  X-Robots-Tag HTTP header is used to indicate how a web page is
    to be indexed within public search engine results. The header is
    effectively equivalent to  <meta name="robots" content="…"> .

Deprecated headers

 Pragma  Deprecated 

    Implementation-specific header that may have various effects
    anywhere along the request-response chain. Used for backwards
    compatibility with HTTP/1.0 caches where the  Cache-Control header
    is not yet present.

 Warning  Deprecated 

    General warning information about possible problems.

Contributing

You can help by writing new entries or improving the existing ones.

See also

-   Wikipedia page on List of HTTP headers
-   IANA registry
-   HTTP Working Group

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 19, 2023 by MDN contributors .
# If-Match #
 ___  __       __  __       _       _     
|_ _|/ _|     |  \/  | __ _| |_ ___| |__  
 | || |_ _____| |\/| |/ _` | __/ __| '_ \ 
 | ||  _|_____| |  | | (_| | || (__| | | |
|___|_|       |_|  |_|\__,_|\__\___|_| |_|
                                          
If-Match

The  If-Match HTTP request header makes a request conditional.

A server will only return requested resources for  GET and  HEAD
methods, or upload resource for  PUT and other non-safe methods, if the
resource matches one of the listed  ETag values. If the conditional does
not match then the  412 (Precondition Failed) response is returned.

The comparison with the stored  ETag uses the strong comparison
algorithm , meaning two files are considered identical byte by byte
only. If a listed  ETag has the  W/ prefix indicating a weak entity tag,
this comparison algorithm will never match it.

There are two common use cases:

-   For  GET and  HEAD methods, used in combination with a  Range
    header, it can guarantee that the new ranges requested come from the
    same resource as the previous one.
-   For other methods, and in particular for  PUT ,  If-Match can be
    used to prevent the lost update problem . It can check if the
    modification of a resource that the user wants to upload will not
    override another change that has been done since the original
    resource was fetched.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

http

    If-Match: <etag_value>
    If-Match: <etag_value>, <etag_value>, …

Directives

 <etag_value>

    Entity tags uniquely representing the requested resources. They are
    a string of ASCII characters placed between double quotes (like
     "675af34563dc-tr34" ). They may be prefixed by  W/ to indicate that
    they are "weak", i.e. that they represent the resource semantically
    but not byte-by-byte. However, in an  If-Match header, weak entity
    tags will never match.

 *

    The asterisk is a special value representing any resource. Note that
    this must match as  false if the origin server does not have a
    current representation for the target resource.

Examples

http

    If-Match: "bfc13a64729c4290ef5b2c2730249c88ca92d82d"

    If-Match: "67ab43", "54ed21", "7892dd"

    If-Match: *

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.if-match

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    ETag
-    If-Unmodified-Since
-    If-Modified-Since
-    If-None-Match
-    412 Precondition Failed
-    416 Range Not Satisfiable

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 29, 2023 by MDN contributors .
# If-Modified-Since #
 ___  __       __  __           _ _  __ _          _      ____  _            
|_ _|/ _|     |  \/  | ___   __| (_)/ _(_) ___  __| |    / ___|(_)_ __   ___ 
 | || |_ _____| |\/| |/ _ \ / _` | | |_| |/ _ \/ _` |____\___ \| | '_ \ / __|
 | ||  _|_____| |  | | (_) | (_| | |  _| |  __/ (_| |_____|__) | | | | | (__ 
|___|_|       |_|  |_|\___/ \__,_|_|_| |_|\___|\__,_|    |____/|_|_| |_|\___|
                                                                             
      
  ___ 
 / _ \
|  __/
 \___|
      
If-Modified-Since

The  If-Modified-Since request HTTP header makes the request
conditional: the server sends back the requested resource, with a  200
status, only if it has been last modified after the given date. If the
resource has not been modified since, the response is a  304 without any
body; the  Last-Modified response header of a previous request contains
the date of last modification. Unlike  If-Unmodified-Since ,
 If-Modified-Since can only be used with a  GET or  HEAD .

When used in combination with  If-None-Match , it is ignored, unless the
server doesn't support  If-None-Match .

The most common use case is to update a cached entity that has no
associated  ETag .

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

http

    If-Modified-Since: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT

Directives

<day-name>

    One of "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", or "Sun"
    (case-sensitive).

<day>

    2 digit day number, e.g. "04" or "23".

<month>

    One of "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug",
    "Sep", "Oct", "Nov", "Dec" (case sensitive).

<year>

    4 digit year number, e.g. "1990" or "2016".

<hour>

    2 digit hour number, e.g. "09" or "23".

<minute>

    2 digit minute number, e.g. "04" or "59".

<second>

    2 digit second number, e.g. "04" or "59".

 GMT

    Greenwich Mean Time. HTTP dates are always expressed in GMT, never
    in local time.

Examples

http

    If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.if-modified-since

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    ETag
-    If-Unmodified-since
-    If-Match
-    If-None-Match
-    304 Not Modified

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# If-None-Match #
 ___  __       _   _                        __  __       _       _     
|_ _|/ _|     | \ | | ___  _ __   ___      |  \/  | __ _| |_ ___| |__  
 | || |_ _____|  \| |/ _ \| '_ \ / _ \_____| |\/| |/ _` | __/ __| '_ \ 
 | ||  _|_____| |\  | (_) | | | |  __/_____| |  | | (_| | || (__| | | |
|___|_|       |_| \_|\___/|_| |_|\___|     |_|  |_|\__,_|\__\___|_| |_|
                                                                       
If-None-Match

The  If-None-Match HTTP request header makes the request conditional.
For  GET and  HEAD methods, the server will return the requested
resource, with a  200 status, only if it doesn't have an  ETag matching
the given ones. For other methods, the request will be processed only if
the eventually existing resource's  ETag doesn't match any of the values
listed.

When the condition fails for  GET and  HEAD methods, then the server
must return HTTP status code 304 (Not Modified). For methods that apply
server-side changes, the status code 412 (Precondition Failed) is used.
Note that the server generating a 304 response MUST generate any of the
following header fields that would have been sent in a 200 (OK) response
to the same request: Cache-Control, Content-Location, Date, ETag,
Expires, and Vary.

The comparison with the stored  ETag uses the weak comparison algorithm
, meaning two files are considered identical if the content is
equivalent — they don't have to be identical byte by byte. For example,
two pages that differ by their creation date in the footer would still
be considered identical.

When used in combination with  If-Modified-Since ,  If-None-Match has
precedence (if the server supports it).

There are two common use cases:

-   For  GET and  HEAD methods, to update a cached entity that has an
    associated  ETag .
-   For other methods, and in particular for  PUT ,  If-None-Match used
    with the  * value can be used to save a file not known to exist,
    guaranteeing that another upload didn't happen before, losing the
    data of the previous put; this problem is a variation of the lost
    update problem .

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

http

    If-None-Match: "<etag_value>"
    If-None-Match: "<etag_value>", "<etag_value>", …
    If-None-Match: *

Directives

<etag_value>

    Entity tags uniquely representing the requested resources. They are
    a string of ASCII characters placed between double quotes (Like
     "675af34563dc-tr34" ) and may be prefixed by  W/ to indicate that
    the weak comparison algorithm should be used (this is useless with
     If-None-Match as it only uses that algorithm).

 *

    The asterisk is a special value representing any resource. They are
    only useful when uploading a resource, usually with  PUT , to check
    if another resource with the identity has already been uploaded
    before.

Examples

http

    If-None-Match: "bfc13a64729c4290ef5b2c2730249c88ca92d82d"

    If-None-Match: W/"67ab43", "54ed21", "7892dd"

    If-None-Match: *

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.if-none-match

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    ETag
-    If-Unmodified-Since
-    If-Modified-Since
-    If-Match
-    304 Not Modified
-    412 Precondition Failed

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 29, 2023 by MDN contributors .
# If-Range #
 ___  __       ____                        
|_ _|/ _|     |  _ \ __ _ _ __   __ _  ___ 
 | || |_ _____| |_) / _` | '_ \ / _` |/ _ \
 | ||  _|_____|  _ < (_| | | | | (_| |  __/
|___|_|       |_| \_\__,_|_| |_|\__, |\___|
                                |___/      
If-Range

The  If-Range HTTP request header makes a range request conditional: if
the condition is fulfilled, the range request is issued, and the server
sends back a  206  Partial Content answer with the appropriate body. If
the condition is not fulfilled, the full resource is sent back with a
 200  OK status.

This header can be used either with the  Last-Modified validator or with
 ETag , but not with both.

The most common use case is to resume a download, to guarantee that the
stored resource has not been modified since the last fragment has been
received.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

http

    If-Range: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT
    If-Range: <etag>

Directives

<etag>

    An entity tag uniquely representing the requested resource. It is a
    string of ASCII characters placed between double quotes (Like
     "675af34563dc-tr34" ). A weak entity tag (one prefixed by  W/ )
    must not be used in this header.

<day-name>

    One of "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", or "Sun"
    (case-sensitive).

<day>

    2 digit day number, e.g. "04" or "23".

<month>

    One of "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug",
    "Sep", "Oct", "Nov", "Dec" (case-sensitive).

<year>

    4 digit year number, e.g. "1990" or "2016".

<hour>

    2 digit hour number, e.g. "09" or "23".

<minute>

    2 digit minute number, e.g. "04" or "59".

<second>

    2 digit second number, e.g. "04" or "59".

 GMT

    Greenwich Mean Time. HTTP dates are always expressed in GMT, never
    in local time.

Examples

http

    If-Range: Wed, 21 Oct 2015 07:28:00 GMT

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.if-range

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    ETag
-    Last-Modified
-    If-Modified-Since
-    If-Unmodified-Since
-    If-Match
-    If-None-Match
-    206 Partial Content
-   HTTP Conditional Requests

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# If-Unmodified-Since #
 ___  __       _   _                           _ _  __ _          _      ____  
|_ _|/ _|     | | | |_ __  _ __ ___   ___   __| (_)/ _(_) ___  __| |    / ___| 
 | || |_ _____| | | | '_ \| '_ ` _ \ / _ \ / _` | | |_| |/ _ \/ _` |____\___ \ 
 | ||  _|_____| |_| | | | | | | | | | (_) | (_| | |  _| |  __/ (_| |_____|__) |
|___|_|        \___/|_| |_|_| |_| |_|\___/ \__,_|_|_| |_|\___|\__,_|    |____/ 
                                                                               
 _                
(_)_ __   ___ ___ 
| | '_ \ / __/ _ \
| | | | | (_|  __/
|_|_| |_|\___\___|
                  
If-Unmodified-Since

The HyperText Transfer Protocol (HTTP)  If-Unmodified-Since request
header makes the request for the resource conditional: the server will
send the requested resource or accept it in the case of a  POST or
another non- safe method only if the resource has not been modified
after the date specified by this HTTP header. If the resource has been
modified after the specified date, the response will be a
 412 Precondition Failed error.

The  If-Unmodified-Since HTTP header is commonly used in the following
situations:

-   In conjunction with non- safe methods, like  POST , this header can
    be used to implement an optimistic concurrency control , as is done
    by some wikis: editions are rejected if the stored document has been
    modified since the original was retrieved.
-   In conjunction with a range request using the  Range header, this
    header can be used to ensure that the new fragment requested comes
    from an unmodified document.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

http

    If-Unmodified-Since: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT

Directives

<day-name>

    A 3-letter description of the day of the week. One of "Mon", "Tue",
    "Wed", "Thu", "Fri", "Sat", or "Sun" (case-sensitive).

<day>

    A 2-digit day number of the month. Examples: "04", "23".

<month>

    A 3-letter description of the month. One of "Jan", "Feb", "Mar",
    "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
    (case-sensitive).

<year>

    A 4-digit year number. Examples: "1990", "2016".

<hour>

    A 2-digit hour number based on a 24-hour system. Examples: "09",
    "23".

<minute>

    A 2-digit minute number. Examples: "04", "59".

<second>

    A 2-digit second number. Examples: "04", "59".

 GMT

    Greenwich Mean Time. HTTP dates are always expressed in GMT, never
    in local time.

Examples

http

    If-Unmodified-Since: Wed, 21 Oct 2015 07:28:00 GMT

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.if-unmodified-since

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Last-Modified
-    If-Modified-Since
-    If-Match
-    If-None-Match
-    Range
-    412 Precondition Failed

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Keep-Alive #
 _  __                       _    _ _           
| |/ /___  ___ _ __         / \  | (_)_   _____ 
| ' // _ \/ _ \ '_ \ _____ / _ \ | | \ \ / / _ \
| . \  __/  __/ |_) |_____/ ___ \| | |\ V /  __/
|_|\_\___|\___| .__/     /_/   \_\_|_| \_/ \___|
              |_|                               
Keep-Alive

The  Keep-Alive general header allows the sender to hint about how the
connection may be used to set a timeout and a maximum amount of
requests.

Note: Set the  Connection header to "keep-alive" for this header to have
any effect.

Warning: Connection-specific header fields such as  Connection and
 Keep-Alive are prohibited in HTTP/2 and HTTP/3 . Chrome and Firefox
ignore them in HTTP/2 responses, but Safari conforms to the HTTP/2
specification requirements and does not load any response that contains
them.

  ----------------------- ----------------------------------
  Header type             Request header , Response header
  Forbidden header name   yes
  ----------------------- ----------------------------------

Syntax

http

    Keep-Alive: parameters

Directives

 parameters

    A comma-separated list of parameters, each consisting of an
    identifier and a value separated by the equal sign (  '=' ). The
    following identifiers are possible:

    -    timeout : An integer that is the time in seconds that the host
        will allow an idle connection to remain open before it is
        closed. A connection is idle if no data is sent or received by a
        host. A host may keep an idle connection open for longer than
         timeout seconds, but the host should attempt to retain a
        connection for at least  timeout seconds.
    -    max : An integer that is the maximum number of requests that
        can be sent on this connection before closing it. Unless  0 ,
        this value is ignored for non-pipelined connections as another
        request will be sent in the next response. An HTTP pipeline can
        use it to limit the pipelining.

Examples

A response containing a  Keep-Alive header:

http

    HTTP/1.1 200 OK
    Connection: Keep-Alive
    Content-Encoding: gzip
    Content-Type: text/html; charset=utf-8
    Date: Thu, 11 Aug 2016 15:23:13 GMT
    Keep-Alive: timeout=5, max=1000
    Last-Modified: Mon, 25 Jul 2016 04:32:39 GMT
    Server: Apache

    (body)

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP/1.1
  # compatibility.with.http.1.0.persistent.connections

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Connection
-   Connection management in HTTP/1.x

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 11, 2023 by MDN contributors .
# Large-Allocation #
 _                                 _    _ _                 _   _             
| |    __ _ _ __ __ _  ___        / \  | | | ___   ___ __ _| |_(_) ___  _ __  
| |   / _` | '__/ _` |/ _ \_____ / _ \ | | |/ _ \ / __/ _` | __| |/ _ \| '_ \ 
| |__| (_| | | | (_| |  __/_____/ ___ \| | | (_) | (_| (_| | |_| | (_) | | | |
|_____\__,_|_|  \__, |\___|    /_/   \_\_|_|\___/ \___\__,_|\__|_|\___/|_| |_|
                |___/                                                         
Large-Allocation

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

Non-standard: This feature is non-standard and is not on a standards
track. Do not use it on production sites facing the Web: it will not
work for every user. There may also be large incompatibilities between
implementations and the behavior may change in the future.

The non-standard  Large-Allocation response header tells the browser
that the page being loaded is going to want to perform a large
allocation. It's not implemented in current versions of any browser, but
is harmless to send to any browser.

WebAssembly or asm.js applications can use large contiguous blocks of
allocated memory. For complex games, for example, these allocations can
be quite large, sometimes as large as 1GB. The  Large-Allocation tells
the browser that the web content in the to-be-loaded page is going to
want to perform a large contiguous memory allocation and the browser can
react to this header by starting a dedicated process for the
to-be-loaded document, for example.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Large-Allocation: 0
    Large-Allocation: <megabytes>

Directives

 0

    0 is a special value which represents uncertainty as to what the
    size of the allocation is.

 <megabytes>

    The expected size of the allocation to be performed, in megabytes.

Examples

http

    Large-Allocation: 0
    Large-Allocation: 500

Troubleshooting errors

The  Large-Allocation header throws warnings or error messages when used
incorrectly. You'll encounter them in the web console .

This page was loaded in a new process due to a  Large-Allocation header.

    This message means that the browser saw the  Large-Allocation
    header, and was able to reload the page into a new process which
    should have more available contiguous memory.

A  Large-Allocation header was ignored due to the load being triggered by a non-GET request.

    When a  POST request is used to load a document, that load cannot
    currently be redirected into a new process. This error is displayed
    when loading a document with a  Large-Allocation header with a
    non-GET HTTP method. This could be caused due to the document being
    loaded by a form submission, for example.

A  Large-Allocation header was ignored due to the presence of windows which have a reference to this browsing context through the frame hierarchy or  window.opener .

    This error means that the document was not loaded at the top level
    of an user-opened or noopener-opened tab or window. It can occur in
    these situations:

    -   The document with the  Large-Allocation header was loaded in an
         <iframe> . Firefox cannot move an iframe into a new process
        currently, so the document must load in the current process.
    -   The document with the  Large-Allocation header was loaded in a
        window which was opened by  window.open() ,  <a target="_blank">
        or other similar methods without  rel="noopener" or the
         "noopener" feature being set. These windows must remain in the
        same process as their opener, as they can communicate, meaning
        that we cannot allow them to switch processes.
    -   The document with the  Large-Allocation header has opened
        another window with  window.open() ,  <a target="_blank"> or
        other similar methods without  rel="noopener" or the  "noopener"
        feature being set. This is for the same reason as above, namely
        that they can communicate and thus we cannot allow them to
        switch processes.

This page would be loaded in a new process due to a  Large-Allocation header, however  Large-Allocation process creation is disabled on non-Win32 platforms.

    Firefox currently only supports the  Large-Allocation header in our
    32-bit Windows builds, as memory fragmentation is not an issue in
    64-bit builds. If you are running a non-win32 version of Firefox,
    this error will appear. This check can be disabled with the
     dom.largeAllocation.forceEnable boolean preference in about:config.

Specifications

Not part of any current specifications. An explainer of the ideas behind
this header can be found in this document .

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   WebAssembly

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Last-Modified #
 _              _        __  __           _ _  __ _          _ 
| |    __ _ ___| |_     |  \/  | ___   __| (_)/ _(_) ___  __| |
| |   / _` / __| __|____| |\/| |/ _ \ / _` | | |_| |/ _ \/ _` |
| |__| (_| \__ \ ||_____| |  | | (_) | (_| | |  _| |  __/ (_| |
|_____\__,_|___/\__|    |_|  |_|\___/ \__,_|_|_| |_|\___|\__,_|
                                                               
Last-Modified

The  Last-Modified response HTTP header contains a date and time when
the origin server believes the resource was last modified. It is used as
a validator to determine if the resource is the same as the previously
stored one. Less accurate than an  ETag header, it is a fallback
mechanism. Conditional requests containing  If-Modified-Since or
 If-Unmodified-Since headers make use of this field.

 Last-Modified is also used by crawlers to adjust crawl frequency, by
browsers in heuristic caching , and by content management systems (CMS)
to display the time the content was last modified.

  --------------------------------- -----------------------
  Header type                       Representation header
  Forbidden header name             no
  CORS-safelisted response header   yes
  --------------------------------- -----------------------

Syntax

http

    Last-Modified: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT

Directives

<day-name>

    One of "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", or "Sun"
    (case-sensitive).

<day>

    2 digit day number, e.g. "04" or "23".

<month>

    One of "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug",
    "Sep", "Oct", "Nov", "Dec" (case sensitive).

<year>

    4 digit year number, e.g. "1990" or "2016".

<hour>

    2 digit hour number, e.g. "09" or "23".

<minute>

    2 digit minute number, e.g. "04" or "59".

<second>

    2 digit second number, e.g. "04" or "59".

 GMT

    Greenwich Mean Time. HTTP dates are always expressed in GMT, never
    in local time.

Examples

http

    Last-Modified: Wed, 21 Oct 2015 07:28:00 GMT

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.last-modified

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    If-Modified-Since
-    If-Unmodified-Since
-    Etag

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Link #
 _     _       _    
| |   (_)_ __ | | __
| |   | | '_ \| |/ /
| |___| | | | |   < 
|_____|_|_| |_|_|\_\
                    
Link

The HTTP  Link entity-header field provides a means for serializing one
or more links in HTTP headers. It is semantically equivalent to the HTML
 <link> element.

Note: Some browsers do not support the "icon" relation via HTTP (
FF#1185705 ). Use HTML  <link rel="icon"> instead.

Syntax

http

    Link: <uri-reference>; param1=value1; param2="value2"

 <uri-reference>

    The URI reference, must be enclosed between  < and  > and URL
    encoded .

Parameters

The link header contains parameters, which are separated with  ; and are
equivalent to attributes of the  <link> element.

Examples

The URI (absolute or relative) must be enclosed between  < and  > :

http

    Link: <https://example.com>; rel="preconnect"

http

    Link: https://bad.example; rel="preconnect"

Encoding URLs

The URI (absolute or relative) must encode char codes greater than 255:

http

    Link: <https://example.com/%E8%8B%97%E6%9D%A1>; rel="preconnect"

http

    Link: <https://example.com/苗条>; rel="preconnect"

Specifying multiple links

You can specify multiple links separated by commas, for example:

http

    Link: <https://one.example.com>; rel="preconnect", <https://two.example.com>; rel="preconnect", <https://three.example.com>; rel="preconnect"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Web Linking
  # header

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    103 Early Hints
-    <link>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Nov 23, 2023 by MDN contributors .
# Location #
 _                    _   _             
| |    ___   ___ __ _| |_(_) ___  _ __  
| |   / _ \ / __/ _` | __| |/ _ \| '_ \ 
| |__| (_) | (_| (_| | |_| | (_) | | | |
|_____\___/ \___\__,_|\__|_|\___/|_| |_|
                                        
Location

The  Location response header indicates the URL to redirect a page to.
It only provides a meaning when served with a  3xx (redirection) or  201
(created) status response.

In cases of redirection, the HTTP method used to make the new request to
fetch the page pointed to by  Location depends on the original method
and the kind of redirection:

-    303 (See Other) responses always lead to the use of a  GET method.
-    307 (Temporary Redirect) and  308 (Permanent Redirect) don't change
    the method used in the original request.
-    301 (Moved Permanently) and  302 (Found) don't change the method
    most of the time, though older user-agents may (so you basically
    don't know).

All responses with one of these status codes send a  Location header.

In cases of resource creation, it indicates the URL to the newly created
resource.

 Location and  Content-Location are different.  Location indicates the
target of a redirection or the URL of a newly created resource.
 Content-Location indicates the direct URL to use to access the resource
when content negotiation happened, without the need of further content
negotiation.  Location is a header associated with the response, while
 Content-Location is associated with the entity returned.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Location: <url>

Directives

<url>

    A relative (to the request URL) or absolute URL.

Examples

http

    Location: /index.html

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.location

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Location
-   Status of responses including a  Location header:  201 ,  301 ,  302
    ,  303 ,  307 ,  308 .

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Max-Forwards #
 __  __                 _____                                _     
|  \/  | __ ___  __    |  ___|__  _ ____      ____ _ _ __ __| |___ 
| |\/| |/ _` \ \/ /____| |_ / _ \| '__\ \ /\ / / _` | '__/ _` / __|
| |  | | (_| |>  <_____|  _| (_) | |   \ V  V / (_| | | | (_| \__ \
|_|  |_|\__,_/_/\_\    |_|  \___/|_|    \_/\_/ \__,_|_|  \__,_|___/
                                                                   
Max-Forwards

The  Max-Forwards request HTTP header is used with the  TRACE method to
limit the number of nodes (usually proxies) that request goes through.
Its value is an integer value indicating the maximum amount of nodes it
must visit. At each node, the value is decremented and the  TRACE
request is forwarded to the next node, until the destination is reached,
or the received value of  Max-Forwards is zero. The request is then sent
back, except for some headers, as the body of a  200 OK response.

If the  Max-Forwards header is not present in a  TRACE request, a node
will assume that there is no maximum number of forwards.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

http

    Max-Forwards: <integer>

Examples

http

    Max-Forwards: 0
    Max-Forwards: 10

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.max-forwards

  -----------------------------------------------------------------------

Browser compatibility

This feature is neither targeted at, nor implemented in, browsers.

See also

-   The HTTP  TRACE method

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# NEL #
 _   _ _____ _     
| \ | | ____| |    
|  \| |  _| | |    
| |\  | |___| |___ 
|_| \_|_____|_____|
                   
NEL

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  NEL response header is used to configure network request
logging.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Network Error Logging
  # nel-response-header

  -----------------------------------------------------------------------

http

    NEL: { "report_to": "name_of_reporting_group", "max_age": 12345, "include_subdomains": false, "success_fraction": 0.0, "failure_fraction": 1.0 }

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Network Error Logging (NEL) explainer

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Origin-Agent-Cluster #
  ___       _       _               _                    _         ____ _ 
 / _ \ _ __(_) __ _(_)_ __         / \   __ _  ___ _ __ | |_      / ___| |
| | | | '__| |/ _` | | '_ \ _____ / _ \ / _` |/ _ \ '_ \| __|____| |   | |
| |_| | |  | | (_| | | | | |_____/ ___ \ (_| |  __/ | | | ||_____| |___| |
 \___/|_|  |_|\__, |_|_| |_|    /_/   \_\__, |\___|_| |_|\__|     \____|_|
              |___/                     |___/                             
           _            
 _   _ ___| |_ ___ _ __ 
| | | / __| __/ _ \ '__|
| |_| \__ \ ||  __/ |   
 \__,_|___/\__\___|_|   
                        
Origin-Agent-Cluster

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The  Origin-Agent-Cluster HTTP response header is used to request that
the associated  Document should be placed in an origin-keyed agent
cluster . This means that operating system resources (for example, the
operating system process) used to evaluate the document should be shared
only with other documents from the same origin .

The effect of this is that a resource-intensive document will be less
likely to degrade the performance of documents from other origins.

Modern web browsers have a multiprocess architecture in which pages from
different origins can run in different operating system processes. This
is important for performance, because it means that a resource-intensive
page will not have as much of an impact on other pages that the user has
open.

However, browsers can't as a general rule run same-site , cross-origin
pages in different processes, because of certain DOM APIs that depend on
same-site, cross-origin communication. For example, by default, pages
from the following two origins will share the same operating system
resources:

    https://apples.example.org
    https://oranges.example.org

By setting the  Origin-Agent-Cluster header, a page can request that the
browser allocate dedicated resources to this origin that are not shared
with any other origins.

The browser is not required to honor the request. If it does, the
 Window.originAgentCluster property returns  true , and the window is
not able to do the following things, which all depend on same-site,
cross-origin communication:

-   Use  Document.domain .
-   Send  WebAssembly.Module objects to other same-site cross-origin
    pages using  postMessage() .
-   Send  SharedArrayBuffer or  WebAssembly.Memory objects to other
    same-site cross-origin pages.

Origin-keyed agent clusters should not be viewed as a security feature:
browsers may ignore the request for various reasons, or choose to
implement it in a way that does not provide memory protection (for
example, using separate threads instead of separate processes). Instead,
this feature is a hint that the user experience would be improved if
this origin were allocated dedicated resources.

For example, suppose your site includes a page from one origin that
embeds a same-site, cross-origin iframe which runs a resource-intensive
game. By setting  Origin-Agent-Cluster on the document in the iframe,
you can prevent the game from affecting the performance of the main
page.

The browser will ensure that all pages from a given origin are either
origin-keyed or they are not. This means that:

-   If the first page from an origin does not set the header, then no
    other pages from that origin will be origin-keyed, even if those
    other pages do set the header.
-   If the first page from an origin sets the header and is made
    origin-keyed, then all other pages from that origin will be
    origin-keyed whether they ask for it or not.

To avoid this kind of unpredictable situation, you should set this
header for all pages from a given origin, or none of them.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Origin-Agent-Cluster: <boolean>

Directives

 <boolean>

     ?1 indicates that the user-agent prefers a mobile experience
    (true).

     ?0 indicates that user-agent does not prefer a mobile experience
    (false).

Examples

http

    Origin-Agent-Cluster: ?1

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTML Standard
  # origin-agent-cluster

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Window.originAgentCluster
-   Requesting performance isolation with the Origin-Agent-Cluster
    header on web.dev

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 2, 2023 by MDN contributors .
# Origin #
  ___       _       _       
 / _ \ _ __(_) __ _(_)_ __  
| | | | '__| |/ _` | | '_ \ 
| |_| | |  | | (_| | | | | |
 \___/|_|  |_|\__, |_|_| |_|
              |___/         
Origin

The  Origin request header indicates the origin (scheme, hostname, and
port) that caused the request. For example, if a user agent needs to
request resources included in a page, or fetched by scripts that it
executes, then the origin of the page may be included in the request.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   yes
  ----------------------- ----------------

Syntax

http

    Origin: null
    Origin: <scheme>://<hostname>
    Origin: <scheme>://<hostname>:<port>

Directives

 null

    The origin is "privacy sensitive", or is an opaque origin as defined
    by the HTML specification (specific cases are listed in the
    description section).

 <scheme>

    The protocol that is used. Usually, it is the HTTP protocol or its
    secured version, HTTPS.

 <hostname>

    The domain name or the IP address of the origin server.

 <port>  Optional 

    Port number on which the server is listening. If no port is given,
    the default port for the requested service is implied (e.g., "80"
    for an HTTP URL) .

Description

The  Origin header is similar to the  Referer header, but does not
disclose the path, and may be  null . It is used to provide the
"security context" for the origin request, except in cases where the
origin information would be sensitive or unnecessary.

Broadly speaking, user agents add the  Origin request header to:

-   cross origin requests.
-   same-origin requests except for  GET or  HEAD requests (i.e. they
    are added to same-origin  POST ,  OPTIONS ,  PUT ,  PATCH , and
     DELETE requests).

There are some exceptions to the above rules; for example, if a
cross-origin  GET or  HEAD request is made in no-cors mode , the  Origin
header will not be added.

The  Origin header value may be  null in a number of cases, including
(non-exhaustively):

-   Origins whose scheme is not one of  http ,  https ,  ftp ,  ws ,
     wss , or  gopher (including  blob ,  file and  data ).
-   Cross-origin images and media data, including that in  <img> ,
     <video> and  <audio> elements.
-   Documents created programmatically using  createDocument() ,
    generated from a  data: URL, or that do not have a creator browsing
    context.
-   Redirects across origins.
-   iframes with a sandbox attribute that doesn't contain the value
     allow-same-origin .
-   Responses that are network errors.
-    Referrer-Policy set to  no-referrer for non-  cors request modes
    (e.g. simple form posts).

Note: There is a more detailed listing of cases that may return  null on
Stack Overflow: When do browsers send the Origin header? When do
browsers set the origin to null?

Examples

http

    Origin: https://developer.mozilla.org

http

    Origin: http://developer.mozilla.org:80

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  The Web Origin Concept
  # section-7

  Fetch Standard
  # origin-header
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Host
-    Referer
-   Same-origin policy
-   When do browsers send the Origin header? When do browsers set the
    origin to null? (Stack Overflow)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: accelerometer #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
                    _                               _            
  __ _  ___ ___ ___| | ___ _ __ ___  _ __ ___   ___| |_ ___ _ __ 
 / _` |/ __/ __/ _ \ |/ _ \ '__/ _ \| '_ ` _ \ / _ \ __/ _ \ '__|
| (_| | (_| (_|  __/ |  __/ | | (_) | | | | | |  __/ ||  __/ |   
 \__,_|\___\___\___|_|\___|_|  \___/|_| |_| |_|\___|\__\___|_|   
                                                                 
Permissions-Policy: accelerometer

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  accelerometer directive controls
whether the current document is allowed to gather information about the
acceleration of the device through the  Accelerometer interface.

Specifically, where a defined policy blocks use of this feature,
 Accelerometer() constructor calls will throw a  DOMException of type
 SecurityError .

Syntax

http

    Permissions-Policy: accelerometer=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  accelerometer is:  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Generic Sensor API
  # permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: ambient-light-sensor #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
                 _     _            _        _ _       _     _                 
  __ _ _ __ ___ | |__ (_) ___ _ __ | |_     | (_) __ _| |__ | |_      ___  ___ 
 / _` | '_ ` _ \| '_ \| |/ _ \ '_ \| __|____| | |/ _` | '_ \| __|____/ __|/ _ \
| (_| | | | | | | |_) | |  __/ | | | ||_____| | | (_| | | | | ||_____\__ \  __/
 \__,_|_| |_| |_|_.__/|_|\___|_| |_|\__|    |_|_|\__, |_| |_|\__|    |___/\___|
                                                 |___/                         
                      
 _ __  ___  ___  _ __ 
| '_ \/ __|/ _ \| '__|
| | | \__ \ (_) | |   
|_| |_|___/\___/|_|   
                      
Permissions-Policy: ambient-light-sensor

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  ambient-light-sensor directive
controls whether the current document is allowed to gather information
about the amount of light in the environment around the device through
the  AmbientLightSensor interface.

Specifically, where a defined policy blocks use of this feature,
 AmbientLightSensor() constructor calls will throw a  DOMException of
type  SecurityError .

Syntax

http

    Permissions-Policy: ambient-light-sensor=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  ambient-light-sensor is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Generic Sensor API
  # permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: autoplay #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
                            _              _             
  ___ _   _ _    __ _ _   _| |_ ___  _ __ | | __ _ _   _ 
 / __| | | (_)  / _` | | | | __/ _ \| '_ \| |/ _` | | | |
| (__| |_| |_  | (_| | |_| | || (_) | |_) | | (_| | |_| |
 \___|\__, (_)  \__,_|\__,_|\__\___/| .__/|_|\__,_|\__, |
      |___/                         |_|            |___/ 
Permissions-Policy: autoplay

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  autoplay directive controls whether
the current document is allowed to autoplay media requested through the
 HTMLMediaElement interface.

Specifically, where a defined policy blocks use of this feature and
there were no user gestures, the  Promise returned by
 HTMLMediaElement.play() will reject with a  DOMException . The
 autoplay attribute on  <audio> and  <video> elements will be ignored.

Note: For more details on autoplay and autoplay blocking, see the
article Autoplay guide for media and Web Audio APIs .

Syntax

http

    Permissions-Policy: autoplay=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  autoplay is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTML Standard
  # autoplay-feature

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: battery #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
                _           _   _                  
  ___ _   _ _  | |__   __ _| |_| |_ ___ _ __ _   _ 
 / __| | | (_) | '_ \ / _` | __| __/ _ \ '__| | | |
| (__| |_| |_  | |_) | (_| | |_| ||  __/ |  | |_| |
 \___|\__, (_) |_.__/ \__,_|\__|\__\___|_|   \__, |
      |___/                                  |___/ 
Permissions-Policy: battery

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  battery directive controls whether
the current document is allowed to gather information about the battery
of the device through the  BatteryManager interface obtained via
 Navigator.getBattery() .

Specifically, where a defined policy blocks use of this feature,
 getBattery() calls will return a  Promise that rejects with a
 DOMException of type  NotAllowedError .

Syntax

http

    Permissions-Policy: battery=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  battery is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Battery Status API
  # permissions-policy-integration

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy
-   Battery Status API
-    Navigator.getBattery()
-    BatteryManager

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: camera #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
                                                   
  ___ _   _ _    ___ __ _ _ __ ___   ___ _ __ __ _ 
 / __| | | (_)  / __/ _` | '_ ` _ \ / _ \ '__/ _` |
| (__| |_| |_  | (_| (_| | | | | | |  __/ | | (_| |
 \___|\__, (_)  \___\__,_|_| |_| |_|\___|_|  \__,_|
      |___/                                        
Permissions-Policy: camera

The HTTP  Permissions-Policy header  camera directive controls whether
the current document is allowed to use video input devices.

Specifically, where a defined policy blocks use of this feature,
 MediaDevices.getUserMedia() calls will return a  Promise that rejects
with a  NotAllowedError  DOMException .

Syntax

http

    Permissions-Policy: camera=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  camera is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Media Capture and Streams
  # permissions-policy-integration

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: display-capture #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
     _ _           _                                   _                  
  __| (_)___ _ __ | | __ _ _   _        ___ __ _ _ __ | |_ _   _ _ __ ___ 
 / _` | / __| '_ \| |/ _` | | | |_____ / __/ _` | '_ \| __| | | | '__/ _ \
| (_| | \__ \ |_) | | (_| | |_| |_____| (_| (_| | |_) | |_| |_| | | |  __/
 \__,_|_|___/ .__/|_|\__,_|\__, |      \___\__,_| .__/ \__|\__,_|_|  \___|
            |_|            |___/                |_|                       
Permissions-Policy: display-capture

The HTTP  Permissions-Policy header  display-capture directive controls
whether or not the document is permitted to use Screen Capture API ,
that is,  getDisplayMedia() to capture the screen's contents.

If  display-capture is disabled in a document, the document will not be
able to initiate screen capture via  getDisplayMedia() and will throw a
 NotAllowedError exception.

Syntax

http

    Permissions-Policy: display-capture=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  display-capture is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Screen Capture
  # permissions-policy-integration

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy
-   Screen Capture API
-   Using the Screen Capture API

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: document-domain #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
     _                                       _            _                 
  __| | ___   ___ _   _ _ __ ___   ___ _ __ | |_       __| | ___  _ __ ___  
 / _` |/ _ \ / __| | | | '_ ` _ \ / _ \ '_ \| __|____ / _` |/ _ \| '_ ` _ \ 
| (_| | (_) | (__| |_| | | | | | |  __/ | | | ||_____| (_| | (_) | | | | | |
 \__,_|\___/ \___|\__,_|_| |_| |_|\___|_| |_|\__|     \__,_|\___/|_| |_| |_|
                                                                            
       _       
  __ _(_)_ __  
 / _` | | '_ \ 
| (_| | | | | |
 \__,_|_|_| |_|
               
Permissions-Policy: document-domain

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  document-domain directive controls
whether the current document is allowed to set  document.domain .

Specifically, where a defined policy blocks use of this feature,
attempting to set  document.domain will fail and cause a  SecurityError
 DOMException to be thrown.

Syntax

http

    Permissions-Policy: document-domain=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  document-domain is  * .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTML Standard
  # policy-controlled-features

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: encrypted-media #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
                                  _           _                          _ _ 
  ___ _ __   ___ _ __ _   _ _ __ | |_ ___  __| |      _ __ ___   ___  __| (_)
 / _ \ '_ \ / __| '__| | | | '_ \| __/ _ \/ _` |_____| '_ ` _ \ / _ \/ _` | |
|  __/ | | | (__| |  | |_| | |_) | ||  __/ (_| |_____| | | | | |  __/ (_| | |
 \___|_| |_|\___|_|   \__, | .__/ \__\___|\__,_|     |_| |_| |_|\___|\__,_|_|
                      |___/|_|                                               
       
  __ _ 
 / _` |
| (_| |
 \__,_|
       
Permissions-Policy: encrypted-media

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  encrypted-media directive controls
whether the current document is allowed to use the Encrypted Media
Extensions API (EME).

Specifically, where a defined policy blocks use of this feature, the
 Promise returned by  Navigator.requestMediaKeySystemAccess() will
reject with a  DOMException of type  SecurityError .

Syntax

http

    Permissions-Policy: encrypted-media=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  encrypted-media is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Encrypted Media Extensions
  # permissions-policy-integration

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: execution-while-not-rendered #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
                          _   _                           _     _ _            
  _____  _____  ___ _   _| |_(_) ___  _ __      __      _| |__ (_) | ___       
 / _ \ \/ / _ \/ __| | | | __| |/ _ \| '_ \ ____\ \ /\ / / '_ \| | |/ _ \_____ 
|  __/>  <  __/ (__| |_| | |_| | (_) | | | |_____\ V  V /| | | | | |  __/_____|
 \___/_/\_\___|\___|\__,_|\__|_|\___/|_| |_|      \_/\_/ |_| |_|_|_|\___|      
                                                                               
             _                           _                   _ 
 _ __   ___ | |_      _ __ ___ _ __   __| | ___ _ __ ___  __| |
| '_ \ / _ \| __|____| '__/ _ \ '_ \ / _` |/ _ \ '__/ _ \/ _` |
| | | | (_) | ||_____| | |  __/ | | | (_| |  __/ | |  __/ (_| |
|_| |_|\___/ \__|    |_|  \___|_| |_|\__,_|\___|_|  \___|\__,_|
                                                               
Permissions-Policy: execution-while-not-rendered

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  execution-while-not-rendered
directive controls whether tasks should execute in frames while they're
not being rendered (e.g. if an iframe is  hidden or has  display: none
set).

Specifically, where a defined policy blocks execution of task rendering
while content is not being rendered, while that condition is true, that
content will be put in the frozen state as defined in the Page Lifecycle
API . This stops execution of freezable tasks such as JavaScript timers
(e.g.  setTimeout() ) and  fetch() callbacks.

Syntax

http

    Permissions-Policy: execution-while-not-rendered=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  execution-while-not-rendered is  * .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Page Lifecycle
  # feature-policies

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: execution-while-out-of-viewport #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
                          _   _                           _     _ _            
  _____  _____  ___ _   _| |_(_) ___  _ __      __      _| |__ (_) | ___       
 / _ \ \/ / _ \/ __| | | | __| |/ _ \| '_ \ ____\ \ /\ / / '_ \| | |/ _ \_____ 
|  __/>  <  __/ (__| |_| | |_| | (_) | | | |_____\ V  V /| | | | | |  __/_____|
 \___/_/\_\___|\___|\__,_|\__|_|\___/|_| |_|      \_/\_/ |_| |_|_|_|\___|      
                                                                               
             _               __            _                                
  ___  _   _| |_       ___  / _|    __   _(_) _____      ___ __   ___  _ __ 
 / _ \| | | | __|____ / _ \| |_ ____\ \ / / |/ _ \ \ /\ / / '_ \ / _ \| '__|
| (_) | |_| | ||_____| (_) |  _|_____\ V /| |  __/\ V  V /| |_) | (_) | |   
 \___/ \__,_|\__|     \___/|_|        \_/ |_|\___| \_/\_/ | .__/ \___/|_|   
                                                          |_|               
 _   
| |_ 
| __|
| |_ 
 \__|
     
Permissions-Policy: execution-while-out-of-viewport

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  execution-while-out-of-viewport
directive controls whether tasks should execute in frames while they're
outside of the visible viewport.

Specifically, where a defined policy blocks execution of task rendering
while content is not in the visible viewport, while that condition is
true, the content will be put in the frozen state as defined in the Page
Lifecycle API . This stops execution of freezable tasks such as
JavaScript timers (e.g.  setTimeout() ) and  fetch() callbacks.

Syntax

http

    Permissions-Policy: execution-while-out-of-viewport=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  execution-while-out-of-viewport is  * .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Page Lifecycle
  # feature-policies

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: fullscreen #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
                 __       _ _                              
  ___ _   _ _   / _|_   _| | |___  ___ _ __ ___  ___ _ __  
 / __| | | (_) | |_| | | | | / __|/ __| '__/ _ \/ _ \ '_ \ 
| (__| |_| |_  |  _| |_| | | \__ \ (__| | |  __/  __/ | | |
 \___|\__, (_) |_|  \__,_|_|_|___/\___|_|  \___|\___|_| |_|
      |___/                                                
Permissions-Policy: fullscreen

The HTTP  Permissions-Policy header  fullscreen directive controls
whether the current document is allowed to use
 Element.requestFullscreen() .

By default, top-level documents and their same-origin child frames can
request and enter fullscreen mode. This directive allows or prevents
cross-origin frames from using fullscreen mode. This includes
same-origin frames.

Specifically, where a defined policy blocks use of this feature,
 requestFullscreen() calls will return a  Promise that rejects with a
 TypeError .

Note: If both this directive (i.e. via the  allow attribute) and the
 allowfullscreen attribute are present on an  <iframe> element, this
directive takes precedence.

Syntax

http

    Permissions-Policy: fullscreen=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  fullscreen is  self .

Examples

General example

SecureCorp Inc. wants to disable the Fullscreen API within all browsing
contexts except for its own origin and those whose origin is
 https://example.com . It can do so by delivering the following HTTP
response header to define a Permissions Policy:

http

    Permissions-Policy: fullscreen=(self "https://example.com")

With an <iframe> element

FastCorp Inc. wants to disable  fullscreen for all cross-origin child
frames, except for a specific  <iframe> . It can do so by delivering the
following HTTP response header to define a Permissions Policy:

http

    Permissions-Policy: fullscreen=(self)

Then include an allow attribute on the  <iframe> element:

html

    <iframe src="https://other.com/videoplayer" allow="fullscreen"></iframe>

iframe attributes can selectively enable features in certain frames, and
not in others, even if those frames contain documents from the same
origin.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fullscreen API Standard
  # permissions-policy-integration

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: gamepad #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
                                                           _ 
  ___ _   _ _    __ _  __ _ _ __ ___   ___ _ __   __ _  __| |
 / __| | | (_)  / _` |/ _` | '_ ` _ \ / _ \ '_ \ / _` |/ _` |
| (__| |_| |_  | (_| | (_| | | | | | |  __/ |_) | (_| | (_| |
 \___|\__, (_)  \__, |\__,_|_| |_| |_|\___| .__/ \__,_|\__,_|
      |___/     |___/                     |_|                
Permissions-Policy: gamepad

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  gamepad directive controls whether
the current document is allowed to use the Gamepad API .

Specifically, where a defined policy blocks use of this feature, calls
to  Navigator.getGamepads() will throw a  SecurityError  DOMException .
In addition, the  gamepadconnected and  gamepaddisconnected events will
not fire.

Syntax

http

    Permissions-Policy: gamepad=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  gamepad is  self .

Examples

General example

SecureCorp Inc. wants to disable the Gamepad API within all browsing
contexts except for its own origin and those whose origin is
 https://example.com . It can do so by delivering the following HTTP
response header to define a Permissions Policy:

http

    Permissions-Policy: gamepad=(self "https://example.com")

With an <iframe> element

FastCorp Inc. wants to disable  gamepad for all cross-origin child
frames, except for a specific  <iframe> . It can do so by delivering the
following HTTP response header to define a Permissions Policy:

http

    Permissions-Policy: gamepad=(self)

Then include an allow attribute on the  <iframe> element:

html

    <iframe src="https://other.com/game" allow="gamepad"></iframe>

iframe attributes can selectively enable features in certain frames, and
not in others, even if those frames contain documents from the same
origin.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Gamepad
  # permission-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: geolocation #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
                                 _                 _   _             
  ___ _   _ _    __ _  ___  ___ | | ___   ___ __ _| |_(_) ___  _ __  
 / __| | | (_)  / _` |/ _ \/ _ \| |/ _ \ / __/ _` | __| |/ _ \| '_ \ 
| (__| |_| |_  | (_| |  __/ (_) | | (_) | (_| (_| | |_| | (_) | | | |
 \___|\__, (_)  \__, |\___|\___/|_|\___/ \___\__,_|\__|_|\___/|_| |_|
      |___/     |___/                                                
Permissions-Policy: geolocation

The HTTP  Permissions-Policy header  geolocation directive controls
whether the current document is allowed to use the  Geolocation
Interface.

Specifically, where a defined policy blocks use of this feature, calls
to  getCurrentPosition() and  watchPosition() will cause those
functions' callbacks to be invoked with a  GeolocationPositionError code
of  PERMISSION_DENIED .

By default, the Geolocation API can be used within top-level documents
and their same-origin child frames. This directive allows or prevents
cross-origin frames from accessing geolocation. This includes
same-origin frames.

Syntax

http

    Permissions-Policy: geolocation=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  geolocation is  self .

Examples

General example

SecureCorp Inc. wants to disable the Geolocation API within all browsing
contexts except for its own origin and those whose origin is
 https://example.com . It can do so by delivering the following HTTP
response header to define a Permissions Policy:

http

    Permissions-Policy: geolocation=(self "https://example.com")

With an <iframe> element

FastCorp Inc. wants to disable  geolocation for all cross-origin child
frames, except for a specific  <iframe> . It can do so by delivering the
following HTTP response header to define a Permissions Policy:

http

    Permissions-Policy: geolocation=(self)

Then include an allow attribute on the  <iframe> element:

html

    <iframe src="https://other.com/map" allow="geolocation"></iframe>

Interestingly,  allow attributes can selectively enable features in
certain frames, and not in others, even if those frames contain
documents from the same origin.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Geolocation API
  # permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: gyroscope #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
                                                               
  ___ _   _ _    __ _ _   _ _ __ ___  ___  ___ ___  _ __   ___ 
 / __| | | (_)  / _` | | | | '__/ _ \/ __|/ __/ _ \| '_ \ / _ \
| (__| |_| |_  | (_| | |_| | | | (_) \__ \ (_| (_) | |_) |  __/
 \___|\__, (_)  \__, |\__, |_|  \___/|___/\___\___/| .__/ \___|
      |___/     |___/ |___/                        |_|         
Permissions-Policy: gyroscope

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  gyroscope directive controls
whether the current document is allowed to gather information about the
orientation of the device through the  Gyroscope interface.

Specifically, where a defined policy blocks use of this feature,
 Gyroscope() constructor calls will throw a  DOMException of type
 SecurityError .

Syntax

http

    Permissions-Policy: gyroscope=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  gyroscope is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Generic Sensor API
  # permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: hid #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
                _     _     _ 
  ___ _   _ _  | |__ (_) __| |
 / __| | | (_) | '_ \| |/ _` |
| (__| |_| |_  | | | | | (_| |
 \___|\__, (_) |_| |_|_|\__,_|
      |___/                   
Permissions-Policy: hid

 Limited availability 

This feature is not Baseline because it does not work in some of the
most widely-used browsers.

-   Learn more
-   See full compatibility
-   Report feedback

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  hid directive controls whether the
current document is allowed to use the WebHID API to connect to uncommon
or exotic human interface devices such as alternative keyboards or
gamepads.

Specifically, where a defined policy blocks WebHID usage, the
 Navigator.hid property will not be available.

Syntax

http

    Permissions-Policy: hid=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  hid is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  WebHID API
  # permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
            
  ___ _   _ 
 / __| | | |
| (__| |_| |
 \___|\__, |
      |___/ 
Permissions-Policy

The HTTP  Permissions-Policy header provides a mechanism to allow and
deny the use of browser features in a document or within any  <iframe>
elements in the document.

For more information, see the main Permissions Policy article.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   yes
  ----------------------- -----------------

Syntax

http

    Permissions-Policy: <directive>=<allowlist>

 <directive>

    The Permissions Policy directive to apply the  allowlist to. See
    Directives below for a list of the permitted directive names.

 <allowlist>

    An allowlist is a list of origins that takes one or more of the
    following values contained in parentheses, separated by spaces:

    -    * : The feature will be allowed in this document, and all
        nested browsing contexts (  <iframe> s) regardless of their
        origin.
    -    () (empty allowlist): The feature is disabled in top-level and
        nested browsing contexts. The equivalent for  <iframe>  allow
        attributes is  'none' .
    -    self : The feature will be allowed in this document, and in all
        nested browsing contexts (  <iframe> s) in the same origin only.
        The feature is not allowed in cross-origin documents in nested
        browsing contexts.  self can be considered shorthand for
         https://your-site.example.com . The equivalent for  <iframe>
         allow attributes is  self .
    -    src : The feature will be allowed in this  <iframe> , as long
        as the document loaded into it comes from the same origin as the
        URL in its src attribute. This value is only used in the
         <iframe>  allow attribute, and is the default  allowlist value
        in  <iframe> s.
    -    "<origin>" : The feature is allowed for specific origins (for
        example,  "https://a.example.com" ). Origins should be separated
        by spaces. Note that origins in  <iframe> allow attributes are
        not quoted.

    The values  * and  () may only be used on their own, while  self and
     src may be used in combination with one or more origins.

    Note: Directives have a default allowlist, which is always one of  *
    ,  self , or  none for the  Permissions-Policy HTTP header, and
    governs the default behavior if they are not explicitly listed in a
    policy. These are specified on the individual directive reference
    pages . For  <iframe>  allow attributes , the default behavior is
    always  src .

Where supported, you can include wildcards in Permissions Policy
origins. This means that instead of having to explicitly specify several
different subdomains in an allowlist, you can specify them all in a
single origin with a wildcard.

So instead of

http

    ("https://example.com" "https://a.example.com" "https://b.example.com" "https://c.example.com")

You can specify

http

    ("https://example.com" "https://*.example.com")

Note:  "https://*.example.com" does not match  "https://example.com" .

Directives

 accelerometer  Experimental 

    Controls whether the current document is allowed to gather
    information about the acceleration of the device through the
     Accelerometer interface.

 ambient-light-sensor  Experimental 

    Controls whether the current document is allowed to gather
    information about the amount of light in the environment around the
    device through the  AmbientLightSensor interface.

 autoplay  Experimental 

    Controls whether the current document is allowed to autoplay media
    requested through the  HTMLMediaElement interface. When this policy
    is disabled and there were no user gestures, the  Promise returned
    by  HTMLMediaElement.play() will reject with a  NotAllowedError
     DOMException . The autoplay attribute on  <audio> and  <video>
    elements will be ignored.

 battery  Experimental 

    Controls whether the use of the Battery Status API is allowed. When
    this policy is disabled, the  Promise returned by
     Navigator.getBattery() will reject with a  NotAllowedError
     DOMException .

 camera

    Controls whether the current document is allowed to use video input
    devices. When this policy is disabled, the  Promise returned by
     getUserMedia() will reject with a  NotAllowedError  DOMException .

 display-capture

    Controls whether or not the current document is permitted to use the
     getDisplayMedia() method to capture screen contents. When this
    policy is disabled, the promise returned by  getDisplayMedia() will
    reject with a  NotAllowedError  DOMException if permission is not
    obtained to capture the display's contents.

 document-domain  Experimental 

    Controls whether the current document is allowed to set
     document.domain . When this policy is disabled, attempting to set
     document.domain will fail and cause a  SecurityError  DOMException
    to be thrown.

 encrypted-media  Experimental 

    Controls whether the current document is allowed to use the
    Encrypted Media Extensions API (EME). When this policy is disabled,
    the  Promise returned by  Navigator.requestMediaKeySystemAccess()
    will reject with a  SecurityError  DOMException .

 execution-while-not-rendered  Experimental 

    Controls whether tasks should execute in frames while they're not
    being rendered (e.g. if an iframe is  hidden or has  display: none
    set).

 execution-while-out-of-viewport  Experimental 

    Controls whether tasks should execute in frames while they're
    outside of the visible viewport.

 fullscreen

    Controls whether the current document is allowed to use
     Element.requestFullscreen() . When this policy is disabled, the
    returned  Promise rejects with a  TypeError .

 gamepad  Experimental 

    Controls whether the current document is allowed to use the Gamepad
    API . When this policy is disabled, calls to
     Navigator.getGamepads() will throw a  SecurityError  DOMException ,
    and the  gamepadconnected and  gamepaddisconnected events will not
    fire.

 geolocation

    Controls whether the current document is allowed to use the
     Geolocation Interface. When this policy is disabled, calls to
     getCurrentPosition() and  watchPosition() will cause those
    functions' callbacks to be invoked with a  GeolocationPositionError
    code of  PERMISSION_DENIED .

 gyroscope  Experimental 

    Controls whether the current document is allowed to gather
    information about the orientation of the device through the
     Gyroscope interface.

 hid  Experimental 

    Controls whether the current document is allowed to use the WebHID
    API to connect to uncommon or exotic human interface devices such as
    alternative keyboards or gamepads.

 identity-credentials-get  Experimental 

    Controls whether the current document is allowed to use the
    Federated Credential Management API (FedCM) , and more specifically
    the  navigator.credentials.get() method with an  identity option.
    Where this policy forbids use of the API, the  Promise returned by
    the  get() call will reject with a  NotAllowedError  DOMException .

 idle-detection  Experimental 

    Controls whether the current document is allowed to use the Idle
    Detection API to detect when users are interacting with their
    devices, for example to report "available"/"away" status in chat
    applications.

 local-fonts  Experimental 

    Controls whether the current document is allowed to gather data on
    the user's locally-installed fonts via the  Window.queryLocalFonts()
    method (see also the Local Font Access API ).

 magnetometer  Experimental 

    Controls whether the current document is allowed to gather
    information about the orientation of the device through the
     Magnetometer interface.

 microphone

    Controls whether the current document is allowed to use audio input
    devices. When this policy is disabled, the  Promise returned by
     MediaDevices.getUserMedia() will reject with a  NotAllowedError
     DOMException .

 midi  Experimental 

    Controls whether the current document is allowed to use the Web MIDI
    API . When this policy is disabled, the  Promise returned by
     Navigator.requestMIDIAccess() will reject with a  SecurityError
     DOMException .

 otp-credentials  Experimental 

    Controls whether the current document is allowed to use the WebOTP
    API to request a one-time password (OTP) from a specially-formatted
    SMS message sent by the app's server, i.e., via
     navigator.credentials.get({otp: ..., ...}) .

 payment  Experimental 

    Controls whether the current document is allowed to use the Payment
    Request API . When this policy is enabled, the  PaymentRequest()
    constructor will throw a  SecurityError  DOMException .

 picture-in-picture  Experimental 

    Controls whether the current document is allowed to play a video in
    a Picture-in-Picture mode via the corresponding API.

 publickey-credentials-create  Experimental 

    Controls whether the current document is allowed to use the Web
    Authentication API to create new asymmetric key credentials, i.e.,
    via  navigator.credentials.create({publicKey: ..., ...}) .

 publickey-credentials-get

    Controls whether the current document is allowed to use the Web
    Authentication API to retrieve already stored public-key
    credentials, i.e., via
     navigator.credentials.get({publicKey: ..., ...}) .

 screen-wake-lock  Experimental 

    Controls whether the current document is allowed to use Screen Wake
    Lock API to indicate that device should not turn off or dim the
    screen.

 serial  Experimental 

    Controls whether the current document is allowed to use the Web
    Serial API to communicate with serial devices, either directly
    connected via a serial port, or via USB or Bluetooth devices
    emulating a serial port.

 speaker-selection  Experimental 

    Controls whether the current document is allowed to use the Audio
    Output Devices API to list and select speakers.

 storage-access  Experimental 

    Controls whether a document loaded in a third-party context (i.e.
    embedded in an  <iframe> ) is allowed to use the Storage Access API
    to request access to unpartitioned cookies.

 usb  Experimental 

    Controls whether the current document is allowed to use the WebUSB
    API .

 web-share

    Controls whether or not the current document is allowed to use the
     Navigator.share() of Web Share API to share text, links, images,
    and other content to arbitrary destinations of user's choice, e.g.
    mobile apps.

 window-management  Experimental 

    Controls whether or not the current document is allowed to use the
    Window Management API to manage windows on multiple displays.

 xr-spatial-tracking  Experimental 

    Controls whether or not the current document is allowed to use the
    WebXR Device API to interact with a WebXR session.

Examples

Basic usage

Permissions-Policy header

To allow all origins access to geolocation, you would do this:

http

    Permissions-Policy: geolocation=*

Or to allow access to a subset of origins, you'd do this:

http

    Permissions-Policy: geolocation=(self "https://a.example.com" "https://b.example.com")

Several features can be controlled at the same time by sending the
header with a comma-separated list of policies, or by sending a separate
header for each policy.

For example, the following are equivalent:

http

    Permissions-Policy: picture-in-picture=(), geolocation=(self https://example.com), camera=*

    Permissions-Policy: picture-in-picture=()
    Permissions-Policy: geolocation=(self https://example.com)
    Permissions-Policy: camera=*

iframes

For an  <iframe> to have a feature enabled its allowed origin must also
be in the allowlist for the parent page. Because of this inheritance
behavior , it is a good idea to specify the widest acceptable support
for a feature in the HTTP header, and then specify the subset of support
you need in each  <iframe> .

To allow all origins access to geolocation, you would do this:

html

    <iframe src="https://example.com" allow="geolocation *"></iframe>

To apply a policy to the current origin and others, you'd do this:

html

    <iframe
      src="https://example.com"
      allow="geolocation 'self' https://a.example.com https://b.example.com"></iframe>

This is important: By default, if an  <iframe> navigates to another
origin, the policy is not applied to the origin that the  <iframe>
navigates to. By listing the origin that the  <iframe> navigates to in
the  allow attribute, the Permissions Policy that was applied to the
original  <iframe> will be applied to the origin the  <iframe> navigates
to.

Several features can be controlled at the same time by including a
semi-colon-separated list of policy directives inside the  allow
attribute.

html

    <iframe
      src="https://example.com"
      allow="geolocation 'self' https://a.example.com https://b.example.com; fullscreen 'none'"></iframe>

It is worth giving the  src value a special mention. We mentioned above
that using this allowlist value will mean that the associated feature
will be allowed in this  <iframe> , as long as the document loaded into
it comes from the same origin as the URL in its src attribute. This
value is the default  allowlist value for features listed in  allow , so
the following are equivalent:

html

    <iframe src="https://example.com" allow="geolocation 'src'">
      <iframe src="https://example.com" allow="geolocation"></iframe
    ></iframe>

Denying access to powerful features

SecureCorp Inc. wants to disable Microphone (for example
 MediaDevices.getUserMedia() ) and  Geolocation APIs in its application.
It can do so using the following response header:

http

    Permissions-Policy: microphone=(), geolocation=()

By specifying  () for the origin list, the specified features will be
disabled for all browsing contexts (this includes all  <iframe> s),
regardless of their origin.

Combining HTTP header and  <iframe> policies

For example, let's say that we wanted to enable geolocation usage on our
own origin, and in embedded content coming from our trusted ad network.
We could set up the page-wide Permissions Policy like this:

http

    Permissions-Policy: geolocation=(self https://trusted-ad-network.com)

Over in our ad  <iframe> s, we could set access to the
 https://trusted-ad-network.com origin like this:

html

    <iframe src="https://trusted-ad-network.com" allow="geolocation"></iframe>

If a different origin ended up getting loaded into  <iframe> , it would
not have access to geolocation:

html

    <iframe src="https://rogue-origin-example.com" allow="geolocation"></iframe>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Permissions Policy
  # permissions-policy-http-header-field

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Permissions Policy
-    Document.featurePolicy and  FeaturePolicy
-    Content-Security-Policy
-    Referrer-Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 26, 2023 by MDN contributors .
# Permissions-Policy: identity-credentials-get #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
 _     _            _   _ _                                 _            _   _ 
(_) __| | ___ _ __ | |_(_) |_ _   _        ___ _ __ ___  __| | ___ _ __ | |_(_)
| |/ _` |/ _ \ '_ \| __| | __| | | |_____ / __| '__/ _ \/ _` |/ _ \ '_ \| __| |
| | (_| |  __/ | | | |_| | |_| |_| |_____| (__| | |  __/ (_| |  __/ | | | |_| |
|_|\__,_|\___|_| |_|\__|_|\__|\__, |      \___|_|  \___|\__,_|\___|_| |_|\__|_|
                              |___/                                            
       _                      _   
  __ _| |___        __ _  ___| |_ 
 / _` | / __|_____ / _` |/ _ \ __|
| (_| | \__ \_____| (_| |  __/ |_ 
 \__,_|_|___/      \__, |\___|\__|
                   |___/          
Permissions-Policy: identity-credentials-get

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  identity-credentials-get directive
controls whether the current document is allowed to use the Federated
Credential Management API (FedCM) , and more specifically the
 navigator.credentials.get() method with an  identity option.

Where this policy forbids use of the API, the  Promise returned by the
 get() call will reject with a  NotAllowedError  DOMException .

Syntax

http

    Permissions-Policy: identity-credentials-get=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  identity-credentials-get is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Federated Credential Management API
  # permissions-policy-integration

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Federated Credential Management API (FedCM)
-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: idle-detection #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
                _     _ _                _      _            _   _             
  ___ _   _ _  (_) __| | | ___        __| | ___| |_ ___  ___| |_(_) ___  _ __  
 / __| | | (_) | |/ _` | |/ _ \_____ / _` |/ _ \ __/ _ \/ __| __| |/ _ \| '_ \ 
| (__| |_| |_  | | (_| | |  __/_____| (_| |  __/ ||  __/ (__| |_| | (_) | | | |
 \___|\__, (_) |_|\__,_|_|\___|      \__,_|\___|\__\___|\___|\__|_|\___/|_| |_|
      |___/                                                                    
Permissions-Policy: idle-detection

 Limited availability 

This feature is not Baseline because it does not work in some of the
most widely-used browsers.

-   Learn more
-   See full compatibility
-   Report feedback

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  idle-detection directive controls
whether the current document is allowed to use the Idle Detection API to
detect when users are interacting with their devices, for example to
report "available"/"away" status in chat applications.

Specifically, where a defined policy blocks use of this feature,
 IdleDetector.start() calls will return a  Promise that rejects with a
 DOMException of type  NotAllowedError .

Syntax

http

    Permissions-Policy: idle-detection=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  idle-detection is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Idle Detection API
  # api-permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: local-fonts #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
                _                 _        __             _       
  ___ _   _ _  | | ___   ___ __ _| |      / _| ___  _ __ | |_ ___ 
 / __| | | (_) | |/ _ \ / __/ _` | |_____| |_ / _ \| '_ \| __/ __|
| (__| |_| |_  | | (_) | (_| (_| | |_____|  _| (_) | | | | |_\__ \
 \___|\__, (_) |_|\___/ \___\__,_|_|     |_|  \___/|_| |_|\__|___/
      |___/                                                       
Permissions-Policy: local-fonts

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  local-fonts directive controls
whether the current document is allowed to gather data on the user's
locally-installed fonts via the  Window.queryLocalFonts() method.

Specifically, where a defined policy blocks use of this feature,
 Promise s returned by  Window.queryLocalFonts() will reject with a
 DOMException of type  SecurityError .

Syntax

http

    Permissions-Policy: local-fonts=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  local-fonts is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Local Font Access
  # permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Local Font Access API
-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: magnetometer #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
                                  _                       _            
 _ __ ___   __ _  __ _ _ __   ___| |_ ___  _ __ ___   ___| |_ ___ _ __ 
| '_ ` _ \ / _` |/ _` | '_ \ / _ \ __/ _ \| '_ ` _ \ / _ \ __/ _ \ '__|
| | | | | | (_| | (_| | | | |  __/ || (_) | | | | | |  __/ ||  __/ |   
|_| |_| |_|\__,_|\__, |_| |_|\___|\__\___/|_| |_| |_|\___|\__\___|_|   
                 |___/                                                 
Permissions-Policy: magnetometer

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  magnetometer directive controls
whether the current document is allowed to gather information about the
orientation of the device through the  Magnetometer interface.

Specifically, where a defined policy blocks use of this feature,
 Magnetometer() constructor calls will throw a  DOMException of type
 SecurityError .

Syntax

http

    Permissions-Policy: magnetometer=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  magnetometer is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Generic Sensor API
  # permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: microphone #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
                          _                      _                      
  ___ _   _ _   _ __ ___ (_) ___ _ __ ___  _ __ | |__   ___  _ __   ___ 
 / __| | | (_) | '_ ` _ \| |/ __| '__/ _ \| '_ \| '_ \ / _ \| '_ \ / _ \
| (__| |_| |_  | | | | | | | (__| | | (_) | |_) | | | | (_) | | | |  __/
 \___|\__, (_) |_| |_| |_|_|\___|_|  \___/| .__/|_| |_|\___/|_| |_|\___|
      |___/                               |_|                           
Permissions-Policy: microphone

The HTTP  Permissions-Policy header  microphone directive controls
whether the current document is allowed to use audio input devices.

Specifically, where a defined policy blocks use of this feature,
 MediaDevices.getUserMedia() calls will return a  Promise that rejects
with a  NotAllowedError  DOMException .

Syntax

http

    Permissions-Policy: microphone=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  microphone is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Media Capture and Streams
  # permissions-policy-integration

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: midi #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
                          _     _ _ 
  ___ _   _ _   _ __ ___ (_) __| (_)
 / __| | | (_) | '_ ` _ \| |/ _` | |
| (__| |_| |_  | | | | | | | (_| | |
 \___|\__, (_) |_| |_| |_|_|\__,_|_|
      |___/                         
Permissions-Policy: midi

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  midi directive controls whether the
current document is allowed to use the Web MIDI API .

Specifically, where a defined policy blocks use of this feature,
 Navigator.requestMIDIAccess() calls will return a  Promise that rejects
with a  DOMException of type  SecurityError .

Syntax

http

    Permissions-Policy: midi=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  midi is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Web MIDI API
  # permissions-policy-integration

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: otp-credentials #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
       _                                 _            _   _       _     
  ___ | |_ _ __         ___ _ __ ___  __| | ___ _ __ | |_(_) __ _| |___ 
 / _ \| __| '_ \ _____ / __| '__/ _ \/ _` |/ _ \ '_ \| __| |/ _` | / __|
| (_) | |_| |_) |_____| (__| | |  __/ (_| |  __/ | | | |_| | (_| | \__ \
 \___/ \__| .__/       \___|_|  \___|\__,_|\___|_| |_|\__|_|\__,_|_|___/
          |_|                                                           
Permissions-Policy: otp-credentials

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  otp-credentials directive controls
whether the current document is allowed to use the WebOTP API to request
a one-time password (OTP) from a specially-formatted SMS message sent by
the app's server, i.e., via  navigator.credentials.get({otp: ..., ...})
.

Specifically, where a defined policy blocks the use of this feature, the
 Promise returned by  navigator.credentials.get({otp}) will reject with
a  SecurityError  DOMException .

Syntax

http

    Permissions-Policy: otp-credentials=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  otp-credentials is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  WebOTP API
  # sctn-permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy
-   WebOTP API
-    OTPCredential interface

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 24, 2023 by MDN contributors .
# Permissions-Policy: payment #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
                                                       _   
  ___ _   _ _   _ __   __ _ _   _ _ __ ___   ___ _ __ | |_ 
 / __| | | (_) | '_ \ / _` | | | | '_ ` _ \ / _ \ '_ \| __|
| (__| |_| |_  | |_) | (_| | |_| | | | | | |  __/ | | | |_ 
 \___|\__, (_) | .__/ \__,_|\__, |_| |_| |_|\___|_| |_|\__|
      |___/    |_|          |___/                          
Permissions-Policy: payment

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header field's  payment directive controls
whether the current document is allowed to use the Payment Request API .

Specifically, where a defined policy blocks use of this feature,
 PaymentRequest() constructor calls will throw a  DOMException of type
 SecurityError .

Syntax

http

    Permissions-Policy: payment=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  payment is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Payment Request API 1.1
  # permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header field
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: picture-in-picture #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
       _      _                        _                   _      _         
 _ __ (_) ___| |_ _   _ _ __ ___      (_)_ __        _ __ (_) ___| |_ _   _ 
| '_ \| |/ __| __| | | | '__/ _ \_____| | '_ \ _____| '_ \| |/ __| __| | | |
| |_) | | (__| |_| |_| | | |  __/_____| | | | |_____| |_) | | (__| |_| |_| |
| .__/|_|\___|\__|\__,_|_|  \___|     |_|_| |_|     | .__/|_|\___|\__|\__,_|
|_|                                                 |_|                     
          
 _ __ ___ 
| '__/ _ \
| | |  __/
|_|  \___|
          
Permissions-Policy: picture-in-picture

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  picture-in-picture directive
controls whether the current document is allowed to play a video in a
Picture-in-Picture mode.

Specifically, where a defined policy blocks use of this feature,
 HTMLVideoElement.requestPictureInPicture() calls will throw a
 DOMException of type  SecurityError .

Syntax

http

    Permissions-Policy: picture-in-picture=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  picture-in-picture is  * .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Picture-in-Picture
  # permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: publickey-credentials-create #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
             _     _ _      _                                      _      
 _ __  _   _| |__ | (_) ___| | _____ _   _        ___ _ __ ___  __| | ___ 
| '_ \| | | | '_ \| | |/ __| |/ / _ \ | | |_____ / __| '__/ _ \/ _` |/ _ \
| |_) | |_| | |_) | | | (__|   <  __/ |_| |_____| (__| | |  __/ (_| |  __/
| .__/ \__,_|_.__/|_|_|\___|_|\_\___|\__, |      \___|_|  \___|\__,_|\___|
|_|                                  |___/                                
       _   _       _                               _       
 _ __ | |_(_) __ _| |___        ___ _ __ ___  __ _| |_ ___ 
| '_ \| __| |/ _` | / __|_____ / __| '__/ _ \/ _` | __/ _ \
| | | | |_| | (_| | \__ \_____| (__| | |  __/ (_| | ||  __/
|_| |_|\__|_|\__,_|_|___/      \___|_|  \___|\__,_|\__\___|
                                                           
Permissions-Policy: publickey-credentials-create

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  publickey-credentials-create
directive controls whether the current document is allowed to use the
Web Authentication API to create new WebAuthn credentials, i.e., via
 navigator.credentials.create({publicKey}) .

Specifically, where a defined policy blocks use of this feature, the
 Promise returned by  navigator.credentials.create({publicKey}) will
reject with a  SecurityError  DOMException .

Syntax

http

    Permissions-Policy: publickey-credentials-create=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  publickey-credentials-create is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Web Authentication: An API for accessing Public Key Credentials - Level
  3
  # sctn-permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy
-   Web Authentication API
-    PublicKeyCredential interface

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 19, 2023 by MDN contributors .
# Permissions-Policy: publickey-credentials-get #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
             _     _ _      _                                      _      
 _ __  _   _| |__ | (_) ___| | _____ _   _        ___ _ __ ___  __| | ___ 
| '_ \| | | | '_ \| | |/ __| |/ / _ \ | | |_____ / __| '__/ _ \/ _` |/ _ \
| |_) | |_| | |_) | | | (__|   <  __/ |_| |_____| (__| | |  __/ (_| |  __/
| .__/ \__,_|_.__/|_|_|\___|_|\_\___|\__, |      \___|_|  \___|\__,_|\___|
|_|                                  |___/                                
       _   _       _                      _   
 _ __ | |_(_) __ _| |___        __ _  ___| |_ 
| '_ \| __| |/ _` | / __|_____ / _` |/ _ \ __|
| | | | |_| | (_| | \__ \_____| (_| |  __/ |_ 
|_| |_|\__|_|\__,_|_|___/      \__, |\___|\__|
                               |___/          
Permissions-Policy: publickey-credentials-get

The HTTP  Permissions-Policy header  publickey-credentials-get directive
controls whether the current document is allowed to access the Web
Authentication API to retrieve public-key credentials, i.e., via
 navigator.credentials.get({publicKey}) .

Specifically, where a defined policy blocks the use of this feature, the
 Promise returned by  navigator.credentials.get({publicKey}) will reject
with a  SecurityError  DOMException .

Syntax

http

    Permissions-Policy: publickey-credentials-get=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  publickey-credentials-get is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Web Authentication: An API for accessing Public Key Credentials - Level
  3
  # sctn-permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy
-   Web Authentication API
-    PublicKeyCredential interface

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Nov 10, 2023 by MDN contributors .
# Permissions-Policy: screen-wake-lock #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
                                                 _              _            
 ___  ___ _ __ ___  ___ _ __      __      ____ _| | _____      | | ___   ___ 
/ __|/ __| '__/ _ \/ _ \ '_ \ ____\ \ /\ / / _` | |/ / _ \_____| |/ _ \ / __|
\__ \ (__| | |  __/  __/ | | |_____\ V  V / (_| |   <  __/_____| | (_) | (__ 
|___/\___|_|  \___|\___|_| |_|      \_/\_/ \__,_|_|\_\___|     |_|\___/ \___|
                                                                             
 _    
| | __
| |/ /
|   < 
|_|\_\
      
Permissions-Policy: screen-wake-lock

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  screen-wake-lock directive controls
whether the current document is allowed to use Screen Wake Lock API to
indicate that the device should not dim or turn off the screen.

Specifically, where a defined policy blocks use of this feature,
 WakeLock.request() calls will return a  Promise that rejects with a
 DOMException of type  NotAllowedError .

Syntax

http

    Permissions-Policy: screen-wake-lock=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  screen-wake-lock is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Screen Wake Lock API
  # policy-control

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Screen Wake Lock API
-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: serial #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
                              _       _ 
  ___ _   _ _   ___  ___ _ __(_) __ _| |
 / __| | | (_) / __|/ _ \ '__| |/ _` | |
| (__| |_| |_  \__ \  __/ |  | | (_| | |
 \___|\__, (_) |___/\___|_|  |_|\__,_|_|
      |___/                             
Permissions-Policy: serial

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  serial directive controls whether
the current document is allowed to use the Web Serial API to communicate
with serial devices, either directly connected via a serial port, or via
USB or Bluetooth devices emulating a serial port.

Specifically, where a defined policy blocks use of this feature,
 Serial.requestPort() and  Serial.getPorts() calls will return a
 Promise that rejects with a  DOMException of type  SecurityError .

Syntax

http

    Permissions-Policy: serial=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  serial is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Web Serial API
  # permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: speaker-selection #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
                      _                           _           _   _       
 ___ _ __   ___  __ _| | _____ _ __      ___  ___| | ___  ___| |_(_) ___  
/ __| '_ \ / _ \/ _` | |/ / _ \ '__|____/ __|/ _ \ |/ _ \/ __| __| |/ _ \ 
\__ \ |_) |  __/ (_| |   <  __/ | |_____\__ \  __/ |  __/ (__| |_| | (_) |
|___/ .__/ \___|\__,_|_|\_\___|_|       |___/\___|_|\___|\___|\__|_|\___/ 
    |_|                                                                   
       
 _ __  
| '_ \ 
| | | |
|_| |_|
       
Permissions-Policy: speaker-selection

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  speaker-selection directive
controls whether the current document is allowed to enumerate and select
audio output devices (speakers, headphones, and so on).

Specifically, where a defined policy blocks use of this feature:

-    MediaDevices.enumerateDevices() won't return devices of type audio
    output .
-    MediaDevices.selectAudioOutput() won't display the popup for
    selecting an audio output, and the returned  Promise will reject
    with a  DOMException of type  NotAllowedError .
-    HTMLMediaElement.setSinkId() and  AudioContext.setSinkId() will
    throw a  NotAllowedError if called for an audio output.

Syntax

http

    Permissions-Policy: speaker-selection=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  speaker-selection is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Audio Output Devices API
  # permissions-policy-integration

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: storage-access #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
     _                                                               
 ___| |_ ___  _ __ __ _  __ _  ___        __ _  ___ ___ ___  ___ ___ 
/ __| __/ _ \| '__/ _` |/ _` |/ _ \_____ / _` |/ __/ __/ _ \/ __/ __|
\__ \ || (_) | | | (_| | (_| |  __/_____| (_| | (_| (_|  __/\__ \__ \
|___/\__\___/|_|  \__,_|\__, |\___|      \__,_|\___\___\___||___/___/
                        |___/                                        
Permissions-Policy: storage-access

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  storage-access directive controls
whether a document loaded in a third-party context (i.e. embedded in an
 <iframe> ) is allowed to use the Storage Access API to request access
to unpartitioned cookies.

This is relevant to user agents that by default block access to
unpartitioned cookies by sites loaded in a third-party context to
improve privacy (for example, to prevent tracking).

Specifically, where a defined policy blocks use of this feature,
 Document.requestStorageAccess() calls will return a  Promise that
rejects with a  DOMException of type  NotAllowedError .

Syntax

http

    Permissions-Policy: storage-access=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  storage-access is  * .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  The Storage Access API
  # permissions-policy-integration

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Storage Access API
-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 16, 2023 by MDN contributors .
# Permissions-Policy: usb #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
                          _     
  ___ _   _ _   _   _ ___| |__  
 / __| | | (_) | | | / __| '_ \ 
| (__| |_| |_  | |_| \__ \ |_) |
 \___|\__, (_)  \__,_|___/_.__/ 
      |___/                     
Permissions-Policy: usb

 Limited availability 

This feature is not Baseline because it does not work in some of the
most widely-used browsers.

-   Learn more
-   See full compatibility
-   Report feedback

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  usb directive controls whether the
current document is allowed to use the WebUSB API .

Specifically, where a defined policy blocks WebHID usage, the
 Navigator.usb property will not be available.

Syntax

http

    Permissions-Policy: usb=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  usb is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  WebUSB API
  # permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: web-share #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
                             _               _                    
  ___ _   _ _  __      _____| |__        ___| |__   __ _ _ __ ___ 
 / __| | | (_) \ \ /\ / / _ \ '_ \ _____/ __| '_ \ / _` | '__/ _ \
| (__| |_| |_   \ V  V /  __/ |_) |_____\__ \ | | | (_| | | |  __/
 \___|\__, (_)   \_/\_/ \___|_.__/      |___/_| |_|\__,_|_|  \___|
      |___/                                                       
Permissions-Policy: web-share

The HTTP  Permissions-Policy header  web-share directive controls
whether the current document is allowed to use the  Navigator.share()
method of the Web Share API to share text, links, images, and other
content to arbitrary destinations of the user's choice.

Specifically, where a defined policy blocks usage of this feature,
 Navigator.share() calls will return a  Promise that rejects with a
 DOMException of type  NotAllowedError .

Syntax

http

    Permissions-Policy: web-share=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  web-share is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Web Share API
  # permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Permissions-Policy: window-management #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
          _           _                                                      
__      _(_)_ __   __| | _____      __     _ __ ___   __ _ _ __   __ _  __ _ 
\ \ /\ / / | '_ \ / _` |/ _ \ \ /\ / /____| '_ ` _ \ / _` | '_ \ / _` |/ _` |
 \ V  V /| | | | | (_| | (_) \ V  V /_____| | | | | | (_| | | | | (_| | (_| |
  \_/\_/ |_|_| |_|\__,_|\___/ \_/\_/      |_| |_| |_|\__,_|_| |_|\__,_|\__, |
                                                                       |___/ 
                           _   
  ___ _ __ ___   ___ _ __ | |_ 
 / _ \ '_ ` _ \ / _ \ '_ \| __|
|  __/ | | | | |  __/ | | | |_ 
 \___|_| |_| |_|\___|_| |_|\__|
                               
Permissions-Policy: window-management

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  window-management directive
controls whether or not the current document is allowed to use the
Window Management API to manage windows on multiple displays.

Where this policy forbids use of the API:

-   The  Promise returned by the  Window.getScreenDetails() method will
    reject with a  NotAllowedError exception.
-   The  Window.screen.isExtended property will always return  false .

Syntax

http

    Permissions-Policy: window-management=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  window-management is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Window Management
  # api-permission-policy-integration

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Window Management API
-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Nov 2, 2023 by MDN contributors .
# Permissions-Policy: xr-spatial-tracking #
 ____                     _         _                       ____       _ _ 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___      |  _ \ ___ | (_)
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|_____| |_) / _ \| | |
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \_____|  __/ (_) | | |
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/     |_|   \___/|_|_|
                                                                           
              
  ___ _   _ _ 
 / __| | | (_)
| (__| |_| |_ 
 \___|\__, (_)
      |___/   
                                _   _       _       _                  _    _ 
__  ___ __      ___ _ __   __ _| |_(_) __ _| |     | |_ _ __ __ _  ___| | _(_)
\ \/ / '__|____/ __| '_ \ / _` | __| |/ _` | |_____| __| '__/ _` |/ __| |/ / |
 >  <| | |_____\__ \ |_) | (_| | |_| | (_| | |_____| |_| | | (_| | (__|   <| |
/_/\_\_|       |___/ .__/ \__,_|\__|_|\__,_|_|      \__|_|  \__,_|\___|_|\_\_|
                   |_|                                                        
             
 _ __   __ _ 
| '_ \ / _` |
| | | | (_| |
|_| |_|\__, |
       |___/ 
Permissions-Policy: xr-spatial-tracking

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  Permissions-Policy header  xr-spatial-tracking directive
controls whether the current document is allowed to use the WebXR Device
API .

Specifically, where a defined policy blocks usage of this feature:

-    navigator.xr.isSessionSupported() and
     navigator.xr.requestSession() calls will return a  Promise that
    rejects with a  DOMException of type  SecurityError .
-    devicechange events are not fired on the  navigator.xr object.

Syntax

http

    Permissions-Policy: xr-spatial-tracking=<allowlist>;

 <allowlist>

    A list of origins for which permission is granted to use the
    feature. See  Permissions-Policy > Syntax for more details.

Default policy

The default allowlist for  xr-spatial-tracking is  self .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  WebXR Device API
  # permissions-policy

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   WebXR Device API
-    navigator.xr.requestSession() , and
     navigator.xr.isSessionSupported() and  devicechange event on
     navigator.xr
-    Permissions-Policy header
-   Permissions Policy

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Pragma #
 ____                                  
|  _ \ _ __ __ _  __ _ _ __ ___   __ _ 
| |_) | '__/ _` |/ _` | '_ ` _ \ / _` |
|  __/| | | (_| | (_| | | | | | | (_| |
|_|   |_|  \__,_|\__, |_| |_| |_|\__,_|
                 |___/                 
Pragma

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  Pragma HTTP/1.0 general header is an implementation-specific header
that may have various effects along the request-response chain. This
header serves for backwards compatibility with the HTTP/1.0 caches that
do not have a  Cache-Control HTTP/1.1 header.

Note:  Pragma is not specified for HTTP responses and is therefore not a
reliable replacement for the general HTTP/1.1  Cache-Control header,
although its behavior is the same as  Cache-Control: no-cache if the
 Cache-Control header field is omitted in a request. Use  Pragma only
for backwards compatibility with HTTP/1.0 clients.

  --------------------------------- ---------------------------------------------------------------------------------------------------------
  Header type                       Request header , Response header (response behavior is not specified and thus implementation-specific).
  Forbidden header name             no
  CORS-safelisted response header   yes
  --------------------------------- ---------------------------------------------------------------------------------------------------------

Syntax

http

    Pragma: no-cache

Directives

no-cache

    Same as  Cache-Control: no-cache . Forces caches to submit the
    request to the origin server for validation before a cached copy is
    released.

Examples

http

    Pragma: no-cache

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Caching
  # field.pragma

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Cache-Control
-    Expires

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Proxy-Authenticate #
 ____                              _         _   _                _   _      
|  _ \ _ __ _____  ___   _        / \  _   _| |_| |__   ___ _ __ | |_(_) ___ 
| |_) | '__/ _ \ \/ / | | |_____ / _ \| | | | __| '_ \ / _ \ '_ \| __| |/ __|
|  __/| | | (_) >  <| |_| |_____/ ___ \ |_| | |_| | | |  __/ | | | |_| | (__ 
|_|   |_|  \___/_/\_\\__, |    /_/   \_\__,_|\__|_| |_|\___|_| |_|\__|_|\___|
                     |___/                                                   
       _       
  __ _| |_ ___ 
 / _` | __/ _ \
| (_| | ||  __/
 \__,_|\__\___|
               
Proxy-Authenticate

The HTTP  Proxy-Authenticate response header defines the authentication
method that should be used to gain access to a resource behind a proxy
server . It authenticates the request to the proxy server, allowing it
to transmit the request further.

The  Proxy-Authenticate header is sent along with a  407
 Proxy Authentication Required .

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Proxy-Authenticate: <type> realm=<realm>

Directives

<type>

    Authentication type . A common type is "Basic" . IANA maintains a
    list of authentication schemes .

realm=<realm>

    A description of the protected area, the realm. If no realm is
    specified, clients often display a formatted host name instead.

Examples

http

    Proxy-Authenticate: Basic

    Proxy-Authenticate: Basic realm="Access to the internal site"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.proxy-authenticate

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP authentication
-    Authorization
-    Proxy-Authorization
-    WWW-Authenticate
-    401 ,  403 ,  407

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Proxy-Authorization #
 ____                              _         _   _                _          
|  _ \ _ __ _____  ___   _        / \  _   _| |_| |__   ___  _ __(_)______ _ 
| |_) | '__/ _ \ \/ / | | |_____ / _ \| | | | __| '_ \ / _ \| '__| |_  / _` |
|  __/| | | (_) >  <| |_| |_____/ ___ \ |_| | |_| | | | (_) | |  | |/ / (_| |
|_|   |_|  \___/_/\_\\__, |    /_/   \_\__,_|\__|_| |_|\___/|_|  |_/___\__,_|
                     |___/                                                   
 _   _             
| |_(_) ___  _ __  
| __| |/ _ \| '_ \ 
| |_| | (_) | | | |
 \__|_|\___/|_| |_|
                   
Proxy-Authorization

The HTTP  Proxy-Authorization request header contains the credentials to
authenticate a user agent to a proxy server, usually after the server
has responded with a  407  Proxy Authentication Required status and the
 Proxy-Authenticate header.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

http

    Proxy-Authorization: <type> <credentials>

Directives

<type>

    Authentication type . A common type is "Basic" . See also the IANA
    registry of Authentication schemes .

<credentials>

    The credentials are constructed like this:

    -   The username and the password are combined with a colon (
         aladdin:opensesame ).
    -   The resulting string is base64 encoded (
         YWxhZGRpbjpvcGVuc2VzYW1l ).

    Note: Base64 encoding does not mean encryption or hashing! This
    method is as secure as sending the credentials in clear text (base64
    is a reversible encoding). It is preferable to use HTTPS in
    conjunction with Basic Authentication.

Examples

http

    Proxy-Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.proxy-authorization

  -----------------------------------------------------------------------

See also

-   HTTP authentication
-    Proxy-Authenticate
-    WWW-Authenticate
-    Authorization
-    401 ,  403 ,  407

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Range #
 ____                        
|  _ \ __ _ _ __   __ _  ___ 
| |_) / _` | '_ \ / _` |/ _ \
|  _ < (_| | | | | (_| |  __/
|_| \_\__,_|_| |_|\__, |\___|
                  |___/      
Range

The  Range HTTP request header indicates the parts of a resource that
the server should return. Several parts can be requested at the same
time in one  Range header, and the server may send back these ranges in
a multipart document. If the server sends back ranges, it uses the
 206 Partial Content status code for the response. If the ranges are
invalid, the server returns the  416 Range Not Satisfiable error.

A server that doesn't support range requests may ignore the  Range
header and return the whole resource with a  200 status code. Ignoring
the  Range header is equivalent to  Accept-Ranges: none , so the
 Accept-Ranges response header is rarely used for this purpose.

Currently only  bytes units are registered which are offsets
(zero-indexed & inclusive). If the requested data has a content coding
applied, each byte range represents the encoded sequence of bytes, not
the bytes that would be obtained after decoding.

The header is a CORS-safelisted request header when the directive
specifies a single byte range.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

http

    Range: <unit>=<range-start>-
    Range: <unit>=<range-start>-<range-end>
    Range: <unit>=<range-start>-<range-end>, <range-start>-<range-end>
    Range: <unit>=<range-start>-<range-end>, <range-start>-<range-end>, <range-start>-<range-end>
    Range: <unit>=-<suffix-length>

Directives

<unit>

    The unit in which ranges are specified.

<range-start>

    An integer in the given unit indicating the start position of the
    request range.

<range-end>

    An integer in the given unit indicating the end position of the
    requested range. This value is optional and, if omitted, the end of
    the resource is used as the end of the range.

<suffix-length>

    An integer indicating the number of units at the end of the resource
    to return.

Examples

The following examples show how to make requests using the  Range header
for CORS-safelisted requests, and for requesting multiple ranges. Other
examples can be found in the HTTP range requests guide.

Single byte ranges and CORS-safelisted requests

The  Range header is a CORS-safelisted request header when the value is
a single byte range. This means that it can be used in cross-origin
requests without triggering a preflight request, which is useful for
requesting media and resuming downloads.

The following example requests the first 500 bytes of a resource:

http

    Range: bytes=0-499

To request the second 500 bytes:

http

    Range: bytes=500-999

Omitting the end position requests all remaining units of the resource,
so the last 100 bytes of a resource with a length of 1000 bytes can be
requested using:

http

    Range: bytes=900-

Alternatively, if it's unknown how large a resource is, the last  n
bytes can be requested using a suffix range of  -n :

http

    Range: bytes=-100

Requesting multiple ranges

Given a resource with a length of 10000 bytes, the following example
requests three separate ranges;  200 -  999 (800 bytes),  2000 -  2499
(500 bytes), and finally  9500- . The ranges-specifier value  9500-
omits an end position which indicates that all bytes from 9500 onward
are part of the third range (500 bytes).

http

    Range: bytes=200-999, 2000-2499, 9500-

This example requests the first 500 and last 500 bytes of the file. The
request may be rejected by the server if these ranges overlap (if the
requested resource was less than 1000 bytes long, for instance).

http

    Range: bytes=0-499, -499

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.range

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    If-Range
-    Content-Range
-    Content-Type
-    Accept-Ranges
-    206 Partial Content
-    416 Range Not Satisfiable
-   HTTP range requests guide
-   CORS-safelisted request header

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Nov 28, 2023 by MDN contributors .
# Referer #
 ____       __                    
|  _ \ ___ / _| ___ _ __ ___ _ __ 
| |_) / _ \ |_ / _ \ '__/ _ \ '__|
|  _ <  __/  _|  __/ | |  __/ |   
|_| \_\___|_|  \___|_|  \___|_|   
                                  
Referer

The  Referer HTTP request header contains the absolute or partial
address from which a resource has been requested. The  Referer header
allows a server to identify referring pages that people are visiting
from or where requested resources are being used. This data can be used
for analytics, logging, optimized caching, and more.

When you click a link, the  Referer contains the address of the page
that includes the link. When you make resource requests to another
domain, the  Referer contains the address of the page that uses the
requested resource.

The  Referer header can contain an origin , path , and querystring , and
may not contain URL fragments (i.e.  #section ) or  username:password
information. The request's referrer policy defines the data that can be
included. See  Referrer-Policy for more information and examples .

Note: The header name "referer" is actually a misspelling of the word
"referrer". See HTTP referer on Wikipedia for more details.

Warning: This header may have undesirable consequences for user security
and privacy. See Referer header: privacy and security concerns for more
information and mitigation hints.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   yes
  ----------------------- ----------------

Syntax

http

    Referer: <url>

Directives

<url>

    An absolute or partial address of the web page that makes the
    request. URL fragments (i.e.  #section ) and userinfo (i.e.
     username:password in
     https\://username:password\@example.com/foo/bar/ ) are not
    included. Origin, path, and querystring may be included, depending
    on the referrer policy .

Examples

http

    Referer: https://developer.mozilla.org/en-US/docs/Web/JavaScript
    Referer: https://example.com/page?q=123
    Referer: https://example.com/

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.referer

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP referer on Wikipedia
-   Fetch :  Request.referrerPolicy
-   The obsolete  Content-Security-Policy  referrer Deprecated
    directive.
-   Same-origin policy
-   Tighter Control Over Your Referrers – Mozilla Security Blog

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Referrer-Policy #
 ____       __                              ____       _ _            
|  _ \ ___ / _| ___ _ __ _ __ ___ _ __     |  _ \ ___ | (_) ___ _   _ 
| |_) / _ \ |_ / _ \ '__| '__/ _ \ '__|____| |_) / _ \| | |/ __| | | |
|  _ <  __/  _|  __/ |  | | |  __/ | |_____|  __/ (_) | | | (__| |_| |
|_| \_\___|_|  \___|_|  |_|  \___|_|       |_|   \___/|_|_|\___|\__, |
                                                                |___/ 
Referrer-Policy

The  Referrer-Policy HTTP header controls how much referrer information
(sent with the  Referer header) should be included with requests. Aside
from the HTTP header, you can set this policy in HTML .

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Referrer-Policy: no-referrer
    Referrer-Policy: no-referrer-when-downgrade
    Referrer-Policy: origin
    Referrer-Policy: origin-when-cross-origin
    Referrer-Policy: same-origin
    Referrer-Policy: strict-origin
    Referrer-Policy: strict-origin-when-cross-origin
    Referrer-Policy: unsafe-url

Note: The original header name  Referer is a misspelling of the word
"referrer". The  Referrer-Policy header does not share this misspelling.

Directives

 no-referrer

    The  Referer header will be omitted: sent requests do not include
    any referrer information.

 no-referrer-when-downgrade

    Send the origin , path, and querystring in  Referer when the
    protocol security level stays the same or improves (HTTP→HTTP,
    HTTP→HTTPS, HTTPS→HTTPS). Don't send the  Referer header for
    requests to less secure destinations (HTTPS→HTTP, HTTPS→file).

 origin

    Send only the origin in the  Referer header. For example, a document
    at  https://example.com/page.html will send the referrer
     https://example.com/ .

 origin-when-cross-origin

    When performing a same-origin request to the same protocol level
    (HTTP→HTTP, HTTPS→HTTPS), send the origin , path, and query string.
    Send only the origin for cross origin requests and requests to less
    secure destinations (HTTPS→HTTP).

 same-origin

    Send the origin , path, and query string for same-origin requests.
    Don't send the  Referer header for cross-origin requests.

 strict-origin

    Send only the origin when the protocol security level stays the same
    (HTTPS→HTTPS). Don't send the  Referer header to less secure
    destinations (HTTPS→HTTP).

 strict-origin-when-cross-origin (default)

    Send the origin, path, and querystring when performing a same-origin
    request. For cross-origin requests send the origin (only) when the
    protocol security level stays same (HTTPS→HTTPS). Don't send the
     Referer header to less secure destinations (HTTPS→HTTP).

    Note: This is the default policy if no policy is specified, or if
    the provided value is invalid (see spec revision November 2020 ).
    Previously the default was  no-referrer-when-downgrade .

 unsafe-url

    Send the origin, path, and query string when performing any request,
    regardless of security.

    Warning: This policy will leak potentially-private information from
    HTTPS resource URLs to insecure origins. Carefully consider the
    impact of this setting.

Integration with HTML

You can also set referrer policies inside HTML. For example, you can set
the referrer policy for the entire document with a  <meta> element with
a name of  referrer :

html

    <meta name="referrer" content="origin" />

You can specify the  referrerpolicy attribute on  <a> ,  <area> ,  <img>
,  <iframe> ,  <script> , or  <link> elements to set referrer policies
for individual requests:

html

    <a href="http://example.com" referrerpolicy="origin">…</a>

Alternatively, you can set a  noreferrer link relation on an  a ,  area
, or  link elements:

html

    <a href="http://example.com" rel="noreferrer">…</a>

Warning: As seen above, the  noreferrer link relation is written without
a dash. When you specify the referrer policy for the entire document
with a  <meta> element, it should be written with a dash:
 <meta name="referrer" content="no-referrer"> .

Integration with CSS

CSS can fetch resources referenced from stylesheets. These resources
follow a referrer policy as well:

-   External CSS stylesheets use the default policy (
     strict-origin-when-cross-origin ), unless it's overwritten by a
     Referrer-Policy HTTP header on the CSS stylesheet's response.
-   For  <style> elements or  style attributes , the owner document's
    referrer policy is used.

Examples

 no-referrer

  From document               Navigation to   Referrer used
  --------------------------- --------------- ---------------
   https://example.com/page   anywhere        (no referrer)

 no-referrer-when-downgrade

  From document               Navigation to                    Referrer used
  --------------------------- -------------------------------- ---------------------------
   https://example.com/page    https://example.com/otherpage    https://example.com/page
   https://example.com/page    https://mozilla.org              https://example.com/page
   https://example.com/page   http ://example.com              (no referrer)

 origin

  From document               Navigation to   Referrer used
  --------------------------- --------------- -----------------------
   https://example.com/page   anywhere         https://example.com/

 origin-when-cross-origin

  From document               Navigation to                    Referrer used
  --------------------------- -------------------------------- ---------------------------
   https://example.com/page    https://example.com/otherpage    https://example.com/page
   https://example.com/page    https://mozilla.org              https://example.com/
   https://example.com/page   http ://example.com/page          https://example.com/

 same-origin

  From document               Navigation to                    Referrer used
  --------------------------- -------------------------------- ---------------------------
   https://example.com/page    https://example.com/otherpage    https://example.com/page
   https://example.com/page    https://mozilla.org             (no referrer)

 strict-origin

  From document               Navigation to          Referrer used
  --------------------------- ---------------------- -----------------------
   https://example.com/page    https://mozilla.org    https://example.com/
   https://example.com/page   http ://example.com    (no referrer)
  http ://example.com/page    anywhere                http://example.com/

 strict-origin-when-cross-origin

  From document               Navigation to                    Referrer used
  --------------------------- -------------------------------- ---------------------------
   https://example.com/page    https://example.com/otherpage    https://example.com/page
   https://example.com/page    https://mozilla.org              https://example.com/
   https://example.com/page   http ://example.com              (no referrer)

 unsafe-url

  From document                     Navigation to   Referrer used
  --------------------------------- --------------- ---------------------------------
   https://example.com/page?q=123   anywhere         https://example.com/page?q=123

Specify a fallback policy

If you want to specify a fallback policy in case the desired policy
hasn't got wide enough browser support, use a comma-separated list with
the desired policy specified last:

http

    Referrer-Policy: no-referrer, strict-origin-when-cross-origin

In the above scenario,  no-referrer is used only if the browser does not
support the  strict-origin-when-cross-origin policy.

Note: Specifying multiple values is only supported in the
 Referrer-Policy HTTP header, and not in the  referrerpolicy attribute.

Browser-specific preferences/settings

Firefox preferences

You can configure the default referrer policy in Firefox preferences.
The preference names are version specific:

-   Firefox version 59 and later:  network.http.referer.defaultPolicy
    (and  network.http.referer.defaultPolicy.pbmode for private
    networks)
-   Firefox versions 53 to 58:  network.http.referer.userControlPolicy

All of these settings take the same set of values:  0 = no-referrer ,
 1 = same-origin ,  2 = strict-origin-when-cross-origin ,
 3 = no-referrer-when-downgrade .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Referrer Policy
  # referrer-policy-header

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Web security > Referer header: privacy and security concerns
-   HTTP referer on Wikipedia
-   When using Fetch :  Request.referrerPolicy
-   The obsolete  Content-Security-Policy 's  referrer Deprecated
    directive.
-   Same-origin policy
-   Tighter Control Over Your Referrers – Mozilla Security Blog

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Retry-After #
 ____      _                      _     __ _            
|  _ \ ___| |_ _ __ _   _        / \   / _| |_ ___ _ __ 
| |_) / _ \ __| '__| | | |_____ / _ \ | |_| __/ _ \ '__|
|  _ <  __/ |_| |  | |_| |_____/ ___ \|  _| ||  __/ |   
|_| \_\___|\__|_|   \__, |    /_/   \_\_|  \__\___|_|   
                    |___/                               
Retry-After

The  Retry-After response HTTP header indicates how long the user agent
should wait before making a follow-up request. There are three main
cases this header is used:

-   When sent with a  503 (Service Unavailable) response, this indicates
    how long the service is expected to be unavailable.
-   When sent with a  429 (Too Many Requests) response, this indicates
    how long to wait before making a new request.
-   When sent with a redirect response, such as  301 (Moved
    Permanently), this indicates the minimum time that the user agent is
    asked to wait before issuing the redirected request.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Retry-After: <http-date>
    Retry-After: <delay-seconds>

Directives

<http-date>

    A date after which to retry. See the  Date header for more details
    on the HTTP date format.

<delay-seconds>

    A non-negative decimal integer indicating the seconds to delay after
    the response is received.

Examples

Dealing with scheduled downtime

Support for the  Retry-After header on both clients and servers is still
inconsistent. However, some crawlers and spiders, like the Googlebot,
honor the  Retry-After header. It is useful to send it along with a  503
(Service Unavailable) response, so that search engines will keep
indexing your site when the downtime is over.

http

    Retry-After: Wed, 21 Oct 2015 07:28:00 GMT
    Retry-After: 120

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.retry-after

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Google Webmaster blog: How to deal with planned site downtime
-    503 (Service Unavailable)
-    301 (Moved Permanently)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# RTT #
 ____ _____ _____ 
|  _ \_   _|_   _|
| |_) || |   | |  
|  _ < | |   | |  
|_| \_\|_|   |_|  
                  
RTT

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The  RTT Client hint request header field provides the approximate round
trip time on the application layer, in milliseconds. The RTT hint,
unlike transport layer RTT, includes server processing time.

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   no
  ----------------------- ------------------------------

The RTT value is rounded to the nearest 25 milliseconds to prevent
fingerprinting . There are many other mechanisms an attacker might use
to obtain similar round-trip information.

The hint allows a server to choose what information is sent based on the
network responsiveness/latency. For example, it might choose to send
fewer resources.

Note: The  Vary header is used in responses to indicate that a different
resource is sent for every different value of the header (see HTTP
Caching Vary ). Even if  RTT is used to configure what resources are
sent consider omitting it in the  Vary header — it is likely to change
often, which effectively makes the resource uncacheable.

Syntax

http

    RTT: <number>

Directives

<number>

    The approximate round trip time in milliseconds, rounded to the
    nearest 25 milliseconds.

Examples

A server first needs to opt in to receive the  RTT header by sending the
 Accept-CH response header containing  RTT .

http

    Accept-CH: RTT

Then on subsequent requests the client might send an  RTT header back:

http

    RTT: 125

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Network Information API
  # rtt-request-header-field

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-   Network client hints
    -    Downlink
    -    ECT
    -    Save-Data
-    Accept-CH
-   HTTP Caching > Vary and  Vary
-    NetworkInformation.effectiveType

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Save-Data #
 ____                        ____        _        
/ ___|  __ ___   _____      |  _ \  __ _| |_ __ _ 
\___ \ / _` \ \ / / _ \_____| | | |/ _` | __/ _` |
 ___) | (_| |\ V /  __/_____| |_| | (_| | || (_| |
|____/ \__,_| \_/ \___|     |____/ \__,_|\__\__,_|
                                                  
Save-Data

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The  Save-Data network client hint request header field is a boolean
which indicates the client's preference for reduced data usage. This
could be for reasons such as high transfer costs, slow connection
speeds, etc.

 Save-Data is a low entropy hint , and hence may be sent by the client
even if not requested by the server using an  Accept-CH response header.
Further, it should be used to reduce data sent to the client
irrespective of the values of other client hints that indicate network
capability, like  Downlink and  RTT .

  --------------------------------- ------------------------------
  Header type                       Request header , Client hint
  Forbidden header name             no
  CORS-safelisted response header   no
  --------------------------------- ------------------------------

A value of  On indicates explicit user opt-in into a reduced data usage
mode on the client, and when communicated to origins allows them to
deliver alternative content to reduce the data downloaded such as
smaller image and video resources, different markup and styling,
disabled polling and automatic updates, and so on.

Note: Disabling HTTP/2 Server Push ( RFC 7540, section 8.2: Server Push
) might be desirable too for reducing data downloads.

Syntax

http

    Save-Data: <sd-token>

Directives

 <sd-token>

    A value indicating whether the client wants to opt in to reduced
    data usage mode.  on indicates yes, while  off (the default)
    indicates no.

Examples

The  Vary header ensures that the content is cached properly (for
instance ensuring that the user is not served a lower-quality image from
the cache when  Save-Data header is no longer present [ e.g. after
having switched from cellular to Wi-Fi]).

With  Save-Data: on

Request:

http

    GET /image.jpg HTTP/1.1
    Host: example.com
    Save-Data: on

Response:

http

    HTTP/1.1 200 OK
    Content-Length: 102832
    Vary: Accept-Encoding, Save-Data
    Cache-Control: public, max-age=31536000
    Content-Type: image/jpeg

    […]

Without  Save-Data

Request:

http

    GET /image.jpg HTTP/1.1
    Host: example.com

Response:

http

    HTTP/1.1 200 OK
    Content-Length: 481770
    Vary: Accept-Encoding, Save-Data
    Cache-Control: public, max-age=31536000
    Content-Type: image/jpeg

    […]

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Save Data API
  # save-data-request-header-field

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Help Your Users  Save-Data - CSS Tricks
-   Delivering Fast and Light Applications with Save-Data - web.dev
-    Vary header which indicates that the content served varies
    depending on the value of  Save-Data (see HTTP Caching > Vary )
-   CSS @media feature  prefers-reduced-data Experimental
-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-    NetworkInformation.saveData

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Sec-CH-Prefers-Color-Scheme #
 ____                  ____ _   _       ____            __                     
/ ___|  ___  ___      / ___| | | |     |  _ \ _ __ ___ / _| ___ _ __ ___       
\___ \ / _ \/ __|____| |   | |_| |_____| |_) | '__/ _ \ |_ / _ \ '__/ __|_____ 
 ___) |  __/ (_|_____| |___|  _  |_____|  __/| | |  __/  _|  __/ |  \__ \_____|
|____/ \___|\___|     \____|_| |_|     |_|   |_|  \___|_|  \___|_|  |___/      
                                                                               
  ____      _                ____       _                         
 / ___|___ | | ___  _ __    / ___|  ___| |__   ___ _ __ ___   ___ 
| |   / _ \| |/ _ \| '__|___\___ \ / __| '_ \ / _ \ '_ ` _ \ / _ \
| |__| (_) | | (_) | | |_____|__) | (__| | | |  __/ | | | | |  __/
 \____\___/|_|\___/|_|      |____/ \___|_| |_|\___|_| |_| |_|\___|
                                                                  
Sec-CH-Prefers-Color-Scheme

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

The  Sec-CH-Prefers-Color-Scheme user preference media feature client
hint request header provides the user's preference for light or dark
color themes. A user indicates their preference through an operating
system setting (for example, light or dark mode) or a user agent
setting.

If a server signals to a client via the  Accept-CH header that it
accepts  Sec-CH-Prefers-Color-Scheme , the client can then respond with
this header to indicate the user's preference for a specific color
scheme. The server can send the client appropriately adapted content
including images or CSS to display a light or dark mode for subsequent
rendered content.

This header is modeled on the  prefers-color-scheme media query.

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   yes
  ----------------------- ------------------------------

Usage notes

The  Sec-CH-Prefers-Color-Scheme header allows sites to obtain user
color scheme preference at request time; they could then choose to
provide the relevant CSS for the user's preference inline, for
performance reasons. If the server inlines the CSS, it might want to
include a  Vary response header specifying  Sec-CH-Prefers-Color-Scheme
, to indicate that the response is tailored for a particular color
scheme.

If performance is not a critical consideration in this context, you
could instead handle the user's color scheme preference using the
 prefers-color-scheme media query, and/or the  Window.matchMedia() API.

 Sec-CH-Prefers-Color-Scheme is a high entropy hint so the site needs to
opt into receiving it by sending an appropriate  Accept-CH response
header. A user agent may intentionally omit the
 Sec-CH-Prefers-Color-Scheme header to preserve user privacy since the
user's preference could, in theory, be used for fingerprinting.

Syntax

http

    Sec-CH-Prefers-Color-Scheme: <preference>

Directives

 <preference>

    A string indicating the user agent's preference for dark or light
    content:  "light" or  "dark" . The value may originate from a
    corresponding setting in the underlying operating system.

Examples

The client makes an initial request to the server:

http

    GET / HTTP/1.1
    Host: example.com

The server responds, telling the client via  Accept-CH that it accepts
 Sec-CH-Prefers-Color-Scheme . In this example  Critical-CH is also
used, indicating that  Sec-CH-Prefers-Color-Scheme is considered a
critical client hint .

http

    HTTP/1.1 200 OK
    Content-Type: text/html
    Accept-CH: Sec-CH-Prefers-Color-Scheme
    Vary: Sec-CH-Prefers-Color-Scheme
    Critical-CH: Sec-CH-Prefers-Color-Scheme

Note: We've also specified  Sec-CH-Prefers-Color-Scheme in the  Vary
header to indicate that responses should be separately cached based on
the value of this header (even if the URL stays the same). Each header
listed in the  Critical-CH header should also be present in the
 Accept-CH and  Vary headers.

The client automatically retries the request (due to  Critical-CH being
specified above), telling the server via  Sec-CH-Prefers-Color-Scheme
that it has a user preference for dark content:

http

    GET / HTTP/1.1
    Host: example.com
    Sec-CH-Prefers-Color-Scheme: "dark"

The client will include the header in subsequent requests in the current
session, unless the  Accept-CH changes in responses to indicate that it
is no longer supported by the server.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  User Preference Media Features Client Hints Headers
  # sec-ch-prefers-color-scheme

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Client hints
-    prefers-color-scheme CSS Media Query
-   User-Agent Client Hints API
-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-    Accept-CH
-   HTTP Caching > Varying responses and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Sec-CH-Prefers-Reduced-Motion #
 ____                  ____ _   _       ____            __                     
/ ___|  ___  ___      / ___| | | |     |  _ \ _ __ ___ / _| ___ _ __ ___       
\___ \ / _ \/ __|____| |   | |_| |_____| |_) | '__/ _ \ |_ / _ \ '__/ __|_____ 
 ___) |  __/ (_|_____| |___|  _  |_____|  __/| | |  __/  _|  __/ |  \__ \_____|
|____/ \___|\___|     \____|_| |_|     |_|   |_|  \___|_|  \___|_|  |___/      
                                                                               
 ____          _                    _       __  __       _   _             
|  _ \ ___  __| |_   _  ___ ___  __| |     |  \/  | ___ | |_(_) ___  _ __  
| |_) / _ \/ _` | | | |/ __/ _ \/ _` |_____| |\/| |/ _ \| __| |/ _ \| '_ \ 
|  _ <  __/ (_| | |_| | (_|  __/ (_| |_____| |  | | (_) | |_| | (_) | | | |
|_| \_\___|\__,_|\__,_|\___\___|\__,_|     |_|  |_|\___/ \__|_|\___/|_| |_|
                                                                           
Sec-CH-Prefers-Reduced-Motion

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

The  Sec-CH-Prefers-Reduced-Motion user agent client hint request header
indicates the user agent's preference for animations to be displayed
with reduced motion.

If a server signals to a client via the  Accept-CH header that it
accepts  Sec-CH-Prefers-Reduced-Motion , the client can then respond
with this header to indicate the user's preference for reduced motion.
The server can send the client appropriately adapted content, for
example, JavaScript or CSS, to reduce the motion of any animations
presented on subsequent rendered content. This could include reducing
the speed or amplitude of movement to reduce discomfort for those with
vestibular motion disorders.

This header is modeled on the  prefers-reduced-motion media query.

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   yes
  ----------------------- ------------------------------

Syntax

http

    Sec-CH-Prefers-Reduced-Motion: <preference>

Directives

 <preference>

    The user agent's preference for reduced-motion animations. This is
    often taken from the underlying operating system's setting. The
    value of this directive can be either  no-preference or  reduce .

Examples

The client makes an initial request to the server:

http

    GET / HTTP/1.1
    Host: example.com

The server responds, telling the client via  Accept-CH that it accepts
 Sec-CH-Prefers-Reduced-Motion . In this example  Critical-CH is also
used, indicating that  Sec-CH-Prefers-Reduced-Motion is considered a
critical client hint .

http

    HTTP/1.1 200 OK
    Content-Type: text/html
    Accept-CH: Sec-CH-Prefers-Reduced-Motion
    Vary: Sec-CH-Prefers-Reduced-Motion
    Critical-CH: Sec-CH-Prefers-Reduced-Motion

Note: We've also specified  Sec-CH-Prefers-Reduced-Motion in the  Vary
header to indicate to the browser that the served content will differ
based on this header value, even if the URL stays the same, so the
browser shouldn't just use an existing cached response and instead
should cache this response separately. Each header listed in the
 Critical-CH header should also be present in the  Accept-CH and  Vary
headers.

The client automatically retries the request (due to  Critical-CH being
specified above), telling the server via  Sec-CH-Prefers-Reduced-Motion
that it has a user preference for reduced-motion animations:

http

    GET / HTTP/1.1
    Host: example.com
    Sec-CH-Prefers-Reduced-Motion: "reduce"

The client will include the header in subsequent requests in the current
session unless the  Accept-CH changes in responses to indicate that it
is no longer supported by the server.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  User Preference Media Features Client Hints Headers
  # sec-ch-prefers-reduced-motion

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Client hints
-    prefers-reduced-motion CSS Media Query
-   User-Agent Client Hints API
-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Sec-CH-Prefers-Reduced-Transparency #
 ____                  ____ _   _       ____            __                     
/ ___|  ___  ___      / ___| | | |     |  _ \ _ __ ___ / _| ___ _ __ ___       
\___ \ / _ \/ __|____| |   | |_| |_____| |_) | '__/ _ \ |_ / _ \ '__/ __|_____ 
 ___) |  __/ (_|_____| |___|  _  |_____|  __/| | |  __/  _|  __/ |  \__ \_____|
|____/ \___|\___|     \____|_| |_|     |_|   |_|  \___|_|  \___|_|  |___/      
                                                                               
 ____          _                    _     _____                                
|  _ \ ___  __| |_   _  ___ ___  __| |   |_   _| __ __ _ _ __  ___ _ __   __ _ 
| |_) / _ \/ _` | | | |/ __/ _ \/ _` |_____| || '__/ _` | '_ \/ __| '_ \ / _` |
|  _ <  __/ (_| | |_| | (_|  __/ (_| |_____| || | | (_| | | | \__ \ |_) | (_| |
|_| \_\___|\__,_|\__,_|\___\___|\__,_|     |_||_|  \__,_|_| |_|___/ .__/ \__,_|
                                                                  |_|          
                           
 _ __ ___ _ __   ___ _   _ 
| '__/ _ \ '_ \ / __| | | |
| | |  __/ | | | (__| |_| |
|_|  \___|_| |_|\___|\__, |
                     |___/ 
Sec-CH-Prefers-Reduced-Transparency

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

The  Sec-CH-Prefers-Reduced-Transparency user agent client hint request
header indicates the user agent's preference for reduced transparency.

If a server signals to a client via the  Accept-CH header that it
accepts  Sec-CH-Prefers-Reduced-Transparency , the client can then
respond with this header to indicate the user's preference for reduced
transparency. The server can send the client appropriately adapted
content — for example, CSS or images — to reduce the transparency of the
content.

This header is modeled on the  prefers-reduced-transparency media query.

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   yes
  ----------------------- ------------------------------

Syntax

http

    Sec-CH-Prefers-Reduced-Transparency: <preference>

Directives

 <preference>

    The user agent's preference for reduced transparency. This is often
    taken from the underlying operating system's setting. The value of
    this directive can be either  no-preference or  reduce .

Examples

The client makes an initial request to the server:

http

    GET / HTTP/1.1
    Host: example.com

The server responds, telling the client via  Accept-CH that it accepts
 Sec-CH-Prefers-Reduced-Transparency . In this example  Critical-CH is
also used, indicating that  Sec-CH-Prefers-Reduced-Transparency is
considered a critical client hint .

http

    HTTP/1.1 200 OK
    Content-Type: text/html
    Accept-CH: Sec-CH-Prefers-Reduced-Transparency
    Vary: Sec-CH-Prefers-Reduced-Transparency
    Critical-CH: Sec-CH-Prefers-Reduced-Transparency

Note: We've also specified  Sec-CH-Prefers-Reduced-Transparency in the
 Vary header, to indicate to the browser that the served content will
differ based on this header value — even if the URL stays the same — so
the browser shouldn't just use an existing cached response and instead
should cache this response separately. Each header listed in the
 Critical-CH header should also be present in the  Accept-CH and  Vary
headers.

The client automatically retries the request (due to  Critical-CH being
specified above), telling the server via
 Sec-CH-Prefers-Reduced-Transparency that it has a user preference for
reduced transparency:

http

    GET / HTTP/1.1
    Host: example.com
    Sec-CH-Prefers-Reduced-Transparency: "reduce"

The client will include the header in subsequent requests in the current
session unless the  Accept-CH changes in responses to indicate that it
is no longer supported by the server.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  User Preference Media Features Client Hints Headers
  # sec-ch-prefers-reduced-transparency

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Client hints
-   User-Agent Client Hints API
-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Sec-CH-UA-Arch #
 ____                  ____ _   _       _   _   _           _             
/ ___|  ___  ___      / ___| | | |     | | | | / \         / \   _ __ ___ 
\___ \ / _ \/ __|____| |   | |_| |_____| | | |/ _ \ _____ / _ \ | '__/ __|
 ___) |  __/ (_|_____| |___|  _  |_____| |_| / ___ \_____/ ___ \| | | (__ 
|____/ \___|\___|     \____|_| |_|      \___/_/   \_\   /_/   \_\_|  \___|
                                                                          
 _     
| |__  
| '_ \ 
| | | |
|_| |_|
       
Sec-CH-UA-Arch

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

The  Sec-CH-UA-Arch user agent client hint request header provides the
user-agent's underlying CPU architecture, such as ARM or x86.

This might be used by a server, for example, to select and offer the
correct binary format of an executable for a user to download.

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   yes
  ----------------------- ------------------------------

Syntax

http

    Sec-CH-UA-Arch: <arch>

Directives

 <arch>

    A string indicating the underlying platform architecture, such as:
     "x86" ,  "ARM" ,  "[arm64-v8a, armeabi-v7a, armeabi]" .

Examples

A server requests the  Sec-CH-UA-Arch header by including the  Accept-CH
in a response to some request from the client, using the name of the
desired header as a token:

http

    HTTP/1.1 200 OK
    Accept-CH: Sec-CH-UA-Arch

The client may choose to provide the hint, and add the  Sec-CH-UA-Arch
header to subsequent requests. For example, on a Windows X86 based
computer, the client might add the header as shown:

http

    GET /GET /my/page HTTP/1.1
    Host: example.site

    Sec-CH-UA: " Not A;Brand";v="99", "Chromium";v="96", "Google Chrome";v="96"
    Sec-CH-UA-Mobile: ?0
    Sec-CH-UA-Platform: "Windows"
    Sec-CH-UA-Arch: "x86"

Note above that the low entropy headers are added to the request even
though not specified in the server response.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  User-Agent Client Hints
  # sec-ch-ua-arch

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Client hints
-   User-Agent Client Hints API
-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Sec-CH-UA-Bitness #
 ____                  ____ _   _       _   _   _         ____  _ _         
/ ___|  ___  ___      / ___| | | |     | | | | / \       | __ )(_) |_ _ __  
\___ \ / _ \/ __|____| |   | |_| |_____| | | |/ _ \ _____|  _ \| | __| '_ \ 
 ___) |  __/ (_|_____| |___|  _  |_____| |_| / ___ \_____| |_) | | |_| | | |
|____/ \___|\___|     \____|_| |_|      \___/_/   \_\    |____/|_|\__|_| |_|
                                                                            
               
  ___  ___ ___ 
 / _ \/ __/ __|
|  __/\__ \__ \
 \___||___/___/
               
Sec-CH-UA-Bitness

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

The  Sec-CH-UA-Bitness user agent client hint request header provides
the "bitness" of the user-agent's underlying CPU architecture. This is
the size in bits of an integer or memory address—typically 64 or 32
bits.

This might be used by a server, for example, to select and offer the
correct binary format of an executable for a user to download.

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   yes
  ----------------------- ------------------------------

Syntax

http

    Sec-CH-UA-Bitness: <bitness>

Directives

 <bitness>

    A string indicating the underlying platform architecture bitness,
    such as:  "64" ,  "32" .

Examples

A server requests the  Sec-CH-UA-Bitness header by including the
 Accept-CH in a response to any request from the client, using the name
of the desired header as a token:

http

    HTTP/1.1 200 OK
    Accept-CH: Sec-CH-UA-Bitness

The client may choose to provide the hint, and add the
 Sec-CH-UA-Bitness header to subsequent requests. For example, on a
Windows based 64-bit computer, the client might add the header as shown:

http

    GET /GET /my/page HTTP/1.1
    Host: example.site

    Sec-CH-UA: " Not A;Brand";v="99", "Chromium";v="96", "Google Chrome";v="96"
    Sec-CH-UA-Mobile: ?0
    Sec-CH-UA-Platform: "Windows"
    Sec-CH-UA-Bitness: "64"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  User-Agent Client Hints
  # sec-ch-ua-bitness

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Client hints
-   User-Agent Client Hints API
-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Sec-CH-UA-Full-Version #
 ____                  ____ _   _       _   _   _         _____      _ _       
/ ___|  ___  ___      / ___| | | |     | | | | / \       |  ___|   _| | |      
\___ \ / _ \/ __|____| |   | |_| |_____| | | |/ _ \ _____| |_ | | | | | |_____ 
 ___) |  __/ (_|_____| |___|  _  |_____| |_| / ___ \_____|  _|| |_| | | |_____|
|____/ \___|\___|     \____|_| |_|      \___/_/   \_\    |_|   \__,_|_|_|      
                                                                               
__     __            _             
\ \   / /__ _ __ ___(_) ___  _ __  
 \ \ / / _ \ '__/ __| |/ _ \| '_ \ 
  \ V /  __/ |  \__ \ | (_) | | | |
   \_/ \___|_|  |___/_|\___/|_| |_|
                                   
Sec-CH-UA-Full-Version

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

Note: This is being replaced by the  Sec-CH-UA-Full-Version-List .

The  Sec-CH-UA-Full-Version user agent client hint request header
provides the user-agent's full version string.

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   yes
  ----------------------- ------------------------------

Syntax

http

    Sec-CH-UA-Full-Version: <version>

Directives

 <version>

    A string containing the full version number, like "96.0.4664.93".

Examples

A server requests the  Sec-CH-UA-Full-Version header by including the
 Accept-CH in a response to any request from the client, using the name
of the desired header as a token:

http

    HTTP/1.1 200 OK
    Accept-CH: Sec-CH-UA-Full-Version

The client may choose to provide the hint, and add the
 Sec-CH-UA-Full-Version header to subsequent requests. For example, the
client might add the header as shown:

http

    GET /GET /my/page HTTP/1.1
    Host: example.site

    Sec-CH-UA: " Not A;Brand";v="99", "Chromium";v="96", "Google Chrome";v="96"
    Sec-CH-UA-Mobile: ?0
    Sec-CH-UA-Full-Version: "96.0.4664.110"
    Sec-CH-UA-Platform: "Windows"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  User-Agent Client Hints
  # sec-ch-ua-full-version

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Client hints
-   User-Agent Client Hints API
-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Sec-CH-UA-Full-Version-List #
 ____                  ____ _   _       _   _   _         _____      _ _       
/ ___|  ___  ___      / ___| | | |     | | | | / \       |  ___|   _| | |      
\___ \ / _ \/ __|____| |   | |_| |_____| | | |/ _ \ _____| |_ | | | | | |_____ 
 ___) |  __/ (_|_____| |___|  _  |_____| |_| / ___ \_____|  _|| |_| | | |_____|
|____/ \___|\___|     \____|_| |_|      \___/_/   \_\    |_|   \__,_|_|_|      
                                                                               
__     __            _                   _     _     _   
\ \   / /__ _ __ ___(_) ___  _ __       | |   (_)___| |_ 
 \ \ / / _ \ '__/ __| |/ _ \| '_ \ _____| |   | / __| __|
  \ V /  __/ |  \__ \ | (_) | | | |_____| |___| \__ \ |_ 
   \_/ \___|_|  |___/_|\___/|_| |_|     |_____|_|___/\__|
                                                         
Sec-CH-UA-Full-Version-List

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

The  Sec-CH-UA-Full-Version-List user agent client hint request header
provides the user-agent's branding and full version information.

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   yes
  ----------------------- ------------------------------

The  Sec-CH-UA-Full-Version-List header provides the brand and full
version information for each brand associated with the browser, in a
comma-separated list.

A brand is a commercial name for the user agent like: Chromium, Opera,
Google Chrome, Microsoft Edge, Firefox, and Safari. A user agent might
have several associated brands. For example, Opera, Chrome, and Edge are
all based on Chromium, and will provide both brands in the
 Sec-CH-UA-Full-Version-List header.

The header therefore allows the server to customize its response based
on both shared brands and on particular customizations in their specific
respective builds.

The header may include "fake" brands in any position and with any name.
This is a feature designed to prevent servers from rejecting unknown
user agents outright, forcing user agents to lie about their brand
identity.

Note: This is similar to  Sec-CH-UA , but includes the full version
number instead of the significant version number for each brand.

Syntax

A comma separated list of brands in the user agent brand list, and their
associated full version number. The syntax for a single entry has the
following format:

http

    Sec-CH-UA-Full-Version-List: "<brand>";v="<full version>", ...

Directives

 <brand>

    A brand associated with the user agent, like "Chromium", "Google
    Chrome". This may be an intentionally incorrect brand like
     " Not A;Brand" or  "(Not(A:Brand" (the actual value is expected
    change over time and be unpredictable).

 <full version>

    A full version number, such as 98.0.4750.0.

Examples

A server requests the  Sec-CH-UA-Full-Version-List header by including
the  Accept-CH in a response to any request from the client, using the
name of the desired header as a token:

http

    HTTP/1.1 200 OK
    Accept-CH: Sec-CH-UA-Full-Version-List

The client may choose to provide the hint, and add the
 Sec-CH-UA-Full-Version-List header to subsequent requests, as shown
below:

http

    GET /my/page HTTP/1.1
    Host: example.site

    Sec-CH-UA: " Not A;Brand";v="99", "Chromium";v="98", "Google Chrome";v="98"
    Sec-CH-UA-Mobile: ?0
    Sec-CH-UA-Full-Version-List: " Not A;Brand";v="99.0.0.0", "Chromium";v="98.0.4750.0", "Google Chrome";v="98.0.4750.0"
    Sec-CH-UA-Platform: "Linux"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  User-Agent Client Hints
  # sec-ch-ua-full-version-list

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Client hints
-   User-Agent Client Hints API
-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Sec-CH-UA #
 ____                  ____ _   _       _   _   _    
/ ___|  ___  ___      / ___| | | |     | | | | / \   
\___ \ / _ \/ __|____| |   | |_| |_____| | | |/ _ \  
 ___) |  __/ (_|_____| |___|  _  |_____| |_| / ___ \ 
|____/ \___|\___|     \____|_| |_|      \___/_/   \_\
                                                     
Sec-CH-UA

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

The  Sec-CH-UA user agent client hint request header provides the
user-agent's branding and significant version information.

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   yes
  ----------------------- ------------------------------

The  Sec-CH-UA header provides the brand and significant version for
each brand associated with the browser in a comma-separated list.

A brand is a commercial name for the user agent like: Chromium, Opera,
Google Chrome, Microsoft Edge, Firefox, and Safari. A user agent might
have several associated brands. For example, Opera, Chrome, and Edge are
all based on Chromium, and will provide both brands in the  Sec-CH-UA
header.

The significant version is the "marketing" version identifier that is
used to distinguish between major releases of the brand. For example a
Chromium build with full version number "96.0.4664.45" has a significant
version number of "96".

The header therefore allows the server to customize its response based
on both shared brands and on particular customizations in their
respective versions.

 Sec-CH-UA is a low entropy hint . Unless blocked by a user agent
permission policy, it is sent by default, without the server opting in
by sending  Accept-CH .

The header may include "fake" brands in any position and with any name.
This is a feature designed to prevent servers from rejecting unknown
user agents outright, forcing user agents to lie about their brand
identity.

Note:  Sec-CH-UA-Full-Version-List is the same as  Sec-CH-UA , but
includes the full version number rather than the significant version
number for each brand.

Syntax

A comma separated list of brands in the user agent brand list, and their
associated significant version number. The syntax for a single entry has
the following format:

http

    Sec-CH-UA: "<brand>";v="<significant version>", ...

Directives

 <brand>

    A brand associated with the user agent, like "Chromium", "Google
    Chrome", or an intentionally incorrect brand like  "Not A;Brand" .

 <significant version>

    The "marketing" version number associated with distinguishable
    web-exposed features.

Examples

 Sec-CH-UA is a low entropy hint . Unless explicitly blocked by a user
agent policy, it will be sent in all requests (without the server having
to opt in by sending  Accept-CH ).

Strings from Chromium, Chrome, Edge, and Opera desktop browsers are
shown below. Note that they all share the "Chromium" brand, but have an
additional brand indicating their origin. They also have an
intentionally incorrect brand string, which may appear in any position
and have different text.

http

    Sec-CH-UA: "(Not(A:Brand";v="8", "Chromium";v="98"

http

    Sec-CH-UA: " Not A;Brand";v="99", "Chromium";v="96", "Google Chrome";v="96"

http

    Sec-CH-UA: " Not A;Brand";v="99", "Chromium";v="96", "Microsoft Edge";v="96"

http

    Sec-CH-UA: "Opera";v="81", " Not;A Brand";v="99", "Chromium";v="95"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  User-Agent Client Hints
  # sec-ch-ua

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Client hints
-   User-Agent Client Hints API
-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Sec-CH-UA-Mobile #
 ____                  ____ _   _       _   _   _         __  __       _     _ 
/ ___|  ___  ___      / ___| | | |     | | | | / \       |  \/  | ___ | |__ (_)
\___ \ / _ \/ __|____| |   | |_| |_____| | | |/ _ \ _____| |\/| |/ _ \| '_ \| |
 ___) |  __/ (_|_____| |___|  _  |_____| |_| / ___ \_____| |  | | (_) | |_) | |
|____/ \___|\___|     \____|_| |_|      \___/_/   \_\    |_|  |_|\___/|_.__/|_|
                                                                               
 _      
| | ___ 
| |/ _ \
| |  __/
|_|\___|
        
Sec-CH-UA-Mobile

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

The  Sec-CH-UA-Mobile user agent client hint request header indicates
whether the browser is on a mobile device. It can also be used by a
desktop browser to indicate a preference for a "mobile" user experience.

 Sec-CH-UA-Mobile is a low entropy hint . Unless blocked by a user agent
permission policy, it is sent by default, without the server opting in
by sending  Accept-CH .

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   yes
  ----------------------- ------------------------------

Syntax

http

    Sec-CH-UA-Mobile: <boolean>

Directives

 <boolean>

     ?1 indicates that the user-agent prefers a mobile experience
    (true).  ?0 indicates that user-agent does not prefer a mobile
    experience (false).

Examples

As  Sec-CH-UA-Mobile is a low entropy hint it is typically sent in all
requests.

A desktop browser would usually send requests with the following header:

http

    Sec-CH-UA-Mobile: ?0

A browser on a mobile device would usually send requests with the
following header:

http

    Sec-CH-UA-Mobile: ?1

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  User-Agent Client Hints
  # sec-ch-ua-mobile

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Client hints
-   User-Agent Client Hints API
-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Sec-CH-UA-Model #
 ____                  ____ _   _       _   _   _         __  __           _ 
/ ___|  ___  ___      / ___| | | |     | | | | / \       |  \/  | ___   __| |
\___ \ / _ \/ __|____| |   | |_| |_____| | | |/ _ \ _____| |\/| |/ _ \ / _` |
 ___) |  __/ (_|_____| |___|  _  |_____| |_| / ___ \_____| |  | | (_) | (_| |
|____/ \___|\___|     \____|_| |_|      \___/_/   \_\    |_|  |_|\___/ \__,_|
                                                                             
      _ 
  ___| |
 / _ \ |
|  __/ |
 \___|_|
        
Sec-CH-UA-Model

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

The  Sec-CH-UA-Model user agent client hint request header indicates the
device model on which the browser is running.

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   yes
  ----------------------- ------------------------------

Syntax

http

    Sec-CH-UA-Model: <device-version>

Directives

 <device-version>

    A string containing the device version. For example "Pixel 3".

Examples

A server requests the  Sec-CH-UA-Model header by including the
 Accept-CH in a response to any request from the client, using the name
of the desired header as a token:

http

    HTTP/1.1 200 OK
    Accept-CH: Sec-CH-UA-Model

The client may choose to provide the hint, and add the  Sec-CH-UA-Model
header to subsequent requests. For example, on mobile phone the client
might add the header as shown:

http

    GET /GET /my/page HTTP/1.1
    Host: example.site

    Sec-CH-UA: " Not A;Brand";v="99", "Chromium";v="96", "Google Chrome";v="96"
    Sec-CH-UA-Mobile: ?1
    Sec-CH-UA-Platform: "Android"
    Sec-CH-UA-Bitness: "64"
    Sec-CH-UA-Model: "Pixel 3 XL"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  User-Agent Client Hints
  # sec-ch-ua-model

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Client hints
-   User-Agent Client Hints API
-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Sec-CH-UA-Platform #
 ____                  ____ _   _       _   _   _         ____  _       _   
/ ___|  ___  ___      / ___| | | |     | | | | / \       |  _ \| | __ _| |_ 
\___ \ / _ \/ __|____| |   | |_| |_____| | | |/ _ \ _____| |_) | |/ _` | __|
 ___) |  __/ (_|_____| |___|  _  |_____| |_| / ___ \_____|  __/| | (_| | |_ 
|____/ \___|\___|     \____|_| |_|      \___/_/   \_\    |_|   |_|\__,_|\__|
                                                                            
  __                      
 / _| ___  _ __ _ __ ___  
| |_ / _ \| '__| '_ ` _ \ 
|  _| (_) | |  | | | | | |
|_|  \___/|_|  |_| |_| |_|
                          
Sec-CH-UA-Platform

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

The  Sec-CH-UA-Platform user agent client hint request header provides
the platform or operating system on which the user agent is running. For
example: "Windows" or "Android".

 Sec-CH-UA-Platform is a low entropy hint . Unless blocked by a user
agent permission policy, it is sent by default (without the server
opting in by sending  Accept-CH ).

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   yes
  ----------------------- ------------------------------

Syntax

http

    Sec-CH-UA-Platform: <platform>

Directives

 <platform>

    One of the following strings:  "Android" ,  "Chrome OS" ,
     "Chromium OS" ,  "iOS" ,  "Linux" ,  "macOS" ,  "Windows" , or
     "Unknown" .

Examples

As  Sec-CH-UA-Platform is a low entropy hint it is typically sent in all
requests.

A browser running on a macOS computer might add the following header to
all requests.

http

    Sec-CH-UA-Platform: "macOS"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  User-Agent Client Hints
  # sec-ch-ua-platform

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Client hints
-   User-Agent Client Hints API
-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Sec-CH-UA-Platform-Version #
 ____                  ____ _   _       _   _   _         ____  _       _   
/ ___|  ___  ___      / ___| | | |     | | | | / \       |  _ \| | __ _| |_ 
\___ \ / _ \/ __|____| |   | |_| |_____| | | |/ _ \ _____| |_) | |/ _` | __|
 ___) |  __/ (_|_____| |___|  _  |_____| |_| / ___ \_____|  __/| | (_| | |_ 
|____/ \___|\___|     \____|_| |_|      \___/_/   \_\    |_|   |_|\__,_|\__|
                                                                            
  __                         __     __            _             
 / _| ___  _ __ _ __ ___     \ \   / /__ _ __ ___(_) ___  _ __  
| |_ / _ \| '__| '_ ` _ \ ____\ \ / / _ \ '__/ __| |/ _ \| '_ \ 
|  _| (_) | |  | | | | | |_____\ V /  __/ |  \__ \ | (_) | | | |
|_|  \___/|_|  |_| |_| |_|      \_/ \___|_|  |___/_|\___/|_| |_|
                                                                
Sec-CH-UA-Platform-Version

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

The  Sec-CH-UA-Platform-Version user agent client hint request header
provides the version of the operating system on which the user agent is
running.

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   yes
  ----------------------- ------------------------------

Syntax

http

    Sec-CH-UA-Platform-Version: <version>

Directives

 <version>

    The version string typically contains the operating system version
    in a string, consisting of dot-separated major, minor and patch
    version numbers. For example,  "11.0.0"

    The version string on Linux is always empty.

Examples

A server requests the  Sec-CH-UA-Platform-Version header by including
the  Accept-CH in a response to any request from the client, using the
name of the desired header as a token:

http

    HTTP/1.1 200 OK
    Accept-CH: Sec-CH-UA-Platform-Version

The client may choose to provide the hint, and add the
 Sec-CH-UA-Platform-Version header to subsequent requests. For example,
the following request headers might be sent from a browser running on
Windows 10.

http

    GET /GET /my/page HTTP/1.1
    Host: example.site

    Sec-CH-UA: " Not A;Brand";v="99", "Chromium";v="96", "Google Chrome";v="96"
    Sec-CH-UA-Mobile: ?0
    Sec-CH-UA-Platform: "Windows"
    Sec-CH-UA-Platform-Version: "10.0.0"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  User-Agent Client Hints
  # sec-ch-ua-platform-version

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Client hints
-   User-Agent Client Hints API
-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Sec-Fetch-Dest #
 ____                 _____    _       _           ____            _   
/ ___|  ___  ___     |  ___|__| |_ ___| |__       |  _ \  ___  ___| |_ 
\___ \ / _ \/ __|____| |_ / _ \ __/ __| '_ \ _____| | | |/ _ \/ __| __|
 ___) |  __/ (_|_____|  _|  __/ || (__| | | |_____| |_| |  __/\__ \ |_ 
|____/ \___|\___|    |_|  \___|\__\___|_| |_|     |____/ \___||___/\__|
                                                                       
Sec-Fetch-Dest

The  Sec-Fetch-Dest fetch metadata request header indicates the
request's destination . That is the initiator of the original fetch
request, which is where (and how) the fetched data will be used.

This allows servers determine whether to service a request based on
whether it is appropriate for how it is expected to be used. For
example, a request with an  audio destination should request audio data,
not some other type of resource (for example, a document that includes
sensitive user information).

  -------------------------------- -------------------------------
  Header type                      Fetch Metadata Request Header
  Forbidden header name            yes (prefix  Sec- )
  CORS-safelisted request header   no
  -------------------------------- -------------------------------

Syntax

http

    Sec-Fetch-Dest: audio
    Sec-Fetch-Dest: audioworklet
    Sec-Fetch-Dest: document
    Sec-Fetch-Dest: embed
    Sec-Fetch-Dest: empty
    Sec-Fetch-Dest: font
    Sec-Fetch-Dest: frame
    Sec-Fetch-Dest: iframe
    Sec-Fetch-Dest: image
    Sec-Fetch-Dest: manifest
    Sec-Fetch-Dest: object
    Sec-Fetch-Dest: paintworklet
    Sec-Fetch-Dest: report
    Sec-Fetch-Dest: script
    Sec-Fetch-Dest: serviceworker
    Sec-Fetch-Dest: sharedworker
    Sec-Fetch-Dest: style
    Sec-Fetch-Dest: track
    Sec-Fetch-Dest: video
    Sec-Fetch-Dest: worker
    Sec-Fetch-Dest: xslt

Servers should ignore this header if it contains any other value.

Directives

Note: These directives correspond to the values returned by
 Request.destination .

 audio

    The destination is audio data. This might originate from an HTML
     <audio> tag.

 audioworklet

    The destination is data being fetched for use by an audio worklet.
    This might originate from a call to  audioWorklet.addModule() .

 document

    The destination is a document (HTML or XML), and the request is the
    result of a user-initiated top-level navigation (e.g. resulting from
    a user clicking a link).

 embed

    The destination is embedded content. This might originate from an
    HTML  <embed> tag.

 empty

    The destination is the empty string. This is used for destinations
    that do not have their own value. For example:  fetch() ,
     navigator.sendBeacon() ,  EventSource ,  XMLHttpRequest ,
     WebSocket , etc.

 font

    The destination is a font. This might originate from CSS  @font-face
    .

 frame

    The destination is a frame. This might originate from an HTML
     <frame> tag.

 iframe

    The destination is an iframe. This might originate from an HTML
     <iframe> tag.

 image

    The destination is an image. This might originate from an HTML
     <img> , SVG  <image> , CSS  background-image , CSS  cursor , CSS
     list-style-image , etc.

 manifest

    The destination is a manifest. This might originate from an HTML
    <link rel=manifest> .

 object

    The destination is an object. This might originate from an HTML
     <object> tag.

 paintworklet

    The destination is a paint worklet. This might originate from a call
    to  CSS.PaintWorklet.addModule() .

 report

    The destination is a report (for example, a content security policy
    report).

 script

    The destination is a script. This might originate from an HTML
     <script> tag or a call to  WorkerGlobalScope.importScripts() .

 serviceworker

    The destination is a service worker. This might originate from a
    call to  navigator.serviceWorker.register() .

 sharedworker

    The destination is a shared worker. This might originate from a
     SharedWorker .

 style

    The destination is a style. This might originate from an HTML <link
    rel=stylesheet> or a CSS  @import .

 track

    The destination is an HTML text track. This might originate from an
    HTML  <track> tag.

 video

    The destination is video data. This might originate from an HTML
     <video> tag.

 worker

    The destination is a  Worker .

 xslt

    The destination is an XSLT transform.

Examples

A cross-site request generated by an  <img> element would result in a
request with the following HTTP request headers (note that the
destination is  image ):

http

    Sec-Fetch-Dest: image
    Sec-Fetch-Mode: no-cors
    Sec-Fetch-Site: cross-site

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Metadata Request Headers
  # sec-fetch-dest-header

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Related headers
    -    Sec-Fetch-Mode
    -    Sec-Fetch-Site
    -    Sec-Fetch-User
-   Protect your resources from web attacks with Fetch Metadata
    (web.dev)
-   Fetch Metadata Request Headers playground (secmetadata.appspot.com)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 6, 2024 by MDN contributors .
# Sec-Fetch-Mode #
 ____                 _____    _       _           __  __           _      
/ ___|  ___  ___     |  ___|__| |_ ___| |__       |  \/  | ___   __| | ___ 
\___ \ / _ \/ __|____| |_ / _ \ __/ __| '_ \ _____| |\/| |/ _ \ / _` |/ _ \
 ___) |  __/ (_|_____|  _|  __/ || (__| | | |_____| |  | | (_) | (_| |  __/
|____/ \___|\___|    |_|  \___|\__\___|_| |_|     |_|  |_|\___/ \__,_|\___|
                                                                           
Sec-Fetch-Mode

The  Sec-Fetch-Mode fetch metadata request header indicates the mode of
the request.

Broadly speaking, this allows a server to distinguish between: requests
originating from a user navigating between HTML pages, and requests to
load images and other resources. For example, this header would contain
 navigate for top level navigation requests, while  no-cors is used for
loading an image.

  -------------------------------- -------------------------------
  Header type                      Fetch Metadata Request Header
  Forbidden header name            yes (prefix  Sec- )
  CORS-safelisted request header   no
  -------------------------------- -------------------------------

Syntax

http

    Sec-Fetch-Mode: cors
    Sec-Fetch-Mode: navigate
    Sec-Fetch-Mode: no-cors
    Sec-Fetch-Mode: same-origin
    Sec-Fetch-Mode: websocket

Servers should ignore this header if it contains any other value.

Directives

Note: These directives correspond to the values in  Request.mode .

 cors

    The request is a CORS protocol request.

 navigate

    The request is initiated by navigation between HTML documents.

 no-cors

    The request is a no-cors request (see  Request.mode ).

 same-origin

    The request is made from the same origin as the resource that is
    being requested.

 websocket

    The request is being made to establish a WebSocket connection.

Examples

If a user clicks on a page link to another page on the same origin, the
resulting request would have the following headers (note that the mode
is  navigate ):

http

    Sec-Fetch-Dest: document
    Sec-Fetch-Mode: navigate
    Sec-Fetch-Site: same-origin
    Sec-Fetch-User: ?1

A cross-site request generated by an  <img> element would result in a
request with the following HTTP request headers (note that the mode is
 no-cors ):

http

    Sec-Fetch-Dest: image
    Sec-Fetch-Mode: no-cors
    Sec-Fetch-Site: cross-site

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Metadata Request Headers
  # sec-fetch-mode-header

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Related headers
    -    Sec-Fetch-Dest
    -    Sec-Fetch-Site
    -    Sec-Fetch-User
-   Protect your resources from web attacks with Fetch Metadata
    (web.dev)
-   Fetch Metadata Request Headers playground (secmetadata.appspot.com)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Oct 25, 2023 by MDN contributors .
# Sec-Fetch-Site #
 ____                 _____    _       _          ____  _ _       
/ ___|  ___  ___     |  ___|__| |_ ___| |__      / ___|(_) |_ ___ 
\___ \ / _ \/ __|____| |_ / _ \ __/ __| '_ \ ____\___ \| | __/ _ \
 ___) |  __/ (_|_____|  _|  __/ || (__| | | |_____|__) | | ||  __/
|____/ \___|\___|    |_|  \___|\__\___|_| |_|    |____/|_|\__\___|
                                                                  
Sec-Fetch-Site

The  Sec-Fetch-Site fetch metadata request header indicates the
relationship between a request initiator's origin and the origin of the
requested resource.

In other words, this header tells a server whether a request for a
resource is coming from the same origin, the same site, a different
site, or is a "user initiated" request. The server can then use this
information to decide if the request should be allowed.

Same-origin requests would usually be allowed by default, but what
happens for requests from other origins may further depend on what
resource is being requested, or information in other Fetch metadata
request headers . By default, requests that are not accepted should be
rejected with a  403 response code.

  -------------------------------- -------------------------------
  Header type                      Fetch Metadata Request Header
  Forbidden header name            yes (prefix  Sec- )
  CORS-safelisted request header   no
  -------------------------------- -------------------------------

Syntax

http

    Sec-Fetch-Site: cross-site
    Sec-Fetch-Site: same-origin
    Sec-Fetch-Site: same-site
    Sec-Fetch-Site: none

Directives

 cross-site

    The request initiator and the server hosting the resource have a
    different site (i.e. a request by "potentially-evil.com" for a
    resource at "example.com").

 same-origin

    The request initiator and the server hosting the resource have the
    same origin (same scheme, host and port).

 same-site

    The request initiator and the server hosting the resource have the
    same scheme, domain and/or subdomain, but not necessarily the same
    port.

 none

    This request is a user-originated operation. For example: entering a
    URL into the address bar, opening a bookmark, or
    dragging-and-dropping a file into the browser window.

Examples

A fetch request to  https://mysite.example/foo.json originating from a
web page on  https://mysite.example (with the same port) is a
same-origin request. The browser will generate the
 Sec-Fetch-Site: same-origin header as shown below, and the server will
typically allow the request:

http

    GET /foo.json
    Sec-Fetch-Dest: empty
    Sec-Fetch-Mode: cors
    Sec-Fetch-Site: same-origin

A fetch request to the same URL from another site, for example
 potentially-evil.com , causes the browser to generate a different
header (e.g.  Sec-Fetch-Site: cross-site ), which the server can choose
to accept or reject:

http

    GET /foo.json
    Sec-Fetch-Dest: empty
    Sec-Fetch-Mode: cors
    Sec-Fetch-Site: cross-site

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Metadata Request Headers
  # sec-fetch-site-header

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Related headers
    -    Sec-Fetch-Mode
    -    Sec-Fetch-User
    -    Sec-Fetch-Dest
-   Protect your resources from web attacks with Fetch Metadata
    (web.dev)
-   Fetch Metadata Request Headers playground (secmetadata.appspot.com)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Oct 25, 2023 by MDN contributors .
# Sec-Fetch-User #
 ____                 _____    _       _           _   _               
/ ___|  ___  ___     |  ___|__| |_ ___| |__       | | | |___  ___ _ __ 
\___ \ / _ \/ __|____| |_ / _ \ __/ __| '_ \ _____| | | / __|/ _ \ '__|
 ___) |  __/ (_|_____|  _|  __/ || (__| | | |_____| |_| \__ \  __/ |   
|____/ \___|\___|    |_|  \___|\__\___|_| |_|      \___/|___/\___|_|   
                                                                       
Sec-Fetch-User

The  Sec-Fetch-User fetch metadata request header is only sent for
requests initiated by user activation, and its value will always be  ?1
.

A server can use this header to identify whether a navigation request
from a document, iframe, etc., was originated by the user.

  -------------------------------- -------------------------------
  Header type                      Fetch Metadata Request Header
  Forbidden header name            yes (prefix  Sec- )
  CORS-safelisted request header   no
  -------------------------------- -------------------------------

Syntax

http

    Sec-Fetch-User: ?1

Directives

The value will always be  ?1 . When a request is triggered by something
other than a user activation, the spec requires browsers to omit the
header completely.

Examples

If a user clicks on a page link to another page on the same origin, the
resulting request would have the following headers:

http

    Sec-Fetch-Dest: document
    Sec-Fetch-Mode: navigate
    Sec-Fetch-Site: same-origin
    Sec-Fetch-User: ?1

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Metadata Request Headers
  # sec-fetch-user-header

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Related headers
    -    Sec-Fetch-Dest
    -    Sec-Fetch-Mode
    -    Sec-Fetch-Site
-   Protect your resources from web attacks with Fetch Metadata
    (web.dev)
-   Fetch Metadata Request Headers playground (secmetadata.appspot.com)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Oct 25, 2023 by MDN contributors .
# Sec-GPC #
 ____                  ____ ____   ____ 
/ ___|  ___  ___      / ___|  _ \ / ___|
\___ \ / _ \/ __|____| |  _| |_) | |    
 ___) |  __/ (_|_____| |_| |  __/| |___ 
|____/ \___|\___|     \____|_|    \____|
                                        
Sec-GPC

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

Non-standard: This feature is non-standard and is not on a standards
track. Do not use it on production sites facing the Web: it will not
work for every user. There may also be large incompatibilities between
implementations and the behavior may change in the future.

The  Sec-GPC ( G lobal P rivacy C ontrol ) request header indicates
whether the user consents to a website or service selling or sharing
their personal information with third parties.

The specification does not define how the user can withdraw or grant
consent for website. Where possible the mechanism will be indicated in
the browser compatibility section below.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   yes
  ----------------------- ----------------

Syntax

http

    Sec-GPC: 1

Directives

The  Sec-GPC is header is sent with a value of  1 if the user has
indicated that they prefer their information not be shared with, or sold
to, third parties.

Otherwise, the header is not sent, which indicates that either the user
has not made a decision or the user is okay with their information being
shared with or sold to third parties.

Examples

Reading Global Privacy Control status from JavaScript

The user's GPC preference can also be read from JavaScript using the
 Navigator.globalPrivacyControl or  WorkerNavigator.globalPrivacyControl
property:

js

    navigator.globalPrivacyControl; // "false" or "true"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Global Privacy Control (GPC)

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Navigator.globalPrivacyControl
-    DNT header
-    Tk header
-   globalprivacycontrol.org
-   Global Privacy Control Spec
-   Do Not Track on Wikipedia

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Nov 14, 2023 by MDN contributors .
# Sec-Purpose #
 ____                 ____                                  
/ ___|  ___  ___     |  _ \ _   _ _ __ _ __   ___  ___  ___ 
\___ \ / _ \/ __|____| |_) | | | | '__| '_ \ / _ \/ __|/ _ \
 ___) |  __/ (_|_____|  __/| |_| | |  | |_) | (_) \__ \  __/
|____/ \___|\___|    |_|    \__,_|_|  | .__/ \___/|___/\___|
                                      |_|                   
Sec-Purpose

The  Sec-Purpose fetch metadata request header indicates the purpose for
which the requested resource will be used, when that purpose is
something other than immediate use by the user-agent.

The only purpose that is currently defined is  prefetch , which
indicates that the resource is being requested in anticipation that it
will be needed by a page that is likely to be navigated to in the near
future, such as a page linked in search results or a link that a user
has hovered over. The server can use this knowledge to: adjust the
caching expiry for the request, disallow the request, or perhaps to
treat it differently when counting page visits.

The header is sent when a page is loaded that has a  <link> element with
attribute  rel="prefetch" . Note that if this header is set then a
 Sec-Fetch-Dest header in the request must be set to  empty (any value
in the  <link> attribute  as is ignored) and the  Accept header should
match the value used for normal navigation requests.

  -------------------------------- -------------------------------
  Header type                      Fetch Metadata Request Header
  Forbidden header name            yes (prefix  Sec- )
  CORS-safelisted request header   no
  -------------------------------- -------------------------------

Syntax

http

    Sec-Purpose: prefetch

Directives

The allowed tokens are:

 prefetch

    The purpose is to prefetch a resource that may be needed in a
    probable future navigation.

Examples

A prefetch request

Consider the case where a browser loads a file with a  <link> element
that has the attribute  rel="prefetch" and an  href attribute containing
the address of an image file. The resulting  fetch() should result in an
HTTP request where  Sec-Purpose: prefetch ,  Sec-Fetch-Dest: empty , and
an  Accept value that is the same as the browser uses for page
navigation.

An example of such a header (on Firefox) is given below:

http

    GET /images/some_image.png HTTP/1.1
    Host: example.com
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate, br
    Sec-Purpose: prefetch
    Connection: keep-alive
    Sec-Fetch-Dest: empty
    Sec-Fetch-Mode: no-cors
    Sec-Fetch-Site: same-origin
    Pragma: no-cache
    Cache-Control: no-cache

Note: At time of writing FireFox incorrectly sets the  Accept header as
 Accept: */* for prefetches. The example has been modified to show what
the  Accept value should be. This issue can be tracked in Firefox bug
1836334 .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Standard
  # sec-purpose-header

  Prefetch
  # sec-purpose-header
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Prefetch (Glossary)
-    <link> element with attribute  rel="prefetch"

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jun 28, 2023 by MDN contributors .
# Sec-WebSocket-Accept #
 ____              __        __   _    ____             _        _        
/ ___|  ___  ___   \ \      / /__| |__/ ___|  ___   ___| | _____| |_      
\___ \ / _ \/ __|___\ \ /\ / / _ \ '_ \___ \ / _ \ / __| |/ / _ \ __|____ 
 ___) |  __/ (_|_____\ V  V /  __/ |_) |__) | (_) | (__|   <  __/ ||_____|
|____/ \___|\___|     \_/\_/ \___|_.__/____/ \___/ \___|_|\_\___|\__|     
                                                                          
    _                      _   
   / \   ___ ___ ___ _ __ | |_ 
  / _ \ / __/ __/ _ \ '_ \| __|
 / ___ \ (_| (_|  __/ |_) | |_ 
/_/   \_\___\___\___| .__/ \__|
                    |_|        
Sec-WebSocket-Accept

The Sec-WebSocket-Accept header is used in the websocket opening
handshake. It would appear in the response headers. That is, this is
header is sent from server to client to inform that server is willing to
initiate a websocket connection.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Sec-WebSocket-Accept: <hashed key>

Directives

<hashed key>

    The server takes the value of the Sec-WebSocket-Key sent in the
    handshake request, appends  258EAFA5-E914-47DA-95CA-C5AB0DC85B11 ,
    takes SHA-1 of the new value, and is then base64 encoded.

Examples

http

    Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=

Specifications

No specification found

No specification data found for  http.headers.Sec-WebSocket-Accept .
Check for problems with this page or contribute a missing  spec_url to
mdn/browser-compat-data . Also make sure the specification is included
in w3c/browser-specs .

See also

-    Sec-WebSocket-Key

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Server #
 ____                           
/ ___|  ___ _ ____   _____ _ __ 
\___ \ / _ \ '__\ \ / / _ \ '__|
 ___) |  __/ |   \ V /  __/ |   
|____/ \___|_|    \_/ \___|_|   
                                
Server

The  Server header describes the software used by the origin server that
handled the request — that is, the server that generated the response.

Warning: Avoid overly-detailed  Server values, as they can reveal
information that may make it (slightly) easier for attackers to exploit
known security holes.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Server: <product>

Directives

<product>

    A name of the software or the product that handled the request.
    Usually in a format similar to  User-Agent .

How much detail to include is an interesting balance to strike; exposing
the OS version is probably a bad idea, as mentioned in the earlier
warning about overly-detailed values. However, exposed Apache versions
helped browsers to work around a bug of the versions with
 Content-Encoding and  Range in combination.

Examples

http

    Server: Apache/2.4.1 (Unix)

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.server

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Allow

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Server-Timing #
 ____                              _____ _           _             
/ ___|  ___ _ ____   _____ _ __   |_   _(_)_ __ ___ (_)_ __   __ _ 
\___ \ / _ \ '__\ \ / / _ \ '__|____| | | | '_ ` _ \| | '_ \ / _` |
 ___) |  __/ |   \ V /  __/ | |_____| | | | | | | | | | | | | (_| |
|____/ \___|_|    \_/ \___|_|       |_| |_|_| |_| |_|_|_| |_|\__, |
                                                             |___/ 
Server-Timing

The  Server-Timing header communicates one or more metrics and
descriptions for a given request-response cycle. It is used to surface
any backend server timing metrics (e.g. database read/write, CPU time,
file system access, etc.) in the developer tools in the user's browser
or in the  PerformanceServerTiming interface.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

The syntax of the  Server-Timing header allows you to communicate
metrics in different ways: server metric name only, metric with value,
metric with value and description, and metric with description.

This header can contain one or more metrics, separated by commas. Each
metric has a name, an optional duration, and an optional description.
These components are separated by semi-colons.

The duration component consists of the string  "dur" , followed by  "="
, followed by the value, like  "dur=23.2" . The description component
consists of the string  "desc" , followed by  "=" , followed by the
value, like  "desc=DB lookup" .

The specification advises that names and descriptions should be kept as
short as possible (use abbreviations and omit optional values where
possible) to minimize the HTTP overhead.

http

    // Single metric without value
    Server-Timing: missedCache

    // Single metric with value
    Server-Timing: cpu;dur=2.4

    // Single metric with description and value
    Server-Timing: cache;desc="Cache Read";dur=23.2

    // Two metrics with value
    Server-Timing: db;dur=53, app;dur=47.2

    // Server-Timing as trailer
    Trailer: Server-Timing
    --- response body ---
    Server-Timing: total;dur=123.4

Privacy and security

The  Server-Timing header may expose potentially sensitive application
and infrastructure information. Consider to control which metrics are
returned when and to whom on the server side. For example, you could
only show metrics to authenticated users and nothing to the public.

PerformanceServerTiming interface

In addition to having  Server-Timing header metrics appear in the
developer tools of the browser, the  PerformanceServerTiming interface
enables tools to automatically collect and process metrics from
JavaScript. This interface is restricted to the same origin, but you can
use the  Timing-Allow-Origin header to specify the domains that are
allowed to access the server metrics. The interface is only available in
secure contexts (HTTPS) in some browsers.

The components of the  Server-Timing header map to the
 PerformanceServerTiming properties like this:

-    "name" ->  PerformanceServerTiming.name
-    "dur" ->  PerformanceServerTiming.duration
-    "desc" ->  PerformanceServerTiming.description

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Server Timing
  # the-server-timing-header-field

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    PerformanceServerTiming

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 17, 2023 by MDN contributors .
# Service-Worker-Navigation-Preload #
 ____                  _             __        __         _                  
/ ___|  ___ _ ____   _(_) ___ ___    \ \      / /__  _ __| | _____ _ __      
\___ \ / _ \ '__\ \ / / |/ __/ _ \____\ \ /\ / / _ \| '__| |/ / _ \ '__|____ 
 ___) |  __/ |   \ V /| | (_|  __/_____\ V  V / (_) | |  |   <  __/ | |_____|
|____/ \___|_|    \_/ |_|\___\___|      \_/\_/ \___/|_|  |_|\_\___|_|        
                                                                             
 _   _             _             _   _                   ____           _ 
| \ | | __ ___   _(_) __ _  __ _| |_(_) ___  _ __       |  _ \ _ __ ___| |
|  \| |/ _` \ \ / / |/ _` |/ _` | __| |/ _ \| '_ \ _____| |_) | '__/ _ \ |
| |\  | (_| |\ V /| | (_| | (_| | |_| | (_) | | | |_____|  __/| | |  __/ |
|_| \_|\__,_| \_/ |_|\__, |\__,_|\__|_|\___/|_| |_|     |_|   |_|  \___|_|
                     |___/                                                
                 _ 
  ___   __ _  __| |
 / _ \ / _` |/ _` |
| (_) | (_| | (_| |
 \___/ \__,_|\__,_|
                   
Service-Worker-Navigation-Preload

The  Service-Worker-Navigation-Preload request header indicates that the
request was the result of a  fetch() operation made during service
worker navigation preloading. It allows a server to respond with a
different resource than for a normal  fetch() .

If a different response may result from setting this header, the server
must set  Vary: Service-Worker-Navigation-Preload to ensure that the
different responses are cached.

For more information see  NavigationPreloadManager.setHeaderValue() (and
 NavigationPreloadManager ).

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

http

    Service-Worker-Navigation-Preload: <value>

Directives

 <value>

    An arbitrary value that indicates what data should be sent in the
    response to the preload request. This defaults to  true . It maybe
    set to any other string value in the service worker, using
     NavigationPreloadManager.setHeaderValue() .

Examples

The header below is sent by default.

http

    Service-Worker-Navigation-Preload: true

The service worker can set a different header value using
 NavigationPreloadManager.setHeaderValue() . For example, in order to
request that a fragment of the requested resource be returned in JSON
format, the value could be set with the string  json_fragment1 .

http

    Service-Worker-Navigation-Preload: json_fragment1

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Service Workers
  # handle-fetch

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Set-Cookie #
 ____       _         ____            _    _      
/ ___|  ___| |_      / ___|___   ___ | | _(_) ___ 
\___ \ / _ \ __|____| |   / _ \ / _ \| |/ / |/ _ \
 ___) |  __/ ||_____| |__| (_) | (_) |   <| |  __/
|____/ \___|\__|     \____\___/ \___/|_|\_\_|\___|
                                                  
Set-Cookie

The  Set-Cookie HTTP response header is used to send a cookie from the
server to the user agent, so that the user agent can send it back to the
server later. To send multiple cookies, multiple  Set-Cookie headers
should be sent in the same response.

Warning: Browsers block frontend JavaScript code from accessing the
 Set-Cookie header, as required by the Fetch spec, which defines
 Set-Cookie as a forbidden response-header name that must be filtered
out from any response exposed to frontend code.

For more information, see the guide on Using HTTP cookies .

  -------------------------------- -----------------
  Header type                      Response header
  Forbidden header name            no
  Forbidden response header name   yes
  -------------------------------- -----------------

Syntax

http

    Set-Cookie: <cookie-name>=<cookie-value>
    Set-Cookie: <cookie-name>=<cookie-value>; Domain=<domain-value>
    Set-Cookie: <cookie-name>=<cookie-value>; Expires=<date>
    Set-Cookie: <cookie-name>=<cookie-value>; HttpOnly
    Set-Cookie: <cookie-name>=<cookie-value>; Max-Age=<number>
    Set-Cookie: <cookie-name>=<cookie-value>; Partitioned
    Set-Cookie: <cookie-name>=<cookie-value>; Path=<path-value>
    Set-Cookie: <cookie-name>=<cookie-value>; Secure

    Set-Cookie: <cookie-name>=<cookie-value>; SameSite=Strict
    Set-Cookie: <cookie-name>=<cookie-value>; SameSite=Lax
    Set-Cookie: <cookie-name>=<cookie-value>; SameSite=None; Secure

    // Multiple attributes are also possible, for example:
    Set-Cookie: <cookie-name>=<cookie-value>; Domain=<domain-value>; Secure; HttpOnly

Attributes

 <cookie-name>=<cookie-value>

    Defines the cookie name and its value. A cookie definition begins
    with a name-value pair.

    A  <cookie-name> can contain any US-ASCII characters except for:
    control characters ( ASCII characters 0 up to 31 and ASCII
    character 127) or separator characters (space, tab and the
    characters:  ( ) < > @ , ; : \ " / [ ] ? = { } )

    A  <cookie-value> can optionally be wrapped in double quotes and
    include any US-ASCII character excluding control characters (ASCII
    characters 0 up to 31 and ASCII character 127), Whitespace , double
    quotes, commas, semicolons, and backslashes.

    Encoding : Many implementations perform URL encoding on cookie
    values. However, this is not required by the RFC specification. The
    URL encoding does help to satisfy the requirements of the characters
    allowed for  <cookie-value> .

    Note: Some  <cookie-name> have a specific semantic:

     __Secure- prefix : Cookies with names starting with  __Secure-
    (dash is part of the prefix) must be set with the  secure flag from
    a secure page (HTTPS).

     __Host- prefix : Cookies with names starting with  __Host- must be
    set with the  secure flag, must be from a secure page (HTTPS), must
    not have a domain specified (and therefore, are not sent to
    subdomains), and the path must be  / .

 Domain=<domain-value>  Optional 

    Defines the host to which the cookie will be sent.

    Only the current domain can be set as the value, or a domain of a
    higher order, unless it is a public suffix. Setting the domain will
    make the cookie available to it, as well as to all its subdomains.

    If omitted, this attribute defaults to the host of the current
    document URL, not including subdomains.

    Contrary to earlier specifications, leading dots in domain names (
     .example.com ) are ignored.

    Multiple host/domain values are not allowed, but if a domain is
    specified, then subdomains are always included.

 Expires=<date>  Optional 

    Indicates the maximum lifetime of the cookie as an HTTP-date
    timestamp. See  Date for the required formatting.

    If unspecified, the cookie becomes a session cookie . A session
    finishes when the client shuts down, after which the session cookie
    is removed.

    Warning: Many web browsers have a session restore feature that will
    save all tabs and restore them the next time the browser is used.
    Session cookies will also be restored, as if the browser was never
    closed.

    When an  Expires date is set, the deadline is relative to the client
    the cookie is being set on, not the server.

 HttpOnly  Optional 

    Forbids JavaScript from accessing the cookie, for example, through
    the  Document.cookie property. Note that a cookie that has been
    created with  HttpOnly will still be sent with JavaScript-initiated
    requests, for example, when calling  XMLHttpRequest.send() or
     fetch() . This mitigates attacks against cross-site scripting ( XSS
    ).

 Max-Age=<number>  Optional 

    Indicates the number of seconds until the cookie expires. A zero or
    negative number will expire the cookie immediately. If both  Expires
    and  Max-Age are set,  Max-Age has precedence.

 Partitioned  Optional   Experimental 

    Indicates that the cookie should be stored using partitioned
    storage. See Cookies Having Independent Partitioned State (CHIPS)
    for more details.

 Path=<path-value>  Optional 

    Indicates the path that must exist in the requested URL for the
    browser to send the  Cookie header.

    The forward slash (  / ) character is interpreted as a directory
    separator, and subdirectories are matched as well. For example, for
     Path=/docs ,

    -   the request paths  /docs ,  /docs/ ,  /docs/Web/ , and
         /docs/Web/HTTP will all match.
    -   the request paths  / ,  /docsets ,  /fr/docs will not match.

 SameSite=<samesite-value>  Optional 

    Controls whether or not a cookie is sent with cross-site requests,
    providing some protection against cross-site request forgery attacks
    ( CSRF ).

    The possible attribute values are:

     Strict

        Means that the browser sends the cookie only for same-site
        requests, that is, requests originating from the same site that
        set the cookie. If a request originates from a different domain
        or scheme (even with the same domain), no cookies with the
         SameSite=Strict attribute are sent.

     Lax

        Means that the cookie is not sent on cross-site requests, such
        as on requests to load images or frames, but is sent when a user
        is navigating to the origin site from an external site (for
        example, when following a link). This is the default behavior if
        the  SameSite attribute is not specified.

     None

        Means that the browser sends the cookie with both cross-site and
        same-site requests. The  Secure attribute must also be set when
        setting this value, like so  SameSite=None; Secure . If  Secure
        is missing an error will be logged:

            Cookie "myCookie" rejected because it has the "SameSite=None" attribute but is missing the "secure" attribute.

            This Set-Cookie was blocked because it had the "SameSite=None" attribute but did not have the "Secure" attribute, which is required in order to use "SameSite=None".

        Note: A  Secure cookie is only sent to the server with an
        encrypted request over the HTTPS protocol. Note that insecure
        sites (  http: ) can't set cookies with the  Secure directive,
        and therefore can't use  SameSite=None .

 Secure  Optional 

    Indicates that the cookie is sent to the server only when a request
    is made with the  https: scheme (except on localhost), and
    therefore, is more resistant to man-in-the-middle attacks.

    Note: Do not assume that  Secure prevents all access to sensitive
    information in cookies (session keys, login details, etc.). Cookies
    with this attribute can still be read/modified either with access to
    the client's hard disk or from JavaScript if the  HttpOnly cookie
    attribute is not set.

    Insecure sites (  http: ) cannot set cookies with the  Secure
    attribute (since Chrome 52 and Firefox 52). The  https: requirements
    are ignored when the  Secure attribute is set by localhost (since
    Chrome 89 and Firefox 75).

Examples

Session cookie

Session cookies are removed when the client shuts down. Cookies are
session cookies if they do not specify the  Expires or  Max-Age
attribute.

http

    Set-Cookie: sessionId=38afes7a8

Permanent cookie

Permanent cookies are removed at a specific date (  Expires ) or after a
specific length of time (  Max-Age ) and not when the client is closed.

http

    Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT

http

    Set-Cookie: id=a3fWa; Max-Age=2592000

Invalid domains

A cookie for a domain that does not include the server that set it
should be rejected by the user agent .

The following cookie will be rejected if set by a server hosted on
 originalcompany.com :

http

    Set-Cookie: qwerty=219ffwef9w0f; Domain=somecompany.co.uk

A cookie for a subdomain of the serving domain will be rejected.

The following cookie will be rejected if set by a server hosted on
 example.com :

http

    Set-Cookie: sessionId=e8bb43229de9; Domain=foo.example.com

Cookie prefixes

Cookie names prefixed with  __Secure- or  __Host- can be used only if
they are set with the  secure attribute from a secure (HTTPS) origin.

In addition, cookies with the  __Host- prefix must have a path of  /
(meaning any path at the host) and must not have a  Domain attribute.

Warning: For clients that don't implement cookie prefixes, you cannot
count on these additional assurances, and prefixed cookies will always
be accepted.

http

    // Both accepted when from a secure origin (HTTPS)
    Set-Cookie: __Secure-ID=123; Secure; Domain=example.com
    Set-Cookie: __Host-ID=123; Secure; Path=/

    // Rejected due to missing Secure attribute
    Set-Cookie: __Secure-id=1

    // Rejected due to the missing Path=/ attribute
    Set-Cookie: __Host-id=1; Secure

    // Rejected due to setting a Domain
    Set-Cookie: __Host-id=1; Secure; Path=/; Domain=example.com

Partitioned cookie

http

    Set-Cookie: __Host-example=34d8g; SameSite=None; Secure; Path=/; Partitioned;

Note: Partitioned cookies must be set with  Secure . In addition, it is
recommended to use the  __Host prefix when setting partitioned cookies
to make them bound to the hostname and not the registrable domain.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP State Management Mechanism
  # sane-set-cookie

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Compatibility notes

-   Starting with Chrome 52 and Firefox 52, insecure sites (  http: )
    can't set cookies with the  Secure attribute anymore.

See also

-   HTTP cookies
-    Cookie
-    Document.cookie
-   Samesite cookies explained (web.dev blog)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 10, 2024 by MDN contributors .
# SourceMap #
 ____                           __  __             
/ ___|  ___  _   _ _ __ ___ ___|  \/  | __ _ _ __  
\___ \ / _ \| | | | '__/ __/ _ \ |\/| |/ _` | '_ \ 
 ___) | (_) | |_| | | | (_|  __/ |  | | (_| | |_) |
|____/ \___/ \__,_|_|  \___\___|_|  |_|\__,_| .__/ 
                                            |_|    
SourceMap

The  SourceMap HTTP response header links generated code to a source map
, enabling the browser to reconstruct the original source and present
the reconstructed original in the debugger.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    SourceMap: <url>
    X-SourceMap: <url> (deprecated)

Directives

<url>

    A relative (to the request URL) or absolute URL pointing to a source
    map file.

Examples

http

    SourceMap: /path/to/file.js.map

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Source Map
  # linking-generated-code

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Firefox Developer Tools: using a source map

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Strict-Transport-Security #
 ____  _        _      _      _____                                     _   
/ ___|| |_ _ __(_) ___| |_   |_   _| __ __ _ _ __  ___ _ __   ___  _ __| |_ 
\___ \| __| '__| |/ __| __|____| || '__/ _` | '_ \/ __| '_ \ / _ \| '__| __|
 ___) | |_| |  | | (__| ||_____| || | | (_| | | | \__ \ |_) | (_) | |  | |_ 
|____/ \__|_|  |_|\___|\__|    |_||_|  \__,_|_| |_|___/ .__/ \___/|_|   \__|
                                                      |_|                   
      ____                       _ _         
     / ___|  ___  ___ _   _ _ __(_) |_ _   _ 
 ____\___ \ / _ \/ __| | | | '__| | __| | | |
|_____|__) |  __/ (__| |_| | |  | | |_| |_| |
     |____/ \___|\___|\__,_|_|  |_|\__|\__, |
                                       |___/ 
Strict-Transport-Security

The HTTP  Strict-Transport-Security response header (often abbreviated
as HSTS ) informs browsers that the site should only be accessed using
HTTPS, and that any future attempts to access it using HTTP should
automatically be converted to HTTPS.

Note: This is more secure than simply configuring a HTTP to HTTPS (301)
redirect on your server, where the initial HTTP connection is still
vulnerable to a man-in-the-middle attack.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Strict-Transport-Security: max-age=<expire-time>
    Strict-Transport-Security: max-age=<expire-time>; includeSubDomains
    Strict-Transport-Security: max-age=<expire-time>; includeSubDomains; preload

Directives

 max-age=<expire-time>

    The time, in seconds, that the browser should remember that a site
    is only to be accessed using HTTPS.

 includeSubDomains  Optional 

    If this optional parameter is specified, this rule applies to all of
    the site's subdomains as well.

 preload  Optional   Non-standard 

    See Preloading Strict Transport Security for details. When using
     preload , the  max-age directive must be at least  31536000 (1
    year), and the  includeSubDomains directive must be present. Not
    part of the specification.

Description

If a website accepts a connection through HTTP and redirects to HTTPS,
visitors may initially communicate with the non-encrypted version of the
site before being redirected, if, for example, the visitor types
 http://www.foo.com/ or even just foo.com. This creates an opportunity
for a man-in-the-middle attack. The redirect could be exploited to
direct visitors to a malicious site instead of the secure version of the
original site.

The HTTP Strict Transport Security header informs the browser that it
should never load a site using HTTP and should automatically convert all
attempts to access the site using HTTP to HTTPS requests instead.

Note: The  Strict-Transport-Security header is ignored by the browser
when your site has only been accessed using HTTP. Once your site is
accessed over HTTPS with no certificate errors, the browser knows your
site is HTTPS capable and will honor the  Strict-Transport-Security
header. Browsers do this as attackers may intercept HTTP connections to
the site and inject or remove the header.

An example scenario

You log into a free Wi-Fi access point at an airport and start surfing
the web, visiting your online banking service to check your balance and
pay a couple of bills. Unfortunately, the access point you're using is
actually a hacker's laptop, and they're intercepting your original HTTP
request and redirecting you to a clone of your bank's site instead of
the real thing. Now your private data is exposed to the hacker.

Strict Transport Security resolves this problem; as long as you've
accessed your bank's website once using HTTPS, and the bank's website
uses Strict Transport Security, your browser will know to automatically
use only HTTPS, which prevents hackers from performing this sort of
man-in-the-middle attack.

How the browser handles it

The first time your site is accessed using HTTPS and it returns the
 Strict-Transport-Security header, the browser records this information,
so that future attempts to load the site using HTTP will automatically
use HTTPS instead.

When the expiration time specified by the  Strict-Transport-Security
header elapses, the next attempt to load the site via HTTP will proceed
as normal instead of automatically using HTTPS.

Whenever the Strict-Transport-Security header is delivered to the
browser, it will update the expiration time for that site, so sites can
refresh this information and prevent the timeout from expiring. Should
it be necessary to disable Strict Transport Security, setting the
 max-age to 0 (over an https connection) will immediately expire the
 Strict-Transport-Security header, allowing access via http.

Preloading Strict Transport Security

Google maintains an HSTS preload service . By following the guidelines
and successfully submitting your domain, you can ensure that browsers
will connect to your domain only via secure connections. While the
service is hosted by Google, all browsers are using this preload list.
However, it is not part of the HSTS specification and should not be
treated as official.

-   Information regarding the HSTS preload list in Chrome:
    https://www.chromium.org/hsts
-   Consultation of the Firefox HSTS preload list: nsSTSPreloadList.inc

Examples

All present and future subdomains will be HTTPS for a  max-age of 1
year. This blocks access to pages or subdomains that can only be served
over HTTP.

http

    Strict-Transport-Security: max-age=31536000; includeSubDomains

Although a  max-age of 1 year is acceptable for a domain, two years is
the recommended value as explained on https://hstspreload.org .

In the following example,  max-age is set to 2 years, and is suffixed
with  preload , which is necessary for inclusion in all major web
browsers' HSTS preload lists, like Chromium, Edge, and Firefox.

http

    Strict-Transport-Security: max-age=63072000; includeSubDomains; preload

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Strict Transport Security (HSTS)
  # section-6.1

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Blog post: HTTP Strict Transport Security has landed!
-   Blog post: HTTP Strict Transport Security (force HTTPS)
-   OWASP Article: HTTP Strict Transport Security
-   Wikipedia: HTTP Strict Transport Security
-   HSTS preload service
-   Features restricted to secure contexts

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 10, 2023 by MDN contributors .
# Supports-Loading-Mode #
 ____                               _             _                    _ _ 
/ ___| _   _ _ __  _ __   ___  _ __| |_ ___      | |    ___   __ _  __| (_)
\___ \| | | | '_ \| '_ \ / _ \| '__| __/ __|_____| |   / _ \ / _` |/ _` | |
 ___) | |_| | |_) | |_) | (_) | |  | |_\__ \_____| |__| (_) | (_| | (_| | |
|____/ \__,_| .__/| .__/ \___/|_|   \__|___/     |_____\___/ \__,_|\__,_|_|
            |_|   |_|                                                      
                   __  __           _      
 _ __   __ _      |  \/  | ___   __| | ___ 
| '_ \ / _` |_____| |\/| |/ _ \ / _` |/ _ \
| | | | (_| |_____| |  | | (_) | (_| |  __/
|_| |_|\__, |     |_|  |_|\___/ \__,_|\___|
       |___/                               
Supports-Loading-Mode

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The  Supports-Loading-Mode response header is set by a navigation target
to opt-in to using various higher-risk loading modes.

  --------------------------------- -----------------
  Header type                       Response header
  Forbidden header name             no
  CORS-safelisted response header   no
  --------------------------------- -----------------

Syntax

http

    Supports-Loading-Mode: credentialed-prerender

Directives

The  Supports-Loading-Mode header is a list of one or more tokens, which
can include the following values:

 credentialed-prerender  Experimental 

    Indicates that a destination origin opts in to loading documents via
    cross-origin, same-site prerendering .

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Speculation Rules API
-   Speculative loading
-   Prerender pages in Chrome for instant page navigations on
    developer.chrome.com (2023)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# TE #
 _____ _____ 
|_   _| ____|
  | | |  _|  
  | | | |___ 
  |_| |_____|
             
TE

The  TE request header specifies the transfer encodings the user agent
is willing to accept. (you could informally call it
 Accept-Transfer-Encoding , which would be more intuitive).

Note: In HTTP/2 and HTTP/3 , the  TE header field is only accepted if
the  trailers value is set.

See also the  Transfer-Encoding response header for more details on
transfer encodings. Note that  chunked is always acceptable for HTTP/1.1
recipients and you don't have to specify  "chunked" using the  TE
header. However, it is useful for setting if the client is accepting
trailer fields in a chunked transfer coding using the "trailers" value.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   yes
  ----------------------- ----------------

Syntax

http

    TE: compress
    TE: deflate
    TE: gzip
    TE: trailers

    // Multiple directives, weighted with the quality value syntax:
    TE: trailers, deflate;q=0.5

Directives

 compress

    A format using the Lempel-Ziv-Welch (LZW) algorithm is accepted as a
    transfer coding name.

 deflate

    Using the zlib structure is accepted as a transfer coding name.

 gzip

    A format using the Lempel-Ziv coding (LZ77), with a 32-bit CRC is
    accepted as a transfer coding name.

 trailers

    Indicates that the client is willing to accept trailer fields in a
    chunked transfer coding.

 q

    When multiple transfer codings are acceptable, the  q parameter of
    the quality value syntax can rank codings by preference.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.te

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Transfer-Encoding
-    Trailer
-   Chunked transfer encoding

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Timing-Allow-Origin #
 _____ _           _                     _    _ _                     ___  
|_   _(_)_ __ ___ (_)_ __   __ _        / \  | | | _____      __     / _ \ 
  | | | | '_ ` _ \| | '_ \ / _` |_____ / _ \ | | |/ _ \ \ /\ / /____| | | |
  | | | | | | | | | | | | | (_| |_____/ ___ \| | | (_) \ V  V /_____| |_| |
  |_| |_|_| |_| |_|_|_| |_|\__, |    /_/   \_\_|_|\___/ \_/\_/       \___/ 
                           |___/                                           
      _       _       
 _ __(_) __ _(_)_ __  
| '__| |/ _` | | '_ \ 
| |  | | (_| | | | | |
|_|  |_|\__, |_|_| |_|
        |___/         
Timing-Allow-Origin

The  Timing-Allow-Origin response header specifies origins that are
allowed to see values of attributes retrieved via features of the
Resource Timing API , which would otherwise be reported as zero due to
cross-origin restrictions.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Timing-Allow-Origin: *
    Timing-Allow-Origin: <origin>[, <origin>]*

Directives

 *

    The server may specify "*" as a wildcard, thereby allowing any
    origin to see timing resources.

<origin>

    Specifies a URI that may see the timing resources. You can specify
    multiple origins, separated by commas.

Examples

To allow any resource to see timing resources:

http

    Timing-Allow-Origin: *

To allow  https://developer.mozilla.org to see timing resources, you can
specify:

http

    Timing-Allow-Origin: https://developer.mozilla.org

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Resource Timing
  # sec-timing-allow-origin

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Resource Timing API
-    Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Tk #
 _____ _    
|_   _| | __
  | | | |/ /
  | | |   < 
  |_| |_|\_\
            
Tk

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

Non-standard: This feature is non-standard and is not on a standards
track. Do not use it on production sites facing the Web: it will not
work for every user. There may also be large incompatibilities between
implementations and the behavior may change in the future.

The  Tk response header indicates the tracking status that applied to
the corresponding request.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Tk: !  (under construction)
    Tk: ?  (dynamic)
    Tk: G  (gateway or multiple parties)
    Tk: N  (not tracking)
    Tk: T  (tracking)
    Tk: C  (tracking with consent)
    Tk: P  (potential consent)
    Tk: D  (disregarding DNT)
    Tk: U  (updated)

Directives

!

    Under construction. The origin server is currently testing its
    communication of tracking status.

?

    Dynamic. The origin server needs more information to determine
    tracking status.

G

    Gateway or multiple parties. The server is acting as a gateway to an
    exchange involving multiple parties.

N

    Not tracking.

T

    Tracking.

C

    Tracking with consent. The origin server believes it has received
    prior consent for tracking this user, user agent, or device.

P

    Potential consent. The origin server does not know, in real-time,
    whether it has received prior consent for tracking this user, user
    agent, or device, but promises not to use or share any  DNT:1 data
    until such consent has been determined, and further promises to
    delete or permanently de-identify within 48 hours any  DNT:1 data
    received for which such consent has not been received.

D

    Disregarding DNT. The origin server is unable or unwilling to
    respect a tracking preference received from the requesting user
    agent.

U

    Updated. The request resulted in a potential change to the tracking
    status applicable to this user, user agent, or device.

Examples

A  Tk header for a resource that claims not to be tracking would look
like:

http

    Tk: N

Specifications

No specification found

No specification data found for  http.headers.Tk .
Check for problems with this page or contribute a missing  spec_url to
mdn/browser-compat-data . Also make sure the specification is included
in w3c/browser-specs .

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    DNT header
-    Navigator.doNotTrack

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Nov 10, 2023 by MDN contributors .
# Trailer #
 _____          _ _           
|_   _| __ __ _(_) | ___ _ __ 
  | || '__/ _` | | |/ _ \ '__|
  | || | | (_| | | |  __/ |   
  |_||_|  \__,_|_|_|\___|_|   
                              
Trailer

The Trailer response header allows the sender to include additional
fields at the end of chunked messages in order to supply metadata that
might be dynamically generated while the message body is sent, such as a
message integrity check, digital signature, or post-processing status.

Note: The  TE request header needs to be set to "trailers" to allow
trailer fields.

  ----------------------- ---------------------------------------------------
  Header type             Request header , Response header , Payload header
  Forbidden header name   yes
  ----------------------- ---------------------------------------------------

Syntax

http

    Trailer: header-names

Directives

 header-names

    HTTP header fields which will be present in the trailer part of
    chunked messages. These header fields are disallowed :

    -   message framing headers (e.g.,  Transfer-Encoding and
         Content-Length ),
    -   routing headers (e.g.,  Host ),
    -   request modifiers (e.g., controls and conditionals, like
         Cache-Control ,  Max-Forwards , or  TE ),
    -   authentication headers (e.g.,  Authorization or  Set-Cookie ),
    -   or  Content-Encoding ,  Content-Type ,  Content-Range , and
         Trailer itself.

Examples

Chunked transfer encoding using a trailing header

In this example, the  Expires header is used at the end of the chunked
message and serves as a trailing header.

http

    HTTP/1.1 200 OK
    Content-Type: text/plain
    Transfer-Encoding: chunked
    Trailer: Expires

    7\r\n
    Mozilla\r\n
    9\r\n
    Developer\r\n
    7\r\n
    Network\r\n
    0\r\n
    Expires: Wed, 21 Oct 2015 07:28:00 GMT\r\n
    \r\n

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.trailer

  HTTP/1.1
  # chunked.trailer.section
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Transfer-Encoding
-    TE
-   Chunked transfer encoding

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Transfer-Encoding #
 _____                     __                _____                     _ _ 
|_   _| __ __ _ _ __  ___ / _| ___ _ __     | ____|_ __   ___ ___   __| (_)
  | || '__/ _` | '_ \/ __| |_ / _ \ '__|____|  _| | '_ \ / __/ _ \ / _` | |
  | || | | (_| | | | \__ \  _|  __/ | |_____| |___| | | | (_| (_) | (_| | |
  |_||_|  \__,_|_| |_|___/_|  \___|_|       |_____|_| |_|\___\___/ \__,_|_|
                                                                           
             
 _ __   __ _ 
| '_ \ / _` |
| | | | (_| |
|_| |_|\__, |
       |___/ 
Transfer-Encoding

The  Transfer-Encoding header specifies the form of encoding used to
safely transfer the payload body to the user.

Note: HTTP/2 disallows all uses of the Transfer-Encoding header other
than the HTTP/2 specific:  "trailers" . HTTP 2 provides its own more
efficient mechanisms for data streaming than chunked transfer and
forbids the use of the header. Usage of the header in HTTP/2 may likely
result in a specific  protocol error as HTTP/2 Protocol prohibits the
use.

 Transfer-Encoding is a hop-by-hop header , that is applied to a message
between two nodes, not to a resource itself. Each segment of a
multi-node connection can use different  Transfer-Encoding values. If
you want to compress data over the whole connection, use the end-to-end
 Content-Encoding header instead.

When present on a response to a  HEAD request that has no body, it
indicates the value that would have applied to the corresponding  GET
message.

  ----------------------- ---------------------------------------------------
  Header type             Request header , Response header , Payload header
  Forbidden header name   yes
  ----------------------- ---------------------------------------------------

Syntax

http

    Transfer-Encoding: chunked
    Transfer-Encoding: compress
    Transfer-Encoding: deflate
    Transfer-Encoding: gzip

    // Several values can be listed, separated by a comma
    Transfer-Encoding: gzip, chunked

Directives

 chunked

    Data is sent in a series of chunks. The  Content-Length header is
    omitted in this case and at the beginning of each chunk you need to
    add the length of the current chunk in hexadecimal format, followed
    by '  \r\n ' and then the chunk itself, followed by another '  \r\n
    '. The terminating chunk is a regular chunk, with the exception that
    its length is zero. It is followed by the trailer, which consists of
    a (possibly empty) sequence of header fields.

 compress

    A format using the Lempel-Ziv-Welch (LZW) algorithm. The value name
    was taken from the UNIX compress program, which implemented this
    algorithm. Like the compress program, which has disappeared from
    most UNIX distributions, this content-encoding is used by almost no
    browsers today, partly because of a patent issue (which expired in
    2003).

 deflate

    Using the zlib structure (defined in RFC 1950 ), with the deflate
    compression algorithm (defined in RFC 1951 ).

 gzip

    A format using the Lempel-Ziv coding (LZ77), with a 32-bit CRC. This
    is originally the format of the UNIX gzip program. The HTTP/1.1
    standard also recommends that the servers supporting this
    content-encoding should recognize  x-gzip as an alias, for
    compatibility purposes.

Examples

Chunked encoding

Chunked encoding is useful when larger amounts of data are sent to the
client and the total size of the response may not be known until the
request has been fully processed. For example, when generating a large
HTML table resulting from a database query or when transmitting large
images.
A chunked response looks like this:

http

    HTTP/1.1 200 OK
    Content-Type: text/plain
    Transfer-Encoding: chunked

    7\r\n
    Mozilla\r\n
    11\r\n
    Developer Network\r\n
    0\r\n
    \r\n

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP/1.1
  # field.transfer-encoding

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Accept-Encoding
-    Content-Encoding
-    Content-Length
-   Header fields that regulate the use of trailers:  TE (requests) and
     Trailer (responses).
-   Chunked transfer encoding

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Upgrade #
 _   _                           _      
| | | |_ __   __ _ _ __ __ _  __| | ___ 
| | | | '_ \ / _` | '__/ _` |/ _` |/ _ \
| |_| | |_) | (_| | | | (_| | (_| |  __/
 \___/| .__/ \__, |_|  \__,_|\__,_|\___|
      |_|    |___/                      
Upgrade

The HTTP 1.1 (only)  Upgrade header can be used to upgrade an already
established client/server connection to a different protocol (over the
same transport protocol). For example, it can be used by a client to
upgrade a connection from HTTP 1.1 to HTTP 2.0, or an HTTP or HTTPS
connection into a WebSocket.

Warning: HTTP/2 explicitly disallows the use of this mechanism/header;
it is specific to HTTP/1.1.

  ----------------------- ----------------------------------
  Header type             Request header , Response header
  Forbidden header name   yes
  ----------------------- ----------------------------------

Overview

The  Upgrade header field may be used by clients to invite a server to
switch to one (or more) of the listed protocols, in descending
preference order.

For example, the client might send a  GET request as shown, listing the
preferred protocols to switch to (in this case "example/1" and "foo/2"):

http

    GET /index.html HTTP/1.1
    Host: www.example.com
    Connection: upgrade
    Upgrade: example/1, foo/2

Note:  Connection: upgrade must be set whenever  Upgrade is sent.

The server can choose to ignore the request, for any reason, in which
case it should just respond as though the  Upgrade header had not been
sent (for example, with a  200 OK ).

If the server decides to upgrade the connection, it must:

1.  Send back a  101 Switching Protocols response status with an
     Upgrade header that specifies the protocol(s) being switched to.
    For example:
    http

        HTTP/1.1 101 Switching Protocols
        Upgrade: foo/2
        Connection: Upgrade
2.  Send a response to the original request using the new protocol (the
    server may only switch to a protocol with which it can complete the
    original request).

A server may also send the header as part of a  426  Upgrade Required
response, to indicate that the server won't perform the request using
the current protocol, but might do so if the protocol is changed. The
client can then request a protocol change using the process above.

More detail and examples are provided in the topic Protocol upgrade
mechanism .

Syntax

http

    Connection: upgrade
    Upgrade: protocol_name[/protocol_version]

Notes:

-   The  Connection header with type  upgrade must always be sent with
    the  Upgrade header (as shown above).
-   Protocols are listed, comma-separated, in order of descending
    preference. Protocol version is optional. For example:

http

    Connection: upgrade
    Upgrade: a_protocol/1, example, another_protocol/2.2

Directives

any comma-separated list protocol names (each with optional protocol version)

    One or more protocol names with optional version ("/" separated).
    The protocols are listed in order of descending preference.

Examples

http

    Connection: upgrade
    Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11

http

    Connection: Upgrade
    Upgrade: websocket

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.upgrade

  HTTP Semantics
  # status.426

  HTTP/2
  # informational-responses
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Protocol upgrade mechanism
-    101  Switching Protocol
-    426  Upgrade Required
-    Connection

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 25, 2023 by MDN contributors .
# Upgrade-Insecure-Requests #
 _   _                           _           ___                           
| | | |_ __   __ _ _ __ __ _  __| | ___     |_ _|_ __  ___  ___  ___ _   _ 
| | | | '_ \ / _` | '__/ _` |/ _` |/ _ \_____| || '_ \/ __|/ _ \/ __| | | |
| |_| | |_) | (_| | | | (_| | (_| |  __/_____| || | | \__ \  __/ (__| |_| |
 \___/| .__/ \__, |_|  \__,_|\__,_|\___|    |___|_| |_|___/\___|\___|\__,_|
      |_|    |___/                                                         
                ____                            _       
 _ __ ___      |  _ \ ___  __ _ _   _  ___  ___| |_ ___ 
| '__/ _ \_____| |_) / _ \/ _` | | | |/ _ \/ __| __/ __|
| | |  __/_____|  _ <  __/ (_| | |_| |  __/\__ \ |_\__ \
|_|  \___|     |_| \_\___|\__, |\__,_|\___||___/\__|___/
                             |_|                        
Upgrade-Insecure-Requests

The HTTP  Upgrade-Insecure-Requests request header sends a signal to the
server expressing the client's preference for an encrypted and
authenticated response, and that it can successfully handle the
 upgrade-insecure-requests CSP directive.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

http

    Upgrade-Insecure-Requests: 1

Examples

A client's request signals to the server that it supports the upgrade
mechanisms of  upgrade-insecure-requests :

http

    GET / HTTP/1.1
    Host: example.com
    Upgrade-Insecure-Requests: 1

The server can now redirect to a secure version of the site. A  Vary
header can be used so that the site isn't served by caches to clients
that don't support the upgrade mechanism.

http

    Location: https://example.com/
    Vary: Upgrade-Insecure-Requests

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Upgrade Insecure Requests
  # preference

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-   CSP  upgrade-insecure-requests directive

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Firefox user agent string reference #
 _____ _           __                                 
|  ___(_)_ __ ___ / _| _____  __  _   _ ___  ___ _ __ 
| |_  | | '__/ _ \ |_ / _ \ \/ / | | | / __|/ _ \ '__|
|  _| | | | |  __/  _| (_) >  <  | |_| \__ \  __/ |   
|_|   |_|_|  \___|_|  \___/_/\_\  \__,_|___/\___|_|   
                                                      
                        _         _        _             
  __ _  __ _  ___ _ __ | |_   ___| |_ _ __(_)_ __   __ _ 
 / _` |/ _` |/ _ \ '_ \| __| / __| __| '__| | '_ \ / _` |
| (_| | (_| |  __/ | | | |_  \__ \ |_| |  | | | | | (_| |
 \__,_|\__, |\___|_| |_|\__| |___/\__|_|  |_|_| |_|\__, |
       |___/                                       |___/ 
           __                              
 _ __ ___ / _| ___ _ __ ___ _ __   ___ ___ 
| '__/ _ \ |_ / _ \ '__/ _ \ '_ \ / __/ _ \
| | |  __/  _|  __/ | |  __/ | | | (_|  __/
|_|  \___|_|  \___|_|  \___|_| |_|\___\___|
                                           
Firefox user agent string reference

This document describes the user agent string used in Firefox 4 and
later and applications based on Gecko 2.0 and later. For a breakdown of
changes to the string in Gecko 2.0, see Final User Agent string for
Firefox 4 (blog post). See also this document on user agent sniffing and
this Hacks blog post .

General form

The UA string of Firefox itself is broken down into four components:

 Mozilla/5.0 (platform; rv:geckoversion) Gecko/geckotrail Firefox/firefoxversion

-    Mozilla/5.0 is the general token that says the browser is Mozilla
    compatible, and is common to almost every browser today.
-    platform describes the native platform the browser is running on
    (e.g. Windows, Mac, Linux or Android), and whether or not it's a
    mobile phone. Firefox OS phones say "  Mobile "; the web is the
    platform. Note that  platform can consist of multiple "; "-separated
    tokens. See below for further details and examples.
-    rv:geckoversion indicates the release version of Gecko (such as "
     17.0 ").
-    Gecko/geckotrail indicates that the browser is based on Gecko.
-   On Desktop,  geckotrail is the fixed string "  20100101 "
-    Firefox/firefoxversion indicates the browser is Firefox, and
    provides the version (such as "  17.0 ").
-   From Firefox 10 on mobile,  geckotrail is the same as
     firefoxversion .

Note: The recommended way of sniffing for Gecko-based browsers (if you
have to sniff for the browser engine instead of using feature detection)
is by the presence of the "  Gecko " and "  rv: " strings, since some
other browsers include a "  like Gecko " token.

For other products based on Gecko, the string can take one of two forms,
where the tokens have the same meaning except those noted below:

 Mozilla/5.0 (platform; rv:geckoversion) Gecko/geckotrail appname/appversion
 Mozilla/5.0 (platform; rv:geckoversion) Gecko/geckotrail Firefox/firefoxversion appname/appversion

-    appname/appversion indicates the application name and version. For
    instance, this could be "  Camino/2.1.1 ", or "  SeaMonkey/2.7.1 ".
-    Firefox/firefoxversion is an optional compatibility token that some
    Gecko-based browsers may choose to incorporate, to achieve maximum
    compatibility with websites that expect Firefox.  firefoxversion
    will generally represent the equivalent Firefox release
    corresponding to the given Gecko version. Some Gecko-based browsers
    may not opt into using this token; for this reason, sniffers should
    be looking for Gecko — not Firefox!

Prior to Firefox 4 and Gecko 2.0, it was possible for extensions and
plug-ins to add user agent parts, but that has not been possible since
Firefox bug 581008 .

Mobile and Tablet indicators

The  platform part of the UA string indicates if Firefox is running on a
phone-sized or tablet device. When Firefox runs on a device that has the
phone form factor, there is a  Mobile; token in the  platform part of
the UA string. When Firefox runs on a tablet device, there is a  Tablet;
token in the  platform part of the UA string instead. For example:

    Mozilla/5.0 (Android 4.4; Mobile; rv:41.0) Gecko/41.0 Firefox/41.0
    Mozilla/5.0 (Android 4.4; Tablet; rv:41.0) Gecko/41.0 Firefox/41.0

Note: The version numbers are not relevant. Avoid inferring materials
based on these.

The preferred way to target content to a device form factor is to use
CSS Media Queries. However, if you use UA sniffing to target content to
a device form factor, please look for Mobi (to include Opera Mobile,
which uses "Mobi") for the phone form factor and do not assume any
correlation between "Android" and the device form factor. This way, your
code will work if/when Firefox ships on other phone/tablet operating
systems or Android is used for laptops. Also, please use touch detection
to find touch devices rather than looking for "Mobi" or "Tablet", since
there may be touch devices which are not tablets.

Note: Firefox OS devices identify themselves without any operating
system indication; for example: "Mozilla/5.0 (Mobile; rv:15.0)
Gecko/15.0 Firefox/15.0". The web is the platform.

Windows

Windows user agents have the following variations, where x.y is the
Windows NT version (for instance, Windows NT 6.1).

Linux

Linux is a more diverse platform. Your distribution of Linux might
include an extension that changes your user-agent. A few common examples
are given below.

  Linux version                 Gecko user agent string
  ----------------------------- ----------------------------------------------------------------------
  Linux desktop on i686 CPU     Mozilla/5.0 (X11; Linux i686; rv:10.0) Gecko/20100101 Firefox/10.0
  Linux desktop on x86_64 CPU   Mozilla/5.0 (X11; Linux x86_64; rv:10.0) Gecko/20100101 Firefox/10.0

Android (version 40 and below)

  Form factor   Gecko user agent string
  ------------- ----------------------------------------------------------------
  Phone         Mozilla/5.0 (Android; Mobile; rv:40.0) Gecko/40.0 Firefox/40.0
  Tablet        Mozilla/5.0 (Android; Tablet; rv:40.0) Gecko/40.0 Firefox/40.0

Android (version 41 and above)

Beginning in version 41, Firefox for Android will contain the Android
version as part of the platform token. For increased interoperability,
if the browser is running on a version below 4 it will report 4.4.
Android versions 4 and above will report the version accurately. Note
that the same Gecko—with the same capabilities—is shipped to all
versions of Android.

  Form factor   Gecko user agent string
  ------------- --------------------------------------------------------------------
  Phone         Mozilla/5.0 (Android 4.4; Mobile; rv:41.0) Gecko/41.0 Firefox/41.0
  Tablet        Mozilla/5.0 (Android 4.4; Tablet; rv:41.0) Gecko/41.0 Firefox/41.0

Focus for Android

From version 1, Focus is powered by Android WebView and uses the
following user agent string format:

    Mozilla/5.0 (Linux; <Android Version> <Build Tag etc.>) AppleWebKit/<WebKit Rev> (KHTML, like Gecko) Version/4.0 Focus/<focusversion> Chrome/<Chrome Rev> Mobile Safari/<WebKit Rev>

Tablet versions on WebView mirror mobile, but do not contain a  Mobile
token.

Starting in Version 6, users can opt into using a GeckoView-based Focus
for Android with a hidden preference: it uses a GeckoView UA string to
advertise Gecko compatibility.

  Focus Version (Rendering Engine)   User Agent string
  ---------------------------------- ----------------------------------------------------------------------------------------------------------------------------------------
  1.0 (WebView Mobile)               Mozilla/5.0 (Linux; Android 7.0) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Focus/1.0 Chrome/59.0.3029.83 Mobile Safari/537.36
  1.0 (WebView Tablet)               Mozilla/5.0 (Linux; Android 7.0) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Focus/1.0 Chrome/59.0.3029.83 Safari/537.36
  6.0 (GeckoView)                    Mozilla/5.0 (Android 7.0; Mobile; rv:62.0) Gecko/62.0 Firefox/62.0

Klar for Android

Since version 4.1, Klar for Android uses the same UA string as Focus for
Android . Before version 4.1, it sent a Klar/<version> product/version
token.

  Klar Version (Rendering Engine)   User Agent string
  --------------------------------- ----------------------------------------------------------------------------------------------------------------------------------------
  1.0 (WebView)                     Mozilla/5.0 (Linux; Android 7.0) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Klar/1.0 Chrome/58.0.3029.83 Mobile Safari/537.36
  4.1+ (WebView)                    Mozilla/5.0 (Linux; Android 7.0) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Focus/4.1 Chrome/62.0.3029.83 Mobile Safari/537.36
  6.0+ (GeckoView)                  Mozilla/5.0 (Android 7.0; Mobile; rv:62.0) Gecko/62.0 Firefox/62.0

Focus for iOS

Version 7 of Focus for iOS uses a user agent string with the following
format:

    Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) FxiOS/7.0.4 Mobile/16B91 Safari/605.1.15

Note: this user agent was retrieved from an iPhone XR simulator and may
be different on device.

Firefox for Fire TV

Version 3 (and probably earlier) of Firefox for Fire TV use a user agent
string with the following format:

    Mozilla/5.0 (Linux; <Android version>) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Focus/<firefoxversion> Chrome/<Chrome Rev> Safari/<WebKit Rev>

  Firefox TV version   User Agent string
  -------------------- ------------------------------------------------------------------------------------------------------------------------------------
  v3.0                 Mozilla/5.0 (Linux; Android 7.1.2) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Focus/3.0 Chrome/59.0.3017.125 Safari/537.36

Firefox for Echo Show

From version 1.1, Firefox for Echo Show uses a user agent string with
the following format:

    Mozilla/5.0 (Linux; <Android version>) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Focus/<firefoxversion> Chrome/<Chrome Rev> Safari/<WebKit Rev>

  Firefox for Echo Show version   User agent string
  ------------------------------- ------------------------------------------------------------------------------------------------------------------------------------
  v1.1                            Mozilla/5.0 (Linux; Android 5.1.1) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Focus/1.1 Chrome/59.0.3017.125 Safari/537.36

Firefox OS

  Form factor       Gecko user agent string
  ----------------- -------------------------------------------------------------
  Phone             Mozilla/5.0 (Mobile; rv:26.0) Gecko/26.0 Firefox/26.0
  Tablet            Mozilla/5.0 (Tablet; rv:26.0) Gecko/26.0 Firefox/26.0
  TV                Mozilla/5.0 (TV; rv:44.0) Gecko/44.0 Firefox/44.0
  Device-specific   Mozilla/5.0 (Mobile; nnnn; rv:26.0) Gecko/26.0 Firefox/26.0

Device-specific user agent strings

Although it is strongly discouraged by Mozilla, some handset
manufacturers unfortunately include a token in their device's UA string
that represents their device id. If this is the case, the Firefox OS UA
string will look like the device-specific string in the table above,
where nnnn; is the manufacturer's code for the device (see Guidelines ).
Some of them we have noticed are of the form " NexusOne; ", " ZTEOpen;
", or " Open C; " (note that putting space is also discouraged). We
provide this information to assist with your UA detection logic, but
Mozilla discourages the detection of a device id in UA strings.

Here is a JavaScript regular expression that will detect all mobile
devices, including devices with a device id in their UA string:

js

    /mobi/i;

The  i makes it case-insensitive, and  mobi matches all mobile browsers.

Firefox OS version number

While the version number for Firefox OS is not included in the UA
string, it is possible to infer version information from the Gecko
version number present in the UA string.

  Firefox OS version number   Gecko version number
  --------------------------- ----------------------
  1.0.1                       18.0
  1.1                         18.1
  1.2                         26.0
  1.3                         28.0
  1.4                         30.0
  2.0                         32.0
  2.1                         34.0
  2.2                         37
  2.5                         44

Note: It's easy to find the correspondences by looking at the Mercurial
repository names : repositories starting by  mozilla-b2g are the release
repositories for Firefox OS, and have both Firefox OS and Gecko versions
in their names.

Firefox OS has a four-digit version number:  X.X.X.Y . The first two
digits are owned by the Mozilla product team and denote versions with
new features (eg: v1.1, 1.2, etc.). The third digit is incremented with
regular version tags (about every 6 weeks) for security updates, and the
fourth is owned by the OEM.

See also

-   Recommendations on sniffing the UA string for cross-browser support
-   window.navigator.userAgent

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 12, 2024 by MDN contributors .
# User-Agent #
 _   _                      _                    _   
| | | |___  ___ _ __       / \   __ _  ___ _ __ | |_ 
| | | / __|/ _ \ '__|____ / _ \ / _` |/ _ \ '_ \| __|
| |_| \__ \  __/ | |_____/ ___ \ (_| |  __/ | | | |_ 
 \___/|___/\___|_|      /_/   \_\__, |\___|_| |_|\__|
                                |___/                
User-Agent

The User-Agent request header is a characteristic string that lets
servers and network peers identify the application, operating system,
vendor, and/or version of the requesting user agent .

Warning: Please read Browser detection using the user agent for why
serving different Web pages or services to different browsers is usually
a bad idea.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

http

    User-Agent: <product> / <product-version> <comment>

Common format for web browsers:

http

    User-Agent: Mozilla/5.0 (<system-information>) <platform> (<platform-details>) <extensions>

Directives

<product>

    A product identifier — its name or development codename.

<product-version>

    Version number of the product.

<comment>

    Zero or more comments containing more details. For example,
    sub-product information.

Firefox UA string

For more on Firefox- and Gecko-based user agent strings, see the Firefox
user agent string reference . The UA string of Firefox is broken down
into 4 components:

    Mozilla/5.0 (platform; rv:geckoversion) Gecko/geckotrail Firefox/firefoxversion

1.   Mozilla/5.0 is the general token that says that the browser is
    Mozilla-compatible. For historical reasons, almost every browser
    today sends it.
2.  platform describes the native platform that the browser is running
    on (Windows, Mac, Linux, Android, etc.) and if it is a mobile phone.
    Firefox OS phones say  Mobile — the web is the platform. Note that
    platform can consist of multiple "  ; "-separated tokens. See below
    for further details and examples.
3.  rv: geckoversion indicates the release version of Gecko (such as "
    17.0 "). In recent browsers, geckoversion is the same as
    firefoxversion .
4.  Gecko/geckotrail indicates that the browser is based on Gecko. (On
    the desktop, geckotrail is always the fixed string  20100101 .)
5.  Firefox/firefoxversion indicates that the browser is Firefox and
    provides the version (such as " 17.0" ).

Examples

    Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0
    Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0

Chrome UA string

The Chrome (or Chromium/Blink-based engines) user agent string is
similar to Firefox's. For compatibility, it adds strings like
 KHTML, like Gecko and  Safari .

Examples

    Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36

Opera UA string

The Opera browser is also based on the Blink engine, which is why it
almost looks the same as the Chrome UA string, but adds  "OPR/<version>"
.

Examples

    Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36 OPR/38.0.2220.41

Older, Presto-based Opera releases used:

    Opera/9.80 (Macintosh; Intel Mac OS X; U; en) Presto/2.2.15 Version/10.00
    Opera/9.60 (Windows NT 6.0; U; en) Presto/2.1.1

Microsoft Edge UA string

The Edge browser is also based on the Blink engine. It adds
 "Edg/<version>" .

Examples

    Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 Edg/91.0.864.59

Safari UA string

In this example, the user agent string is mobile Safari's version. It
contains the word  "Mobile" .

Examples

    Mozilla/5.0 (iPhone; CPU iPhone OS 13_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Mobile/15E148 Safari/604.1

Crawler and bot UA strings

Examples

    Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)

    Mozilla/5.0 (compatible; YandexAccessibilityBot/3.0; +http://yandex.com/bots)

Library and net tool UA strings

Examples

    curl/7.64.1

    PostmanRuntime/7.26.5

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.user-agent

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   User-Agent detection, history and checklist
-   Firefox user agent string reference
-   Browser detection using the user agent
-   Client hints

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Vary #
__     __               
\ \   / /_ _ _ __ _   _ 
 \ \ / / _` | '__| | | |
  \ V / (_| | |  | |_| |
   \_/ \__,_|_|   \__, |
                  |___/ 
Vary

The  Vary HTTP response header describes the parts of the request
message aside from the method and URL that influenced the content of the
response it occurs in. Most often, this is used to create a cache key
when content negotiation is in use.

The same  Vary header value should be used on all responses for a given
URL, including  304  Not Modified responses and the "default" response.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    Vary: *
    Vary: <header-name>, <header-name>, ...

Directives

*

    Indicates that factors other than request headers influenced the
    generation of this response. Implies that the response is
    uncacheable.

<header-name>

    A comma-separated list of request header names that could have
    influenced the generation of this response.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.vary

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Compatibility notes

-   Vary with care – Vary header problems in IE6-9

See also

-   Understanding The Vary Header - Smashing Magazine
-   Best Practices for Using the Vary Header – fastly.com
-   Content negotiation

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Via #
__     ___       
\ \   / (_) __ _ 
 \ \ / /| |/ _` |
  \ V / | | (_| |
   \_/  |_|\__,_|
                 
Via

The  Via general header is added by proxies, both forward and reverse,
and can appear in the request or response headers. It is used for
tracking message forwards, avoiding request loops, and identifying the
protocol capabilities of senders along the request/response chain.

  ----------------------- ----------------------------------
  Header type             Request header , Response header
  Forbidden header name   yes
  ----------------------- ----------------------------------

Syntax

http

    Via: [ <protocol-name> "/" ] <protocol-version> <host> [ ":" <port> ]
    Via: [ <protocol-name> "/" ] <protocol-version> <pseudonym>

Directives

<protocol-name>

    Optional. The name of the protocol used, such as "HTTP".

<protocol-version>

    The version of the protocol used, such as "1.1".

<host> and <port>

    Public proxy URL and port.

<pseudonym>

    Name/alias of an internal proxy.

Examples

http

    Via: 1.1 vegur
    Via: HTTP/1.1 GWA
    Via: 1.0 fred, 1.1 p.example.net

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.via

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    X-Forwarded-For
-   Heroku's proxy library Vegur

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# Viewport-Width #
__     ___                                _     __        ___     _ _   _     
\ \   / (_) _____      ___ __   ___  _ __| |_   \ \      / (_) __| | |_| |__  
 \ \ / /| |/ _ \ \ /\ / / '_ \ / _ \| '__| __|___\ \ /\ / /| |/ _` | __| '_ \ 
  \ V / | |  __/\ V  V /| |_) | (_) | |  | ||_____\ V  V / | | (_| | |_| | | |
   \_/  |_|\___| \_/\_/ | .__/ \___/|_|   \__|     \_/\_/  |_|\__,_|\__|_| |_|
                        |_|                                                   
Viewport-Width

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

Non-standard: This feature is non-standard and is not on a standards
track. Do not use it on production sites facing the Web: it will not
work for every user. There may also be large incompatibilities between
implementations and the behavior may change in the future.

The  Viewport-Width device client hint request header provides the
client's layout viewport width in CSS pixels . The value is rounded up
to the smallest following integer (i.e. ceiling value).

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   no
  ----------------------- ------------------------------

The hint can be used with other screen-specific hints to deliver images
optimized for a specific screen size, or to omit resources that are not
needed for a particular screen width.

If the  Viewport-Width header appears more than once in a message the
last occurrence is used.

Note:

-   Client Hints are accessible only on secure origins (via TLS).
-   A server has to opt in to receive the  Viewport-Width header from
    the client, by sending the  Accept-CH response header.
-   Servers that opt in to the  Viewport-Width client hint will
    typically also specify it in the  Vary header. This informs caches
    that the server may send different responses based on the header
    value in a request.
-    Viewport-Width was removed from the original client hints
    specification in draft-ietf-httpbis-client-hints-07 . The proposed
    replacement is  Sec-CH-Viewport-Width (Responsive Image Client
    Hints).

Syntax

http

    Viewport-Width: <number>

Directives

<number>

    The width of the user's viewport in CSS pixels , rounded up to the
    nearest integer.

Examples

A server must first opt in to receive the  Viewport-Width header by
sending the response header  Accept-CH containing the directive
 Viewport-Width .

http

    Accept-CH: Viewport-Width

Then on subsequent requests the client might send  Viewport-Width header
back:

http

    Viewport-Width: 320

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-   Device client hints
    -    Content-DPR
    -    Device-Memory
    -    DPR
    -    Width
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# Want-Digest #
__        __          _        ____  _                 _   
\ \      / /_ _ _ __ | |_     |  _ \(_) __ _  ___  ___| |_ 
 \ \ /\ / / _` | '_ \| __|____| | | | |/ _` |/ _ \/ __| __|
  \ V  V / (_| | | | | ||_____| |_| | | (_| |  __/\__ \ |_ 
   \_/\_/ \__,_|_| |_|\__|    |____/|_|\__, |\___||___/\__|
                                       |___/               
Want-Digest

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  Want-Digest HTTP header is primarily used in a request, to ask the
server to provide a digest of the requested resource using the  Digest
response header.

The header contains identifiers for one or more digest algorithms that
the sender wishes the server to use to create the digest. The request
may use quality values to indicate its preference/order for particular
digest algorithms.

If  Want-Digest does not include any digest algorithms that the server
supports, the server may respond with:

-   a digest calculated using a different digest algorithm, or
-   a  400 Bad Request error, and include another  Want-Digest header
    with that response, listing the algorithms that it does support.

See the page for the  Digest header for more information.

  ----------------------- ----------------------------------
  Header type             Request header , Response header
  Forbidden header name   no
  ----------------------- ----------------------------------

Syntax

http

    Want-Digest: <digest-algorithm>

    // Multiple algorithms, weighted with the quality value syntax:
    Want-Digest: <digest-algorithm><q-value>,<digest-algorithm><q-value>

Directives

<digest-algorithm>

    Digest algorithms are defined in Digest Headers .

    -   Permitted digest algorithms values include:  unixsum ,
         unixcksum ,  crc32c ,  sha-256 and  sha-512 ,  id-sha-256 ,
         id-sha-512
    -   Deprecated algorithms values include:  md5 ,  sha ,  adler32 .

<q-value>

    The quality value to apply to that option.

Examples

http

    Want-Digest: sha-256
    Want-Digest: SHA-512;q=0.3, sha-256;q=1, md5;q=0

Basic operation

The sender provides a list of digests which it is prepared to accept,
and the server uses one of them:

Request:

http

    GET /item
    Want-Digest: sha-256;q=0.3, sha;q=1

Response:

http

    HTTP/1.1 200 Ok
    Digest: sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=

Unsupported digests

The server does not support any of the requested digest algorithms, so
uses a different algorithm:

Request:

http

    GET /item
    Want-Digest: sha;q=1

Response:

http

    HTTP/1.1 200 Ok
    Digest: sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=

The server does not support any of the requested digest algorithms. In
this case it responds with a 400 error and includes another  Want-Digest
header, listing the algorithms that it does support:

Request:

http

    GET /item
    Want-Digest: sha;q=1

Response:

http

    HTTP/1.1 400 Bad Request
    Want-Digest: sha-256, sha-512

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Digest Fields
  # section-4

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Digest

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jun 5, 2023 by MDN contributors .
# Warning #
__        __               _             
\ \      / /_ _ _ __ _ __ (_)_ __   __ _ 
 \ \ /\ / / _` | '__| '_ \| | '_ \ / _` |
  \ V  V / (_| | |  | | | | | | | | (_| |
   \_/\_/ \__,_|_|  |_| |_|_|_| |_|\__, |
                                   |___/ 
Warning

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  Warning HTTP header contains information about possible problems
with the status of the message. More than one  Warning header may appear
in a response.

 Warning header fields can, in general, be applied to any message.
However, some warn-codes are specific to caches and can only be applied
to response messages.

  ----------------------- ----------------------------------
  Header type             Request header , Response header
  Forbidden header name   no
  ----------------------- ----------------------------------

Syntax

http

    Warning: <warn-code> <warn-agent> <warn-text> [<warn-date>]

Directives

<warn-code>

    A three-digit warning number. The first digit indicates whether the
     Warning is required to be deleted from a stored response after
    validation.

    -    1xx warn-codes describe the freshness or validation status of
        the response and will be deleted by a cache after successful
        validation.
    -    2xx warn-codes describe some aspect of the representation that
        is not rectified by a validation and will not be deleted by a
        cache after validation unless a full response is sent.

<warn-agent>

    The name or pseudonym of the server or software adding the  Warning
    header (might be "-" when the agent is unknown).

<warn-text>

    An advisory text describing the error.

<warn-date>

    A date. This is optional. If more than one  Warning header is sent,
    include a date that matches the  Date header.

Warning codes

The HTTP Warn Codes registry at iana.org defines the namespace for
warning codes.

  Code   Text                               Description
  ------ ---------------------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  110    Response is Stale                  The response provided by a cache is stale (the expiration time set for the response has passed).
  111    Revalidation Failed                An attempt to validate the stale response failed due to an inability to reach the server.
  112    Disconnected Operation             The cache is intentionally disconnected from the rest of the network.
  113    Heuristic Expiration               A cache heuristically chose a freshness lifetime greater than 24 hours and the age of the response is greater than 24 hours.
  199    Miscellaneous Warning              Arbitrary information that should be presented to a user or logged.
  214    Transformation Applied             Added by a proxy if it applies any transformation to the representation, such as changing the content-coding, media-type or the like.
  299    Miscellaneous Persistent Warning   Arbitrary information that should be presented to a user or logged. This warn-code is similar to the warn-code 199 and additionally indicates a persistent warning.

Examples

http

    Warning: 110 anderson/1.3.37 "Response is stale"

    Date: Wed, 21 Oct 2015 07:28:00 GMT
    Warning: 112 - "cache down" "Wed, 21 Oct 2015 07:28:00 GMT"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Caching
  # field.warning

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Date
-   HTTP response status codes

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 3, 2023 by MDN contributors .
# Width #
__        ___     _ _   _     
\ \      / (_) __| | |_| |__  
 \ \ /\ / /| |/ _` | __| '_ \ 
  \ V  V / | | (_| | |_| | | |
   \_/\_/  |_|\__,_|\__|_| |_|
                              
Width

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

Secure context: This feature is available only in secure contexts
(HTTPS), in some or all supporting browsers .

Non-standard: This feature is non-standard and is not on a standards
track. Do not use it on production sites facing the Web: it will not
work for every user. There may also be large incompatibilities between
implementations and the behavior may change in the future.

The  Width device client hint request header field indicates the desired
resource width in physical pixels — the intrinsic size of an image. The
provided pixel value is a number rounded to the smallest following
integer (i.e. ceiling value).

  ----------------------- ------------------------------
  Header type             Request header , Client hint
  Forbidden header name   no
  ----------------------- ------------------------------

The hint is particularly useful because it allows the client to request
a resource that is optimal for both the screen and the layout: taking
into account both the density-corrected width of the screen and the
image's extrinsic size within the layout.

If the desired resource width is not known at the time of the request or
the resource does not have a display width, the  Width header field can
be omitted.

If the  Width header appears more than once in a message the last
occurrence is used.

Note:

-   Client Hints are accessible only on secure origins (via TLS).
-   A server has to opt in to receive the  Width header from the client,
    by sending the  Accept-CH response header.
-   Servers that opt in to the  Width client hint will typically also
    specify it in the  Vary header. This informs caches that the server
    may send different responses based on the header value in a request.
-    Width was removed from the client hints specification in
    draft-ietf-httpbis-client-hints-07 . The proposed replacement is
     Sec-CH-Width (Responsive Image Client Hints).

Syntax

http

    Width: <number>

Directives

<number>

    The width of the resource in physical pixels, rounded up to the
    nearest integer.

Examples

The server first needs to opt in to receive the  Width header by sending
the response headers  Accept-CH containing  Width .

http

    Accept-CH: Width

Then on subsequent requests the client might send  Width header back:

http

    Width: 1920

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Improving user privacy and developer experience with User-Agent
    Client Hints (developer.chrome.com)
-   Device client hints
    -    Content-DPR
    -    Device-Memory
    -    DPR
    -    Viewport-Width
-    Accept-CH
-   HTTP Caching > Vary and  Vary

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 10, 2023 by MDN contributors .
# WWW-Authenticate #
__        ____        ____        __      _         _   _                _   _ 
\ \      / /\ \      / /\ \      / /     / \  _   _| |_| |__   ___ _ __ | |_(_)
 \ \ /\ / /  \ \ /\ / /  \ \ /\ / /____ / _ \| | | | __| '_ \ / _ \ '_ \| __| |
  \ V  V /    \ V  V /    \ V  V /_____/ ___ \ |_| | |_| | | |  __/ | | | |_| |
   \_/\_/      \_/\_/      \_/\_/     /_/   \_\__,_|\__|_| |_|\___|_| |_|\__|_|
                                                                               
           _       
  ___ __ _| |_ ___ 
 / __/ _` | __/ _ \
| (_| (_| | ||  __/
 \___\__,_|\__\___|
                   
WWW-Authenticate

The HTTP  WWW-Authenticate response header defines the HTTP
authentication methods ("challenges") that might be used to gain access
to a specific resource.

Note: This header is part of the General HTTP authentication framework ,
which can be used with a number of authentication schemes . Each
"challenge" lists a scheme supported by the server and additional
parameters that are defined for that scheme type.

A server using HTTP authentication will respond with a  401
 Unauthorized response to a request for a protected resource. This
response must include at least one  WWW-Authenticate header and at least
one challenge , to indicate what authentication schemes can be used to
access the resource (and any additional data that each particular scheme
needs).

Multiple challenges are allowed in one  WWW-Authenticate header, and
multiple  WWW-Authenticate headers are allowed in one response. A server
may also include the  WWW-Authenticate header in other response messages
to indicate that supplying credentials might affect the response.

After receiving the  WWW-Authenticate header, a client will typically
prompt the user for credentials, and then re-request the resource. This
new request uses the  Authorization header to supply the credentials to
the server, encoded appropriately for the selected "challenge"
authentication method. The client is expected to select the most secure
of the challenges it understands (note that in some cases the "most
secure" method is debatable).

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

At least one challenge must be specified. Multiple challenges may be
specified, comma-separated, in a single header, or in individual
headers:

http

    // Challenges specified in single header
    WWW-Authenticate: challenge1, ..., challengeN

    // Challenges specified in multiple headers
    WWW-Authenticate: challenge1
    ...
    WWW-Authenticate: challengeN

A single challenge has the following format. Note that the scheme token
(  <auth-scheme> ) is mandatory. The presence of  realm ,  token68 and
any other parameters depends on the definition of the selected scheme.

http

    // Possible challenge formats (scheme dependent)
    WWW-Authenticate: <auth-scheme>
    WWW-Authenticate: <auth-scheme> realm=<realm>
    WWW-Authenticate: <auth-scheme> token68
    WWW-Authenticate: <auth-scheme> auth-param1=token1, ..., auth-paramN=auth-paramN-token
    WWW-Authenticate: <auth-scheme> realm=<realm> token68
    WWW-Authenticate: <auth-scheme> realm=<realm> token68 auth-param1=auth-param1-token , ..., auth-paramN=auth-paramN-token
    WWW-Authenticate: <auth-scheme> realm=<realm> auth-param1=auth-param1-token, ..., auth-paramN=auth-paramN-token
    WWW-Authenticate: <auth-scheme> token68 auth-param1=auth-param1-token, ..., auth-paramN=auth-paramN-token

For example, Basic authentication requires  realm and allows for
optional use of  charset key, but does not support  token68 .

http

    WWW-Authenticate: Basic realm=<realm>
    WWW-Authenticate: Basic realm=<realm>, charset="UTF-8"

Directives

 <auth-scheme>

    The Authentication scheme . Some of the more common types are
    (case-insensitive):  Basic ,  Digest ,  Negotiate and
     AWS4-HMAC-SHA256 .

    Note: For more information/options see HTTP Authentication >
    Authentication schemes

realm= <realm>  Optional 

    A string describing a protected area. A realm allows a server to
    partition up the areas it protects (if supported by a scheme that
    allows such partitioning). Some clients show this value to the user
    to inform them about which particular credentials are required —
    though most browsers stopped doing so to counter phishing. The only
    reliably supported character set for this value is  us-ascii . If no
    realm is specified, clients often display a formatted hostname
    instead.

 <token68>  Optional 

    A token that may be useful for some schemes. The token allows the 66
    unreserved URI characters plus a few others. According to the
    specification, it can hold a base64, base64url, base32, or base16
    (hex) encoding, with or without padding, but excluding whitespace.

Other than  <auth-scheme> and the key  realm , authorization parameters
are specific to each authentication scheme . Generally you will need to
check the relevant specifications for these (keys for a small subset of
schemes are listed below).

Basic

 <realm>

    As above . Note that the realm is mandatory for basic
    authentication.

 charset="UTF-8"  Optional 

    Tells the client the server's preferred encoding scheme when
    submitting a username and password. The only allowed value is the
    case-insensitive string "UTF-8". This does not relate to the
    encoding of the realm string.

Digest

 <realm>  Optional 

    String indicating which username/password to use. Minimally should
    include the host name, but might indicate the users or group that
    have access.

 domain  Optional 

    A quoted, space-separated list of URI prefixes that define all the
    locations where the authentication information may be used. If this
    key is not specified then the authentication information may be used
    anywhere on the web root.

 nonce

    A server-specified quoted string that the server can use to control
    the lifetime in which particular credentials will be considered
    valid. This must be uniquely generated each time a 401 response is
    made, and may be regenerated more often (for example, allowing a
    digest to be used only once). The specification contains advice on
    possible algorithms for generating this value. The nonce value is
    opaque to the client.

 opaque

    A server-specified quoted string that should be returned unchanged
    in the  Authorization . This is opaque to the client. The server is
    recommended to include Base64 or hexadecimal data.

 stale  Optional 

    A case-insensitive flag indicating that the previous request from
    the client was rejected because the  nonce used is too old (stale).
    If this is  true the request can be re-tried using the same
    username/password encrypted using the new  nonce . If it is any
    other value then the username/password are invalid and must be
    re-requested from the user.

 algorithm  Optional 

    Algorithm used to produce the digest. Valid non-session values are:
     "MD5" (default if not specified),  "SHA-256" ,  "SHA-512" . Valid
    session values are:  "MD5-sess" ,  "SHA-256-sess" ,  "SHA-512-sess"
    .

 qop

    Quoted string indicating the quality of protection supported by the
    server. This must be supplied, and unrecognized options must be
    ignored.

    -    "auth" : Authentication
    -    "auth-int" : Authentication with integrity protection

 charset="UTF-8"  Optional 

    Tells the client the server's preferred encoding scheme when
    submitting a username and password. The only allowed value is the
    case-insensitive string "UTF-8".

 userhash  Optional 

    A server may specify  "true" to indicate that it supports username
    hashing (default is  "false" )

HTTP Origin-Bound Authentication (HOBA)

 <challenge>

    A set of pairs in the format of '<len>:<value>' concatenated
    together to be given to a client. The challenge is made of up a
    nonce, algorithm, origin, realm, key identifier, and the challenge.

 <max-age>

    The number of seconds from the time the HTTP response is emitted for
    which responses to this challenge can be accepted.

 realm  Optional 

    As above in the directives section.

Examples

Basic authentication

A server that only supports basic authentication might have a
 WWW-Authenticate response header which looks like this:

http

    WWW-Authenticate: Basic realm="Access to the staging site", charset="UTF-8"

A user-agent receiving this header would first prompt the user for their
username and password, and then re-request the resource: this time
including the (encoded) credentials in the  Authorization header. The
 Authorization header might look like this:

http

    Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l

For  "Basic" authentication the credentials are constructed by first
combining the username and the password with a colon (
 aladdin:opensesame ), and then by encoding the resulting string in
 base64 (  YWxhZGRpbjpvcGVuc2VzYW1l ).

Note: See also HTTP authentication for examples on how to configure
Apache or Nginx servers to password protect your site with HTTP basic
authentication.

Digest authentication with SHA-256 and MD5

Note: This example is taken from RFC 7616 "HTTP Digest Access
Authentication" (other examples in the specification show the use of
 SHA-512 ,  charset , and  userhash ).

The client attempts to access a document at URI "
http://www.example.org/dir/index.html " that is protected via digest
authentication. The username for this document is "Mufasa" and the
password is "Circle of Life" (note the single space between each of the
words).

The first time the client requests the document, no  Authorization
header field is sent. Here the server responds with an HTTP 401 message
that includes a challenge for each digest algorithm it supports, in its
order of preference (  SHA256 and then  MD5 )

http

    HTTP/1.1 401 Unauthorized
    WWW-Authenticate: Digest
        realm="http-auth@example.org",
        qop="auth, auth-int",
        algorithm=SHA-256,
        nonce="7ypf/xlj9XXwfDPEoM4URrv/xwf94BcCAzFZH4GiTo0v",
        opaque="FQhe/qaU925kfnzjCev0ciny7QMkPqMAFRtzCUYo5tdS"
    WWW-Authenticate: Digest
        realm="http-auth@example.org",
        qop="auth, auth-int",
        algorithm=MD5,
        nonce="7ypf/xlj9XXwfDPEoM4URrv/xwf94BcCAzFZH4GiTo0v",
        opaque="FQhe/qaU925kfnzjCev0ciny7QMkPqMAFRtzCUYo5tdS"

The client prompts the user for their username and password, and then
responds with a new request that encodes the credentials in the
 Authorization header field. If the client chose the MD5 digest the
 Authorization header field might look as shown below:

http

    Authorization: Digest username="Mufasa",
        realm="http-auth@example.org",
        uri="/dir/index.html",
        algorithm=MD5,
        nonce="7ypf/xlj9XXwfDPEoM4URrv/xwf94BcCAzFZH4GiTo0v",
        nc=00000001,
        cnonce="f2/wE4q74E6zIJEtWaHKaf5wv/H5QzzpXusqGemxURZJ",
        qop=auth,
        response="8ca523f5e9506fed4657c9700eebdbec",
        opaque="FQhe/qaU925kfnzjCev0ciny7QMkPqMAFRtzCUYo5tdS"

If the client chose the SHA-256 digest the  Authorization header field
might look as shown below:

http

    Authorization: Digest username="Mufasa",
        realm="http-auth@example.org",
        uri="/dir/index.html",
        algorithm=SHA-256,
        nonce="7ypf/xlj9XXwfDPEoM4URrv/xwf94BcCAzFZH4GiTo0v",
        nc=00000001,
        cnonce="f2/wE4q74E6zIJEtWaHKaf5wv/H5QzzpXusqGemxURZJ",
        qop=auth,
        response="753927fa0e85d155564e2e272a28d1802ca10daf449
            6794697cf8db5856cb6c1",
        opaque="FQhe/qaU925kfnzjCev0ciny7QMkPqMAFRtzCUYo5tdS"

HOBA Authentication

A server that supports HOBA authentication might have a
 WWW-Authenticate response header which looks like this:

http

    WWW-Authenticate: HOBA max-age="180", challenge="16:MTEyMzEyMzEyMw==1:028:https://www.example.com:80800:3:MTI48:NjgxNDdjOTctNDYxYi00MzEwLWJlOWItNGM3MDcyMzdhYjUz"

The to-be-signed blob challenge is made from these parts:
www.example.com using port 8080, the nonce is '1123123123', the
algorithm for signing is RSA-SHA256, the key identifier is 123, and
finally the challenge is '68147c97-461b-4310-be9b-4c707237ab53'.

A client would receive this header, extract the challenge, sign it with
their private key that corresponds to key identifier 123 in our example
using RSA-SHA256, and then send the result in the  Authorization header
as a dot-separated key id, challenge, nonce, and signature.

http

    Authorization: 123.16:MTEyMzEyMzEyMw==1:028:https://www.example.com:80800:3:MTI48:NjgxNDdjOTctNDYxYi00MzEwLWJlOWItNGM3MDcyMzdhYjUz.1123123123.<signature-of-challenge>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # field.www-authenticate

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP authentication
-    Authorization
-    Proxy-Authorization
-    Proxy-Authenticate
-    401 ,  403 ,  407

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Sep 14, 2023 by MDN contributors .
# X-Content-Type-Options #
__  __      ____            _             _      _____                       
\ \/ /     / ___|___  _ __ | |_ ___ _ __ | |_   |_   _|   _ _ __   ___       
 \  /_____| |   / _ \| '_ \| __/ _ \ '_ \| __|____| || | | | '_ \ / _ \_____ 
 /  \_____| |__| (_) | | | | ||  __/ | | | ||_____| || |_| | |_) |  __/_____|
/_/\_\     \____\___/|_| |_|\__\___|_| |_|\__|    |_| \__, | .__/ \___|      
                                                      |___/|_|               
  ___        _   _                 
 / _ \ _ __ | |_(_) ___  _ __  ___ 
| | | | '_ \| __| |/ _ \| '_ \/ __|
| |_| | |_) | |_| | (_) | | | \__ \
 \___/| .__/ \__|_|\___/|_| |_|___/
      |_|                          
X-Content-Type-Options

The  X-Content-Type-Options response HTTP header is a marker used by the
server to indicate that the MIME types advertised in the  Content-Type
headers should be followed and not be changed. The header allows you to
avoid MIME type sniffing by saying that the MIME types are deliberately
configured.

This header was introduced by Microsoft in IE 8 as a way for webmasters
to block content sniffing that was happening and could transform
non-executable MIME types into executable MIME types. Since then, other
browsers have introduced it, even if their MIME sniffing algorithms were
less aggressive.

Starting with Firefox 72, top-level documents also avoid MIME sniffing
(if  Content-type is provided). This can cause HTML web pages to be
downloaded instead of being rendered when they are served with a MIME
type other than  text/html . Make sure to set both headers correctly.

Site security testers usually expect this header to be set.

Note:  X-Content-Type-Options only apply request-blocking due to
 nosniff for request destinations of "  script " and "  style ".
However, it also enables Cross-Origin Read Blocking (CORB) protection
for HTML, TXT, JSON and XML files (excluding SVG  image/svg+xml ).

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    X-Content-Type-Options: nosniff

Directives

 nosniff

    Blocks a request if the request destination is of type  style and
    the MIME type is not  text/css , or of type  script and the MIME
    type is not a JavaScript MIME type .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Fetch Standard
  # x-content-type-options-header

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Browser specific notes

-   Firefox 72 enables  X-Content-Type-Options: nosniff for top-level
    documents

See also

-    Content-Type
-   The original definition of X-Content-Type-Options by Microsoft.
-   The Mozilla Observatory tool testing the configuration (including
    this header) of websites for safety and security
-   Mitigating MIME Confusion Attacks in Firefox
-   Cross-Origin Read Blocking (CORB)
-   Google Docs CORB explainer

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 10, 2023 by MDN contributors .
# X-DNS-Prefetch-Control #
__  __     ____  _   _ ____        ____            __      _       _           
\ \/ /    |  _ \| \ | / ___|      |  _ \ _ __ ___ / _| ___| |_ ___| |__        
 \  /_____| | | |  \| \___ \ _____| |_) | '__/ _ \ |_ / _ \ __/ __| '_ \ _____ 
 /  \_____| |_| | |\  |___) |_____|  __/| | |  __/  _|  __/ || (__| | | |_____|
/_/\_\    |____/|_| \_|____/      |_|   |_|  \___|_|  \___|\__\___|_| |_|      
                                                                               
  ____            _             _ 
 / ___|___  _ __ | |_ _ __ ___ | |
| |   / _ \| '_ \| __| '__/ _ \| |
| |__| (_) | | | | |_| | | (_) | |
 \____\___/|_| |_|\__|_|  \___/|_|
                                  
X-DNS-Prefetch-Control

Non-standard: This feature is non-standard and is not on a standards
track. Do not use it on production sites facing the Web: it will not
work for every user. There may also be large incompatibilities between
implementations and the behavior may change in the future.

The  X-DNS-Prefetch-Control HTTP response header controls DNS
prefetching, a feature by which browsers proactively perform domain name
resolution on both links that the user may choose to follow as well as
URLs for items referenced by the document, including images, CSS,
JavaScript, and so forth.

This prefetching is performed in the background, so that the DNS is
likely to have been resolved by the time the referenced items are
needed. This reduces latency when the user clicks a link.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    X-DNS-Prefetch-Control: on
    X-DNS-Prefetch-Control: off

Directives

on

    Enables DNS prefetching. This is what browsers do, if they support
    the feature, when this header is not present

off

    Disables DNS prefetching. This is useful if you don't control the
    link on the pages, or know that you don't want to leak information
    to these domains.

Description

DNS requests are very small in terms of bandwidth, but latency can be
quite high, especially on mobile networks. By speculatively prefetching
DNS results, latency can be reduced significantly at certain times, such
as when the user clicks the link. In some cases, latency can be reduced
by a second.

The implementation of this prefetching in some browsers allows domain
name resolution to occur in parallel with (instead of in serial with)
the fetching of actual page content. By doing this, the high-latency
domain name resolution process doesn't cause any delay while fetching
content.

Page load times – especially on mobile networks – can be measurably
improved in this way. If the domain names for images can be resolved in
advance of the images being requested, pages that load many images can
see an improvement of 5% or more in the time of loading images.

Configuring prefetching in the browser

In general, you don't need to do anything to manage prefetching.
However, the user may wish to disable prefetching. On Firefox, this can
be done by setting the  network.dns.disablePrefetch preference to  true
.

Also, by default, prefetching of embedded link hostnames is not
performed on documents loaded over HTTPS . On Firefox, this can be
changed by setting the  network.dns.disablePrefetchFromHTTPS preference
to  false .

Examples

Turning on and off prefetching

You can either send the  X-DNS-Prefetch-Control header server-side, or
from individual documents, using the  http-equiv attribute on the
 <meta> element, like this:

html

    <meta http-equiv="x-dns-prefetch-control" content="off" />

You can reverse this setting by setting  content to "  on ".

Forcing lookup of specific hostnames

You can force the lookup of specific hostnames without providing
specific anchors using that hostname by using the  rel attribute on the
 <link> element with a link type of  dns-prefetch :

html

    <link rel="dns-prefetch" href="https://www.mozilla.org" />

In this example, the domain name  www.mozilla.org will be pre-resolved.

Similarly, the link element can be used to resolve hostnames without
providing a complete URL, but only, by preceding the hostname with two
slashes:

html

    <link rel="dns-prefetch" href="//www.mozilla.org" />

Forced prefetching of hostnames might be useful, for example, on the
homepage of a site to force pre-resolution of domain names that are
referenced frequently throughout the site even though they are not used
on the home page itself. This will improve the overall performance of
site even though the performance of the home page may not be affected.

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   DNS Prefetching for Firefox (blog post)
-   Google Chrome handles DNS prefetching control

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# X-Forwarded-For #
__  __     _____                                _          _       _____     
\ \/ /    |  ___|__  _ ____      ____ _ _ __ __| | ___  __| |     |  ___|__  
 \  /_____| |_ / _ \| '__\ \ /\ / / _` | '__/ _` |/ _ \/ _` |_____| |_ / _ \ 
 /  \_____|  _| (_) | |   \ V  V / (_| | | | (_| |  __/ (_| |_____|  _| (_) |
/_/\_\    |_|  \___/|_|    \_/\_/ \__,_|_|  \__,_|\___|\__,_|     |_|  \___/ 
                                                                             
      
 _ __ 
| '__|
| |   
|_|   
      
X-Forwarded-For

The  X-Forwarded-For (XFF) request header is a de-facto standard header
for identifying the originating IP address of a client connecting to a
web server through a proxy server.

Warning: Improper use of this header can be a security risk. For
details, see the Security and privacy concerns section.

When a client connects directly to a server, the client's IP address is
sent to the server (and is often written to server access logs). But if
a client connection passes through any forward or reverse proxies, the
server only sees the final proxy's IP address, which is often of little
use. That's especially true if the final proxy is a load balancer which
is part of the same installation as the server. So, to provide a
more-useful client IP address to the server, the  X-Forwarded-For
request header is used.

For detailed guidance on using this header, see the Parsing and
Selecting an IP address sections.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

A standardized version of this header is the HTTP  Forwarded header.

Security and privacy concerns

This header, by design, exposes privacy-sensitive information, such as
the IP address of the client. Therefore the user's privacy must be kept
in mind when deploying this header.

The  X-Forwarded-For header is untrustworthy when no trusted reverse
proxy (e.g., a load balancer) is between the client and server. If the
client and all proxies are benign and well-behaved, then the list of IP
addresses in the header has the meaning described in the Directives
section. But if there's a risk the client or any proxy is malicious or
misconfigured, then it's possible any part (or the entirety) of the
header may have been spoofed (and may not be a list or contain IP
addresses at all).

If any trusted reverse proxies are between the client and server, the
final  X-Forwarded-For IP addresses (one for each trusted proxy) are
trustworthy, as they were added by trusted proxies. (That's true as long
as the server is only accessible through those proxies and not also
directly).

Any security-related use of  X-Forwarded-For (such as for rate limiting
or IP-based access control) must only use IP addresses added by a
trusted proxy. Using untrustworthy values can result in rate-limiter
avoidance, access-control bypass, memory exhaustion, or other negative
security or availability consequences.

Conversely, leftmost (untrusted) values must only be used where there
will be no negative impact from the possibility of using spoofed values.

Syntax

http

    X-Forwarded-For: <client>, <proxy1>, <proxy2>

Elements are comma-separated, with optional whitespace surrounding the
commas.

Directives

<client>

    The client IP address

<proxy1>, <proxy2>

    If a request goes through multiple proxies, the IP addresses of each
    successive proxy is listed. This means that, given well-behaved
    client and proxies, the rightmost IP address is the IP address of
    the most recent proxy and the leftmost IP address is the IP address
    of the originating client.

Examples

http

    X-Forwarded-For: 2001:db8:85a3:8d3:1319:8a2e:370:7348

    X-Forwarded-For: 203.0.113.195

    X-Forwarded-For: 203.0.113.195, 2001:db8:85a3:8d3:1319:8a2e:370:7348

    X-Forwarded-For: 203.0.113.195,2001:db8:85a3:8d3:1319:8a2e:370:7348,198.51.100.178

Parsing

Improper parsing of the  X-Forwarded-For header can result in spoofed
values being used for security-related purposes, resulting in the
negative consequences mentioned above.

There may be multiple  X-Forwarded-For headers present in a request. The
IP addresses in these headers must be treated as a single list, starting
with the first IP address of the first header and continuing to the last
IP address of the last header. There are two ways of making this single
list:

-   join the  X-Forwarded-For full header values with commas and then
    split by comma into a list, or
-   split each  X-Forwarded-For header by comma into lists and then join
    the lists

It is insufficient to use only one of multiple  X-Forwarded-For headers.

(Some reverse proxies will automatically join multiple  X-Forwarded-For
headers into one, but it is safest to not assume that this is the case.)

Selecting an IP address

When selecting an address, the full list of IPs — from all
 X-Forwarded-For headers — must be used.

When choosing the  X-Forwarded-For client IP address closest to the
client (untrustworthy and not for security-related purposes), the first
IP from the leftmost that is a valid address and not private/internal
should be selected. ("Valid" because spoofed values may not be IP
addresses at all; "not internal/private" because clients may have used
proxies on their internal network, which may have added addresses from
the private IP space .)

When choosing the first trustworthy  X-Forwarded-For client IP address,
additional configuration is required. There are two common methods:

-   Trusted proxy count : The count of reverse proxies between the
    internet and the server is configured. The  X-Forwarded-For IP list
    is searched from the rightmost by that count minus one. (For
    example, if there is only one reverse proxy, that proxy will add the
    client's IP address, so the rightmost address should be used. If
    there are three reverse proxies, the last two IP addresses will be
    internal.)
-   Trusted proxy list : The IPs or IP ranges of the trusted reverse
    proxies are configured. The  X-Forwarded-For IP list is searched
    from the rightmost, skipping all addresses that are on the trusted
    proxy list. The first non-matching address is the target address.

The first trustworthy  X-Forwarded-For IP address may belong to an
untrusted intermediate proxy rather than the actual client computer, but
it is the only IP suitable for security uses.

Note that if the server is directly connectable from the internet — even
if it is also behind a trusted reverse proxy — no part of the
 X-Forwarded-For IP list can be considered trustworthy or safe for
security-related uses.

Specifications

Not part of any current specification. The standardized version of this
header is  Forwarded .

See also

-    Forwarded
-    X-Forwarded-Host
-    X-Forwarded-Proto
-    Via

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 24, 2023 by MDN contributors .
# X-Forwarded-Host #
__  __     _____                                _          _       _   _       
\ \/ /    |  ___|__  _ ____      ____ _ _ __ __| | ___  __| |     | | | | ___  
 \  /_____| |_ / _ \| '__\ \ /\ / / _` | '__/ _` |/ _ \/ _` |_____| |_| |/ _ \ 
 /  \_____|  _| (_) | |   \ V  V / (_| | | | (_| |  __/ (_| |_____|  _  | (_) |
/_/\_\    |_|  \___/|_|    \_/\_/ \__,_|_|  \__,_|\___|\__,_|     |_| |_|\___/ 
                                                                               
     _   
 ___| |_ 
/ __| __|
\__ \ |_ 
|___/\__|
         
X-Forwarded-Host

The  X-Forwarded-Host (XFH) header is a de-facto standard header for
identifying the original host requested by the client in the  Host HTTP
request header.

Host names and ports of reverse proxies (load balancers, CDNs) may
differ from the origin server handling the request, in that case the
 X-Forwarded-Host header is useful to determine which Host was
originally used.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

http

    X-Forwarded-Host: <host>

Directives

<host>

    The domain name of the forwarded server.

Examples

http

    X-Forwarded-Host: id42.example-cdn.com

Specifications

Not part of any current specification.

See also

-    Host
-    Forwarded
-    X-Forwarded-For
-    X-Forwarded-Proto

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 20, 2023 by MDN contributors .
# X-Forwarded-Proto #
__  __     _____                                _          _       ____       
\ \/ /    |  ___|__  _ ____      ____ _ _ __ __| | ___  __| |     |  _ \ _ __ 
 \  /_____| |_ / _ \| '__\ \ /\ / / _` | '__/ _` |/ _ \/ _` |_____| |_) | '__|
 /  \_____|  _| (_) | |   \ V  V / (_| | | | (_| |  __/ (_| |_____|  __/| |   
/_/\_\    |_|  \___/|_|    \_/\_/ \__,_|_|  \__,_|\___|\__,_|     |_|   |_|   
                                                                              
       _        
  ___ | |_ ___  
 / _ \| __/ _ \ 
| (_) | || (_) |
 \___/ \__\___/ 
                
X-Forwarded-Proto

The  X-Forwarded-Proto (XFP) header is a de-facto standard header for
identifying the protocol (HTTP or HTTPS) that a client used to connect
to your proxy or load balancer. Your server access logs contain the
protocol used between the server and the load balancer, but not the
protocol used between the client and the load balancer. To determine the
protocol used between the client and the load balancer, the
 X-Forwarded-Proto request header can be used.

A standardized version of this header is the HTTP  Forwarded header.

  ----------------------- ----------------
  Header type             Request header
  Forbidden header name   no
  ----------------------- ----------------

Syntax

http

    X-Forwarded-Proto: <protocol>

Directives

<protocol>

    The forwarded protocol (http or https).

Examples

http

    X-Forwarded-Proto: https

Other non-standard forms:

http

    # Microsoft
    Front-End-Https: on

    X-Forwarded-Protocol: https
    X-Forwarded-Ssl: on
    X-Url-Scheme: https

Specifications

Not part of any current specification. The standardized version of this
header is  Forwarded .

See also

-    Forwarded
-    X-Forwarded-For
-    X-Forwarded-Host

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# X-Frame-Options #
__  __     _____                                ___        _   _             
\ \/ /    |  ___| __ __ _ _ __ ___   ___       / _ \ _ __ | |_(_) ___  _ __  
 \  /_____| |_ | '__/ _` | '_ ` _ \ / _ \_____| | | | '_ \| __| |/ _ \| '_ \ 
 /  \_____|  _|| | | (_| | | | | | |  __/_____| |_| | |_) | |_| | (_) | | | |
/_/\_\    |_|  |_|  \__,_|_| |_| |_|\___|      \___/| .__/ \__|_|\___/|_| |_|
                                                    |_|                      
     
 ___ 
/ __|
\__ \
|___/
     
X-Frame-Options

The  X-Frame-Options HTTP response header can be used to indicate
whether a browser should be allowed to render a page in a  <frame> ,
 <iframe> ,  <embed> or  <object> . Sites can use this to avoid
click-jacking attacks, by ensuring that their content is not embedded
into other sites.

The added security is provided only if the user accessing the document
is using a browser that supports  X-Frame-Options .

Warning: The  Content-Security-Policy HTTP header has a  frame-ancestors
directive which obsoletes this header for supporting browsers.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

There are two possible directives for  X-Frame-Options :

http

    X-Frame-Options: DENY
    X-Frame-Options: SAMEORIGIN

Directives

If you specify  DENY , not only will the browser attempt to load the
page in a frame fail when loaded from other sites, attempts to do so
will fail when loaded from the same site. On the other hand, if you
specify  SAMEORIGIN , you can still use the page in a frame as long as
the site including it in a frame is the same as the one serving the
page.

 DENY

    The page cannot be displayed in a frame, regardless of the site
    attempting to do so.

 SAMEORIGIN

    The page can only be displayed if all ancestor frames are same
    origin to the page itself.

 ALLOW-FROM origin  Deprecated 

    This is an obsolete directive. Modern browsers that encounter
    response headers with this directive will ignore the header
    completely. The  Content-Security-Policy HTTP header has a
     frame-ancestors directive which you should use instead.

Examples

Warning: Setting  X-Frame-Options inside the  <meta> element (e.g.,
 <meta http-equiv="X-Frame-Options" content="deny"> ) has no effect and
should not be used!  X-Frame-Options is only enforced via HTTP headers,
as shown in the examples below.

Configuring Apache

To configure Apache to send the  X-Frame-Options header for all pages,
add this to your site's configuration:

apacheconf

    Header always set X-Frame-Options "SAMEORIGIN"

To configure Apache to set  X-Frame-Options to  DENY , add this to your
site's configuration:

apacheconf

    Header set X-Frame-Options "DENY"

Configuring Nginx

To configure Nginx to send the  X-Frame-Options header, add this either
to your http, server or location configuration:

nginx

    add_header X-Frame-Options SAMEORIGIN always;

You can set the  X-Frame-Options header to  DENY using:

nginx

    add_header X-Frame-Options DENY always;

Configuring IIS

To configure IIS to send the  X-Frame-Options header, add this to your
site's  Web.config file:

xml

    <system.webServer>
      …
      <httpProtocol>
        <customHeaders>
          <add name="X-Frame-Options" value="SAMEORIGIN" />
        </customHeaders>
      </httpProtocol>
      …
    </system.webServer>

For more information, see the Microsoft support article on setting this
configuration using the IIS Manager user interface.

Configuring HAProxy

To configure HAProxy to send the  X-Frame-Options header, add this to
your front-end, listen, or backend configuration:

    rspadd X-Frame-Options:\ SAMEORIGIN

Alternatively, in newer versions:

    http-response set-header X-Frame-Options SAMEORIGIN

Configuring Express

You can use Helmet to configure an Express app to set the legacy
X-Frame-Options header on old browsers.

Warning: It's recommended to use the  Content-Security-Policy HTTP
header with the  frame-ancestors directive instead.

To use Helmet to set  X-Frame-Options , add the following to your server
configuration to set the  SAMEORIGIN directive:

js

    const helmet = require("helmet");
    const app = express();
    app.use(
      helmet({
        xFrameOptions: { action: "sameorigin" },
      }),
    );

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTML Standard
  # the-x-frame-options-header

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy directive  frame-ancestors
-   ClickJacking Defenses - IEBlog
-   Combating ClickJacking with X-Frame-Options - IEInternals

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 12, 2023 by MDN contributors .
# X-XSS-Protection #
__  __   __  ______ ____        ____            _            _   _             
\ \/ /   \ \/ / ___/ ___|      |  _ \ _ __ ___ | |_ ___  ___| |_(_) ___  _ __  
 \  /_____\  /\___ \___ \ _____| |_) | '__/ _ \| __/ _ \/ __| __| |/ _ \| '_ \ 
 /  \_____/  \ ___) |__) |_____|  __/| | | (_) | ||  __/ (__| |_| | (_) | | | |
/_/\_\   /_/\_\____/____/      |_|   |_|  \___/ \__\___|\___|\__|_|\___/|_| |_|
                                                                               
X-XSS-Protection

Non-standard: This feature is non-standard and is not on a standards
track. Do not use it on production sites facing the Web: it will not
work for every user. There may also be large incompatibilities between
implementations and the behavior may change in the future.

The HTTP  X-XSS-Protection response header is a feature of Internet
Explorer, Chrome and Safari that stops pages from loading when they
detect reflected cross-site scripting ( XSS ) attacks. These protections
are largely unnecessary in modern browsers when sites implement a strong
 Content-Security-Policy that disables the use of inline JavaScript (
 'unsafe-inline' ).

Warning: Even though this feature can protect users of older web
browsers that don't yet support CSP , in some cases, XSS protection can
create XSS vulnerabilities in otherwise safe websites. See the section
below for more information.

Note:

-   Chrome has removed their XSS Auditor
-   Firefox has not, and will not implement  X-XSS-Protection
-   Edge has retired their XSS filter

This means that if you do not need to support legacy browsers, it is
recommended that you use  Content-Security-Policy without allowing
 unsafe-inline scripts instead.

  ----------------------- -----------------
  Header type             Response header
  Forbidden header name   no
  ----------------------- -----------------

Syntax

http

    X-XSS-Protection: 0
    X-XSS-Protection: 1
    X-XSS-Protection: 1; mode=block
    X-XSS-Protection: 1; report=<reporting-uri>

0

    Disables XSS filtering.

1

    Enables XSS filtering (usually default in browsers). If a cross-site
    scripting attack is detected, the browser will sanitize the page
    (remove the unsafe parts).

1; mode=block

    Enables XSS filtering. Rather than sanitizing the page, the browser
    will prevent rendering of the page if an attack is detected.

1; report=<reporting-URI> (Chromium only)

    Enables XSS filtering. If a cross-site scripting attack is detected,
    the browser will sanitize the page and report the violation. This
    uses the functionality of the CSP  report-uri directive to send a
    report.

Vulnerabilities caused by XSS filtering

Consider the following excerpt of HTML code for a webpage:

html

    <script>
      var productionMode = true;
    </script>
    <!-- [...] -->
    <script>
      if (!window.productionMode) {
        // Some vulnerable debug code
      }
    </script>

This code is completely safe if the browser doesn't perform XSS
filtering. However, if it does and the search query is
 ?something=%3Cscript%3Evar%20productionMode%20%3D%20true%3B%3C%2Fscript%3E
, the browser might execute the scripts in the page ignoring
 <script>var productionMode = true;</script> (thinking the server
included it in the response because it was in the URI), causing
 window.productionMode to be evaluated to  undefined and executing the
unsafe debug code.

Setting the  X-XSS-Protection header to either  0 or  1; mode=block
prevents vulnerabilities like the one described above. The former would
make the browser run all scripts and the latter would prevent the page
from being processed at all (though this approach might be vulnerable to
side-channel attacks if the website is embeddable in an  <iframe> ).

Example

Block pages from loading when they detect reflected XSS attacks:

http

    X-XSS-Protection: 1; mode=block

PHP

php

    header("X-XSS-Protection: 1; mode=block");

Apache (.htaccess)

apacheconf

    <IfModule mod_headers.c>
      Header set X-XSS-Protection "1; mode=block"
    </IfModule>

Nginx

nginx

    add_header "X-XSS-Protection" "1; mode=block";

Specifications

Not part of any specifications or drafts.

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Security-Policy
-   Controlling the XSS Filter – Microsoft
-   Understanding XSS Auditor – Virtue Security
-   The misunderstood X-XSS-Protection – blog.innerht.ml

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 25, 2023 by MDN contributors .
# HTTP Messages #
 _   _ _____ _____ ____    __  __                                     
| | | |_   _|_   _|  _ \  |  \/  | ___  ___ ___  __ _  __ _  ___  ___ 
| |_| | | |   | | | |_) | | |\/| |/ _ \/ __/ __|/ _` |/ _` |/ _ \/ __|
|  _  | | |   | | |  __/  | |  | |  __/\__ \__ \ (_| | (_| |  __/\__ \
|_| |_| |_|   |_| |_|     |_|  |_|\___||___/___/\__,_|\__, |\___||___/
                                                      |___/           
HTTP Messages

HTTP messages are how data is exchanged between a server and a client.
There are two types of messages: requests sent by the client to trigger
an action on the server, and responses , the answer from the server.

HTTP messages are composed of textual information encoded in ASCII, and
span over multiple lines. In HTTP/1.1, and earlier versions of the
protocol, these messages were openly sent across the connection. In
HTTP/2, the once human-readable message is now divided up into HTTP
frames, providing optimization and performance improvements.

Web developers, or webmasters, rarely craft these textual HTTP messages
themselves: software, a Web browser, proxy, or Web server, perform this
action. They provide HTTP messages through config files (for proxies or
servers), APIs (for browsers), or other interfaces.

[From a user-, script-, or server- generated event, an HTTP/1.x msg is
generated, and if HTTP/2 is in use, it is binary framed into an HTTP/2
stream, then sent.]

HTTP requests, and responses, share similar structure and are composed
of:

1.  A start-line describing the requests to be implemented, or its
    status of whether successful or a failure. This is always a single
    line.
2.  An optional set of HTTP headers specifying the request, or
    describing the body included in the message.
3.  A blank line indicating all meta-information for the request has
    been sent.
4.  An optional body containing data associated with the request (like
    content of an HTML form), or the document associated with a
    response. The presence of the body and its size is specified by the
    start-line and HTTP headers.

The start-line and HTTP headers of the HTTP message are collectively
known as the head of the requests, whereas its payload is known as the
body .

[Requests and responses share a common structure in HTTP]

HTTP Requests

Request line

Note: The start-line is called the "request-line" in requests.

HTTP requests are messages sent by the client to initiate an action on
the server. Their request-line contain three elements:

1.  An HTTP method , a verb (like  GET ,  PUT or  POST ) or a noun (like
     HEAD or  OPTIONS ), that describes the action to be performed. For
    example,  GET indicates that a resource should be fetched or  POST
    means that data is pushed to the server (creating or modifying a
    resource, or generating a temporary document to send back).
2.  The request target , usually a URL , or the absolute path of the
    protocol, port, and domain are usually characterized by the request
    context. The format of this request target varies between different
    HTTP methods. It can be
    -   An absolute path, ultimately followed by a  '?' and query
        string. This is the most common form, known as the origin form ,
        and is used with  GET ,  POST ,  HEAD , and  OPTIONS methods.
        -    POST / HTTP/1.1
        -    GET /background.png HTTP/1.0
        -    HEAD /test.html?query=alibaba HTTP/1.1
        -    OPTIONS /anypage.html HTTP/1.0
    -   A complete URL, known as the absolute form , is mostly used with
         GET when connected to a proxy.
         GET https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages HTTP/1.1
    -   The authority component of a URL, consisting of the domain name
        and optionally the port (prefixed by a  ':' ), is called the
        authority form . It is only used with  CONNECT when setting up
        an HTTP tunnel.  CONNECT developer.mozilla.org:80 HTTP/1.1
    -   The asterisk form , a simple asterisk (  '*' ) is used with
         OPTIONS , representing the server as a whole.
         OPTIONS * HTTP/1.1
3.  The HTTP version , which defines the structure of the remaining
    message, acting as an indicator of the expected version to use for
    the response.

Headers

HTTP headers from a request follow the same basic structure of an HTTP
header: a case-insensitive string followed by a colon (  ':' ) and a
value whose structure depends upon the header. The whole header,
including the value, consists of one single line, which can be quite
long.

Many different headers can appear in requests. They can be divided in
several groups:

-   General headers , like  Via , apply to the message as a whole.
-   Request headers , like  User-Agent or  Accept , modify the request
    by specifying it further (like  Accept-Language ), by giving context
    (like  Referer ), or by conditionally restricting it (like
     If-None-Match ).
-   Representation headers like  Content-Type that describe the original
    format of the message data and any encoding applied (only present if
    the message has a body).

[Example of headers in an HTTP request]

Body

The final part of the request is its body. Not all requests have one:
requests fetching resources like  GET or  HEAD usually don't need a
body. Requests that send data to the server to create a resource, such
as  PUT or  POST requests, typically require a body with the data used
to fulfill the request (for instance, HTML form data).

Bodies can be broadly divided into two categories:

-   Single-resource bodies, consisting of one single file, defined by
    the two headers:  Content-Type and  Content-Length .
-   Multiple-resource bodies , consisting of a multipart body, each
    containing a different bit of information. This is typically
    associated with HTML Forms .

HTTP Responses

Status line

Note: The start-line is called the "status line" in requests.

The start line of an HTTP response, called the status line , contains
the following information:

1.  The protocol version , usually  HTTP/1.1 , but can also be  HTTP/1.0
    .
2.  A status code , indicating success or failure of the request. Common
    status codes are  200 ,  404 , or  302 .
3.  A status text . A brief, purely informational, textual description
    of the status code to help a human understand the HTTP message.

A typical status line looks like:  HTTP/1.1 404 Not Found .

Headers

HTTP headers for responses follow the same structure as any other
header: a case-insensitive string followed by a colon (  ':' ) and a
value whose structure depends upon the type of the header. The whole
header, including its value, presents as a single line.

Many different headers can appear in responses. These can be divided
into several groups:

-   General headers , like  Via , apply to the whole message.
-   Response headers , like  Vary and  Accept-Ranges , give additional
    information about the server which doesn't fit in the status line.
-   Representation headers like  Content-Type that describe the original
    format of the message data and any encoding applied (only present if
    the message has a body).

[Example of headers in an HTTP response]

Body

The last part of a response is the body. Not all responses have one:
responses with a status code that sufficiently answers the request
without the need for corresponding payload (like  201  Created or  204
 No Content ) usually don't.

Bodies can be broadly divided into three categories:

-   Single-resource bodies, consisting of a single file of known length,
    defined by the two headers:  Content-Type and  Content-Length .
-   Single-resource bodies, consisting of a single file of unknown
    length, encoded by chunks with  Transfer-Encoding set to  chunked .
-   Multiple-resource bodies , consisting of a multipart body, each
    containing a different section of information. These are relatively
    rare.

HTTP/2 Frames

HTTP/1.x messages have a few drawbacks for performance:

-   Headers, unlike bodies, are uncompressed.
-   Headers are often very similar from one message to the next one, yet
    still repeated across connections.
-   Although HTTP/1.1 has pipelining , it's not activated by default in
    most browsers, and doesn't allow for multiplexing (i.e. sending
    requests concurrently). Several connections need opening on the same
    server to send requests concurrently; and warm TCP connections are
    more efficient than cold ones.

HTTP/2 introduces an extra step: it divides HTTP/1.x messages into
frames which are embedded in a stream. Data and header frames are
separated, which allows header compression. Several streams can be
combined together, a process called multiplexing , allowing more
efficient use of underlying TCP connections.

[HTTP/2 modifies the HTTP message to divide them in frames (part of a
single stream), allowing for more optimization.]

HTTP frames are now transparent to Web developers. This is an additional
step in HTTP/2, between HTTP/1.1 messages and the underlying transport
protocol. No changes are needed in the APIs used by Web developers to
utilize HTTP frames; when available in both the browser and the server,
HTTP/2 is switched on and used.

Conclusion

HTTP messages are the key in using HTTP; their structure is simple, and
they are highly extensible. The HTTP/2 framing mechanism adds a new
intermediate layer between the HTTP/1.x syntax and the underlying
transport protocol, without fundamentally modifying it: building upon
proven mechanisms.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 22, 2024 by MDN contributors .
# CONNECT #
  ____ ___  _   _ _   _ _____ ____ _____ 
 / ___/ _ \| \ | | \ | | ____/ ___|_   _|
| |  | | | |  \| |  \| |  _|| |     | |  
| |__| |_| | |\  | |\  | |__| |___  | |  
 \____\___/|_| \_|_| \_|_____\____| |_|  
                                         
CONNECT

The HTTP  CONNECT method starts two-way communications with the
requested resource. It can be used to open a tunnel.

For example, the  CONNECT method can be used to access websites that use
TLS ( HTTPS ). The client asks an HTTP Proxy server to tunnel the TCP
connection to the desired destination. The server then proceeds to make
the connection on behalf of the client. Once the connection has been
established by the server, the Proxy server continues to proxy the TCP
stream to and from the client.

 CONNECT is a hop-by-hop method.

  ------------------------------ ----
  Request has body               No
  Successful response has body   No
  Safe                           No
  Idempotent                     No
  Cacheable                      No
  Allowed in HTML forms          No
  ------------------------------ ----

Syntax

http

    CONNECT www.example.com:443 HTTP/1.1

Example

Some proxy servers might need authority to create a tunnel. See also the
 Proxy-Authorization header.

http

    CONNECT server.example.com:80 HTTP/1.1
    Host: server.example.com:80
    Proxy-Authorization: basic aGVsbG86d29ybGQ=

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # CONNECT

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Proxy server
-    Proxy-Authorization

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Sep 27, 2023 by MDN contributors .
# DELETE #
 ____  _____ _     _____ _____ _____ 
|  _ \| ____| |   | ____|_   _| ____|
| | | |  _| | |   |  _|   | | |  _|  
| |_| | |___| |___| |___  | | | |___ 
|____/|_____|_____|_____| |_| |_____|
                                     
DELETE

The HTTP  DELETE request method deletes the specified resource.

  ------------------------------ -----
  Request has body               May
  Successful response has body   May
  Safe                           No
  Idempotent                     Yes
  Cacheable                      No
  Allowed in HTML forms          No
  ------------------------------ -----

Syntax

http

    DELETE /file.html HTTP/1.1

Example

Request

http

    DELETE /file.html HTTP/1.1
    Host: example.com

Responses

If a  DELETE method is successfully applied, there are several response
status codes possible:

-   A  202 (  Accepted ) status code if the action will likely succeed
    but has not yet been enacted.
-   A  204 (  No Content ) status code if the action has been enacted
    and no further information is to be supplied.
-   A  200 (  OK ) status code if the action has been enacted and the
    response message includes a representation describing the status.

http

    HTTP/1.1 200 OK
    Date: Wed, 21 Oct 2015 07:28:00 GMT

    <html>
      <body>
        <h1>File deleted.</h1>
      </body>
    </html>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # DELETE

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP status:  200 ,  202 ,  204

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# GET #
  ____ _____ _____ 
 / ___| ____|_   _|
| |  _|  _|   | |  
| |_| | |___  | |  
 \____|_____| |_|  
                   
GET

The HTTP  GET method requests a representation of the specified
resource. Requests using  GET should only be used to request data (they
shouldn't include data).

Note: Sending body/payload in a  GET request may cause some existing
implementations to reject the request — while not prohibited by the
specification, the semantics are undefined. It is better to just avoid
sending payloads in  GET requests.

  ------------------------------ -----
  Request has body               No
  Successful response has body   Yes
  Safe                           Yes
  Idempotent                     Yes
  Cacheable                      Yes
  Allowed in HTML forms          Yes
  ------------------------------ -----

Syntax

http

    GET /index.html

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # GET

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP Headers
-    Range
-    POST

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# HEAD #
 _   _ _____    _    ____  
| | | | ____|  / \  |  _ \ 
| |_| |  _|   / _ \ | | | |
|  _  | |___ / ___ \| |_| |
|_| |_|_____/_/   \_\____/ 
                           
HEAD

The HTTP  HEAD method requests the headers that would be returned if the
 HEAD request's URL was instead requested with the HTTP  GET method. For
example, if a URL might produce a large download, a  HEAD request could
read its  Content-Length header to check the filesize without actually
downloading the file.

Warning: A response to a  HEAD method should not have a body. If it has
one anyway, that body must be ignored: any representation headers that
might describe the erroneous body are instead assumed to describe the
response which a similar  GET request would have received.

If the response to a  HEAD request shows that a cached URL response is
now outdated, the cached copy is invalidated even if no  GET request was
made.

  ------------------------------ -----
  Request has body               No
  Successful response has body   No
  Safe                           Yes
  Idempotent                     Yes
  Cacheable                      Yes
  Allowed in HTML forms          No
  ------------------------------ -----

Syntax

http

    HEAD /index.html

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # HEAD

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    GET

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# HTTP request methods #
 _   _ _____ _____ ____                                   _   
| | | |_   _|_   _|  _ \   _ __ ___  __ _ _   _  ___  ___| |_ 
| |_| | | |   | | | |_) | | '__/ _ \/ _` | | | |/ _ \/ __| __|
|  _  | | |   | | |  __/  | | |  __/ (_| | |_| |  __/\__ \ |_ 
|_| |_| |_|   |_| |_|     |_|  \___|\__, |\__,_|\___||___/\__|
                                       |_|                    
                _   _               _     
 _ __ ___   ___| |_| |__   ___   __| |___ 
| '_ ` _ \ / _ \ __| '_ \ / _ \ / _` / __|
| | | | | |  __/ |_| | | | (_) | (_| \__ \
|_| |_| |_|\___|\__|_| |_|\___/ \__,_|___/
                                          
HTTP request methods

HTTP defines a set of request methods to indicate the desired action to
be performed for a given resource. Although they can also be nouns,
these request methods are sometimes referred to as HTTP verbs . Each of
them implements a different semantic, but some common features are
shared by a group of them: e.g. a request method can be safe ,
idempotent , or cacheable .

 GET

    The  GET method requests a representation of the specified resource.
    Requests using  GET should only retrieve data.

 HEAD

    The  HEAD method asks for a response identical to a  GET request,
    but without the response body.

 POST

    The  POST method submits an entity to the specified resource, often
    causing a change in state or side effects on the server.

 PUT

    The  PUT method replaces all current representations of the target
    resource with the request payload.

 DELETE

    The  DELETE method deletes the specified resource.

 CONNECT

    The  CONNECT method establishes a tunnel to the server identified by
    the target resource.

 OPTIONS

    The  OPTIONS method describes the communication options for the
    target resource.

 TRACE

    The  TRACE method performs a message loop-back test along the path
    to the target resource.

 PATCH

    The  PATCH method applies partial modifications to a resource.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # CONNECT

  HTTP Semantics
  # DELETE

  HTTP Semantics
  # GET

  HTTP Semantics
  # HEAD

  HTTP Semantics
  # OPTIONS

  HTTP Semantics
  # POST

  HTTP Semantics
  # PUT

  HTTP Semantics
  # TRACE
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP headers

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# OPTIONS #
  ___  ____ _____ ___ ___  _   _ ____  
 / _ \|  _ \_   _|_ _/ _ \| \ | / ___| 
| | | | |_) || |  | | | | |  \| \___ \ 
| |_| |  __/ | |  | | |_| | |\  |___) |
 \___/|_|    |_| |___\___/|_| \_|____/ 
                                       
OPTIONS

The HTTP  OPTIONS method requests permitted communication options for a
given URL or server. A client can specify a URL with this method, or an
asterisk (  * ) to refer to the entire server.

  ------------------------------ -----
  Request has body               No
  Successful response has body   May
  Safe                           Yes
  Idempotent                     Yes
  Cacheable                      No
  Allowed in HTML forms          No
  ------------------------------ -----

Syntax

http

    OPTIONS /index.html HTTP/1.1
    OPTIONS * HTTP/1.1

Examples

Identifying allowed request methods

To find out which request methods a server supports, one can use the
 curl command-line program to issue an  OPTIONS request:

bash

    curl -X OPTIONS https://example.org -i

The response then contains an  Allow header that holds the allowed
methods:

http

    HTTP/1.1 204 No Content
    Allow: OPTIONS, GET, HEAD, POST
    Cache-Control: max-age=604800
    Date: Thu, 13 Oct 2016 11:45:00 GMT
    Server: EOS (lax004/2813)

Preflighted requests in CORS

In CORS , a preflight request is sent with the  OPTIONS method so that
the server can respond if it is acceptable to send the request. In this
example, we will request permission for these parameters:

-   The  Access-Control-Request-Method header sent in the preflight
    request tells the server that when the actual request is sent, it
    will have a  POST request method.
-   The  Access-Control-Request-Headers header tells the server that
    when the actual request is sent, it will have the  X-PINGOTHER and
     Content-Type headers.

http

    OPTIONS /resources/post-here/ HTTP/1.1
    Host: bar.example
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-us,en;q=0.5
    Accept-Encoding: gzip,deflate
    Connection: keep-alive
    Origin: https://foo.example
    Access-Control-Request-Method: POST
    Access-Control-Request-Headers: X-PINGOTHER, Content-Type

The server now can respond if it will accept a request under these
circumstances. In this example, the server response says that:

 Access-Control-Allow-Origin

    The  https://foo.example origin is permitted to request the
     bar.example/resources/post-here/ URL via the following:

 Access-Control-Allow-Methods

     POST ,  GET , and  OPTIONS are permitted methods for the URL. (This
    header is similar to the  Allow response header, but used only for
    CORS .)

 Access-Control-Allow-Headers

     X-PINGOTHER and  Content-Type are permitted request headers for the
    URL.

 Access-Control-Max-Age

    The above permissions may be cached for 86,400 seconds (1 day).

http

    HTTP/1.1 200 OK
    Date: Mon, 01 Dec 2008 01:15:39 GMT
    Server: Apache/2.0.61 (Unix)
    Access-Control-Allow-Origin: https://foo.example
    Access-Control-Allow-Methods: POST, GET, OPTIONS
    Access-Control-Allow-Headers: X-PINGOTHER, Content-Type
    Access-Control-Max-Age: 86400
    Vary: Accept-Encoding, Origin
    Keep-Alive: timeout=2, max=100
    Connection: Keep-Alive

Status Code

Both  200 OK and  204 No Content are permitted status codes , but some
browsers incorrectly believe  204 No Content applies to the resource and
do not send the subsequent request to fetch it.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # OPTIONS

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Allow header
-   CORS

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 12, 2024 by MDN contributors .
# PATCH #
 ____   _  _____ ____ _   _ 
|  _ \ / \|_   _/ ___| | | |
| |_) / _ \ | || |   | |_| |
|  __/ ___ \| || |___|  _  |
|_| /_/   \_\_| \____|_| |_|
                            
PATCH

The HTTP  PATCH request method applies partial modifications to a
resource.

 PATCH is somewhat analogous to the "update" concept found in CRUD (in
general, HTTP is different than CRUD , and the two should not be
confused).

A  PATCH request is considered a set of instructions on how to modify a
resource. Contrast this with  PUT ; which is a complete representation
of a resource.

A  PATCH is not necessarily idempotent, although it can be. Contrast
this with  PUT ; which is always idempotent. The word "idempotent" means
that any number of repeated, identical requests will leave the resource
in the same state. For example if an auto-incrementing counter field is
an integral part of the resource, then a  PUT will naturally overwrite
it (since it overwrites everything), but not necessarily so for  PATCH .

 PATCH (like  POST ) may have side-effects on other resources.

To find out whether a server supports  PATCH , a server can advertise
its support by adding it to the list in the  Allow or
 Access-Control-Allow-Methods (for CORS ) response headers.

Another (implicit) indication that  PATCH is allowed, is the presence of
the  Accept-Patch header, which specifies the patch document formats
accepted by the server.

  ------------------------------ -------------------------------------------
  Request has body               Yes
  Successful response has body   May
  Safe                           No
  Idempotent                     No
  Cacheable                      Only if freshness information is included
  Allowed in HTML forms          No
  ------------------------------ -------------------------------------------

Syntax

http

    PATCH /file.txt HTTP/1.1

Example

Request

http

    PATCH /file.txt HTTP/1.1
    Host: www.example.com
    Content-Type: application/example
    If-Match: "e0023aa4e"
    Content-Length: 100

    [description of changes]

Response

A successful response is indicated by any 2xx status code.

In the example below a  204 response code is used, because the response
does not carry a payload body. A  200 response could have contained a
payload body.

http

    HTTP/1.1 204 No Content
    Content-Location: /file.txt
    ETag: "e0023aa4f"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  RFC 5789

  -----------------------------------------------------------------------

See also

-    204
-    Allow ,  Access-Control-Allow-Methods
-    Accept-Patch – specifies the patch document formats accepted by the
    server.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 19, 2023 by MDN contributors .
# POST #
 ____   ___  ____ _____ 
|  _ \ / _ \/ ___|_   _|
| |_) | | | \___ \ | |  
|  __/| |_| |___) || |  
|_|    \___/|____/ |_|  
                        
POST

The HTTP  POST method sends data to the server. The type of the body of
the request is indicated by the  Content-Type header.

The difference between  PUT and  POST is that  PUT is idempotent:
calling it once or several times successively has the same effect (that
is no side effect), where successive identical  POST may have additional
effects, like passing an order several times.

A  POST request is typically sent via an HTML form and results in a
change on the server. In this case, the content type is selected by
putting the adequate string in the  enctype attribute of the  <form>
element or the  formenctype attribute of the  <input> or  <button>
elements:

-    application/x-www-form-urlencoded : the keys and values are encoded
    in key-value tuples separated by  '&' , with a  '=' between the key
    and the value. Non-alphanumeric characters in both keys and values
    are URL encoded : this is the reason why this type is not suitable
    to use with binary data (use  multipart/form-data instead)
-    multipart/form-data : each value is sent as a block of data ("body
    part"), with a user agent-defined delimiter ("boundary") separating
    each part. The keys are given in the  Content-Disposition header of
    each part.
-    text/plain

When the  POST request is sent via a method other than an HTML form,
such as a  fetch() call, the body can take any type. As described in the
HTTP 1.1 specification,  POST is designed to allow a uniform method to
cover the following functions:

-   Annotation of existing resources
-   Posting a message to a bulletin board, newsgroup, mailing list, or
    similar group of articles;
-   Adding a new user through a signup modal;
-   Providing a block of data, such as the result of submitting a form,
    to a data-handling process;
-   Extending a database through an append operation.

  ------------------------------ -------------------------------------------
  Request has body               Yes
  Successful response has body   Yes
  Safe                           No
  Idempotent                     No
  Cacheable                      Only if freshness information is included
  Allowed in HTML forms          Yes
  ------------------------------ -------------------------------------------

Syntax

http

    POST /test

Example

A simple form using the default  application/x-www-form-urlencoded
content type:

http

    POST /test HTTP/1.1
    Host: foo.example
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 27

    field1=value1&field2=value2

A form using the  multipart/form-data content type:

http

    POST /test HTTP/1.1
    Host: foo.example
    Content-Type: multipart/form-data;boundary="boundary"

    --boundary
    Content-Disposition: form-data; name="field1"

    value1
    --boundary
    Content-Disposition: form-data; name="field2"; filename="example.txt"

    value2
    --boundary--

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # POST

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Content-Type
-    Content-Disposition
-    GET

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 16, 2023 by MDN contributors .
# PUT #
 ____  _   _ _____ 
|  _ \| | | |_   _|
| |_) | | | | | |  
|  __/| |_| | | |  
|_|    \___/  |_|  
                   
PUT

The HTTP  PUT request method creates a new resource or replaces a
representation of the target resource with the request payload.

The difference between  PUT and  POST is that  PUT is idempotent:
calling it once or several times successively has the same effect (that
is no side effect), whereas successive identical  POST requests may have
additional effects, akin to placing an order several times.

  ------------------------------ -----
  Request has body               Yes
  Successful response has body   May
  Safe                           No
  Idempotent                     Yes
  Cacheable                      No
  Allowed in HTML forms          No
  ------------------------------ -----

Syntax

http

    PUT /new.html HTTP/1.1

Example

Request

http

    PUT /new.html HTTP/1.1
    Host: example.com
    Content-type: text/html
    Content-length: 16

    <p>New File</p>

Responses

If the target resource does not have a current representation and the
 PUT request successfully creates one, then the origin server must
inform the user agent by sending a  201 (  Created ) response.

http

    HTTP/1.1 201 Created
    Content-Location: /new.html

If the target resource does have a current representation and that
representation is successfully modified in accordance with the state of
the enclosed representation, then the origin server must send either a
 200 (  OK ) or a  204 (  No Content ) response to indicate successful
completion of the request.

http

    HTTP/1.1 204 No Content
    Content-Location: /existing.html

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # PUT

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    201
-    204

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# TRACE #
 _____ ____      _    ____ _____ 
|_   _|  _ \    / \  / ___| ____|
  | | | |_) |  / _ \| |   |  _|  
  | | |  _ <  / ___ \ |___| |___ 
  |_| |_| \_\/_/   \_\____|_____|
                                 
TRACE

The HTTP  TRACE method performs a message loop-back test along the path
to the target resource, providing a useful debugging mechanism.

The final recipient of the request should reflect the message received,
excluding any fields that might include sensitive data, back to the
client as the message body of a  200 (  OK ) response with a
 Content-Type of  message/http . The final recipient is either the
origin server or the first server to receive a  Max-Forwards value of 0
in the request.

Note that the client must not send content in the request, or generate
fields that might include sensitive data, such as stored user
credentials or cookies.

  ------------------------------ -----
  Request has body               No
  Successful response has body   Yes
  Safe                           Yes
  Idempotent                     Yes
  Cacheable                      No
  Allowed in HTML forms          No
  ------------------------------ -----

Syntax

http

    TRACE /index.html

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # TRACE

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP methods

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 12, 2024 by MDN contributors .
# Network Error Logging #
 _   _      _                      _      _____                     
| \ | | ___| |___      _____  _ __| | __ | ____|_ __ _ __ ___  _ __ 
|  \| |/ _ \ __\ \ /\ / / _ \| '__| |/ / |  _| | '__| '__/ _ \| '__|
| |\  |  __/ |_ \ V  V / (_) | |  |   <  | |___| |  | | | (_) | |   
|_| \_|\___|\__| \_/\_/ \___/|_|  |_|\_\ |_____|_|  |_|  \___/|_|   
                                                                    
 _                      _             
| |    ___   __ _  __ _(_)_ __   __ _ 
| |   / _ \ / _` |/ _` | | '_ \ / _` |
| |__| (_) | (_| | (_| | | | | | (_| |
|_____\___/ \__, |\__, |_|_| |_|\__, |
            |___/ |___/         |___/ 
Network Error Logging

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

Network Error Logging is a mechanism that can be configured via the  NEL
HTTP response header . This experimental header allows websites and
applications to opt-in to receive reports about failed (and, if desired,
successful) network fetches from supporting browsers.

Reports are sent to a reporting group defined within a  Report-To
header.

Usage

Web applications opt in to this behavior with the NEL header, which is a
JSON-encoded object:

http

    NEL: { "report_to": "nel",
           "max_age": 31556952 }

An origin considered secure by the browser is required.

The following object keys can be specified in the NEL header:

report_to

    The reporting API group to send network error reports to (see
    below).

max_age

    Specifies the lifetime of the policy, in seconds (in a similar way
    to e.g. HSTS policies are time-restricted). The referenced reporting
    group should have a lifetime at least as long as the NEL policy.

include_subdomains

    If true, the policy applies to all subdomains under the origin that
    the policy header is set. The reporting group should also be set to
    include subdomains, if this option is to be enabled.

success_fraction

    Floating point value between 0 and 1 which specifies the proportion
    of successful network requests to report. Defaults to 0, so that no
    successful network requests will be reported if the key is not
    present in the JSON payload.

failure_fraction

    Floating point value between 0 and 1 which specifies the proportion
    of failed network requests to report. Defaults to 1, so that all
    failed network requests will be reported if the key is not present
    in the JSON payload.

The reporting group referenced above is defined in the usual manner
within the  Report-To header, for example:

http

    Report-To: { "group": "nel",
                 "max_age": 31556952,
                 "endpoints": [
                  { "url": "https://example.com/csp-reports" }
                 ]
               }

Error reports

In these examples, the entire reporting API payload is shown. The
top-level  "body" key contains the network error report.

HTTP 400 (Bad Request) response

json

    {
      "age": 20,
      "type": "network-error",
      "url": "https://example.com/previous-page",
      "body": {
        "elapsed_time": 338,
        "method": "POST",
        "phase": "application",
        "protocol": "http/1.1",
        "referrer": "https://example.com/previous-page",
        "sampling_fraction": 1,
        "server_ip": "192.0.2.172",
        "status_code": 400,
        "type": "http.error",
        "url": "https://example.com/bad-request"
      }
    }

DNS name not resolved

Note that the phase is set to  dns in this report and no  server_ip is
available to include.

json

    {
      "age": 20,
      "type": "network-error",
      "url": "https://example.com/previous-page",
      "body": {
        "elapsed_time": 18,
        "method": "POST",
        "phase": "dns",
        "protocol": "http/1.1",
        "referrer": "https://example.com/previous-page",
        "sampling_fraction": 1,
        "server_ip": "",
        "status_code": 0,
        "type": "dns.name_not_resolved",
        "url": "https://example-host.com/"
      }
    }

The type of the network error may be one of the following pre-defined
values from the specification, but browsers can add and send their own
error types:

 dns.unreachable

    The user's DNS server is unreachable

 dns.name_not_resolved

    The user's DNS server responded but was unable to resolve an IP
    address for the requested URI.

 dns.failed

    Request to the DNS server failed due to reasons not covered by
    previous errors (e.g. SERVFAIL)

 dns.address_changed

    For security reasons, if the server IP address that delivered the
    original report is different to the current server IP address at
    time of error generation, the report data will be downgraded to only
    include information about this problem and the type set to
     dns.address_changed .

 tcp.timed_out

    TCP connection to the server timed out

 tcp.closed

    The TCP connection was closed by the server

 tcp.reset

    The TCP connection was reset

 tcp.refused

    The TCP connection was refused by the server

 tcp.aborted

    The TCP connection was aborted

 tcp.address_invalid

    The IP address is invalid

 tcp.address_unreachable

    The IP address is unreachable

 tcp.failed

    The TCP connection failed due to reasons not covered by previous
    errors

 http.error

    The user agent successfully received a response, but it had a 4xx or
    5xx status code

 http.protocol.error

    The connection was aborted due to an HTTP protocol error

 http.response.invalid

    Response is empty, has a content-length mismatch, has improper
    encoding, and/or other conditions that prevent user agent from
    processing the response

 http.response.redirect_loop

    The request was aborted due to a detected redirect loop

 http.failed

    The connection failed due to errors in HTTP protocol not covered by
    previous errors

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Network Error Logging
  # nel-response-header

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 24, 2023 by MDN contributors .
# An overview of HTTP #
    _                                      _                        __ 
   / \   _ __     _____   _____ _ ____   _(_) _____      __   ___  / _|
  / _ \ | '_ \   / _ \ \ / / _ \ '__\ \ / / |/ _ \ \ /\ / /  / _ \| |_ 
 / ___ \| | | | | (_) \ V /  __/ |   \ V /| |  __/\ V  V /  | (_) |  _|
/_/   \_\_| |_|  \___/ \_/ \___|_|    \_/ |_|\___| \_/\_/    \___/|_|  
                                                                       
 _   _ _____ _____ ____  
| | | |_   _|_   _|  _ \ 
| |_| | | |   | | | |_) |
|  _  | | |   | | |  __/ 
|_| |_| |_|   |_| |_|    
                         
An overview of HTTP

HTTP is a protocol for fetching resources such as HTML documents. It is
the foundation of any data exchange on the Web and it is a client-server
protocol, which means requests are initiated by the recipient, usually
the Web browser. A complete document is reconstructed from the different
sub-documents fetched, for instance, text, layout description, images,
videos, scripts, and more.

[A Web document is the composition of different resources]

Clients and servers communicate by exchanging individual messages (as
opposed to a stream of data). The messages sent by the client, usually a
Web browser, are called requests and the messages sent by the server as
an answer are called responses .

[HTTP as an application layer protocol, on top of TCP (transport layer)
and IP (network layer) and below the presentation layer.] Designed in
the early 1990s, HTTP is an extensible protocol which has evolved over
time. It is an application layer protocol that is sent over TCP , or
over a TLS -encrypted TCP connection, though any reliable transport
protocol could theoretically be used. Due to its extensibility, it is
used to not only fetch hypertext documents, but also images and videos
or to post content to servers, like with HTML form results. HTTP can
also be used to fetch parts of documents to update Web pages on demand.

Components of HTTP-based systems

HTTP is a client-server protocol: requests are sent by one entity, the
user-agent (or a proxy on behalf of it). Most of the time the user-agent
is a Web browser, but it can be anything, for example, a robot that
crawls the Web to populate and maintain a search engine index.

Each individual request is sent to a server, which handles it and
provides an answer called the response . Between the client and the
server there are numerous entities, collectively called proxies , which
perform different operations and act as gateways or caches , for
example.

[Client server chain]

In reality, there are more computers between a browser and the server
handling the request: there are routers, modems, and more. Thanks to the
layered design of the Web, these are hidden in the network and transport
layers. HTTP is on top, at the application layer. Although important for
diagnosing network problems, the underlying layers are mostly irrelevant
to the description of HTTP.

Client: the user-agent

The user-agent is any tool that acts on behalf of the user. This role is
primarily performed by the Web browser, but it may also be performed by
programs used by engineers and Web developers to debug their
applications.

The browser is always the entity initiating the request. It is never the
server (though some mechanisms have been added over the years to
simulate server-initiated messages).

To display a Web page, the browser sends an original request to fetch
the HTML document that represents the page. It then parses this file,
making additional requests corresponding to execution scripts, layout
information (CSS) to display, and sub-resources contained within the
page (usually images and videos). The Web browser then combines these
resources to present the complete document, the Web page. Scripts
executed by the browser can fetch more resources in later phases and the
browser updates the Web page accordingly.

A Web page is a hypertext document. This means some parts of the
displayed content are links, which can be activated (usually by a click
of the mouse) to fetch a new Web page, allowing the user to direct their
user-agent and navigate through the Web. The browser translates these
directions into HTTP requests, and further interprets the HTTP responses
to present the user with a clear response.

The Web server

On the opposite side of the communication channel is the server, which
serves the document as requested by the client. A server appears as only
a single machine virtually; but it may actually be a collection of
servers sharing the load (load balancing), or other software (such as
caches, a database server, or e-commerce servers), totally or partially
generating the document on demand.

A server is not necessarily a single machine, but several server
software instances can be hosted on the same machine. With HTTP/1.1 and
the  Host header, they may even share the same IP address.

Proxies

Between the Web browser and the server, numerous computers and machines
relay the HTTP messages. Due to the layered structure of the Web stack,
most of these operate at the transport, network or physical levels,
becoming transparent at the HTTP layer and potentially having a
significant impact on performance. Those operating at the application
layers are generally called proxies . These can be transparent,
forwarding on the requests they receive without altering them in any
way, or non-transparent, in which case they will change the request in
some way before passing it along to the server. Proxies may perform
numerous functions:

-   caching (the cache can be public or private, like the browser cache)
-   filtering (like an antivirus scan or parental controls)
-   load balancing (to allow multiple servers to serve different
    requests)
-   authentication (to control access to different resources)
-   logging (allowing the storage of historical information)

Basic aspects of HTTP

HTTP is simple

HTTP is generally designed to be simple and human-readable, even with
the added complexity introduced in HTTP/2 by encapsulating HTTP messages
into frames. HTTP messages can be read and understood by humans,
providing easier testing for developers, and reduced complexity for
newcomers.

HTTP is extensible

Introduced in HTTP/1.0, HTTP headers make this protocol easy to extend
and experiment with. New functionality can even be introduced by a
simple agreement between a client and a server about a new header's
semantics.

HTTP is stateless, but not sessionless

HTTP is stateless: there is no link between two requests being
successively carried out on the same connection. This immediately has
the prospect of being problematic for users attempting to interact with
certain pages coherently, for example, using e-commerce shopping
baskets. But while the core of HTTP itself is stateless, HTTP cookies
allow the use of stateful sessions. Using header extensibility, HTTP
Cookies are added to the workflow, allowing session creation on each
HTTP request to share the same context, or the same state.

HTTP and connections

A connection is controlled at the transport layer, and therefore
fundamentally out of scope for HTTP. HTTP doesn't require the underlying
transport protocol to be connection-based; it only requires it to be
reliable , or not lose messages (at minimum, presenting an error in such
cases). Among the two most common transport protocols on the Internet,
TCP is reliable and UDP isn't. HTTP therefore relies on the TCP
standard, which is connection-based.

Before a client and server can exchange an HTTP request/response pair,
they must establish a TCP connection, a process which requires several
round-trips. The default behavior of HTTP/1.0 is to open a separate TCP
connection for each HTTP request/response pair. This is less efficient
than sharing a single TCP connection when multiple requests are sent in
close succession.

In order to mitigate this flaw, HTTP/1.1 introduced pipelining (which
proved difficult to implement) and persistent connections : the
underlying TCP connection can be partially controlled using the
 Connection header. HTTP/2 went a step further by multiplexing messages
over a single connection, helping keep the connection warm and more
efficient.

Experiments are in progress to design a better transport protocol more
suited to HTTP. For example, Google is experimenting with QUIC which
builds on UDP to provide a more reliable and efficient transport
protocol.

What can be controlled by HTTP

This extensible nature of HTTP has, over time, allowed for more control
and functionality of the Web. Cache and authentication methods were
functions handled early in HTTP history. The ability to relax the origin
constraint , by contrast, was only added in the 2010s.

Here is a list of common features controllable with HTTP:

-   Caching : How documents are cached can be controlled by HTTP. The
    server can instruct proxies and clients about what to cache and for
    how long. The client can instruct intermediate cache proxies to
    ignore the stored document.
-   Relaxing the origin constraint : To prevent snooping and other
    privacy invasions, Web browsers enforce strict separation between
    websites. Only pages from the same origin can access all the
    information of a Web page. Though such a constraint is a burden to
    the server, HTTP headers can relax this strict separation on the
    server side, allowing a document to become a patchwork of
    information sourced from different domains; there could even be
    security-related reasons to do so.
-   Authentication : Some pages may be protected so that only specific
    users can access them. Basic authentication may be provided by HTTP,
    either using the  WWW-Authenticate and similar headers, or by
    setting a specific session using HTTP cookies .
-   Proxy and tunneling : Servers or clients are often located on
    intranets and hide their true IP address from other computers. HTTP
    requests then go through proxies to cross this network barrier. Not
    all proxies are HTTP proxies. The SOCKS protocol, for example,
    operates at a lower level. Other protocols, like ftp, can be handled
    by these proxies.
-   Sessions : Using HTTP cookies allows you to link requests with the
    state of the server. This creates sessions, despite basic HTTP being
    a state-less protocol. This is useful not only for e-commerce
    shopping baskets, but also for any site allowing user configuration
    of the output.

HTTP flow

When a client wants to communicate with a server, either the final
server or an intermediate proxy, it performs the following steps:

1.  Open a TCP connection: The TCP connection is used to send a request,
    or several, and receive an answer. The client may open a new
    connection, reuse an existing connection, or open several TCP
    connections to the servers.
2.  Send an HTTP message: HTTP messages (before HTTP/2) are
    human-readable. With HTTP/2, these simple messages are encapsulated
    in frames, making them impossible to read directly, but the
    principle remains the same. For example:
    http

        GET / HTTP/1.1
        Host: developer.mozilla.org
        Accept-Language: fr
3.  Read the response sent by the server, such as:
    http

        HTTP/1.1 200 OK
        Date: Sat, 09 Oct 2010 14:28:02 GMT
        Server: Apache
        Last-Modified: Tue, 01 Dec 2009 20:18:22 GMT
        ETag: "51142bc1-7449-479b075b2891b"
        Accept-Ranges: bytes
        Content-Length: 29769
        Content-Type: text/html

        <!DOCTYPE html>… (here come the 29769 bytes of the requested web page)
4.  Close or reuse the connection for further requests.

If HTTP pipelining is activated, several requests can be sent without
waiting for the first response to be fully received. HTTP pipelining has
proven difficult to implement in existing networks, where old pieces of
software coexist with modern versions. HTTP pipelining has been
superseded in HTTP/2 with more robust multiplexing requests within a
frame.

HTTP Messages

HTTP messages, as defined in HTTP/1.1 and earlier, are human-readable.
In HTTP/2, these messages are embedded into a binary structure, a frame
, allowing optimizations like compression of headers and multiplexing.
Even if only part of the original HTTP message is sent in this version
of HTTP, the semantics of each message is unchanged and the client
reconstitutes (virtually) the original HTTP/1.1 request. It is therefore
useful to comprehend HTTP/2 messages in the HTTP/1.1 format.

There are two types of HTTP messages, requests and responses, each with
its own format.

Requests

An example HTTP request:

[A basic HTTP request]

Requests consist of the following elements:

-   An HTTP method , usually a verb like  GET ,  POST , or a noun like
     OPTIONS or  HEAD that defines the operation the client wants to
    perform. Typically, a client wants to fetch a resource (using  GET )
    or post the value of an HTML form (using  POST ), though more
    operations may be needed in other cases.
-   The path of the resource to fetch; the URL of the resource stripped
    from elements that are obvious from the context, for example without
    the protocol (  http:// ), the domain (here,  developer.mozilla.org
    ), or the TCP port (here,  80 ).
-   The version of the HTTP protocol.
-   Optional headers that convey additional information for the servers.
-   A body, for some methods like  POST , similar to those in responses,
    which contain the resource sent.

Responses

An example response:

[HTTP Response image]

Responses consist of the following elements:

-   The version of the HTTP protocol they follow.
-   A status code , indicating if the request was successful or not, and
    why.
-   A status message, a non-authoritative short description of the
    status code.
-   HTTP headers , like those for requests.
-   Optionally, a body containing the fetched resource.

APIs based on HTTP

The most commonly used API based on HTTP is the Fetch API , which can be
used to make HTTP requests from JavaScript. The Fetch API replaces the
 XMLHttpRequest API.

Another API, server-sent events , is a one-way service that allows a
server to send events to the client, using HTTP as a transport
mechanism. Using the  EventSource interface, the client opens a
connection and establishes event handlers. The client browser
automatically converts the messages that arrive on the HTTP stream into
appropriate  Event objects. Then it delivers them to the event handlers
that have been registered for the events'  type if known, or to the
 onmessage event handler if no type-specific event handler was
established.

Conclusion

HTTP is an extensible protocol that is easy to use. The client-server
structure, combined with the ability to add headers, allows HTTP to
advance along with the extended capabilities of the Web.

Though HTTP/2 adds some complexity by embedding HTTP messages in frames
to improve performance, the basic structure of messages has stayed the
same since HTTP/1.0. Session flow remains simple, allowing it to be
investigated and debugged with a simple HTTP message monitor .

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 16, 2023 by MDN contributors .
# Permissions Policy #
 ____                     _         _                 
|  _ \ ___ _ __ _ __ ___ (_)___ ___(_) ___  _ __  ___ 
| |_) / _ \ '__| '_ ` _ \| / __/ __| |/ _ \| '_ \/ __|
|  __/  __/ |  | | | | | | \__ \__ \ | (_) | | | \__ \
|_|   \___|_|  |_| |_| |_|_|___/___/_|\___/|_| |_|___/
                                                      
 ____       _ _            
|  _ \ ___ | (_) ___ _   _ 
| |_) / _ \| | |/ __| | | |
|  __/ (_) | | | (__| |_| |
|_|   \___/|_|_|\___|\__, |
                     |___/ 
Permissions Policy

Permissions Policy provides mechanisms for web developers to explicitly
declare what functionality can and cannot be used on a website. You
define a set of "policies" that restrict what APIs the site's code can
access or modify the browser's default behavior for certain features.
This allows you to enforce best practices, even as the codebase evolves
— as well as more safely compose third-party content.

Permissions Policy is similar to Content Security Policy but controls
features instead of security behavior.

Examples of what you can do with Permissions Policy:

-   Change the default behavior of autoplay on mobile and third-party
    videos.
-   Restrict a site from using sensitive devices like the camera,
    microphone, or speakers.
-   Allow iframes to use the Fullscreen API .
-   Stop items from being scripted if they are not visible in the
    viewport, to improve performance.

Note: Permissions Policy used to be called Feature Policy. The name has
changed, and so has the HTTP header syntax, so bear this in mind if you
have used Feature Policy in the past, and check the browser support
tables. The  <iframe allow=" ... "> syntax has stayed the same.

Concepts and usage

The web provides functionality and APIs that may have privacy or
security risks if abused. In such cases, you may wish to strictly limit
how functionality is used on a website. In each case, there should be an
intuitive or non-breaking way for web developers to detect and handle
cases where a feature is disabled.

Some approaches include:

-   "Permission denied" is returned for JavaScript APIs that require
    user permission grants.
-   JavaScript APIs that provide access to features return  false values
    or throw an error.
-   APIs are not even exposed, as though they don't exist.
-   Options that control the feature behavior have different default
    values.

Note: Newly-introduced features may have an explicit API to signal the
state. Existing features that later integrate with Permissions Policy
will typically use existing mechanisms.

Permissions Policy allows you to control which origins can use which
features, both on the top-level page and in embedded  <iframe> s. The
aim is to enforce best practices for good user experiences and provide
granular control over sensitive or powerful features (meaning features
that a user is required to give express permission for usage of, before
related code can be executed).

Permissions Policy provides two ways to specify policies:

-   The  Permissions-Policy HTTP header, to control feature usage in
    received responses and any embedded content within the page (which
    includes  <iframe> s).
-   The  <iframe>  allow attribute, to control feature usage only in
    specific  <iframe> s.

These are separate but related — see Inheritance of policies for
embedded content for details.

Note: Scripts can programmatically query information about the
permission policy via the  FeaturePolicy object located at either
 Document.featurePolicy or  HTMLIFrameElement.featurePolicy .

To control each feature, you write a policy that consists of:

-   A directive that identifies the name of the feature to control. See
    the list of the different available directives .
-   An allowlist , which is a list of origins that the feature should be
    controlled in. You can enable a feature for all or specific origins,
    or block its usage in all origins.

See below for multiple examples.

Relationship with the Permissions API

Permissions Policy and the Permissions API are closely-related, but
different. The features that have their permissions controlled by both
these technologies overlap.

-   Permissions Policy allows a server to set whether a feature can be
    used in a particular document (or embedded  <frame> s within it).
    These are referred to as policy-controlled features — see the list
    of Permissions Policy directives .
-   The Permissions API gates access to features based on user-granted
    permissions. These features are recorded in the Permissions Registry
    .

The identifying string used for each feature is kept consistent across
both, for example,  geolocation for the Geolocation API . Most of the
API features in the Permissions Registry also have a corresponding
Permissions Policy directive. One exception is the Notifications API .

Generally when a Permissions Policy blocks the use of a powerful
feature, the user won't even be asked for permission to use it, and the
Permissions API  query() method will return a  state value of  denied .

See also Permissions > Relationship to the Permissions Policy
specification .

Allowlists

An allowlist is a list of origins that takes one or more of the
following values contained in parentheses, separated by spaces:

-    * : The feature will be allowed in this document, and all nested
    browsing contexts (  <iframe> s) regardless of their origin.
-    () (empty allowlist): The feature is disabled in top-level and
    nested browsing contexts. The equivalent for  <iframe>  allow
    attributes is  'none' .
-    self : The feature will be allowed in this document, and in all
    nested browsing contexts (  <iframe> s) in the same origin only. The
    feature is not allowed in cross-origin documents in nested browsing
    contexts.  self can be considered shorthand for
     https://your-site.example.com . The equivalent for  <iframe>  allow
    attributes is  self .
-    src : The feature will be allowed in this  <iframe> , as long as
    the document loaded into it comes from the same origin as the URL in
    its src attribute. This value is only used in the  <iframe>  allow
    attribute, and is the default  allowlist value in  <iframe> s.
-    "<origin>" : The feature is allowed for specific origins (for
    example,  "https://a.example.com" ). Origins should be separated by
    spaces. Note that origins in  <iframe> allow attributes are not
    quoted.

The values  * and  () may only be used on their own, while  self and
 src may be used in combination with one or more origins.

Note: Directives have a default allowlist, which is always one of  * ,
 self , or  none for the  Permissions-Policy HTTP header, and governs
the default behavior if they are not explicitly listed in a policy.
These are specified on the individual directive reference pages . For
 <iframe>  allow attributes , the default behavior is always  src .

Where supported, you can include wildcards in Permissions Policy
origins. This means that instead of having to explicitly specify several
different subdomains in an allowlist, you can specify them all in a
single origin with a wildcard.

So instead of

http

    ("https://example.com" "https://a.example.com" "https://b.example.com" "https://c.example.com")

You can specify

http

    ("https://example.com" "https://*.example.com")

Note:  "https://*.example.com" does not match  "https://example.com" .

allowlist examples:

-    *
-    ()
-    (self)
-    (src)
-    ("https://a.example.com")
-    ("https://a.example.com" "https://b.example.com")
-    (self "https://a.example.com" "https://b.example.com")
-    (src "https://a.example.com" "https://b.example.com")
-    ("https://*.example.com")

Permissions-Policy header syntax

The general syntax looks like this:

http

    Permissions-Policy: <directive>=<allowlist>

So for example to block all access to geolocation, you would do this:

http

    Permissions-Policy: geolocation=()

Or to allow access to a subset of origins, you'd do this:

http

    Permissions-Policy: geolocation=(self "https://a.example.com" "https://b.example.com")

Several features can be controlled at the same time by sending the
header with a comma-separated list of policies, or by sending a separate
header for each policy.

For example, the following are equivalent:

http

    Permissions-Policy: picture-in-picture=(), geolocation=(self https://example.com), camera=*;

    Permissions-Policy: picture-in-picture=()
    Permissions-Policy: geolocation=(self https://example.com)
    Permissions-Policy: camera=*

Iframe syntax

For an  <iframe> to have a feature enabled its allowed origin must also
be in the allowlist for the parent page. Because of this inheritance
behavior , it is a good idea to specify the widest acceptable support
for a feature in the HTTP header, and then specify the subset of support
you need in each  <iframe> .

The general syntax looks like this:

html

    <iframe src="<origin>" allow="<directive> <allowlist>"></iframe>

So for example to block all access to geolocation, you would do this:

html

    <iframe src="https://example.com" allow="geolocation 'none'"></iframe>

To apply a policy to the current origin and others, you'd do this:

html

    <iframe
      src="https://example.com"
      allow="geolocation 'self' https://a.example.com https://b.example.com"></iframe>

This is important: By default, if an  <iframe> navigates to another
origin, the policy is not applied to the origin that the  <iframe>
navigates to. By listing the origin that the  <iframe> navigates to in
the  allow attribute, the Permissions Policy that was applied to the
original  <iframe> will be applied to the origin the  <iframe> navigates
to.

Several features can be controlled at the same time by including a
semi-colon-separated list of policy directives inside the  allow
attribute.

html

    <iframe
      src="https://example.com"
      allow="geolocation 'self' https://a.example.com https://b.example.com; fullscreen 'none'"></iframe>

It is worth giving the  src value a special mention. We mentioned above
that using this allowlist value will mean that the associated feature
will be allowed in this  <iframe> , as long as the document loaded into
it comes from the same origin as the URL in its src attribute. This
value is the default  allowlist value for features listed in  allow , so
the following are equivalent:

html

    <iframe src="https://example.com" allow="geolocation 'src'">
      <iframe src="https://example.com" allow="geolocation"></iframe
    ></iframe>

Note: As you'll have noticed, the syntax for  <iframe> policies is a bit
different to the syntax for  Permissions-Policy headers. The former
still uses the same syntax as the older Feature Policy specification,
which was superseded by Permissions Policy.

Inheritance of policies for embedded content

Scripts inherit the policy of their browsing context, regardless of
their origin. That means that top-level scripts inherit the policy from
the main document.

All  <iframe> s inherit the policy of their parent page. If the
 <iframe> has an  allow attribute and the parent page has a
 Permissions-Policy , the policies of the parent page and the  allow
attribute are combined, using the most restrictive subset. For an
 <iframe> to have a feature enabled, the origin must be in the allowlist
for both the parent page and the  allow attribute.

Disabling a feature in a policy is a one-way toggle. If a feature has
been disabled for a child frame by its parent frame, the child cannot
re-enable it, and neither can any of the child's descendants.

Examples

Combining HTTP header and  <iframe> policies

For example, let's say that we wanted to enable geolocation usage on our
own origin, and in embedded content coming from our trusted ad network.
We could set up the page-wide Permissions Policy like this:

http

    Permissions-Policy: geolocation=(self https://trusted-ad-network.com)

Over in our ad  <iframe> s, we could set access to the
 https://trusted-ad-network.com origin like this:

html

    <iframe src="https://trusted-ad-network.com" allow="geolocation"></iframe>

If a different origin ended up getting loaded into  <iframe> , it would
not have access to geolocation:

html

    <iframe src="https://rogue-origin-example.com" allow="geolocation"></iframe>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Permissions Policy
  # permissions-policy-http-header-field

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Permissions-Policy HTTP header
-   allow attribute on iframes
-   Controlling browser features with Permissions Policy : use guide
    that also contains several demo links.
-   Permissions/Feature policies on chromestatus.com
-   Privacy, permissions, and information security

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 26, 2023 by MDN contributors .
# Protocol upgrade mechanism #
 ____            _                  _                                   _      
|  _ \ _ __ ___ | |_ ___   ___ ___ | |  _   _ _ __   __ _ _ __ __ _  __| | ___ 
| |_) | '__/ _ \| __/ _ \ / __/ _ \| | | | | | '_ \ / _` | '__/ _` |/ _` |/ _ \
|  __/| | | (_) | || (_) | (_| (_) | | | |_| | |_) | (_| | | | (_| | (_| |  __/
|_|   |_|  \___/ \__\___/ \___\___/|_|  \__,_| .__/ \__, |_|  \__,_|\__,_|\___|
                                             |_|    |___/                      
                     _                 _               
 _ __ ___   ___  ___| |__   __ _ _ __ (_)___ _ __ ___  
| '_ ` _ \ / _ \/ __| '_ \ / _` | '_ \| / __| '_ ` _ \ 
| | | | | |  __/ (__| | | | (_| | | | | \__ \ | | | | |
|_| |_| |_|\___|\___|_| |_|\__,_|_| |_|_|___/_| |_| |_|
                                                       
Protocol upgrade mechanism

The HTTP/1.1 protocol provides a special mechanism that can be used to
upgrade an already established connection to a different protocol, using
the  Upgrade header field.

This mechanism is optional; it cannot be used to insist on a protocol
change. Implementations can choose not to take advantage of an upgrade
even if they support the new protocol, and in practice, this mechanism
is used mostly to bootstrap a WebSockets connection.

Note also that HTTP/2 explicitly disallows the use of this mechanism; it
is specific to HTTP/1.1.

Upgrading HTTP/1.1 Connections

The  Upgrade header field is used by clients to invite the server to
switch to one of the listed protocols, in descending preference order.

Because  Upgrade is a hop-by-hop header, it also needs to be listed in
the  Connection header field. This means that a typical request that
includes Upgrade would look something like:

http

    GET /index.html HTTP/1.1
    Host: www.example.com
    Connection: upgrade
    Upgrade: example/1, foo/2

Other headers may be required depending on the requested protocol; for
example, WebSocket upgrades allow additional headers to configure
details about the WebSocket connection as well as to offer a degree of
security in opening the connection. See Upgrading to a WebSocket
connection for more details.

If the server decides to upgrade the connection, it sends back a
 101 Switching Protocols response status with an Upgrade header that
specifies the protocol(s) being switched to. If it does not (or cannot)
upgrade the connection, it ignores the  Upgrade header and sends back a
regular response (for example, a  200 OK ).

Right after sending the  101 status code, the server can begin speaking
the new protocol, performing any additional protocol-specific handshakes
as necessary. Effectively, the connection becomes a two-way pipe as soon
as the upgraded response is complete, and the request that initiated the
upgrade can be completed over the new protocol.

Common uses for this mechanism

Here we look at the most common use cases for the  Upgrade header.

Upgrading to a WebSocket connection

By far, the most common use case for upgrading an HTTP connection is to
use WebSockets, which are always implemented by upgrading an HTTP or
HTTPS connection. Keep in mind that if you're opening a new connection
using the WebSocket API , or any library that does WebSockets, most or
all of this is done for you. For example, opening a WebSocket connection
is as simple as:

js

    webSocket = new WebSocket("ws://destination.server.ext", "optionalProtocol");

The  WebSocket() constructor does all the work of creating an initial
HTTP/1.1 connection then handling the handshaking and upgrade process
for you.

Note: You can also use the  "wss://" URL scheme to open a secure
WebSocket connection.

If you need to create a WebSocket connection from scratch, you'll have
to handle the handshaking process yourself. After creating the initial
HTTP/1.1 session, you need to request the upgrade by adding to a
standard request the  Upgrade and  Connection headers, as follows:

http

    Connection: Upgrade
    Upgrade: websocket

WebSocket-specific headers

The following headers are involved in the WebSocket upgrade process.
Other than the  Upgrade and  Connection headers, the rest are generally
optional or handled for you by the browser and server when they're
talking to each other.

 Sec-WebSocket-Extensions

Specifies one or more protocol-level WebSocket extensions to ask the
server to use. Using more than one  Sec-WebSocket-Extension header in a
request is permitted; the result is the same as if you included all of
the listed extensions in one such header.

http

    Sec-WebSocket-Extensions: extensions

 extensions

    A comma-separated list of extensions to request (or agree to
    support). These should be selected from the IANA WebSocket Extension
    Name Registry . Extensions which take parameters do so by using
    semicolon delineation.

For example:

http

    Sec-WebSocket-Extensions: superspeed, colormode; depth=16

 Sec-WebSocket-Key

Provides information to the server which is needed in order to confirm
that the client is entitled to request an upgrade to WebSocket. This
header can be used when insecure (HTTP) clients wish to upgrade, in
order to offer some degree of protection against abuse. The value of the
key is computed using an algorithm defined in the WebSocket
specification, so this does not provide security . Instead, it helps to
prevent non-WebSocket clients from inadvertently, or through misuse,
requesting a WebSocket connection. In essence, then, this key confirms
that "Yes, I really mean to open a WebSocket connection."

This header is automatically added by clients that choose to use it; it
cannot be added using the  fetch() or  XMLHttpRequest.setRequestHeader()
methods.

http

    Sec-WebSocket-Key: key

 key

    The key for this request to upgrade. The client adds this if it
    wishes to do so, and the server will include in the response a key
    of its own, which the client will validate before delivering the
    upgrade response to you.

The server's response's  Sec-WebSocket-Accept header will have a value
computed based upon the specified  key .

 Sec-WebSocket-Protocol

The  Sec-WebSocket-Protocol header specifies one or more WebSocket
protocols that you wish to use, in order of preference. The first one
that is supported by the server will be selected and returned by the
server in a  Sec-WebSocket-Protocol header included in the response. You
can use this more than once in the header, as well; the result is the
same as if you used a comma-delineated list of subprotocol identifiers
in a single header.

http

    Sec-WebSocket-Protocol: subprotocols

 subprotocols

    A comma-separated list of subprotocol names, in the order of
    preference. The subprotocols may be selected from the IANA WebSocket
    Subprotocol Name Registry or may be a custom name jointly understood
    by the client and the server.

 Sec-WebSocket-Version

Request header

Specifies the WebSocket protocol version the client wishes to use, so
the server can confirm whether or not that version is supported on its
end.

http

    Sec-WebSocket-Version: version

 version

    The WebSocket protocol version the client wishes to use when
    communicating with the server. This number should be the most recent
    version possible listed in the IANA WebSocket Version Number
    Registry . The most recent final version of the WebSocket protocol
    is version 13.

Response header

If the server can't communicate using the specified version of the
WebSocket protocol, it will respond with an error (such as 426 Upgrade
Required) that includes in its headers a  Sec-WebSocket-Version header
with a comma-separated list of the supported protocol versions. If the
server does support the requested protocol version, no
 Sec-WebSocket-Version header is included in the response.

http

    Sec-WebSocket-Version: supportedVersions

 supportedVersions

    A comma-delineated list of the WebSocket protocol versions supported
    by the server.

Response-only headers

The response from the server may include these.

 Sec-WebSocket-Accept

Included in the response message from the server during the opening
handshake process when the server is willing to initiate a WebSocket
connection. It will appear no more than once in the response headers.

http

    Sec-WebSocket-Accept: hash

 hash

    If a  Sec-WebSocket-Key header was provided, the value of this
    header is computed by taking the value of the key, concatenating the
    string "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" to it, taking the
    SHA-1 hash of that concatenated string, resulting in a 20-byte
    value. That value is then base64 encoded to obtain the value of this
    property.

References

-   WebSocket API
-   HTTP
-   Specifications and RFCs:
    -   RFC 7230
    -   RFC 6455
    -   RFC 7540

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 16, 2023 by MDN contributors .
# Proxy servers and tunneling #
 ____                                                         
|  _ \ _ __ _____  ___   _   ___  ___ _ ____   _____ _ __ ___ 
| |_) | '__/ _ \ \/ / | | | / __|/ _ \ '__\ \ / / _ \ '__/ __|
|  __/| | | (_) >  <| |_| | \__ \  __/ |   \ V /  __/ |  \__ \
|_|   |_|  \___/_/\_\\__, | |___/\___|_|    \_/ \___|_|  |___/
                     |___/                                    
                 _   _                          _ _             
  __ _ _ __   __| | | |_ _   _ _ __  _ __   ___| (_)_ __   __ _ 
 / _` | '_ \ / _` | | __| | | | '_ \| '_ \ / _ \ | | '_ \ / _` |
| (_| | | | | (_| | | |_| |_| | | | | | | |  __/ | | | | | (_| |
 \__,_|_| |_|\__,_|  \__|\__,_|_| |_|_| |_|\___|_|_|_| |_|\__, |
                                                          |___/ 
Proxy servers and tunneling

When navigating through different networks of the Internet, proxy
servers and HTTP tunnels are facilitating access to content on the World
Wide Web. A proxy can be on the user's local computer, or anywhere
between the user's computer and a destination server on the Internet.
This page outlines some basics about proxies and introduces a few
configuration options.

There are two types of proxies: forward proxies (or tunnel, or gateway)
and reverse proxies (used to control and protect access to a server for
load-balancing, authentication, decryption or caching).

Forward proxies

A forward proxy, or gateway, or just "proxy" provides proxy services to
a client or a group of clients. There are likely hundreds of thousands
of open forward proxies on the Internet. They store and forward Internet
services (like the DNS, or web pages) to reduce and control the
bandwidth used by the group.

Forward proxies can also be anonymous and allow users to hide their IP
address while browsing the Web or using other Internet services. For
example, Tor routes internet traffic through multiple proxies for
anonymity.

Reverse proxies

As the name implies, a reverse proxy does the opposite of what a forward
proxy does: A forward proxy acts on behalf of clients (or requesting
hosts). Forward proxies can hide the identities of clients whereas
reverse proxies can hide the identities of servers. Reverse proxies have
several use cases, a few are:

-   Load balancing: distribute the load to several web servers,
-   Cache static content: offload the web servers by caching static
    content like pictures,
-   Compression: compress and optimize content to speed up load time.

Forwarding client information through proxies

Proxies can make requests appear as if they originated from the proxy's
IP address. This can be useful if a proxy is used to provide client
anonymity, but in other cases information from the original request is
lost. The IP address of the original client is often used for debugging,
statistics, or generating location-dependent content. A common way to
disclose this information is by using the following HTTP headers:

The standardized header:

 Forwarded

    Contains information from the client-facing side of proxy servers
    that is altered or lost when a proxy is involved in the path of the
    request.

Or the de-facto standard versions:

 X-Forwarded-For  Non-standard 

    Identifies the originating IP addresses of a client connecting to a
    web server through an HTTP proxy or a load balancer.

 X-Forwarded-Host  Non-standard 

    Identifies the original host requested that a client used to connect
    to your proxy or load balancer.

 X-Forwarded-Proto  Non-standard 

    identifies the protocol (HTTP or HTTPS) that a client used to
    connect to your proxy or load balancer.

To provide information about the proxy itself (not about the client
connecting to it), the  Via header can be used.

 Via

    Added by proxies, both forward and reverse proxies, and can appear
    in the request headers and the response headers.

HTTP tunneling

Tunneling transmits private network data and protocol information
through public network by encapsulating the data. HTTP tunneling is
using a protocol of higher level (HTTP) to transport a lower level
protocol (TCP).

The HTTP protocol specifies a request method called  CONNECT . It starts
two-way communications with the requested resource and can be used to
open a tunnel. This is how a client behind an HTTP proxy can access
websites using TLS (i.e. HTTPS, port 443). Note, however, that not all
proxy servers support the  CONNECT method or limit it to port 443 only.

See also the HTTP tunnel article on Wikipedia .

Proxy Auto-Configuration (PAC)

A Proxy Auto-Configuration (PAC) file is a JavaScript function that
determines whether web browser requests (HTTP, HTTPS, and FTP) go
directly to the destination or are forwarded to a web proxy server. The
JavaScript function contained in the PAC file defines the function:

The auto-config file should be saved to a file with a  .pac filename
extension:  proxy.pac .

And the MIME type set to  application/x-ns-proxy-autoconfig .

The file consists of a function called  FindProxyForURL . The example
below will work in an environment where the internal DNS server is set
up so that it can only resolve internal host names, and the goal is to
use a proxy only for hosts that aren't resolvable:

js

    function FindProxyForURL(url, host) {
      if (isResolvable(host)) {
        return "DIRECT";
      }
      return "PROXY proxy.mydomain.com:8080";
    }

See Proxy Auto-Configuration (PAC) for more examples.

See also

-    CONNECT
-   Proxy server on Wikipedia

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Sep 27, 2023 by MDN contributors .
# Proxy Auto-Configuration (PAC) file #
 ____                      
|  _ \ _ __ _____  ___   _ 
| |_) | '__/ _ \ \/ / | | |
|  __/| | | (_) >  <| |_| |
|_|   |_|  \___/_/\_\\__, |
                     |___/ 
    _         _               ____             __ _                       _   
   / \  _   _| |_ ___        / ___|___  _ __  / _(_) __ _ _   _ _ __ __ _| |_ 
  / _ \| | | | __/ _ \ _____| |   / _ \| '_ \| |_| |/ _` | | | | '__/ _` | __|
 / ___ \ |_| | || (_) |_____| |__| (_) | | | |  _| | (_| | |_| | | | (_| | |_ 
/_/   \_\__,_|\__\___/       \____\___/|_| |_|_| |_|\__, |\__,_|_|  \__,_|\__|
                                                    |___/                     
 _                ______   _    ______     __ _ _      
(_) ___  _ __    / /  _ \ / \  / ___\ \   / _(_) | ___ 
| |/ _ \| '_ \  | || |_) / _ \| |    | | | |_| | |/ _ \
| | (_) | | | | | ||  __/ ___ \ |___ | | |  _| | |  __/
|_|\___/|_| |_| | ||_| /_/   \_\____|| | |_| |_|_|\___|
                 \_\                /_/                
Proxy Auto-Configuration (PAC) file

A Proxy Auto-Configuration (PAC) file is a JavaScript function that
determines whether web browser requests (HTTP, HTTPS, and FTP) go
directly to the destination or are forwarded to a web proxy server. The
JavaScript function contained in the PAC file defines the function:

Syntax

js

    function FindProxyForURL(url, host) {
      // …
    }

Parameters

 url

    The URL being accessed. The path and query components of  https://
    URLs are stripped. In Chrome (versions 52 to 73), you can disable
    this by setting  PacHttpsUrlStrippingEnabled to  false in policy or
    by launching with the  --unsafe-pac-url command-line flag (in Chrome
    74, only the flag works, and from 75 onward, there is no way to
    disable path-stripping; as of Chrome 81, path-stripping does not
    apply to HTTP URLs, but there is interest in changing this behavior
    to match HTTPS); in Firefox, the preference is
     network.proxy.autoconfig_url.include_path .

 host

    The hostname extracted from the URL. This is only for convenience;
    it is the same string as between  :// and the first  : or  / after
    that. The port number is not included in this parameter. It can be
    extracted from the URL when necessary.

Description

Returns a string describing the configuration. The format of this string
is defined in return value format below.

Return value format

-   The JavaScript function returns a single string
-   If the string is null, no proxies should be used
-   The string can contain any number of the following building blocks,
    separated by a semicolon:

 DIRECT

    Connections should be made directly, without any proxies

 PROXY host:port

    The specified proxy should be used

 SOCKS host:port

    The specified SOCKS server should be used

Recent versions of Firefox support as well:

 HTTP host:port

    The specified proxy should be used

 HTTPS host:port

    The specified HTTPS proxy should be used

 SOCKS4 host:port ,  SOCKS5 host:port

    The specified SOCKS server (with the specified SOCK version) should
    be used

If there are multiple semicolon-separated settings, the left-most
setting will be used, until Firefox fails to establish the connection to
the proxy. In that case, the next value will be used, etc.

The browser will automatically retry a previously unresponsive proxy
after 30 minutes. Additional attempts will continue beginning at one
hour, always adding 30 minutes to the elapsed time between attempts.

If all proxies are down, and there was no DIRECT option specified, the
browser will ask if proxies should be temporarily ignored, and direct
connections attempted. After 20 minutes, the browser will ask if proxies
should be retried, asking again after an additional 40 minutes. Queries
will continue, always adding 20 minutes to the elapsed time between
queries.

Examples

 PROXY w3proxy.netscape.com:8080; PROXY mozilla.netscape.com:8081

    Primary proxy is w3proxy:8080; if that goes down start using
    mozilla:8081 until the primary proxy comes up again.

 PROXY w3proxy.netscape.com:8080; PROXY mozilla.netscape.com:8081; DIRECT

    Same as above, but if both proxies go down, automatically start
    making direct connections. (In the first example above, Netscape
    will ask user confirmation about making direct connections; in this
    case, there is no user intervention.)

 PROXY w3proxy.netscape.com:8080; SOCKS socks:1080

    Use SOCKS if the primary proxy goes down.

The auto-config file should be saved to a file with a .pac filename
extension:  proxy.pac .

And the MIME type should be set to  application/x-ns-proxy-autoconfig .

Next, you should configure your server to map the .pac filename
extension to the MIME type.

Note:

-   The JavaScript function should always be saved to a file by itself
    but not be embedded in a HTML file or any other file.
-   The examples at the end of this document are complete. There is no
    additional syntax needed to save it into a file and use it. (Of
    course, the JavaScripts must be edited to reflect your site's domain
    name and/or subnets.)

Predefined functions and environment

These functions can be used in building the PAC file:

-   Hostname based conditions
    -    isPlainHostName()
    -    dnsDomainIs()
    -    localHostOrDomainIs()
    -    isResolvable()
    -    isInNet()
-   Related utility functions
    -    dnsResolve()
    -    convert_addr()
    -    myIpAddress()
    -    dnsDomainLevels()
-   URL/hostname based conditions
    -    shExpMatch()
-   Time based conditions
    -    weekdayRange()
    -    dateRange()
    -    timeRange()
-   Logging utility
    -    alert()
-   There was one associative array (object) already defined, because at
    the time JavaScript code was unable to define it by itself:
    -    ProxyConfig.bindings Deprecated

Note: pactester (part of the pacparser package) was used to test the
following syntax examples.

-   The PAC file is named  proxy.pac
-   Command line:
     pactester -p ~/pacparser-master/tests/proxy.pac -u http://www.mozilla.org
    (passes the  host parameter  www.mozilla.org and the  url parameter
     http://www.mozilla.org )

isPlainHostName()

Syntax

js

    isPlainHostName(host)

Parameters

host

    The hostname from the URL (excluding port number).

Description

True if and only if there is no domain name in the hostname (no dots).

Examples

js

    isPlainHostName("www.mozilla.org"); // false
    isPlainHostName("www"); // true

 dnsDomainIs()

Syntax

js

    dnsDomainIs(host, domain)

Parameters

host

    Is the hostname from the URL.

domain

    Is the domain name to test the hostname against.

Description

Returns true if and only if the domain of hostname matches.

Examples

js

    dnsDomainIs("www.mozilla.org", ".mozilla.org") // true
    dnsDomainIs("www", ".mozilla.org") // false

localHostOrDomainIs()

Syntax

js

    localHostOrDomainIs(host, hostdom)

Parameters

host

    The hostname from the URL.

hostdom

    Fully qualified hostname to match against.

Description

Is true if the hostname matches exactly the specified hostname, or if
there is no domain name part in the hostname, but the unqualified
hostname matches.

Examples

js

    localHostOrDomainIs("www.mozilla.org", "www.mozilla.org") // true (exact match)
    localHostOrDomainIs("www", "www.mozilla.org") // true (hostname match, domain not specified)
    localHostOrDomainIs("www.google.com", "www.mozilla.org") // false (domain name mismatch)
    localHostOrDomainIs("home.mozilla.org", "www.mozilla.org") // false (hostname mismatch)

isResolvable()

Syntax

js

    isResolvable(host)

Parameters

host

    is the hostname from the URL.

Tries to resolve the hostname. Returns true if succeeds.

Examples

js

    isResolvable("www.mozilla.org") // true

isInNet()

Syntax

js

    isInNet(host, pattern, mask)

Parameters

host

    a DNS hostname, or IP address. If a hostname is passed, it will be
    resolved into an IP address by this function.

pattern

    an IP address pattern in the dot-separated format.

mask

    mask for the IP address pattern informing which parts of the IP
    address should be matched against. 0 means ignore, 255 means match.

True if and only if the IP address of the host matches the specified IP
address pattern.

Pattern and mask specification is done the same way as for SOCKS
configuration.

Examples

js

    function alertEval(str) {
      alert(`${str} is ${eval(str)}`);
    }
    function FindProxyForURL(url, host) {
      alertEval('isInNet(host, "192.0.2.172", "255.255.255.255")');
      // "PAC-alert: isInNet(host, "192.0.2.172", "255.255.255.255") is true"
    }

dnsResolve()

js

    dnsResolve(host)

Parameters

host

    hostname to resolve.

Resolves the given DNS hostname into an IP address, and returns it in
the dot-separated format as a string.

Example

js

    dnsResolve("www.mozilla.org"); // returns the string "104.16.41.2"

convert_addr()

Syntax

js

    convert_addr(ipaddr)

Parameters

ipaddr

    Any dotted address such as an IP address or mask.

Concatenates the four dot-separated bytes into one 4-byte word and
converts it to decimal.

Example

js

    convert_addr("192.0.2.172"); // returns the decimal number 1745889538

myIpAddress()

Syntax

js

    myIpAddress()

Parameters

(none)

Return value

Returns the server IP address of the machine Firefox is running on, as a
string in the dot-separated integer format.

Warning: myIpAddress() returns the same IP address as the server address
returned by  nslookup localhost on a Linux machine. It does not return
the public IP address.

Example

js

    myIpAddress() //returns the string "127.0.1.1" if you were running Firefox on that localhost

dnsDomainLevels()

Syntax

js

    dnsDomainLevels(host)

Parameters

host

    is the hostname from the URL.

Returns the number (integer) of DNS domain levels (number of dots) in
the hostname.

Examples

js

    dnsDomainLevels("www") // 0
    dnsDomainLevels("mozilla.org") // 1
    dnsDomainLevels("www.mozilla.org"); // 2

shExpMatch()

Syntax

js

    shExpMatch(str, shexp)

Parameters

str

    is any string to compare (e.g. the URL, or the hostname).

shexp

    is a shell expression to compare against.

Returns  true if the string matches the specified shell glob expression.

Support for particular glob expression syntax varies across browsers:  *
(match any number of characters) and  ? (match one character) are always
supported, while  [characters] and  [^characters] are additionally
supported by some implementations (including Firefox).

Note: If supported by the client, JavaScript regular expressions
typically provide a more powerful and consistent way to pattern-match
URLs (and other strings).

Examples

js

    shExpMatch("http://home.netscape.com/people/ari/index.html", "*/ari/*"); // returns true
    shExpMatch("http://home.netscape.com/people/montulli/index.html", "*/ari/*"); // returns false

weekdayRange()

Syntax

js

    weekdayRange(wd1, wd2, [gmt])

Note: (Before Firefox 49) wd1 must be less than wd2 if you want the
function to evaluate these parameters as a range. See the warning below.

Parameters

wd1 and wd2

    One of the ordered weekday strings:  "SUN" ,  "MON" ,  "TUE" ,
     "WED" ,  "THU" ,  "FRI" ,  "SAT"

gmt

    Is either the string "GMT" or is left out.

Only the first parameter is mandatory. Either the second, the third, or
both may be left out.

If only one parameter is present, the function returns a value of true
on the weekday that the parameter represents. If the string "GMT" is
specified as a second parameter, times are taken to be in GMT.
Otherwise, they are assumed to be in the local timezone.

If both wd1 and wd2 are defined, the condition is true if the current
weekday is in between those two ordered weekdays. Bounds are inclusive,
but the bounds are ordered . If the "GMT" parameter is specified, times
are taken to be in GMT. Otherwise, the local timezone is used.

Warning: The order of the days matters . Before Firefox 49,
 weekdayRange("SUN", "SAT") will always evaluate to  true . Now
 weekdayRange("WED", "SUN") will only evaluate to  true if the current
day is Wednesday or Sunday.

Examples

js

    weekdayRange("MON", "FRI") // returns true Monday through Friday (local timezone)
    weekdayRange("MON", "FRI", "GMT") // returns true Monday through Friday (GMT timezone)
    weekdayRange("SAT") // returns true on Saturdays local time
    weekdayRange("SAT", "GMT") // returns true on Saturdays GMT time
    weekdayRange("FRI", "MON") // returns true Friday and Monday only (note, the order does matter!)

dateRange()

Syntax

js

    dateRange(<day> | <month> | <year>, [gmt])  // ambiguity is resolved by assuming year is greater than 31
    dateRange(<day1>, <day2>, [gmt])
    dateRange(<month1>, <month2>, [gmt])
    dateRange(<year1>, <year2>, [gmt])
    dateRange(<day1>, <month1>, <day2>, <month2>, [gmt])
    dateRange(<month1>, <year1>, <month2>, <year2>, [gmt])
    dateRange(<day1>, <month1>, <year1>, <day2>, <month2>, <year2>, [gmt])

Note: (Before Firefox 49) day1 must be less than day2, month1 must be
less than month2, and year1 must be less than year2 if you want the
function to evaluate these parameters as a range. See the warning below.

Parameters

day

    Is the ordered day of the month between 1 and 31 (as an integer).

    1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31

month

    Is one of the ordered month strings below.

    "JAN"|"FEB"|"MAR"|"APR"|"MAY"|"JUN"|"JUL"|"AUG"|"SEP"|"OCT"|"NOV"|"DEC"

year

    Is the ordered full year integer number. For example, 2016 ( not
    16).

gmt

    Is either the string "GMT", which makes time comparison occur in GMT
    timezone, or is left out. If left unspecified, times are taken to be
    in the local timezone.

If only a single value is specified (from each category: day, month,
year), the function returns a true value only on days that match that
specification. If both values are specified, the result is true between
those times, including bounds, but the bounds are ordered .

Warning: The order of the days, months, and years matter ; Before
Firefox 49,  dateRange("JAN", "DEC") will always evaluate to  true . Now
 dateRange("DEC", "JAN") will only evaluate true if the current month is
December or January.

Examples

js

    dateRange(1) // returns true on the first day of each month, local timezone
    dateRange(1, "GMT") // returns true on the first day of each month, GMT timezone
    dateRange(1, 15) // returns true on the first half of each month
    dateRange(24, "DEC");// returns true on 24th of December each year
    dateRange("JAN", "MAR"); // returns true on the first quarter of the year

    dateRange(1, "JUN", 15, "AUG");
    // returns true from June 1st until August 15th, each year
    // (including June 1st and August 15th)

    dateRange(1, "JUN", 1995, 15, "AUG", 1995);
    // returns true from June 1st, 1995, until August 15th, same year

    dateRange("OCT", 1995, "MAR", 1996);
    // returns true from October 1995 until March 1996
    // (including the entire month of October 1995 and March 1996)

    dateRange(1995);
    // returns true during the entire year of 1995

    dateRange(1995, 1997);
    // returns true from beginning of year 1995 until the end of year 1997

timeRange()

Syntax

js

    // The full range of expansions is analogous to dateRange.
    timeRange(<hour1>, <min1>, <sec1>, <hour2>, <min2>, <sec2>, [gmt])

Note: (Before Firefox 49) the category hour1, min1, sec1 must be less
than the category hour2, min2, sec2 if you want the function to evaluate
these parameters as a range. See the warning below.

Parameters

hour

    Is the hour from 0 to 23. (0 is midnight, 23 is 11 pm.)

min

    Minutes from 0 to 59.

sec

    Seconds from 0 to 59.

gmt

    Either the string "GMT" for GMT timezone, or not specified, for
    local timezone.

If only a single value is specified (from each category: hour, minute,
second), the function returns a true value only at times that match that
specification. If both values are specified, the result is true between
those times, including bounds, but the bounds are ordered .

Warning: The order of the hour, minute, second matter ; Before Firefox
49,  timeRange(0, 23) will always evaluate to true. Now
 timeRange(23, 0) will only evaluate true if the current hour is 23:00
or midnight.

Examples

js

    timerange(12); // returns true from noon to 1pm
    timerange(12, 13) // returns true from noon to 1pm
    timerange(12, "GMT") // returns true from noon to 1pm, in the GMT timezone
    timerange(9, 17) // returns true from 9am to 5pm
    timerange(8, 30, 17, 0) // returns true from 8:30am to 5:00pm
    timerange(0, 0, 0, 0, 0, 30) // returns true between midnight and 30 seconds past midnight

alert()

Syntax

js

    alert(message)

Parameters

message

    The string to log

Logs the message in the browser console.

Examples

js

    alert(`${host} = ${dnsResolve(host)}`) // logs the host name and its IP address
    alert("Error: shouldn't reach this clause.") // log a simple message

Example 1

Use proxy for everything except local hosts

Note: Since all of the examples that follow are very specific, they have
not been tested.

All hosts which aren't fully qualified, or the ones that are in local
domain, will be connected to directly. Everything else will go through
 w3proxy.mozilla.org:8080 . If the proxy goes down, connections become
direct automatically:

js

    function FindProxyForURL(url, host) {
      if (isPlainHostName(host) || dnsDomainIs(host, ".mozilla.org")) {
        return "DIRECT";
      } else {
        return "PROXY w3proxy.mozilla.org:8080; DIRECT";
      }
    }

Note: This is the simplest and most efficient autoconfig file for cases
where there's only one proxy.

Example 2

As above, but use proxy for local servers which are outside the firewall

If there are hosts (such as the main Web server) that belong to the
local domain but are outside the firewall and are only reachable through
the proxy server, those exceptions can be handled using the
 localHostOrDomainIs() function:

js

    function FindProxyForURL(url, host) {
      if (
        (isPlainHostName(host) || dnsDomainIs(host, ".mozilla.org")) &&
        !localHostOrDomainIs(host, "www.mozilla.org") &&
        !localHostOrDomainIs(host, "merchant.mozilla.org")
      ) {
        return "DIRECT";
      } else {
        return "PROXY w3proxy.mozilla.org:8080; DIRECT";
      }
    }

The above example will use the proxy for everything except local hosts
in the mozilla.org domain, with the further exception that hosts
 www.mozilla.org and  merchant.mozilla.org will go through the proxy.

Note: The order of the above exceptions for efficiency:
 localHostOrDomainIs() functions only get executed for URLs that are in
local domain, not for every URL. Be careful to note the parentheses
around the or expression before the and expression to achieve the
above-mentioned efficient behavior.

Example 3

Use proxy only if cannot resolve host

This example will work in an environment where the internal DNS server
is set up so that it can only resolve internal host names, and the goal
is to use a proxy only for hosts that aren't resolvable:

js

    function FindProxyForURL(url, host) {
      if (isResolvable(host)) {
        return "DIRECT";
      }
      return "PROXY proxy.mydomain.com:8080";
    }

The above requires consulting the DNS every time; it can be grouped
intelligently with other rules so that DNS is consulted only if other
rules do not yield a result:

js

    function FindProxyForURL(url, host) {
      if (
        isPlainHostName(host) ||
        dnsDomainIs(host, ".mydomain.com") ||
        isResolvable(host)
      ) {
        return "DIRECT";
      }
      return "PROXY proxy.mydomain.com:8080";
    }

Example 4

Subnet based decisions

In this example all of the hosts in a given subnet are connected-to
directly, others are connected through the proxy:

js

    function FindProxyForURL(url, host) {
      if (isInNet(host, "192.0.2.172", "255.255.0.0")) {
        return "DIRECT";
      }
      return "PROXY proxy.mydomain.com:8080";
    }

Again, use of the DNS server in the above can be minimized by adding
redundant rules in the beginning:

js

    function FindProxyForURL(url, host) {
      if (
        isPlainHostName(host) ||
        dnsDomainIs(host, ".mydomain.com") ||
        isInNet(host, "192.0.2.0", "255.255.0.0")
      ) {
        return "DIRECT";
      } else {
        return "PROXY proxy.mydomain.com:8080";
      }
    }

Example 5

Load balancing/routing based on URL patterns

This example is more sophisticated. There are four (4) proxy servers;
one of them is a hot stand-by for all of the other ones, so if any of
the remaining three goes down the fourth one will take over.
Furthermore, the three remaining proxy servers share the load based on
URL patterns, which makes their caching more effective (there is only
one copy of any document on the three servers - as opposed to one copy
on each of them). The load is distributed like this:

  Proxy   Purpose
  ------- -------------------
  #1      .com domain
  #2      .edu domain
  #3      all other domains
  #4      hot stand-by

All local accesses are desired to be direct. All proxy servers run on
the port 8080 (they don't need to, you can just change your port but
remember to modify your configurations on both side). Note how strings
can be concatenated with the  + operator in JavaScript.

js

    function FindProxyForURL(url, host) {
      if (isPlainHostName(host) || dnsDomainIs(host, ".mydomain.com")) {
        return "DIRECT";
      } else if (shExpMatch(host, "*.com")) {
        return "PROXY proxy1.mydomain.com:8080; PROXY proxy4.mydomain.com:8080";
      } else if (shExpMatch(host, "*.edu")) {
        return "PROXY proxy2.mydomain.com:8080; PROXY proxy4.mydomain.com:8080";
      } else {
        return "PROXY proxy3.mydomain.com:8080; PROXY proxy4.mydomain.com:8080";
      }
    }

Example 6

Setting a proxy for a specific protocol

Most of the standard JavaScript functionality is available for use in
the  FindProxyForURL() function. As an example, to set different proxies
based on the protocol the  startsWith() function can be used:

js

    function FindProxyForURL(url, host) {
      if (url.startsWith("http:")) {
        return "PROXY http-proxy.mydomain.com:8080";
      } else if (url.startsWith("ftp:")) {
        return "PROXY ftp-proxy.mydomain.com:8080";
      } else if (url.startsWith("gopher:")) {
        return "PROXY gopher-proxy.mydomain.com:8080";
      } else if (url.startsWith("https:") || url.startsWith("snews:")) {
        return "PROXY security-proxy.mydomain.com:8080";
      }
      return "DIRECT";
    }

Note: The same can be accomplished using the  shExpMatch() function
described earlier.

For example:

js

    if (shExpMatch(url, "http:*")) {
      return "PROXY http-proxy.mydomain.com:8080";
    }

Note: The autoconfig file can be output by a CGI script. This is useful,
for example, when making the autoconfig file act differently based on
the client IP address (the  REMOTE_ADDR environment variable in CGI).

Usage of  isInNet() ,  isResolvable() and  dnsResolve() functions should
be carefully considered, as they require the DNS server to be consulted.
All the other autoconfig-related functions are mere string-matching
functions that don't require the use of a DNS server. If a proxy is
used, the proxy will perform its DNS lookup which would double the
impact on the DNS server. Most of the time these functions are not
necessary to achieve the desired result.

History and implementation

Proxy auto-config was introduced into Netscape Navigator 2.0 in the late
1990s, at the same time when JavaScript was introduced. Open-sourcing
Netscape eventually lead to Firefox itself.

The most "original" implementation of PAC and its JavaScript libraries
is, therefore,  nsProxyAutoConfig.js found in early versions of Firefox.
These utilities are found in many other open-source systems including
Chromium . Firefox later integrated the file into  ProxyAutoConfig.cpp
as a C++ string literal. To extract it into its own file, it suffices to
copy the chunk into JavaScript with a  console.log directive to print
it.

Microsoft in general made its own implementation. There used to be some
problems with their libraries , but most are resolved by now. They have
defined some new "Ex" suffixed functions around the address handling
parts to support IPv6. The feature is supported by Chromium, but not yet
by Firefox ( bugzilla #558253 ).

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 25, 2023 by MDN contributors .
# HTTP range requests #
 _   _ _____ _____ ____                               
| | | |_   _|_   _|  _ \   _ __ __ _ _ __   __ _  ___ 
| |_| | | |   | | | |_) | | '__/ _` | '_ \ / _` |/ _ \
|  _  | | |   | | |  __/  | | | (_| | | | | (_| |  __/
|_| |_| |_|   |_| |_|     |_|  \__,_|_| |_|\__, |\___|
                                           |___/      
                                _       
 _ __ ___  __ _ _   _  ___  ___| |_ ___ 
| '__/ _ \/ _` | | | |/ _ \/ __| __/ __|
| | |  __/ (_| | |_| |  __/\__ \ |_\__ \
|_|  \___|\__, |\__,_|\___||___/\__|___/
             |_|                        
HTTP range requests

An HTTP  Range request asks the server to send only a portion of an HTTP
message back to a client. Range requests are useful for clients like
media players that support random access, data tools that know they need
only part of a large file, and download managers that let the user pause
and resume the download.

Checking if a server supports partial requests

If an HTTP response includes the  Accept-Ranges header and its value is
anything other than "  none ", then the server supports range requests.
You can perform a manual check by issuing a  HEAD request with a tool
like cURL.

bash

    curl -I http://i.imgur.com/z4d4kWk.jpg

http

    HTTP/1.1 200 OK
    …
    Accept-Ranges: bytes
    Content-Length: 146515

In this response,  Accept-Ranges: bytes indicates that bytes can be used
as units to define a range. Here the  Content-Length header is also
useful as it indicates the full size of the image to retrieve.

If sites omit the  Accept-Ranges header, they likely don't support
partial requests. Some sites include the header but give it the explicit
value "  none " to indicate they lack support:

bash

    curl -I https://www.youtube.com/watch?v=EwTZ2xpQwpA

http

    HTTP/1.1 200 OK
    …
    Accept-Ranges: none

A download manager might disable its pause button in that case.

Requesting a specific range from a server

If the server supports range requests, then by including the  Range
header in your HTTP request, you can specify which part or parts of the
document you want the server to return.

Single part ranges

We can request a single range from a resource. Again, we can test a
request by using cURL. The "  -H " option will append a header line to
the request, which in this case is the  Range header requesting the
first 1024 bytes.

bash

    curl http://i.imgur.com/z4d4kWk.jpg -i -H "Range: bytes=0-1023"

The issued request looks like this:

http

    GET /z4d4kWk.jpg HTTP/1.1
    Host: i.imgur.com
    Range: bytes=0-1023

The server responses with the  206  Partial Content status:

http

    HTTP/1.1 206 Partial Content
    Content-Range: bytes 0-1023/146515
    Content-Length: 1024
    …
    (binary content)

The  Content-Length header now indicates the size of the requested range
(and not the full size of the image). The  Content-Range response header
indicates where in the full resource this partial message belongs.

Multipart ranges

The  Range header also allows you to get multiple ranges at once in a
multipart document. The ranges are separated by a comma.

bash

    curl http://www.example.com -i -H "Range: bytes=0-50, 100-150"

The server responses with the  206  Partial Content status and a
 Content-Type  : multipart/byteranges; boundary=3d6b6a416f9b5 header,
indicating that a multipart byterange follows. Each part contains its
own  Content-Type and  Content-Range fields and the required boundary
parameter specifies the boundary string used to separate each body-part.

http

    HTTP/1.1 206 Partial Content
    Content-Type: multipart/byteranges; boundary=3d6b6a416f9b5
    Content-Length: 282

    --3d6b6a416f9b5
    Content-Type: text/html
    Content-Range: bytes 0-50/1270

    <!DOCTYPE html>
    <html lang="en-US">
    <head>
        <title>Example Do
    --3d6b6a416f9b5
    Content-Type: text/html
    Content-Range: bytes 100-150/1270

    eta http-equiv="Content-type" content="text/html; c
    --3d6b6a416f9b5--

Conditional range requests

When resuming to request more parts of a resource, you need to guarantee
that the stored resource has not been modified since the last fragment
has been received.

The  If-Range HTTP request header makes a range request conditional: if
the condition is fulfilled, the range request will be issued and the
server sends back a  206  Partial Content answer with the appropriate
body. If the condition is not fulfilled, the full resource is sent back,
with a  200  OK status. This header can be used either with a
 Last-Modified validator, or with an  ETag , but not with both.

http

    If-Range: Wed, 21 Oct 2015 07:28:00 GMT

Partial request responses

There are three relevant statuses, when working with range requests:

-   A successful range request elicits a  206  Partial Content status
    from the server.
-   A range request that is out of bounds will result in a  416
     Requested Range Not Satisfiable status, meaning that none of the
    range values overlap the extent of the resource. For example, the
    first-byte-pos of every range might be greater than the resource
    length.
-   If range requests are not supported, an  200  OK status is sent back
    and the entire response body is transmitted.

Comparison to chunked  Transfer-Encoding

The  Transfer-Encoding header allows chunked encoding, which is useful
when larger amounts of data are sent to the client and the total size of
the response is not known until the request has been fully processed.
The server sends data to the client straight away without buffering the
response or determining the exact length, which leads to improved
latency. Range requests and chunking are compatible and can be used with
or without each other.

See also

-   Related status codes  200 ,  206 ,  416 .
-   Related headers:  Accept-Ranges ,  Range ,  Content-Range ,
     If-Range ,  Transfer-Encoding .

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# Redirections in HTTP #
 ____          _ _               _   _                   _       
|  _ \ ___  __| (_)_ __ ___  ___| |_(_) ___  _ __  ___  (_)_ __  
| |_) / _ \/ _` | | '__/ _ \/ __| __| |/ _ \| '_ \/ __| | | '_ \ 
|  _ <  __/ (_| | | | |  __/ (__| |_| | (_) | | | \__ \ | | | | |
|_| \_\___|\__,_|_|_|  \___|\___|\__|_|\___/|_| |_|___/ |_|_| |_|
                                                                 
 _   _ _____ _____ ____  
| | | |_   _|_   _|  _ \ 
| |_| | | |   | | | |_) |
|  _  | | |   | | |  __/ 
|_| |_| |_|   |_| |_|    
                         
Redirections in HTTP

URL redirection , also known as URL forwarding , is a technique to give
more than one URL address to a page, a form, a whole website, or a web
application. HTTP has a special kind of response, called a HTTP redirect
, for this operation.

Redirects accomplish numerous goals:

-   Temporary redirects during site maintenance or downtime
-   Permanent redirects to preserve existing links/bookmarks after
    changing the site's URLs, progress pages when uploading a file, etc.

Principle

In HTTP, redirection is triggered by a server sending a special redirect
response to a request. Redirect responses have status codes that start
with  3 , and a  Location header holding the URL to redirect to.

When browsers receive a redirect, they immediately load the new URL
provided in the  Location header. Besides the small performance hit of
an additional round-trip, users rarely notice the redirection.

[Initial request goes from client to server. Server responds with a
301:moved permanently, with the URL for the redirect. Client makes an a
GET request for the new URL which is returned by the server, with a 200
OK response.]

There are several types of redirects, sorted into three categories:

1.  Permanent redirections
2.  Temporary redirections
3.  Special redirections

Permanent redirections

These redirections are meant to last forever. They imply that the
original URL should no longer be used, and replaced with the new one.
Search engine robots, RSS readers, and other crawlers will update the
original URL for the resource.

  Code   Text                  Method handling                                                          Typical use case
  ------ --------------------- ------------------------------------------------------------------------ -------------------------------------------------------------
   301    Moved Permanently     GET methods unchanged. Others may or may not be changed to  GET . [1]   Reorganization of a website.
   308    Permanent Redirect   Method and body not changed.                                             Reorganization of a website, with non-GET links/operations.

[1] The specification did not intend to allow method changes, but there
are existing user agents that do change their method.  308 was created
to remove the ambiguity of the behavior when using non-  GET methods.

Temporary redirections

Sometimes the requested resource can't be accessed from its canonical
location, but it can be accessed from another place. In this case, a
temporary redirect can be used.

Search engine robots and other crawlers don't memorize the new,
temporary URL. Temporary redirections are also used when creating,
updating, or deleting resources, to show temporary progress pages.

  Code   Text                  Method handling                                                          Typical use case
  ------ --------------------- ------------------------------------------------------------------------ ---------------------------------------------------------------------------------------------------------------------------------------
   302    Found                 GET methods unchanged. Others may or may not be changed to  GET . [2]   The Web page is temporarily unavailable for unforeseen reasons.
   303    See Other             GET methods unchanged. Others changed to  GET (body lost).              Used to redirect after a  PUT or a  POST , so that refreshing the result page doesn't re-trigger the operation.
   307    Temporary Redirect   Method and body not changed                                              The Web page is temporarily unavailable for unforeseen reasons. Better than  302 when non-  GET operations are available on the site.

[2] The specification did not intend to allow method changes, but there
are existing user agents that do change their method.  307 was created
to remove the ambiguity of the behavior when using non-  GET methods.

Special redirections

 304 (Not Modified) redirects a page to the locally cached copy (that
was stale), and  300 (Multiple Choices) is a manual redirection: the
body, presented by the browser as a Web page, lists the possible
redirections and the user clicks on one to select it.

  Code   Text                Typical use case
  ------ ------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------
   300    Multiple Choices   Not many: the choices are listed in an HTML page in the body. Machine-readable choices are encouraged to be sent as  Link headers with  rel=alternate .
   304    Not Modified       Sent for revalidated conditional requests. Indicates that the cached response is still fresh and can be used.

Alternative way of specifying redirections

HTTP redirects aren't the only way to define redirections. There are two
others:

1.  HTML redirections with the  <meta> element
2.  JavaScript redirections via the DOM

HTML redirections

HTTP redirects are the best way to create redirections, but sometimes
you don't have control over the server. In that case, try a  <meta>
element with its  http-equiv attribute set to  Refresh in the  <head> of
the page. When displaying the page, the browser will go to the indicated
URL.

html

    <head>
      <meta http-equiv="Refresh" content="0; URL=https://example.com/" />
    </head>

The  content attribute should start with a number indicating how many
seconds the browser should wait before redirecting to the given URL.
Always set it to  0 for accessibility compliance.

Obviously, this method only works with HTML, and cannot be used for
images or other types of content.

JavaScript redirections

Redirections in JavaScript are performed by setting a URL string to the
 window.location property, loading the new page:

js

    window.location = "https://example.com/";

Like HTML redirections, this can't work on all resources, and obviously,
this will only work on clients that execute JavaScript. On the other
hand, there are more possibilities: for example, you can trigger the
redirect only if some conditions are met.

Order of precedence

With three ways to trigger redirections, several ways can be used at the
same time. But which is applied first?

1.  HTTP redirects always execute first — they exist when there is not
    even a transmitted page.
2.  HTML redirects (  <meta> ) execute if there weren't any HTTP
    redirects.
3.  JavaScript redirects execute last, and only if JavaScript is
    enabled.

When possible, use HTTP redirects and don't add  <meta> element
redirects. If someone changes the HTTP redirects but forgets to change
the HTML redirects, the redirects will no longer be identical, which
could cause an infinite loop or other nightmares.

Use cases

There are numerous use cases for redirects, but as performance is
impacted with every redirect, their use should be kept to a minimum.

Domain aliasing

Ideally, there is one location, and therefore one URL, for each
resource. But there are reasons for alternative names for a resource:

Expanding the reach of your site

    A common case is when a site resides at  www.example.com , but
    accessing it from  example.com should also work. Redirections for
     example.com to  www.example.com are thus set up. You might also
    redirect from common synonyms or frequent typos of your domains.

Moving to a new domain

    For example, your company was renamed, but you want existing links
    or bookmarks to still find you under the new name.

Forcing HTTPS

    Requests to the  http:// version of your site will redirect to the
     https:// version of your site.

Keeping links alive

When you restructure websites, URLs change. Even if you update your
site's links to match the new URLs, you have no control over the URLs
used by external resources.

You don't want to break these links, as they bring valuable users and
help your SEO, so you set up redirects from the old URLs to the new
ones.

Note: This technique does work for internal links, but try to avoid
having internal redirects. A redirect has a significant performance cost
(as an extra HTTP request occurs). If you can avoid it by correcting
internal links, you should fix those links instead.

Temporary responses to unsafe requests

Unsafe requests modify the state of the server and the user shouldn't
resend them unintentionally.

Typically, you don't want your users to resend  PUT ,  POST or  DELETE
requests. If you serve the response as the result of this request, a
simple press of the reload button will resend the request (possibly
after a confirmation message).

In this case, the server can send back a  303 (See Other) response for a
URL that will contain the right information. If the reload button is
pressed, only that page is redisplayed, without replaying the unsafe
requests.

Temporary responses to long requests

Some requests may need more time on the server, like  DELETE requests
that are scheduled for later processing. In this case, the response is a
 303 (See Other) redirect that links to a page indicating that the
action has been scheduled, and eventually informs about its progress, or
allows to cancel it.

Configuring redirects in common servers

Apache

Redirects can be set either in the server config file or in the
 .htaccess of each directory.

The  mod_alias module has  Redirect and  RedirectMatch directives that
set up  302 redirects by default:

xml

    <VirtualHost *:443>
      ServerName example.com
      Redirect / https://www.example.com
    </VirtualHost>

The URL  https://example.com/ will be redirected to
 https://www.example.com/ , as will any files or directories under it (
 https://example.com/some-page will be redirected to
 https://www.example.com/some-page )

 RedirectMatch does the same, but takes a regular expression to define a
collection of affected URLs:

    RedirectMatch ^/images/(.*)$ https://images.example.com/$1

All documents in the  images/ directory will redirect to a different
domain.

If you don't want a temporary redirect, an extra parameter (either the
HTTP status code to use or the  permanent keyword) can be used to set up
a different redirect:

    Redirect permanent / https://www.example.com
    # …acts the same as:
    Redirect 301 / https://www.example.com

The  mod_rewrite module can also create redirects. It is more flexible,
but a bit more complex.

Nginx

In Nginx, you create a specific server block for the content you want to
redirect:

    server {
      listen 80;
      server_name example.com;
      return 301 $scheme://www.example.com$request_uri;
    }

To apply a redirect to a directory or only certain pages, use the
 rewrite directive:

    rewrite ^/images/(.*)$ https://images.example.com/$1 redirect;
    rewrite ^/images/(.*)$ https://images.example.com/$1 permanent;

IIS

In IIS, you use the  <httpRedirect> element to configure redirections.

Redirection loops

Redirection loops happen when additional redirections follow the one
that has already been followed. In other words, there is a loop that
will never be finished and no page will ever be found.

Most of the time this is a server problem, and if the server can detect
it, it will send back a  500  Internal Server Error . If you encounter
such an error soon after modifying a server configuration, this is
likely a redirection loop.

Sometimes, the server won't detect it: a redirection loop can spread
over several servers which each don't have the full picture. In this
case, browsers will detect it and display an error message. Firefox
displays:

  Firefox has detected that the server is redirecting the request for
  this address in a way that will never terminate.

…while Chrome displays:

  This Webpage has a redirect loop

In both cases, the user can't do much (unless corruption is happening on
their side, like a mismatch of cache or cookies).

It is important to avoid redirection loops, as they completely break the
user experience.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Oct 5, 2023 by MDN contributors .
# HTTP resources and specifications #
 _   _ _____ _____ ____                                                
| | | |_   _|_   _|  _ \   _ __ ___  ___  ___  _   _ _ __ ___ ___  ___ 
| |_| | | |   | | | |_) | | '__/ _ \/ __|/ _ \| | | | '__/ __/ _ \/ __|
|  _  | | |   | | |  __/  | | |  __/\__ \ (_) | |_| | | | (_|  __/\__ \
|_| |_| |_|   |_| |_|     |_|  \___||___/\___/ \__,_|_|  \___\___||___/
                                                                       
                 _ 
  __ _ _ __   __| |
 / _` | '_ \ / _` |
| (_| | | | | (_| |
 \__,_|_| |_|\__,_|
                   
                     _  __ _           _   _                 
 ___ _ __   ___  ___(_)/ _(_) ___ __ _| |_(_) ___  _ __  ___ 
/ __| '_ \ / _ \/ __| | |_| |/ __/ _` | __| |/ _ \| '_ \/ __|
\__ \ |_) |  __/ (__| |  _| | (_| (_| | |_| | (_) | | | \__ \
|___/ .__/ \___|\___|_|_| |_|\___\__,_|\__|_|\___/|_| |_|___/
    |_|                                                      
HTTP resources and specifications

HTTP was first specified in the early 1990s. Designed with extensibility
in mind, it has seen numerous additions over the years; this lead to its
specification being scattered through numerous specification documents
(in the midst of experimental abandoned extensions). This page lists
relevant resources about HTTP.

  Specification                 Title                                                                                                                                                                                                                                                 Status
  ----------------------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------
  RFC 9110                      HTTP Semantics                                                                                                                                                                                                                                        Internet Standard
  RFC 9111                      HTTP Caching                                                                                                                                                                                                                                          Internet Standard
  RFC 9112                      HTTP/1.1                                                                                                                                                                                                                                              Internet Standard
  RFC 9113                      HTTP/2                                                                                                                                                                                                                                                Proposed Standard
  RFC 9114                      HTTP/3                                                                                                                                                                                                                                                Proposed Standard
  RFC 5861                      HTTP Cache-Control Extensions for Stale Content                                                                                                                                                                                                       Informational
  RFC 8246                      HTTP Immutable Responses                                                                                                                                                                                                                              Proposed Standard
  RFC 6265                      HTTP State Management Mechanism Defines Cookies                                                                                                                                                                                                       Proposed Standard
  Draft spec                    Cookie Prefixes                                                                                                                                                                                                                                       IETF Draft
  Draft spec                    Same-Site Cookies                                                                                                                                                                                                                                     IETF Draft
  Draft spec                    Deprecate modification of 'secure' cookies from non-secure origins                                                                                                                                                                                    IETF Draft
  RFC 2145                      Use and Interpretation of HTTP Version Numbers                                                                                                                                                                                                        Informational
  RFC 6585                      Additional HTTP Status Codes                                                                                                                                                                                                                          Proposed Standard
  RFC 7725                      An HTTP Status Code to Report Legal Obstacles                                                                                                                                                                                                         On the standard track
  RFC 2397                      The "data" URL scheme                                                                                                                                                                                                                                 Proposed Standard
  RFC 3986                      Uniform Resource Identifier (URI): Generic Syntax                                                                                                                                                                                                     Internet Standard
  RFC 5988                      Web Linking Defines the  Link header                                                                                                                                                                                                                  Proposed Standard
  Draft spec                    HTTP Client Hints                                                                                                                                                                                                                                     IETF Draft
  RFC 7578                      Returning Values from Forms: multipart/form-data                                                                                                                                                                                                      Proposed Standard
  RFC 6266                      Use of the Content-Disposition Header Field in the Hypertext Transfer Protocol (HTTP)                                                                                                                                                                 Proposed Standard
  RFC 2183                      Communicating Presentation Information in Internet Messages: The Content-Disposition Header Field Only a subset of syntax of the  Content-Disposition header can be used in the context of HTTP messages.                                             Proposed Standard
  RFC 7239                      Forwarded HTTP Extension                                                                                                                                                                                                                              Proposed Standard
  RFC 6455                      The WebSocket Protocol                                                                                                                                                                                                                                Proposed Standard
  RFC 5246                      The Transport Layer Security (TLS) Protocol Version 1.2 This specification has been modified by subsequent RFCs, but these modifications have no effect on the HTTP protocol.                                                                         Proposed Standard
  RFC 8446                      The Transport Layer Security (TLS) Protocol Version 1.3 Supersedes TLS 1.2.                                                                                                                                                                           Proposed Standard
  RFC 2817                      Upgrading to TLS Within HTTP/1.1                                                                                                                                                                                                                      Proposed Standard
  RFC 7541                      HPACK: Header Compression for HTTP/2                                                                                                                                                                                                                  On the standard track
  RFC 7838                      HTTP Alternative Services                                                                                                                                                                                                                             On the standard track
  RFC 7301                      Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension Used to negotiate HTTP/2 at the transport to save an extra request/response round trip.                                                                               Proposed Standard
  RFC 6454                      The Web Origin Concept                                                                                                                                                                                                                                Proposed Standard
  Fetch                         Cross-Origin Resource Sharing                                                                                                                                                                                                                         Living Standard
  RFC 7034                      HTTP Header Field X-Frame-Options                                                                                                                                                                                                                     Informational
  RFC 6797                      HTTP Strict Transport Security (HSTS)                                                                                                                                                                                                                 Proposed Standard
  Upgrade Insecure Requests     Upgrade Insecure Requests                                                                                                                                                                                                                             Candidate Recommendation
  Content Security Policy 1.0   Content Security Policy 1.0 CSP 1.1 and CSP 3.0 doesn't extend the HTTP standard                                                                                                                                                                      Obsolete
  Microsoft document            Specifying legacy document modes* Defines X-UA-Compatible                                                                                                                                                                                             Note
  RFC 5689                      HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV) These extensions of the Web, as well as CardDAV and CalDAV, are out-of-scope for HTTP on the Web. Modern APIs for application are defines using the RESTful pattern nowadays.   Proposed Standard
  RFC 2324                      Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0)                                                                                                                                                                                                   April 1st joke spec
  RFC 7168                      The Hyper Text Coffee Pot Control Protocol for Tea Efflux Appliances (HTCPCP-TEA)                                                                                                                                                                     April 1st joke spec
  HTML Living Standard          HTML Defines extensions of HTTP for Server-Sent Events                                                                                                                                                                                                Living Standard
  Reporting API                  Report-To header                                                                                                                                                                                                                                     Draft
  Draft spec                    Expect-CT Extension for HTTP                                                                                                                                                                                                                          IETF Draft
  RFC 7486                      HTTP Origin-Bound Auth (HOBA)                                                                                                                                                                                                                         Experimental

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 11, 2023 by MDN contributors .
# Resources and URIs #
 ____                                                           _ 
|  _ \ ___  ___  ___  _   _ _ __ ___ ___  ___    __ _ _ __   __| |
| |_) / _ \/ __|/ _ \| | | | '__/ __/ _ \/ __|  / _` | '_ \ / _` |
|  _ <  __/\__ \ (_) | |_| | | | (_|  __/\__ \ | (_| | | | | (_| |
|_| \_\___||___/\___/ \__,_|_|  \___\___||___/  \__,_|_| |_|\__,_|
                                                                  
 _   _ ____  ___     
| | | |  _ \|_ _|___ 
| | | | |_) || |/ __|
| |_| |  _ < | |\__ \
 \___/|_| \_\___|___/
                     
Resources and URIs

HTTP allows a browser, or another user agent , to communicate with
different resources on the Internet: to do this the browser needs both
the identity and the location of the resources. These two bits of
information are described by a URI .

Identifying resources on the Web

    URIs and how to access resources on the Web.

Data URLs

    A specific kind of URIs, data URLs, embed the resource itself inside
    the identifier.

Choosing between www and non-www URLs

    Advice on using a www-prefixed domain or not, this article explains
    the consequences of the choice as well as how to make it.

MIME Types

    MIME media types define what kind of document a specific resource
    is. This article presents both the syntax and the most useful MIME
    types for use on the Web.

Common MIME types

    List of common MIME types useful for Web developers.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# A typical HTTP session #
    _      _               _           _   _   _ _____ _____ ____  
   / \    | |_ _   _ _ __ (_) ___ __ _| | | | | |_   _|_   _|  _ \ 
  / _ \   | __| | | | '_ \| |/ __/ _` | | | |_| | | |   | | | |_) |
 / ___ \  | |_| |_| | |_) | | (_| (_| | | |  _  | | |   | | |  __/ 
/_/   \_\  \__|\__, | .__/|_|\___\__,_|_| |_| |_| |_|   |_| |_|    
               |___/|_|                                            
                   _             
 ___  ___  ___ ___(_) ___  _ __  
/ __|/ _ \/ __/ __| |/ _ \| '_ \ 
\__ \  __/\__ \__ \ | (_) | | | |
|___/\___||___/___/_|\___/|_| |_|
                                 
A typical HTTP session

In client-server protocols, like HTTP, sessions consist of three phases:

1.  The client establishes a TCP connection (or the appropriate
    connection if the transport layer is not TCP).
2.  The client sends its request, and waits for the answer.
3.  The server processes the request, sending back its answer, providing
    a status code and appropriate data.

As of HTTP/1.1, the connection is no longer closed after completing the
third phase, and the client is now granted a further request: this means
the second and third phases can now be performed any number of times.

Establishing a connection

In client-server protocols, it is the client which establishes the
connection. Opening a connection in HTTP means initiating a connection
in the underlying transport layer, usually this is TCP.

With TCP the default port, for an HTTP server on a computer, is port 80.
Other ports can also be used, like 8000 or 8080. The URL of a page to
fetch contains both the domain name, and the port number, though the
latter can be omitted if it is 80. See Identifying resources on the Web
for more details.

Note: The client-server model does not allow the server to send data to
the client without an explicit request for it. However, various Web APIs
enable this use case, including the Push API , Server-sent events , and
the WebSockets API .

Sending a client request

Once the connection is established, the user-agent can send the request
(a user-agent is typically a web browser, but can be anything else, a
crawler, for example). A client request consists of text directives,
separated by CRLF (carriage return, followed by line feed), divided into
three blocks:

1.  The first line contains a request method followed by its parameters:
    -   the path of the document, as an absolute URL without the
        protocol or domain name
    -   the HTTP protocol version
2.  Subsequent lines represent an HTTP header, giving the server
    information about what type of data is appropriate (for example,
    what language, what MIME types), or other data altering its behavior
    (for example, not sending an answer if it is already cached). These
    HTTP headers form a block which ends with an empty line.
3.  The final block is an optional data block, which may contain further
    data mainly used by the POST method.

Example requests

Fetching the root page of developer.mozilla.org, (
 https://developer.mozilla.org/ ), and telling the server that the
user-agent would prefer the page in French, if possible:

http

    GET / HTTP/1.1
    Host: developer.mozilla.org
    Accept-Language: fr

Observe that final empty line, this separates the data block from the
header block. As there is no  Content-Length provided in an HTTP header,
this data block is presented empty, marking the end of the headers,
allowing the server to process the request the moment it receives this
empty line.

For example, sending the result of a form:

http

    POST /contact_form.php HTTP/1.1
    Host: developer.mozilla.org
    Content-Length: 64
    Content-Type: application/x-www-form-urlencoded

    name=Joe%20User&request=Send%20me%20one%20of%20your%20catalogue

Request methods

HTTP defines a set of request methods indicating the desired action to
be performed upon a resource. Although they can also be nouns, these
requests methods are sometimes referred as HTTP verbs. The most common
requests are  GET and  POST :

-   The  GET method requests a data representation of the specified
    resource. Requests using  GET should only retrieve data.
-   The  POST method sends data to a server so it may change its state.
    This is the method often used for HTML Forms .

Structure of a server response

After the connected agent has sent its request, the web server processes
it, and ultimately returns a response. Similar to a client request, a
server response is formed of text directives, separated by CRLF, though
divided into three blocks:

1.  The first line, the status line , consists of an acknowledgment of
    the HTTP version used, followed by a response status code (and its
    brief meaning in human-readable text).
2.  Subsequent lines represent specific HTTP headers, giving the client
    information about the data sent (for example, type, data size,
    compression algorithm used, hints about caching). Similarly to the
    block of HTTP headers for a client request, these HTTP headers form
    a block ending with an empty line.
3.  The final block is a data block, which contains the optional data.

Example responses

Successful web page response:

http

    HTTP/1.1 200 OK
    Content-Type: text/html; charset=utf-8
    Content-Length: 55743
    Connection: keep-alive
    Cache-Control: s-maxage=300, public, max-age=0
    Content-Language: en-US
    Date: Thu, 06 Dec 2018 17:37:18 GMT
    ETag: "2e77ad1dc6ab0b53a2996dfd4653c1c3"
    Server: meinheld/0.6.1
    Strict-Transport-Security: max-age=63072000
    X-Content-Type-Options: nosniff
    X-Frame-Options: DENY
    X-XSS-Protection: 1; mode=block
    Vary: Accept-Encoding,Cookie
    Age: 7

    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>A simple webpage</title>
    </head>
    <body>
      <h1>Simple HTML webpage</h1>
      <p>Hello, world!</p>
    </body>
    </html>

Notification that the requested resource has permanently moved:

http

    HTTP/1.1 301 Moved Permanently
    Server: Apache/2.4.37 (Red Hat)
    Content-Type: text/html; charset=utf-8
    Date: Thu, 06 Dec 2018 17:33:08 GMT
    Location: https://developer.mozilla.org/ (this is the new link to the resource; it is expected that the user-agent will fetch it)
    Keep-Alive: timeout=15, max=98
    Accept-Ranges: bytes
    Via: Moz-Cache-zlb05
    Connection: Keep-Alive
    Content-Length: 325 (the content contains a default page to display if the user-agent is not able to follow the link)

    <!DOCTYPE html>… (contains a site-customized page helping the user to find the missing resource)

Notification that the requested resource doesn't exist:

http

    HTTP/1.1 404 Not Found
    Content-Type: text/html; charset=utf-8
    Content-Length: 38217
    Connection: keep-alive
    Cache-Control: no-cache, no-store, must-revalidate, max-age=0
    Content-Language: en-US
    Date: Thu, 06 Dec 2018 17:35:13 GMT
    Expires: Thu, 06 Dec 2018 17:35:13 GMT
    Server: meinheld/0.6.1
    Strict-Transport-Security: max-age=63072000
    X-Content-Type-Options: nosniff
    X-Frame-Options: DENY
    X-XSS-Protection: 1; mode=block
    Vary: Accept-Encoding,Cookie
    X-Cache: Error from cloudfront

    <!DOCTYPE html>… (contains a site-customized page helping the user to find the missing resource)

Response status codes

HTTP response status codes indicate if a specific HTTP request has been
successfully completed. Responses are grouped into five classes:
informational responses, successful responses, redirects, client errors,
and server errors.

-    200 : OK. The request has succeeded.
-    301 : Moved Permanently. This response code means that the URI of
    requested resource has been changed.
-    404 : Not Found. The server cannot find the requested resource.

See also

-   Identifying resources on the Web
-   HTTP headers
-   HTTP request methods
-   HTTP response status codes

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 18, 2024 by MDN contributors .
# 100 Continue #
 _  ___   ___     ____            _   _                  
/ |/ _ \ / _ \   / ___|___  _ __ | |_(_)_ __  _   _  ___ 
| | | | | | | | | |   / _ \| '_ \| __| | '_ \| | | |/ _ \
| | |_| | |_| | | |__| (_) | | | | |_| | | | | |_| |  __/
|_|\___/ \___/   \____\___/|_| |_|\__|_|_| |_|\__,_|\___|
                                                         
100 Continue

The HTTP  100 Continue informational status response code indicates that
everything so far is OK and that the client should continue with the
request or ignore it if it is already finished.

To have a server check the request's headers, a client must send  Expect
 : 100-continue as a header in its initial request and receive a
 100 Continue status code in response before sending the body.

Status

http

    100 Continue

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.100

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Expect
-    417

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 101 Switching Protocols #
 _  ___  _   ____          _ _       _     _             
/ |/ _ \/ | / ___|_      _(_) |_ ___| |__ (_)_ __   __ _ 
| | | | | | \___ \ \ /\ / / | __/ __| '_ \| | '_ \ / _` |
| | |_| | |  ___) \ V  V /| | || (__| | | | | | | | (_| |
|_|\___/|_| |____/ \_/\_/ |_|\__\___|_| |_|_|_| |_|\__, |
                                                   |___/ 
 ____            _                  _     
|  _ \ _ __ ___ | |_ ___   ___ ___ | |___ 
| |_) | '__/ _ \| __/ _ \ / __/ _ \| / __|
|  __/| | | (_) | || (_) | (_| (_) | \__ \
|_|   |_|  \___/ \__\___/ \___\___/|_|___/
                                          
101 Switching Protocols

The HTTP  101 Switching Protocols response code indicates a protocol to
which the server switches. The protocol is specified in the  Upgrade
request header received from a client.

The server includes in this response an  Upgrade response header to
indicate the protocol it switched to. The process is described in the
following article: Protocol upgrade mechanism .

Status

http

    101 Switching Protocols

Examples

Switching protocols might be used with WebSockets .

http

    HTTP/1.1 101 Switching Protocols
    Upgrade: websocket
    Connection: Upgrade

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.101

  -----------------------------------------------------------------------

See also

-   Protocol upgrade mechanism
-   WebSockets
-    Upgrade
-    426  Upgrade Required

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 102 Processing #
 _  ___ ____    ____                              _             
/ |/ _ \___ \  |  _ \ _ __ ___   ___ ___  ___ ___(_)_ __   __ _ 
| | | | |__) | | |_) | '__/ _ \ / __/ _ \/ __/ __| | '_ \ / _` |
| | |_| / __/  |  __/| | | (_) | (_|  __/\__ \__ \ | | | | (_| |
|_|\___/_____| |_|   |_|  \___/ \___\___||___/___/_|_| |_|\__, |
                                                          |___/ 
102 Processing

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The HTTP  102 Processing informational status response code indicates to
client that a full request has been received and the server is working
on it.

This status code is only sent if the server expects the request to take
significant time. It tells the client that your request is not dead yet.

Note: This status code is deprecated and shouldn't be sent any more.
Clients may still accept it, but simply ignore them.

Status

    102 Processing

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Unknown specification
  # section-10.1

  -----------------------------------------------------------------------

See also

-    Expect
-    100

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 25, 2023 by MDN contributors .
# 103 Early Hints #
 _  ___ _____   _____           _         _   _ _       _       
/ |/ _ \___ /  | ____|__ _ _ __| |_   _  | | | (_)_ __ | |_ ___ 
| | | | ||_ \  |  _| / _` | '__| | | | | | |_| | | '_ \| __/ __|
| | |_| |__) | | |__| (_| | |  | | |_| | |  _  | | | | | |_\__ \
|_|\___/____/  |_____\__,_|_|  |_|\__, | |_| |_|_|_| |_|\__|___/
                                  |___/                         
103 Early Hints

The HTTP  103 Early Hints information response may be sent by a server
while it is still preparing a response, with hints about the sites and
resources that the server is expecting the final response will link.
This allows a browser to preconnect to sites or start preloading
resources even before the server has prepared and sent that final
response.

The early hint response is primarily intended for use with the  Link
header, which indicates the resources to be loaded. It may also contain
a  Content-Security-Policy header that is enforced while processing the
early hint.

A server might send multiple  103 responses, for example, following a
redirect. Browsers only process the first early hint response, and this
response must be discarded if the request results in a cross-origin
redirect. Preloaded resources from the early hint are effectively
pre-pended to the  Document 's head element, and then followed by the
resources loaded in the final response.

Note: For compatibility reasons it is recommended to only send HTTP
 103 Early Hints responses over HTTP/2 or later, unless the client is
known to handle informational responses correctly.

Most browsers limit support to HTTP/2 or later for this reason. See
browser compatibility below.

Despite this, the examples below use HTTP/1.1-style notation as per
usual convention.

Syntax

http

    103 Early Hints

Examples

Preconnect example

The following  103 early hint response shows an early hint response
where the server indicates that the client might want to preconnect to a
particular origin (  https://cdn.example.com ). Just like the HTML
 rel=preconnect attribute this is a hint that the page is likely to need
resources from the target resource's origin, and that the browser can
likely improve the user experience by preemptively initiating a
connection to that origin.

http

    103 Early Hint
    Link: <https://cdn.example.com>; rel=preconnect, <https://cdn.example.com>; rel=preconnect; crossorigin

This example preconnects to  https://cdn.example.com twice:

-   The first connection would be used for loading resources that can be
    fetched without CORS, such as images.
-   The second connection includes the  crossorigin attribute and would
    be used for loading CORS -protected resources, such as fonts.

CORS-protected resources must be fetched over a completely separate
connection. If you only need one type of resource from an origin then
you only need to preconnect once.

Subsequently the server sends the final response. This includes a
crossorigin font preload and an  <img> loaded from the additional
origin.

http

    200 OK
    Content-Type: text/html

    <!DOCTYPE html>
    ...
    <link rel="preload" href="https://cdn.example.com/fonts/myfont.woff2" as="font" type="font/woff2" crossorigin>
    ...
    <img src="https://cdn.example.com/images/image.jpg" alt="">
    ...

Preload example

Warning: Some browsers only support  preconnect over 103 Early Hints.
See the implementation notes in the browser compatibility section below.

The following  103 early hint response indicates a stylesheet  style.css
might be needed by the final response.

http

    103 Early Hint
    Link: </style.css>; rel=preload; as=style

Subsequently the server sends the final response. This includes a link
to the stylesheet, which may already have been preloaded from the early
hint.

http

    200 OK
    Content-Type: text/html

    <!DOCTYPE html>
    ...
    <link rel="stylesheet" rel="preload" href="style.css" />
    ...

Early hint response with CSP

The following example shows the same early hint response but with a
 Content-Security-Policy header included.

http

    103 Early Hint
    Content-Security-Policy: style-src: self;
    Link: </style.css>; rel=preload; as=style

The early response restricts preloading to the same origin as the
request. The stylesheet will preload if the origin matches.

The final response might set the CSP to  none , as shown below. The
stylesheet has already preloaded, but will not be used when rendering
the page.

http

    200 OK
    Content-Security-Policy: style-src: none;
    Content-Type: text/html

    <!DOCTYPE html>
    ...
    <link rel="stylesheet" rel="preload" href="style.css" />
    ...

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  An HTTP Status Code for Indicating Hints
  # section-2

  HTML Standard
  # early-hints
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Link
-   Early Hints update: How Cloudflare, Google, and Shopify are working
    together to build a faster Internet for everyone from the CloudFlare
    blog

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 28, 2024 by MDN contributors .
# 200 OK #
 ____   ___   ___     ___  _  __
|___ \ / _ \ / _ \   / _ \| |/ /
  __) | | | | | | | | | | | ' / 
 / __/| |_| | |_| | | |_| | . \ 
|_____|\___/ \___/   \___/|_|\_\
                                
200 OK

The HTTP  200 OK success status response code indicates that the request
has succeeded. A 200 response is cacheable by default.

The meaning of a success depends on the HTTP request method:

-    GET : The resource has been fetched and is transmitted in the
    message body.
-    HEAD : The representation headers are included in the response
    without any message body
-    POST : The resource describing the result of the action is
    transmitted in the message body
-    TRACE : The message body contains the request message as received
    by the server.

The successful result of a  PUT or a  DELETE is often not a  200 OK but
a  204  No Content (or a  201  Created when the resource is uploaded for
the first time).

Status

http

    200 OK

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.200

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP request methods

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 201 Created #
 ____   ___  _    ____                _           _ 
|___ \ / _ \/ |  / ___|_ __ ___  __ _| |_ ___  __| |
  __) | | | | | | |   | '__/ _ \/ _` | __/ _ \/ _` |
 / __/| |_| | | | |___| | |  __/ (_| | ||  __/ (_| |
|_____|\___/|_|  \____|_|  \___|\__,_|\__\___|\__,_|
                                                    
201 Created

The HTTP  201 Created success status response code indicates that the
request has succeeded and has led to the creation of a resource. The new
resource, or a description and link to the new resource, is effectively
created before the response is sent back and the newly created items are
returned in the body of the message, located at either the URL of the
request, or at the URL in the value of the  Location header.

The common use case of this status code is as the result of a  POST
request.

Status

http

    201 Created

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.201

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP request methods

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 202 Accepted #
 ____   ___ ____       _                      _           _ 
|___ \ / _ \___ \     / \   ___ ___ ___ _ __ | |_ ___  __| |
  __) | | | |__) |   / _ \ / __/ __/ _ \ '_ \| __/ _ \/ _` |
 / __/| |_| / __/   / ___ \ (_| (_|  __/ |_) | ||  __/ (_| |
|_____|\___/_____| /_/   \_\___\___\___| .__/ \__\___|\__,_|
                                       |_|                  
202 Accepted

The HyperText Transfer Protocol (HTTP)  202 Accepted response status
code indicates that the request has been accepted for processing, but
the processing has not been completed; in fact, processing may not have
started yet. The request might or might not eventually be acted upon, as
it might be disallowed when processing actually takes place.

202 is non-committal, meaning that there is no way for the HTTP to later
send an asynchronous response indicating the outcome of processing the
request. It is intended for cases where another process or server
handles the request, or for batch processing.

Status

http

    202 Accepted

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.202

  -----------------------------------------------------------------------

See also

-    Accept

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 203 Non-Authoritative Information #
 ____   ___ _____ 
|___ \ / _ \___ / 
  __) | | | ||_ \ 
 / __/| |_| |__) |
|_____|\___/____/ 
                  
 _   _                     _         _   _                _ _        _   _ 
| \ | | ___  _ __         / \  _   _| |_| |__   ___  _ __(_) |_ __ _| |_(_)
|  \| |/ _ \| '_ \ _____ / _ \| | | | __| '_ \ / _ \| '__| | __/ _` | __| |
| |\  | (_) | | | |_____/ ___ \ |_| | |_| | | | (_) | |  | | || (_| | |_| |
|_| \_|\___/|_| |_|    /_/   \_\__,_|\__|_| |_|\___/|_|  |_|\__\__,_|\__|_|
                                                                           
             ___        __                            _   _             
__   _____  |_ _|_ __  / _| ___  _ __ _ __ ___   __ _| |_(_) ___  _ __  
\ \ / / _ \  | || '_ \| |_ / _ \| '__| '_ ` _ \ / _` | __| |/ _ \| '_ \ 
 \ V /  __/  | || | | |  _| (_) | |  | | | | | | (_| | |_| | (_) | | | |
  \_/ \___| |___|_| |_|_|  \___/|_|  |_| |_| |_|\__,_|\__|_|\___/|_| |_|
                                                                        
203 Non-Authoritative Information

The HTTP  203 Non-Authoritative Information response status indicates
that the request was successful but the enclosed payload has been
modified by a transforming proxy from that of the origin server's  200 (
 OK ) response.

The  203 response is similar to the value  214 , meaning
 Transformation Applied , of the  Warning header code, which has the
additional advantage of being applicable to responses with any status
code.

Status

http

    203 Non-Authoritative Information

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.203

  -----------------------------------------------------------------------

See also

-    200
-   Proxy server
-    Warning

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 204 No Content #
 ____   ___  _  _     _   _          ____            _             _   
|___ \ / _ \| || |   | \ | | ___    / ___|___  _ __ | |_ ___ _ __ | |_ 
  __) | | | | || |_  |  \| |/ _ \  | |   / _ \| '_ \| __/ _ \ '_ \| __|
 / __/| |_| |__   _| | |\  | (_) | | |__| (_) | | | | ||  __/ | | | |_ 
|_____|\___/   |_|   |_| \_|\___/   \____\___/|_| |_|\__\___|_| |_|\__|
                                                                       
204 No Content

The HTTP  204 No Content success status response code indicates that a
request has succeeded, but that the client doesn't need to navigate away
from its current page.

This might be used, for example, when implementing "save and continue
editing" functionality for a wiki site. In this case a  PUT request
would be used to save the page, and the  204 No Content response would
be sent to indicate that the editor should not be replaced by some other
page.

A 204 response is cacheable by default (an  ETag header is included in
such a response).

Status

http

    204 No Content

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.204

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Compatibility notes

-   Although this status code is intended to describe a response with no
    body, servers may erroneously include data following the headers.
    The protocol allows user agents to vary in how they process such
    responses ( discussion regarding this specification text can be
    found here ). This is observable in persistent connections, where
    the invalid body may include a distinct response to a subsequent
    request. Apple Safari rejects any such data. Google Chrome and
    Microsoft Edge discard up to four invalid bytes preceding a valid
    response. Firefox tolerates in excess of a kilobyte of invalid data
    preceding a valid response.

See also

-   HTTP request methods

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 205 Reset Content #
 ____   ___  ____    ____                _   
|___ \ / _ \| ___|  |  _ \ ___  ___  ___| |_ 
  __) | | | |___ \  | |_) / _ \/ __|/ _ \ __|
 / __/| |_| |___) | |  _ <  __/\__ \  __/ |_ 
|_____|\___/|____/  |_| \_\___||___/\___|\__|
                                             
  ____            _             _   
 / ___|___  _ __ | |_ ___ _ __ | |_ 
| |   / _ \| '_ \| __/ _ \ '_ \| __|
| |__| (_) | | | | ||  __/ | | | |_ 
 \____\___/|_| |_|\__\___|_| |_|\__|
                                    
205 Reset Content

The HTTP  205 Reset Content response status tells the client to reset
the document view, so for example to clear the content of a form, reset
a canvas state, or to refresh the UI.

Status

http

    205 Reset Content

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.205

  -----------------------------------------------------------------------

Compatibility notes

-   Browser behavior differs if this response erroneously includes a
    body on persistent connections See 204 No Content for more detail.

See also

-    204 No Content

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 206 Partial Content #
 ____   ___   __     ____            _   _       _ 
|___ \ / _ \ / /_   |  _ \ __ _ _ __| |_(_) __ _| |
  __) | | | | '_ \  | |_) / _` | '__| __| |/ _` | |
 / __/| |_| | (_) | |  __/ (_| | |  | |_| | (_| | |
|_____|\___/ \___/  |_|   \__,_|_|   \__|_|\__,_|_|
                                                   
  ____            _             _   
 / ___|___  _ __ | |_ ___ _ __ | |_ 
| |   / _ \| '_ \| __/ _ \ '_ \| __|
| |__| (_) | | | | ||  __/ | | | |_ 
 \____\___/|_| |_|\__\___|_| |_|\__|
                                    
206 Partial Content

The HTTP  206 Partial Content success status response code indicates
that the request has succeeded and the body contains the requested
ranges of data, as described in the  Range header of the request.

If there is only one range, the  Content-Type of the whole response is
set to the type of the document, and a  Content-Range is provided.

If several ranges are sent back, the  Content-Type is set to
 multipart/byteranges and each fragment covers one range, with
 Content-Range and  Content-Type describing it.

Status

http

    206 Partial Content

Examples

A response containing one single range:

http

    HTTP/1.1 206 Partial Content
    Date: Wed, 15 Nov 2015 06:25:24 GMT
    Last-Modified: Wed, 15 Nov 2015 04:58:08 GMT
    Content-Range: bytes 21010-47021/47022
    Content-Length: 26012
    Content-Type: image/gif

    # 26012 bytes of partial image data…

A response containing several ranges:

http

    HTTP/1.1 206 Partial Content
    Date: Wed, 15 Nov 2015 06:25:24 GMT
    Last-Modified: Wed, 15 Nov 2015 04:58:08 GMT
    Content-Length: 1741
    Content-Type: multipart/byteranges; boundary=String_separator

    --String_separator
    Content-Type: application/pdf
    Content-Range: bytes 234-639/8000

    # the first range
    --String_separator
    Content-Type: application/pdf
    Content-Range: bytes 4590-7999/8000

    # the second range
    --String_separator--

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.206

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    If-Range
-    Range
-    Content-Range
-    Content-Type

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 207 Multi-Status #
 ____   ___ _____   __  __       _ _   _      ____  _        _             
|___ \ / _ \___  | |  \/  |_   _| | |_(_)    / ___|| |_ __ _| |_ _   _ ___ 
  __) | | | | / /  | |\/| | | | | | __| |____\___ \| __/ _` | __| | | / __|
 / __/| |_| |/ /   | |  | | |_| | | |_| |_____|__) | || (_| | |_| |_| \__ \
|_____|\___//_/    |_|  |_|\__,_|_|\__|_|    |____/ \__\__,_|\__|\__,_|___/
                                                                           
207 Multi-Status

Note: The ability to return a collection of resources is part of the
WebDAV protocol (it may be received by web applications accessing a
WebDAV server). Browsers accessing web pages will never encounter this
status code.

The HTTP  207 Multi-Status response code indicates that there might be a
mixture of responses.

The response body is a  text/xml or  application/xml HTTP entity with a
 multistatus root element. The XML body will list all individual
response codes.

Status

    207 Multi-Status

Example

http

    HTTP/1.1 207 Multi-Status
    Content-Type: application/xml; charset="utf-8"
    Content-Length: 1241

    <?xml version="1.0" encoding="utf-8" ?>
    <D:multistatus xmlns:D="DAV:">
      <D:response>
        <D:href>http://www.example.com/Coll/</D:href>
        <D:propstat>
          <D:prop>
            <D:displayname>Loop Demo</D:displayname>
            <D:resource-id>
              <D:href>urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf8</D:href>
            </D:resource-id>
          </D:prop>
          <D:status>HTTP/1.1 200 OK</D:status>
        </D:propstat>
      </D:response>
      <D:response>
        <D:href>http://www.example.com/Coll/Bar</D:href>
        <D:propstat>
          <D:prop>
            <D:displayname>Loop Demo</D:displayname>
            <D:resource-id>
              <D:href>urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf8</D:href>
            </D:resource-id>
          </D:prop>
          <D:status>HTTP/1.1 208 Already Reported</D:status>
        </D:propstat>
      </D:response>
    </D:multistatus>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  RFC 4918
  # section-11.1

  -----------------------------------------------------------------------

See also

-   HTTP request methods
-    204
-    403

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 25, 2023 by MDN contributors .
# 208 Already Reported #
 ____   ___   ___       _    _                    _       
|___ \ / _ \ ( _ )     / \  | |_ __ ___  __ _  __| |_   _ 
  __) | | | |/ _ \    / _ \ | | '__/ _ \/ _` |/ _` | | | |
 / __/| |_| | (_) |  / ___ \| | | |  __/ (_| | (_| | |_| |
|_____|\___/ \___/  /_/   \_\_|_|  \___|\__,_|\__,_|\__, |
                                                    |___/ 
 ____                       _           _ 
|  _ \ ___ _ __   ___  _ __| |_ ___  __| |
| |_) / _ \ '_ \ / _ \| '__| __/ _ \/ _` |
|  _ <  __/ |_) | (_) | |  | ||  __/ (_| |
|_| \_\___| .__/ \___/|_|   \__\___|\__,_|
          |_|                             
208 Already Reported

Note: The ability to bind a resource to several paths is an extension to
the WebDAV protocol (it may be received by web applications accessing a
WebDAV server). Browsers accessing web pages will never encounter this
status code.

The HTTP  208 Already Reported response code is used in a  207 (
 207 Multi-Status ) response to save space and avoid conflicts. If the
same resource is requested several times (for example as part of a
collection), with different paths, only the first one is reported with
 200 . Responses for all other bindings will report with this  208
status code, so no conflicts are created and the response stays shorter.

Status

    208 Already Reported

Example

http

    HTTP/1.1 207 Multi-Status
    Content-Type: application/xml; charset="utf-8"
    Content-Length: 1241

    <?xml version="1.0" encoding="utf-8" ?>
    <D:multistatus xmlns:D="DAV:">
      <D:response>
        <D:href>http://www.example.com/Coll/</D:href>
        <D:propstat>
          <D:prop>
            <D:displayname>Loop Demo</D:displayname>
            <D:resource-id>
              <D:href>urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf8</D:href>
            </D:resource-id>
          </D:prop>
          <D:status>HTTP/1.1 200 OK</D:status>
        </D:propstat>
      </D:response>
      <D:response>
        <D:href>http://www.example.com/Coll/Foo</D:href>
        <D:propstat>
          <D:prop>
            <D:displayname>Bird Inventory</D:displayname>
            <D:resource-id>
              <D:href>urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf9</D:href>
            </D:resource-id>
          </D:prop>
          <D:status>HTTP/1.1 200 OK</D:status>
        </D:propstat>
      </D:response>
      <D:response>
        <D:href>http://www.example.com/Coll/Bar</D:href>
        <D:propstat>
          <D:prop>
            <D:displayname>Loop Demo</D:displayname>
            <D:resource-id>
              <D:href>urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf8</D:href>
            </D:resource-id>
          </D:prop>
          <D:status>HTTP/1.1 208 Already Reported</D:status>
        </D:propstat>
      </D:response>
    </D:multistatus>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Unknown specification
  # section-7.1

  -----------------------------------------------------------------------

See also

-    200

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 25, 2023 by MDN contributors .
# 226 IM Used #
 ____  ____   __     ___ __  __   _   _              _ 
|___ \|___ \ / /_   |_ _|  \/  | | | | |___  ___  __| |
  __) | __) | '_ \   | || |\/| | | | | / __|/ _ \/ _` |
 / __/ / __/| (_) |  | || |  | | | |_| \__ \  __/ (_| |
|_____|_____|\___/  |___|_|  |_|  \___/|___/\___|\__,_|
                                                       
226 IM Used

Note: Browsers don't support delta encoding with HTTP. This status code
is sent back by custom servers used by specific clients.

In the context of delta encodings, the HTTP  226 IM Used status code is
set by the server to indicate that it is returning a delta to the  GET
request that it received.

With delta encoding a server responds to  GET requests with differences
(called deltas ) relative to a given base document (rather than the
current document). The client uses the  A-IM: HTTP header to indicate
which differencing algorithm to use and the  If-None-Match: header to
hint the server about the last version it got. The server generates a
delta, sending it back in an HTTP response with the  226 status code and
containing the  IM: (with the name of the algorithm used) and
 Delta-Base: (with the  ETag matching the base document associated to
the delta) HTTP headers.

IM stands for instance manipulations the term used to describe an
algorithm generating a delta .

Status

    226 IM Used

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Unknown specification
  # section-10.4.1

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 25, 2023 by MDN contributors .
# 300 Multiple Choices #
 _____  ___   ___    __  __       _ _   _       _      
|___ / / _ \ / _ \  |  \/  |_   _| | |_(_)_ __ | | ___ 
  |_ \| | | | | | | | |\/| | | | | | __| | '_ \| |/ _ \
 ___) | |_| | |_| | | |  | | |_| | | |_| | |_) | |  __/
|____/ \___/ \___/  |_|  |_|\__,_|_|\__|_| .__/|_|\___|
                                         |_|           
  ____ _           _               
 / ___| |__   ___ (_) ___ ___  ___ 
| |   | '_ \ / _ \| |/ __/ _ \/ __|
| |___| | | | (_) | | (_|  __/\__ \
 \____|_| |_|\___/|_|\___\___||___/
                                   
300 Multiple Choices

The HTTP  300 Multiple Choices redirect status response code indicates
that the request has more than one possible response. The user-agent or
the user should choose one of them. As there is no standardized way of
choosing one of the responses, this response code is very rarely used.

If the server has a preferred choice, it should generate a  Location
header.

Status

http

    300 Multiple Choices

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.300

  -----------------------------------------------------------------------

See also

-    301  Moved Permanently
-    302  Found , the temporary redirect
-    308  Permanent Redirect

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 301 Moved Permanently #
 _____  ___  _   __  __                    _ 
|___ / / _ \/ | |  \/  | _____   _____  __| |
  |_ \| | | | | | |\/| |/ _ \ \ / / _ \/ _` |
 ___) | |_| | | | |  | | (_) \ V /  __/ (_| |
|____/ \___/|_| |_|  |_|\___/ \_/ \___|\__,_|
                                             
 ____                                            _   _       
|  _ \ ___ _ __ _ __ ___   __ _ _ __   ___ _ __ | |_| |_   _ 
| |_) / _ \ '__| '_ ` _ \ / _` | '_ \ / _ \ '_ \| __| | | | |
|  __/  __/ |  | | | | | | (_| | | | |  __/ | | | |_| | |_| |
|_|   \___|_|  |_| |_| |_|\__,_|_| |_|\___|_| |_|\__|_|\__, |
                                                       |___/ 
301 Moved Permanently

The HyperText Transfer Protocol (HTTP)  301 Moved Permanently redirect
status response code indicates that the requested resource has been
definitively moved to the URL given by the  Location headers. A browser
redirects to the new URL and search engines update their links to the
resource.

Note: Although the specification requires the method and the body to
remain unchanged when the redirection is performed, not all user-agents
meet this requirement. Use the  301 code only as a response for  GET or
 HEAD methods and use the  308 Permanent Redirect for  POST methods
instead, as the method change is explicitly prohibited with this status.

Status

http

    301 Moved Permanently

Example

Client request

http

    GET /index.php HTTP/1.1
    Host: www.example.org

Server response

http

    HTTP/1.1 301 Moved Permanently
    Location: http://www.example.org/index.asp

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.301

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    308 Permanent Redirect , the equivalent of this status code where
    the method used never changes.
-    302 Found , a temporary redirect

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 302 Found #
 _____  ___ ____    _____                     _ 
|___ / / _ \___ \  |  ___|__  _   _ _ __   __| |
  |_ \| | | |__) | | |_ / _ \| | | | '_ \ / _` |
 ___) | |_| / __/  |  _| (_) | |_| | | | | (_| |
|____/ \___/_____| |_|  \___/ \__,_|_| |_|\__,_|
                                                
302 Found

The HyperText Transfer Protocol (HTTP)  302 Found redirect status
response code indicates that the resource requested has been temporarily
moved to the URL given by the  Location header. A browser redirects to
this page but search engines don't update their links to the resource
(in 'SEO-speak', it is said that the 'link-juice' is not sent to the new
URL).

Even if the specification requires the method (and the body) not to be
altered when the redirection is performed, not all user-agents conform
here - you can still find this type of bugged software out there. It is
therefore recommended to set the  302 code only as a response for  GET
or  HEAD methods and to use  307 Temporary   Redirect instead, as the
method change is explicitly prohibited in that case.

In the cases where you want the method used to be changed to  GET , use
 303 See Other instead. This is useful when you want to give a response
to a  PUT method that is not the uploaded resource but a confirmation
message such as: 'you successfully uploaded XYZ'.

Status

http

    302 Found

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.302

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    307 Temporary Redirect , the equivalent of this status code where
    the method used never changes.
-    303 See Other , a temporary redirect that changes the method used
    to  GET .
-    301 Moved Permanently , a permanent redirect.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 303 See Other #
 _____  ___ _____   ____               ___  _   _               
|___ / / _ \___ /  / ___|  ___  ___   / _ \| |_| |__   ___ _ __ 
  |_ \| | | ||_ \  \___ \ / _ \/ _ \ | | | | __| '_ \ / _ \ '__|
 ___) | |_| |__) |  ___) |  __/  __/ | |_| | |_| | | |  __/ |   
|____/ \___/____/  |____/ \___|\___|  \___/ \__|_| |_|\___|_|   
                                                                
303 See Other

The HyperText Transfer Protocol (HTTP)  303 See Other redirect status
response code indicates that the redirects don't link to the requested
resource itself, but to another page (such as a confirmation page, a
representation of a real-world object — see HTTP range-14 — or an
upload-progress page). This response code is often sent back as a result
of  PUT or  POST . The method used to display this redirected page is
always  GET .

Status

http

    303 See Other

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.303

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    302 Found , a temporary redirect
-    307 Temporary Redirect , a temporary redirect where the method used
    never changes.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 304 Not Modified #
 _____  ___  _  _     _   _       _     __  __           _ _  __ _          _ 
|___ / / _ \| || |   | \ | | ___ | |_  |  \/  | ___   __| (_)/ _(_) ___  __| |
  |_ \| | | | || |_  |  \| |/ _ \| __| | |\/| |/ _ \ / _` | | |_| |/ _ \/ _` |
 ___) | |_| |__   _| | |\  | (_) | |_  | |  | | (_) | (_| | |  _| |  __/ (_| |
|____/ \___/   |_|   |_| \_|\___/ \__| |_|  |_|\___/ \__,_|_|_| |_|\___|\__,_|
                                                                              
304 Not Modified

The HTTP  304 Not Modified client redirection response code indicates
that there is no need to retransmit the requested resources. This
response code is sent when the request is a conditional  GET or  HEAD
request with an  If-None-Match or an  If-Modified-Since header and the
condition evaluates to false. It is an implicit redirection to a cached
resource that would have resulted in a  200  OK response if the
condition evaluated to true.

The response must not contain a body and must include the headers that
would have been sent in an equivalent  200  OK response:  Cache-Control
,  Content-Location ,  Date ,  ETag ,  Expires , and  Vary .

Note: Many developer tools' network panels of browsers create extraneous
requests leading to  304 responses, so that access to the local cache is
visible to developers.

Status

http

    304 Not Modified

Examples

The examples below show  GET requests made using curl with conditional
request headers and the HTTP responses received in return. The first
example would return a  200  OK if we know the resource has been updated
since the timestamp in the  If-Modified-Since header. For illustration,
the request uses a future date of 21st November 2050 to check whether if
the resource has been updated since this date:

bash

    curl -v --header 'If-Modified-Since: Tue, 21 Nov 2050 08:00:00 GMT' \
     https://developer.mozilla.org/en-US/

http

    > Request
    GET /en-US/ HTTP/2
    Host: developer.mozilla.org
    User-Agent: curl/8.1.2
    Accept: */*
    If-Modified-Since: Tue, 21 Nov 2050 08:00:00 GMT

    < Response
    HTTP/2 304
    date: Tue, 21 Nov 2023 08:44:28 GMT
    expires: Tue, 21 Nov 2023 08:53:14 GMT
    age: 3194
    etag: "e27d81b845c3716cdb5d4220d78e2799"

A  304 Not Modified response is also returned in response to a  GET
request containing an  If-None-Match header with the ETag from the
response above. Because the  etag exists, a matching entity tag fails
the condition, and a  304 response is returned:

bash

    curl -v --header 'If-None-Match: "e27d81b845c3716cdb5d4220d78e2799"' \
     https://developer.mozilla.org/en-US/

http

    > Request
    GET /en-US/ HTTP/2
    Host: developer.mozilla.org
    User-Agent: curl/8.1.2
    Accept: */*
    If-None-Match: "e27d81b845c3716cdb5d4220d78e2799"

    < Response
    HTTP/2 304
    date: Tue, 21 Nov 2023 08:47:37 GMT
    expires: Tue, 21 Nov 2023 09:38:23 GMT
    age: 2920
    etag: "e27d81b845c3716cdb5d4220d78e2799"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.304

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Compatibility notes

-   Browser behavior differs if this response erroneously includes a
    body on persistent connections. See 204 No Content for more detail.

See also

-    If-Modified-Since
-    If-None-Match
-   HTTP conditional requests
-   204 No Content

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Nov 21, 2023 by MDN contributors .
# 307 Temporary Redirect #
 _____  ___ _____   _____                                               
|___ / / _ \___  | |_   _|__ _ __ ___  _ __   ___  _ __ __ _ _ __ _   _ 
  |_ \| | | | / /    | |/ _ \ '_ ` _ \| '_ \ / _ \| '__/ _` | '__| | | |
 ___) | |_| |/ /     | |  __/ | | | | | |_) | (_) | | | (_| | |  | |_| |
|____/ \___//_/      |_|\___|_| |_| |_| .__/ \___/|_|  \__,_|_|   \__, |
                                      |_|                         |___/ 
 ____          _ _               _   
|  _ \ ___  __| (_)_ __ ___  ___| |_ 
| |_) / _ \/ _` | | '__/ _ \/ __| __|
|  _ <  __/ (_| | | | |  __/ (__| |_ 
|_| \_\___|\__,_|_|_|  \___|\___|\__|
                                     
307 Temporary Redirect

HTTP  307 Temporary Redirect redirect status response code indicates
that the resource requested has been temporarily moved to the URL given
by the  Location headers.

The method and the body of the original request are reused to perform
the redirected request. In the cases where you want the method used to
be changed to  GET , use  303 See Other instead. This is useful when you
want to give an answer to a  PUT method that is not the uploaded
resources, but a confirmation message (like "You successfully uploaded
XYZ").

The only difference between  307 and  302 is that  307 guarantees that
the method and the body will not be changed when the redirected request
is made. With  302 , some old clients were incorrectly changing the
method to  GET : the behavior with non-  GET methods and  302 is then
unpredictable on the Web, whereas the behavior with  307 is predictable.
For  GET requests, their behavior is identical.

Status

http

    307 Temporary Redirect

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.307

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    302 Found , the equivalent of this status code, but that may change
    the method used when it is not a  GET .
-    303 See Other , a temporary redirect that changes the method used
    to  GET .
-    301 Moved Permanently , a permanent redirect

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 308 Permanent Redirect #
 _____  ___   ___    ____                                            _   
|___ / / _ \ ( _ )  |  _ \ ___ _ __ _ __ ___   __ _ _ __   ___ _ __ | |_ 
  |_ \| | | |/ _ \  | |_) / _ \ '__| '_ ` _ \ / _` | '_ \ / _ \ '_ \| __|
 ___) | |_| | (_) | |  __/  __/ |  | | | | | | (_| | | | |  __/ | | | |_ 
|____/ \___/ \___/  |_|   \___|_|  |_| |_| |_|\__,_|_| |_|\___|_| |_|\__|
                                                                         
 ____          _ _               _   
|  _ \ ___  __| (_)_ __ ___  ___| |_ 
| |_) / _ \/ _` | | '__/ _ \/ __| __|
|  _ <  __/ (_| | | | |  __/ (__| |_ 
|_| \_\___|\__,_|_|_|  \___|\___|\__|
                                     
308 Permanent Redirect

The HyperText Transfer Protocol (HTTP)  308 Permanent Redirect redirect
status response code indicates that the resource requested has been
definitively moved to the URL given by the  Location headers. A browser
redirects to this page and search engines update their links to the
resource (in 'SEO-speak', it is said that the 'link-juice' is sent to
the new URL).

The request method and the body will not be altered, whereas  301 may
incorrectly sometimes be changed to a  GET method.

Note: Some Web applications may use the  308 Permanent Redirect in a
non-standard way and for other purposes. For example, Google Drive uses
a  308 Resume Incomplete response to indicate to the client when an
incomplete upload stalled. (See Perform a resumable download on Google
Drive documentation.)

Status

http

    308 Permanent Redirect

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.308

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    301 Moved Permanently , the equivalent of this status code, but
    that may change the method used when it is not a  GET .
-    302 Found , a temporary redirect

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 400 Bad Request #
 _  _    ___   ___    ____            _   ____                            _   
| || |  / _ \ / _ \  | __ )  __ _  __| | |  _ \ ___  __ _ _   _  ___  ___| |_ 
| || |_| | | | | | | |  _ \ / _` |/ _` | | |_) / _ \/ _` | | | |/ _ \/ __| __|
|__   _| |_| | |_| | | |_) | (_| | (_| | |  _ <  __/ (_| | |_| |  __/\__ \ |_ 
   |_|  \___/ \___/  |____/ \__,_|\__,_| |_| \_\___|\__, |\__,_|\___||___/\__|
                                                       |_|                    
400 Bad Request

The HyperText Transfer Protocol (HTTP)  400 Bad Request response status
code indicates that the server cannot or will not process the request
due to something that is perceived to be a client error (for example,
malformed request syntax, invalid request message framing, or deceptive
request routing).

Warning: The client should not repeat this request without modification.

Status

http

    400 Bad Request

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.400

  -----------------------------------------------------------------------

See also

-   HTTP Status Code Definitions

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 401 Unauthorized #
 _  _    ___  _   _   _                   _   _                _             _ 
| || |  / _ \/ | | | | |_ __   __ _ _   _| |_| |__   ___  _ __(_)_______  __| |
| || |_| | | | | | | | | '_ \ / _` | | | | __| '_ \ / _ \| '__| |_  / _ \/ _` |
|__   _| |_| | | | |_| | | | | (_| | |_| | |_| | | | (_) | |  | |/ /  __/ (_| |
   |_|  \___/|_|  \___/|_| |_|\__,_|\__,_|\__|_| |_|\___/|_|  |_/___\___|\__,_|
                                                                               
401 Unauthorized

The HyperText Transfer Protocol (HTTP)  401 Unauthorized response status
code indicates that the client request has not been completed because it
lacks valid authentication credentials for the requested resource.

This status code is sent with an HTTP  WWW-Authenticate response header
that contains information on how the client can request for the resource
again after prompting the user for authentication credentials.

This status code is similar to the  403 Forbidden status code, except
that in situations resulting in this status code, user authentication
can allow access to the resource.

Status

http

    401 Unauthorized

Example response

http

    HTTP/1.1 401 Unauthorized
    Date: Wed, 21 Oct 2015 07:28:00 GMT
    WWW-Authenticate: Basic realm="Access to staging site"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.401

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP authentication
-    WWW-Authenticate
-    Authorization
-    Proxy-Authorization
-    Proxy-Authenticate
-    403 ,  407

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 402 Payment Required #
 _  _    ___ ____    ____                                  _   
| || |  / _ \___ \  |  _ \ __ _ _   _ _ __ ___   ___ _ __ | |_ 
| || |_| | | |__) | | |_) / _` | | | | '_ ` _ \ / _ \ '_ \| __|
|__   _| |_| / __/  |  __/ (_| | |_| | | | | | |  __/ | | | |_ 
   |_|  \___/_____| |_|   \__,_|\__, |_| |_| |_|\___|_| |_|\__|
                                |___/                          
 ____                  _              _ 
|  _ \ ___  __ _ _   _(_)_ __ ___  __| |
| |_) / _ \/ _` | | | | | '__/ _ \/ _` |
|  _ <  __/ (_| | |_| | | | |  __/ (_| |
|_| \_\___|\__, |\__,_|_|_|  \___|\__,_|
              |_|                       
402 Payment Required

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The HTTP  402 Payment Required is a nonstandard response status code
that is reserved for future use. This status code was created to enable
digital cash or (micro) payment systems and would indicate that the
requested content is not available until the client makes a payment.

Sometimes, this status code indicates that the request cannot be
processed until the client makes a payment. However, no standard use
convention exists and different entities use it in different contexts.

Status

http

    402 Payment Required

Example response

http

    HTTP/1.1 402 Payment Required
    Date: Wed, 21 Oct 2015 07:28:00 GMT

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.402

  -----------------------------------------------------------------------

Browser compatibility

This status code is reserved but not defined. No browser actually
supports it and the error will be displayed as a generic  4xx status
code.

See also

-   HTTP authentication

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 403 Forbidden #
 _  _    ___ _____   _____          _     _     _     _            
| || |  / _ \___ /  |  ___|__  _ __| |__ (_) __| | __| | ___ _ __  
| || |_| | | ||_ \  | |_ / _ \| '__| '_ \| |/ _` |/ _` |/ _ \ '_ \ 
|__   _| |_| |__) | |  _| (_) | |  | |_) | | (_| | (_| |  __/ | | |
   |_|  \___/____/  |_|  \___/|_|  |_.__/|_|\__,_|\__,_|\___|_| |_|
                                                                   
403 Forbidden

The HTTP  403 Forbidden response status code indicates that the server
understands the request but refuses to authorize it.

This status is similar to  401 , but for the  403 Forbidden status code,
re-authenticating makes no difference. The access is tied to the
application logic, such as insufficient rights to a resource.

Status

http

    403 Forbidden

Example response

http

    HTTP/1.1 403 Forbidden
    Date: Wed, 21 Oct 2015 07:28:00 GMT

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.403

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    401
-   HTTP Status Code Definitions

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 404 Not Found #
 _  _    ___  _  _     _   _       _     _____                     _ 
| || |  / _ \| || |   | \ | | ___ | |_  |  ___|__  _   _ _ __   __| |
| || |_| | | | || |_  |  \| |/ _ \| __| | |_ / _ \| | | | '_ \ / _` |
|__   _| |_| |__   _| | |\  | (_) | |_  |  _| (_) | |_| | | | | (_| |
   |_|  \___/   |_|   |_| \_|\___/ \__| |_|  \___/ \__,_|_| |_|\__,_|
                                                                     
404 Not Found

The HTTP  404 Not Found response status code indicates that the server
cannot find the requested resource. Links that lead to a 404 page are
often called broken or dead links and can be subject to link rot .

A 404 status code only indicates that the resource is missing: not
whether the absence is temporary or permanent. If a resource is
permanently removed, use the  410 (Gone) status instead.

Status

http

    404 Not Found

Custom error pages

You can display a custom 404 page to be more helpful to a user and
provide guidance on what to do next. For example, for the Apache server,
you can specify a path to a custom 404 page in an  .htaccess file:

apacheconf

    ErrorDocument 404 /notfound.html

For an example of a custom 404 page, see this 404 page .

Note: Custom design is a good thing, in moderation. Feel free to make
your 404 page humorous and human, but don't confuse your users.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.404

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    410
-   Wikipedia: HTTP 404

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 25, 2023 by MDN contributors .
# 405 Method Not Allowed #
 _  _    ___  ____    __  __      _   _               _   _   _       _   
| || |  / _ \| ___|  |  \/  | ___| |_| |__   ___   __| | | \ | | ___ | |_ 
| || |_| | | |___ \  | |\/| |/ _ \ __| '_ \ / _ \ / _` | |  \| |/ _ \| __|
|__   _| |_| |___) | | |  | |  __/ |_| | | | (_) | (_| | | |\  | (_) | |_ 
   |_|  \___/|____/  |_|  |_|\___|\__|_| |_|\___/ \__,_| |_| \_|\___/ \__|
                                                                          
    _    _ _                       _ 
   / \  | | | _____      _____  __| |
  / _ \ | | |/ _ \ \ /\ / / _ \/ _` |
 / ___ \| | | (_) \ V  V /  __/ (_| |
/_/   \_\_|_|\___/ \_/\_/ \___|\__,_|
                                     
405 Method Not Allowed

The HyperText Transfer Protocol (HTTP)  405 Method Not Allowed response
status code indicates that the server knows the request method, but the
target resource doesn't support this method.

The server must generate an  Allow header field in a 405 status code
response. The field must contain a list of methods that the target
resource currently supports.

Status

http

    405 Method Not Allowed

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.405

  -----------------------------------------------------------------------

See also

-    Allow
-   HTTP Status Code Definitions
-   How to Fix 405 Method Not Allowed
-   Troubleshooting HTTP 405

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 406 Not Acceptable #
 _  _    ___   __     _   _       _   
| || |  / _ \ / /_   | \ | | ___ | |_ 
| || |_| | | | '_ \  |  \| |/ _ \| __|
|__   _| |_| | (_) | | |\  | (_) | |_ 
   |_|  \___/ \___/  |_| \_|\___/ \__|
                                      
    _                      _        _     _      
   / \   ___ ___ ___ _ __ | |_ __ _| |__ | | ___ 
  / _ \ / __/ __/ _ \ '_ \| __/ _` | '_ \| |/ _ \
 / ___ \ (_| (_|  __/ |_) | || (_| | |_) | |  __/
/_/   \_\___\___\___| .__/ \__\__,_|_.__/|_|\___|
                    |_|                          
406 Not Acceptable

The HyperText Transfer Protocol (HTTP)  406 Not Acceptable client error
response code indicates that the server cannot produce a response
matching the list of acceptable values defined in the request's
proactive content negotiation headers, and that the server is unwilling
to supply a default representation.

Proactive content negotiation headers include:

-    Accept
-    Accept-Encoding
-    Accept-Language

In practice, this error is very rarely used. Instead of responding using
this error code, which would be cryptic for the end user and difficult
to fix, servers ignore the relevant header and serve an actual page to
the user. It is assumed that even if the user won't be completely happy,
they will prefer this to an error code.

If a server returns such an error status, the body of the message should
contain the list of the available representations of the resources,
allowing the user to choose among them.

Status

http

    406 Not Acceptable

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.406

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Accept
-    Accept-Encoding
-    Accept-Language
-   HTTP content negotiation

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 407 Proxy Authentication Required #
 _  _    ___ _____   ____                      
| || |  / _ \___  | |  _ \ _ __ _____  ___   _ 
| || |_| | | | / /  | |_) | '__/ _ \ \/ / | | |
|__   _| |_| |/ /   |  __/| | | (_) >  <| |_| |
   |_|  \___//_/    |_|   |_|  \___/_/\_\\__, |
                                         |___/ 
    _         _   _                _   _           _   _             
   / \  _   _| |_| |__   ___ _ __ | |_(_) ___ __ _| |_(_) ___  _ __  
  / _ \| | | | __| '_ \ / _ \ '_ \| __| |/ __/ _` | __| |/ _ \| '_ \ 
 / ___ \ |_| | |_| | | |  __/ | | | |_| | (_| (_| | |_| | (_) | | | |
/_/   \_\__,_|\__|_| |_|\___|_| |_|\__|_|\___\__,_|\__|_|\___/|_| |_|
                                                                     
 ____                  _              _ 
|  _ \ ___  __ _ _   _(_)_ __ ___  __| |
| |_) / _ \/ _` | | | | | '__/ _ \/ _` |
|  _ <  __/ (_| | |_| | | | |  __/ (_| |
|_| \_\___|\__, |\__,_|_|_|  \___|\__,_|
              |_|                       
407 Proxy Authentication Required

The HTTP  407 Proxy Authentication Required client error status response
code indicates that the request has not been applied because it lacks
valid authentication credentials for a proxy server that is between the
browser and the server that can access the requested resource.

This status is sent with a  Proxy-Authenticate header that contains
information on how to authorize correctly.

Status

http

    407 Proxy Authentication Required

Example response

http

    HTTP/1.1 407 Proxy Authentication Required
    Date: Wed, 21 Oct 2015 07:28:00 GMT
    Proxy-Authenticate: Basic realm="Access to internal site"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.407

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP authentication
-    WWW-Authenticate
-    Authorization
-    Proxy-Authorization
-    Proxy-Authenticate
-    401 ,  403

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 408 Request Timeout #
 _  _    ___   ___    ____                            _   
| || |  / _ \ ( _ )  |  _ \ ___  __ _ _   _  ___  ___| |_ 
| || |_| | | |/ _ \  | |_) / _ \/ _` | | | |/ _ \/ __| __|
|__   _| |_| | (_) | |  _ <  __/ (_| | |_| |  __/\__ \ |_ 
   |_|  \___/ \___/  |_| \_\___|\__, |\__,_|\___||___/\__|
                                   |_|                    
 _____ _                            _   
|_   _(_)_ __ ___   ___  ___  _   _| |_ 
  | | | | '_ ` _ \ / _ \/ _ \| | | | __|
  | | | | | | | | |  __/ (_) | |_| | |_ 
  |_| |_|_| |_| |_|\___|\___/ \__,_|\__|
                                        
408 Request Timeout

The HyperText Transfer Protocol (HTTP)  408 Request Timeout response
status code means that the server would like to shut down this unused
connection. It is sent on an idle connection by some servers, even
without any previous request by the client .

A server should send the "close"  Connection header field in the
response, since  408 implies that the server has decided to close the
connection rather than continue waiting.

This response is used much more since some browsers, like Chrome,
Firefox 27+, and IE9, use HTTP pre-connection mechanisms to speed up
surfing.

Note: some servers merely shut down the connection without sending this
message.

Status

http

    408 Request Timeout

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.408

  -----------------------------------------------------------------------

See also

-    Connection
-    X-DNS-Prefetch-Control

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 409 Conflict #
 _  _    ___   ___     ____             __ _ _      _   
| || |  / _ \ / _ \   / ___|___  _ __  / _| (_) ___| |_ 
| || |_| | | | (_) | | |   / _ \| '_ \| |_| | |/ __| __|
|__   _| |_| |\__, | | |__| (_) | | | |  _| | | (__| |_ 
   |_|  \___/   /_/   \____\___/|_| |_|_| |_|_|\___|\__|
                                                        
409 Conflict

The HTTP  409 Conflict response status code indicates a request conflict
with the current state of the target resource.

Conflicts are most likely to occur in response to a  PUT request. For
example, you may get a 409 response when uploading a file that is older
than the existing one on the server, resulting in a version control
conflict.

Status

http

    409 Conflict

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.409

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    PUT

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 410 Gone #
 _  _   _  ___     ____                  
| || | / |/ _ \   / ___| ___  _ __   ___ 
| || |_| | | | | | |  _ / _ \| '_ \ / _ \
|__   _| | |_| | | |_| | (_) | | | |  __/
   |_| |_|\___/   \____|\___/|_| |_|\___|
                                         
410 Gone

The HyperText Transfer Protocol (HTTP)  410 Gone client error response
code indicates that access to the target resource is no longer available
at the origin server and that this condition is likely to be permanent.

If you don't know whether this condition is temporary or permanent, a
 404 status code should be used instead.

Note: A 410 response is cacheable by default.

Status

http

    410 Gone

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.410

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    404
-   410 gone

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 411 Length Required #
 _  _   _ _   _                     _   _     
| || | / / | | |    ___ _ __   __ _| |_| |__  
| || |_| | | | |   / _ \ '_ \ / _` | __| '_ \ 
|__   _| | | | |__|  __/ | | | (_| | |_| | | |
   |_| |_|_| |_____\___|_| |_|\__, |\__|_| |_|
                              |___/           
 ____                  _              _ 
|  _ \ ___  __ _ _   _(_)_ __ ___  __| |
| |_) / _ \/ _` | | | | | '__/ _ \/ _` |
|  _ <  __/ (_| | |_| | | | |  __/ (_| |
|_| \_\___|\__, |\__,_|_|_|  \___|\__,_|
              |_|                       
411 Length Required

The HyperText Transfer Protocol (HTTP)  411 Length Required client error
response code indicates that the server refuses to accept the request
without a defined  Content-Length header.

Note: by specification, when sending data in a series of chunks, the
 Content-Length header is omitted and at the beginning of each chunk you
need to add the length of the current chunk in hexadecimal format. See
 Transfer-Encoding for more details.

Status

http

    411 Length Required

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.411

  -----------------------------------------------------------------------

See also

-    Content-Length
-    Transfer-Encoding

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 412 Precondition Failed #
 _  _   _ ____    ____                               _ _ _   _             
| || | / |___ \  |  _ \ _ __ ___  ___ ___  _ __   __| (_) |_(_) ___  _ __  
| || |_| | __) | | |_) | '__/ _ \/ __/ _ \| '_ \ / _` | | __| |/ _ \| '_ \ 
|__   _| |/ __/  |  __/| | |  __/ (_| (_) | | | | (_| | | |_| | (_) | | | |
   |_| |_|_____| |_|   |_|  \___|\___\___/|_| |_|\__,_|_|\__|_|\___/|_| |_|
                                                                           
 _____     _ _          _ 
|  ___|_ _(_) | ___  __| |
| |_ / _` | | |/ _ \/ _` |
|  _| (_| | | |  __/ (_| |
|_|  \__,_|_|_|\___|\__,_|
                          
412 Precondition Failed

The HyperText Transfer Protocol (HTTP)  412 Precondition Failed client
error response code indicates that access to the target resource has
been denied. This happens with conditional requests on methods other
than  GET or  HEAD when the condition defined by the
 If-Unmodified-Since or  If-None-Match headers is not fulfilled. In that
case, the request, usually an upload or a modification of a resource,
cannot be made and this error response is sent back.

Status

http

    412 Precondition Failed

Examples

http

    ETag: "33a64df551425fcc55e4d42a148795d9f25f89d4"
    ETag: W/"0815"

Avoiding mid-air collisions

With the help of the  ETag and the  If-Match headers, you can detect
mid-air edit collisions.

For example, when editing MDN, the current wiki content is hashed and
put into an  Etag in the response:

http

    ETag: "33a64df551425fcc55e4d42a148795d9f25f89d4"

When saving changes to a wiki page (posting data), the  POST request
will contain the  If-Match header containing the  ETag values to check
freshness against.

http

    If-Match: "33a64df551425fcc55e4d42a148795d9f25f89d4"

If the hashes don't match, it means that the document has been edited
in-between and a  412  Precondition Failed error is thrown.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.412

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

The information below has been pulled from MDN's GitHub (
https://github.com/mdn/browser-compat-data ).

See also

-    304
-    If-Unmodified-Since
-    If-None-Match
-    428

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 413 Content Too Large #
 _  _   _ _____    ____            _             _     _____           
| || | / |___ /   / ___|___  _ __ | |_ ___ _ __ | |_  |_   _|__   ___  
| || |_| | |_ \  | |   / _ \| '_ \| __/ _ \ '_ \| __|   | |/ _ \ / _ \ 
|__   _| |___) | | |__| (_) | | | | ||  __/ | | | |_    | | (_) | (_) |
   |_| |_|____/   \____\___/|_| |_|\__\___|_| |_|\__|   |_|\___/ \___/ 
                                                                       
 _                         
| |    __ _ _ __ __ _  ___ 
| |   / _` | '__/ _` |/ _ \
| |__| (_| | | | (_| |  __/
|_____\__,_|_|  \__, |\___|
                |___/      
413 Content Too Large

The HTTP  413 Content Too Large response status code indicates that the
request entity is larger than limits defined by server; the server might
close the connection or return a  Retry-After header field.

Prior to RFC 9110 the response phrase for the status was
 Payload Too Large . That name is still widely used.

Status

http

    413 Content Too Large

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.413

  -----------------------------------------------------------------------

See also

-    Connection
-    Retry-After

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 414 URI Too Long #
 _  _   _ _  _     _   _ ____  ___   _____             _                      
| || | / | || |   | | | |  _ \|_ _| |_   _|__   ___   | |    ___  _ __   __ _ 
| || |_| | || |_  | | | | |_) || |    | |/ _ \ / _ \  | |   / _ \| '_ \ / _` |
|__   _| |__   _| | |_| |  _ < | |    | | (_) | (_) | | |__| (_) | | | | (_| |
   |_| |_|  |_|    \___/|_| \_\___|   |_|\___/ \___/  |_____\___/|_| |_|\__, |
                                                                        |___/ 
414 URI Too Long

The HTTP  414 URI Too Long response status code indicates that the URI
requested by the client is longer than the server is willing to
interpret.

There are a few rare conditions when this might occur:

-   when a client has improperly converted a  POST request to a  GET
    request with long query information,
-   when the client has descended into a loop of redirection (for
    example, a redirected URI prefix that points to a suffix of itself),
-   or when the server is under attack by a client attempting to exploit
    potential security holes.

Status

http

    414 URI Too Long

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.414

  -----------------------------------------------------------------------

See also

-   URI

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 415 Unsupported Media Type #
 _  _   _ ____    _   _                                        _           _ 
| || | / | ___|  | | | |_ __  ___ _   _ _ __  _ __   ___  _ __| |_ ___  __| |
| || |_| |___ \  | | | | '_ \/ __| | | | '_ \| '_ \ / _ \| '__| __/ _ \/ _` |
|__   _| |___) | | |_| | | | \__ \ |_| | |_) | |_) | (_) | |  | ||  __/ (_| |
   |_| |_|____/   \___/|_| |_|___/\__,_| .__/| .__/ \___/|_|   \__\___|\__,_|
                                       |_|   |_|                             
 __  __          _ _         _____                 
|  \/  | ___  __| (_) __ _  |_   _|   _ _ __   ___ 
| |\/| |/ _ \/ _` | |/ _` |   | || | | | '_ \ / _ \
| |  | |  __/ (_| | | (_| |   | || |_| | |_) |  __/
|_|  |_|\___|\__,_|_|\__,_|   |_| \__, | .__/ \___|
                                  |___/|_|         
415 Unsupported Media Type

The HTTP  415 Unsupported Media Type client error response code
indicates that the server refuses to accept the request because the
payload format is in an unsupported format.

The format problem might be due to the request's indicated  Content-Type
or  Content-Encoding , or as a result of inspecting the data directly.

Status

http

    415 Unsupported Media Type

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.415

  -----------------------------------------------------------------------

See also

-    Content-Type
-    Content-Encoding
-    Accept

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 416 Range Not Satisfiable #
 _  _   _  __     ____                          _   _       _   
| || | / |/ /_   |  _ \ __ _ _ __   __ _  ___  | \ | | ___ | |_ 
| || |_| | '_ \  | |_) / _` | '_ \ / _` |/ _ \ |  \| |/ _ \| __|
|__   _| | (_) | |  _ < (_| | | | | (_| |  __/ | |\  | (_) | |_ 
   |_| |_|\___/  |_| \_\__,_|_| |_|\__, |\___| |_| \_|\___/ \__|
                                   |___/                        
 ____        _   _      __ _       _     _      
/ ___|  __ _| |_(_)___ / _(_) __ _| |__ | | ___ 
\___ \ / _` | __| / __| |_| |/ _` | '_ \| |/ _ \
 ___) | (_| | |_| \__ \  _| | (_| | |_) | |  __/
|____/ \__,_|\__|_|___/_| |_|\__,_|_.__/|_|\___|
                                                
416 Range Not Satisfiable

The HyperText Transfer Protocol (HTTP)  416 Range Not Satisfiable error
response code indicates that a server cannot serve the requested ranges.
The most likely reason is that the document doesn't contain such ranges,
or that the  Range header value, though syntactically correct, doesn't
make sense.

The  416 response message contains a  Content-Range indicating an
unsatisfied range (that is a  '*' ) followed by a  '/' and the current
length of the resource. E.g.  Content-Range: bytes */12777

Faced with this error, browsers usually either abort the operation (for
example, a download will be considered as non-resumable) or ask for the
whole document again.

Status

http

    416 Range Not Satisfiable

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.416

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    206  Partial Content
-    Content-Range
-    Range

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 417 Expectation Failed #
 _  _   _ _____   _____                      _        _   _             
| || | / |___  | | ____|_  ___ __   ___  ___| |_ __ _| |_(_) ___  _ __  
| || |_| |  / /  |  _| \ \/ / '_ \ / _ \/ __| __/ _` | __| |/ _ \| '_ \ 
|__   _| | / /   | |___ >  <| |_) |  __/ (__| || (_| | |_| | (_) | | | |
   |_| |_|/_/    |_____/_/\_\ .__/ \___|\___|\__\__,_|\__|_|\___/|_| |_|
                            |_|                                         
 _____     _ _          _ 
|  ___|_ _(_) | ___  __| |
| |_ / _` | | |/ _ \/ _` |
|  _| (_| | | |  __/ (_| |
|_|  \__,_|_|_|\___|\__,_|
                          
417 Expectation Failed

The HTTP  417 Expectation Failed client error response code indicates
that the expectation given in the request's  Expect header could not be
met.

See the  Expect header for more details.

Status

http

    417 Expectation Failed

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.417

  -----------------------------------------------------------------------

See also

-    Expect

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 418 I'm a teapot #
 _  _   _  ___    ___ _                     _                         _   
| || | / |( _ )  |_ _( )_ __ ___     __ _  | |_ ___  __ _ _ __   ___ | |_ 
| || |_| |/ _ \   | ||/| '_ ` _ \   / _` | | __/ _ \/ _` | '_ \ / _ \| __|
|__   _| | (_) |  | |  | | | | | | | (_| | | ||  __/ (_| | |_) | (_) | |_ 
   |_| |_|\___/  |___| |_| |_| |_|  \__,_|  \__\___|\__,_| .__/ \___/ \__|
                                                         |_|              
418 I'm a teapot

The HTTP  418 I'm a teapot client error response code indicates that the
server refuses to brew coffee because it is, permanently, a teapot. A
combined coffee/tea pot that is temporarily out of coffee should instead
return 503. This error is a reference to Hyper Text Coffee Pot Control
Protocol defined in April Fools' jokes in 1998 and 2014.

Some websites use this response for requests they do not wish to handle,
such as automated queries.

Status

http

    418 I'm a teapot

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  RFC 2324
  # section-2.3.2

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Wikipedia: Hyper Text Coffee Pot Control Protocol

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 421 Misdirected Request #
 _  _  ____  _   __  __ _         _ _               _           _ 
| || ||___ \/ | |  \/  (_)___  __| (_)_ __ ___  ___| |_ ___  __| |
| || |_ __) | | | |\/| | / __|/ _` | | '__/ _ \/ __| __/ _ \/ _` |
|__   _/ __/| | | |  | | \__ \ (_| | | | |  __/ (__| ||  __/ (_| |
   |_||_____|_| |_|  |_|_|___/\__,_|_|_|  \___|\___|\__\___|\__,_|
                                                                  
 ____                            _   
|  _ \ ___  __ _ _   _  ___  ___| |_ 
| |_) / _ \/ _` | | | |/ _ \/ __| __|
|  _ <  __/ (_| | |_| |  __/\__ \ |_ 
|_| \_\___|\__, |\__,_|\___||___/\__|
              |_|                    
421 Misdirected Request

The HTTP  421 Misdirected Request client error response code indicates
that the request was directed to a server that is not able to produce a
response. This might be possible if a connection is reused or if an
alternative service is selected.

Status

http

    421 Misdirected Request

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # name-421-misdirected-request

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Oct 5, 2023 by MDN contributors .
# 422 Unprocessable Content #
 _  _  ____  ____  
| || ||___ \|___ \ 
| || |_ __) | __) |
|__   _/ __/ / __/ 
   |_||_____|_____|
                   
 _   _                                               _     _      
| | | |_ __  _ __  _ __ ___   ___ ___  ___ ___  __ _| |__ | | ___ 
| | | | '_ \| '_ \| '__/ _ \ / __/ _ \/ __/ __|/ _` | '_ \| |/ _ \
| |_| | | | | |_) | | | (_) | (_|  __/\__ \__ \ (_| | |_) | |  __/
 \___/|_| |_| .__/|_|  \___/ \___\___||___/___/\__,_|_.__/|_|\___|
            |_|                                                   
  ____            _             _   
 / ___|___  _ __ | |_ ___ _ __ | |_ 
| |   / _ \| '_ \| __/ _ \ '_ \| __|
| |__| (_) | | | | ||  __/ | | | |_ 
 \____\___/|_| |_|\__\___|_| |_|\__|
                                    
422 Unprocessable Content

The HyperText Transfer Protocol (HTTP)  422 Unprocessable Content
response status code indicates that the server understands the content
type of the request entity, and the syntax of the request entity is
correct, but it was unable to process the contained instructions.

Warning: The client should not repeat this request without modification.

Status

http

    422 Unprocessable Content

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.422

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 423 Locked #
 _  _  ____  _____   _               _            _ 
| || ||___ \|___ /  | |    ___   ___| | _____  __| |
| || |_ __) | |_ \  | |   / _ \ / __| |/ / _ \/ _` |
|__   _/ __/ ___) | | |__| (_) | (__|   <  __/ (_| |
   |_||_____|____/  |_____\___/ \___|_|\_\___|\__,_|
                                                    
423 Locked

Note: The ability to lock a resource is specific to some WebDAV servers.
Browsers accessing web pages will never encounter this status code; in
the erroneous cases it happens, they will handle it as a generic  400
status code.

The HTTP  423 Locked error response code indicates that either the
resources tentatively targeted by is locked , meaning it can't be
accessed. Its content should contain some information in WebDAV's XML
format.

Status

http

    423 Locked

Example

http

    HTTP/1.1 423 Locked
    Content-Type: application/xml; charset="utf-8"
    Content-Length: xxxx

    <?xml version="1.0" encoding="utf-8" ?>
    <D:error xmlns:D="DAV:">
      <D:lock-token-submitted>
        <D:href>/workspace/webdav/</D:href>
      </D:lock-token-submitted>
    </D:error>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  RFC 4918
  # section-11.3

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Oct 5, 2023 by MDN contributors .
# 424 Failed Dependency #
 _  _  ____  _  _     _____     _ _          _ 
| || ||___ \| || |   |  ___|_ _(_) | ___  __| |
| || |_ __) | || |_  | |_ / _` | | |/ _ \/ _` |
|__   _/ __/|__   _| |  _| (_| | | |  __/ (_| |
   |_||_____|  |_|   |_|  \__,_|_|_|\___|\__,_|
                                               
 ____                            _                       
|  _ \  ___ _ __   ___ _ __   __| | ___ _ __   ___ _   _ 
| | | |/ _ \ '_ \ / _ \ '_ \ / _` |/ _ \ '_ \ / __| | | |
| |_| |  __/ |_) |  __/ | | | (_| |  __/ | | | (__| |_| |
|____/ \___| .__/ \___|_| |_|\__,_|\___|_| |_|\___|\__, |
           |_|                                     |___/ 
424 Failed Dependency

The HTTP  424 Failed Dependency client error response code indicates
that the method could not be performed on the resource because the
requested action depended on another action, and that action failed.

Regular web servers will normally not return this status code. But some
other protocols, like WebDAV , can return it. For example, in WebDAV ,
if a  PROPPATCH request was issued, and one command fails then
automatically every other command will also fail with
 424 Failed Dependency .

Status

http

    424 Failed Dependency

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  RFC 4918
  # section-11.4

  -----------------------------------------------------------------------

See also

-    403 (Forbidden)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Oct 7, 2023 by MDN contributors .
# 425 Too Early #
 _  _  ____  ____    _____             _____           _       
| || ||___ \| ___|  |_   _|__   ___   | ____|__ _ _ __| |_   _ 
| || |_ __) |___ \    | |/ _ \ / _ \  |  _| / _` | '__| | | | |
|__   _/ __/ ___) |   | | (_) | (_) | | |__| (_| | |  | | |_| |
   |_||_____|____/    |_|\___/ \___/  |_____\__,_|_|  |_|\__, |
                                                         |___/ 
425 Too Early

The HyperText Transfer Protocol (HTTP)  425 Too Early response status
code indicates that the server is unwilling to risk processing a request
that might be replayed, which creates the potential for a replay attack.

Status

http

    425 Too Early

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Using Early Data in HTTP
  # status

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 426 Upgrade Required #
 _  _  ____   __     _   _                           _      
| || ||___ \ / /_   | | | |_ __   __ _ _ __ __ _  __| | ___ 
| || |_ __) | '_ \  | | | | '_ \ / _` | '__/ _` |/ _` |/ _ \
|__   _/ __/| (_) | | |_| | |_) | (_| | | | (_| | (_| |  __/
   |_||_____|\___/   \___/| .__/ \__, |_|  \__,_|\__,_|\___|
                          |_|    |___/                      
 ____                  _              _ 
|  _ \ ___  __ _ _   _(_)_ __ ___  __| |
| |_) / _ \/ _` | | | | | '__/ _ \/ _` |
|  _ <  __/ (_| | |_| | | | |  __/ (_| |
|_| \_\___|\__, |\__,_|_|_|  \___|\__,_|
              |_|                       
426 Upgrade Required

The HTTP  426 Upgrade Required client error response code indicates that
the server refuses to perform the request using the current protocol but
might be willing to do so after the client upgrades to a different
protocol.

The server sends an  Upgrade header with this response to indicate the
required protocol(s).

Status

http

    426 Upgrade Required

Examples

http

    HTTP/1.1 426 Upgrade Required
    Upgrade: HTTP/2.0
    Connection: Upgrade
    Content-Length: 53
    Content-Type: text/plain

    This service requires use of the HTTP/2.0 protocol

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.426

  -----------------------------------------------------------------------

See also

-    Upgrade
-    101  Switching Protocols

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 428 Precondition Required #
 _  _  ____  ___    ____                               _ _ _   _             
| || ||___ \( _ )  |  _ \ _ __ ___  ___ ___  _ __   __| (_) |_(_) ___  _ __  
| || |_ __) / _ \  | |_) | '__/ _ \/ __/ _ \| '_ \ / _` | | __| |/ _ \| '_ \ 
|__   _/ __/ (_) | |  __/| | |  __/ (_| (_) | | | | (_| | | |_| | (_) | | | |
   |_||_____\___/  |_|   |_|  \___|\___\___/|_| |_|\__,_|_|\__|_|\___/|_| |_|
                                                                             
 ____                  _              _ 
|  _ \ ___  __ _ _   _(_)_ __ ___  __| |
| |_) / _ \/ _` | | | | | '__/ _ \/ _` |
|  _ <  __/ (_| | |_| | | | |  __/ (_| |
|_| \_\___|\__, |\__,_|_|_|  \___|\__,_|
              |_|                       
428 Precondition Required

The HTTP  428 Precondition Required response status code indicates that
the server requires the request to be conditional .

Typically, this means that a required precondition header, such as
 If-Match , is missing .

When a precondition header is not matching the server side state, the
response should be  412  Precondition Failed .

Status

http

    428 Precondition Required

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  RFC 6585
  # section-3

  -----------------------------------------------------------------------

See also

-   HTTP conditional requests
-    If-Match
-    412

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 429 Too Many Requests #
 _  _  ____   ___    _____             __  __                   
| || ||___ \ / _ \  |_   _|__   ___   |  \/  | __ _ _ __  _   _ 
| || |_ __) | (_) |   | |/ _ \ / _ \  | |\/| |/ _` | '_ \| | | |
|__   _/ __/ \__, |   | | (_) | (_) | | |  | | (_| | | | | |_| |
   |_||_____|  /_/    |_|\___/ \___/  |_|  |_|\__,_|_| |_|\__, |
                                                          |___/ 
 ____                            _       
|  _ \ ___  __ _ _   _  ___  ___| |_ ___ 
| |_) / _ \/ _` | | | |/ _ \/ __| __/ __|
|  _ <  __/ (_| | |_| |  __/\__ \ |_\__ \
|_| \_\___|\__, |\__,_|\___||___/\__|___/
              |_|                        
429 Too Many Requests

The HTTP  429 Too Many Requests response status code indicates the user
has sent too many requests in a given amount of time ("rate limiting").

A  Retry-After header might be included to this response indicating how
long to wait before making a new request.

Status

http

    429 Too Many Requests

Example

http

    HTTP/1.1 429 Too Many Requests
    Content-Type: text/html
    Retry-After: 3600

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  RFC 6585
  # section-4

  -----------------------------------------------------------------------

See also

-    Retry-After
-   HTTP Status Code Definitions
-   Python solution: How to avoid HTTP error 429 python

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 431 Request Header Fields Too Large #
 _  _  _____ _   ____                            _   
| || ||___ // | |  _ \ ___  __ _ _   _  ___  ___| |_ 
| || |_ |_ \| | | |_) / _ \/ _` | | | |/ _ \/ __| __|
|__   _|__) | | |  _ <  __/ (_| | |_| |  __/\__ \ |_ 
   |_||____/|_| |_| \_\___|\__, |\__,_|\___||___/\__|
                              |_|                    
 _   _                _             _____ _      _     _       _____           
| | | | ___  __ _  __| | ___ _ __  |  ___(_) ___| | __| |___  |_   _|__   ___  
| |_| |/ _ \/ _` |/ _` |/ _ \ '__| | |_  | |/ _ \ |/ _` / __|   | |/ _ \ / _ \ 
|  _  |  __/ (_| | (_| |  __/ |    |  _| | |  __/ | (_| \__ \   | | (_) | (_) |
|_| |_|\___|\__,_|\__,_|\___|_|    |_|   |_|\___|_|\__,_|___/   |_|\___/ \___/ 
                                                                               
 _                         
| |    __ _ _ __ __ _  ___ 
| |   / _` | '__/ _` |/ _ \
| |__| (_| | | | (_| |  __/
|_____\__,_|_|  \__, |\___|
                |___/      
431 Request Header Fields Too Large

The HTTP  431 Request Header Fields Too Large response status code
indicates that the server refuses to process the request because the
request's HTTP headers are too long. The request may be resubmitted
after reducing the size of the request headers.

431 can be used when the total size of request headers is too large, or
when a single header field is too large. To help those running into this
error, indicate which of the two is the problem in the response body —
ideally, also include which headers are too large. This lets users
attempt to fix the problem, such as by clearing their cookies.

Servers will often produce this status if:

-   The  Referer URL is too long
-   There are too many Cookies sent in the request

Status

http

    431 Request Header Fields Too Large

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  RFC 6585
  # section-5

  -----------------------------------------------------------------------

See also

-    414 URI Too Long
-   Request header

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 451 Unavailable For Legal Reasons #
 _  _  ____  _   _   _                        _ _       _     _      
| || || ___|/ | | | | |_ __   __ ___   ____ _(_) | __ _| |__ | | ___ 
| || ||___ \| | | | | | '_ \ / _` \ \ / / _` | | |/ _` | '_ \| |/ _ \
|__   _|__) | | | |_| | | | | (_| |\ V / (_| | | | (_| | |_) | |  __/
   |_||____/|_|  \___/|_| |_|\__,_| \_/ \__,_|_|_|\__,_|_.__/|_|\___|
                                                                     
 _____            _                     _ 
|  ___|__  _ __  | |    ___  __ _  __ _| |
| |_ / _ \| '__| | |   / _ \/ _` |/ _` | |
|  _| (_) | |    | |__|  __/ (_| | (_| | |
|_|  \___/|_|    |_____\___|\__, |\__,_|_|
                            |___/         
 ____                                
|  _ \ ___  __ _ ___  ___  _ __  ___ 
| |_) / _ \/ _` / __|/ _ \| '_ \/ __|
|  _ <  __/ (_| \__ \ (_) | | | \__ \
|_| \_\___|\__,_|___/\___/|_| |_|___/
                                     
451 Unavailable For Legal Reasons

The HyperText Transfer Protocol (HTTP)
 451 Unavailable For Legal Reasons client error response code indicates
that the user requested a resource that is not available due to legal
reasons, such as a web page for which a legal action has been issued.

Status

http

    451 Unavailable For Legal Reasons

Example

This example response is taken from the IETF RFC (see below) and
contains a reference to Monty Python's Life of Brian .

Note: the  Link header might also contain a  rel="blocked-by" relation
identifying the entity implementing the blockage, not any other entity
mandating it.

Any attempt to identify the entity ultimately responsible for the
resource being unavailable belongs in the response body, not in the
 rel="blocked-by" link. This includes the name of the person or
organization that made a legal demand resulting in the content's
removal.

http

    HTTP/1.1 451 Unavailable For Legal Reasons
    Link: <https://spqr.example.org/legislatione>; rel="blocked-by"
    Content-Type: text/html

    <html>
          <head><title>Unavailable For Legal Reasons</title></head>
          <body>
                <h1>Unavailable For Legal Reasons</h1>
                <p>This request may not be serviced in the Roman Province
                of Judea due to the Lex Julia Majestatis, which disallows
                access to resources hosted on servers deemed to be
                operated by the People's Front of Judea.</p>
          </body>
    </html>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  An HTTP Status Code to Report Legal Obstacles
  # n-451-unavailable-for-legal-reasons

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Wikipedia: HTTP 451
-   Wikipedia: Fahrenheit 451 (which gave this status code its number)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 500 Internal Server Error #
 ____   ___   ___    ___       _                        _ 
| ___| / _ \ / _ \  |_ _|_ __ | |_ ___ _ __ _ __   __ _| |
|___ \| | | | | | |  | || '_ \| __/ _ \ '__| '_ \ / _` | |
 ___) | |_| | |_| |  | || | | | ||  __/ |  | | | | (_| | |
|____/ \___/ \___/  |___|_| |_|\__\___|_|  |_| |_|\__,_|_|
                                                          
 ____                             _____                     
/ ___|  ___ _ ____   _____ _ __  | ____|_ __ _ __ ___  _ __ 
\___ \ / _ \ '__\ \ / / _ \ '__| |  _| | '__| '__/ _ \| '__|
 ___) |  __/ |   \ V /  __/ |    | |___| |  | | | (_) | |   
|____/ \___|_|    \_/ \___|_|    |_____|_|  |_|  \___/|_|   
                                                            
500 Internal Server Error

The HyperText Transfer Protocol (HTTP)  500 Internal Server Error server
error response code indicates that the server encountered an unexpected
condition that prevented it from fulfilling the request.

This error response is a generic "catch-all" response. Usually, this
indicates the server cannot find a better 5xx error code to response.
Sometimes, server administrators log error responses like the 500 status
code with more details about the request to prevent the error from
happening again in the future.

Status

http

    500 Internal Server Error

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.500

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP Status Code Definitions

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 501 Not Implemented #
 ____   ___  _   _   _       _   
| ___| / _ \/ | | \ | | ___ | |_ 
|___ \| | | | | |  \| |/ _ \| __|
 ___) | |_| | | | |\  | (_) | |_ 
|____/ \___/|_| |_| \_|\___/ \__|
                                 
 ___                 _                           _           _ 
|_ _|_ __ ___  _ __ | | ___ _ __ ___   ___ _ __ | |_ ___  __| |
 | || '_ ` _ \| '_ \| |/ _ \ '_ ` _ \ / _ \ '_ \| __/ _ \/ _` |
 | || | | | | | |_) | |  __/ | | | | |  __/ | | | ||  __/ (_| |
|___|_| |_| |_| .__/|_|\___|_| |_| |_|\___|_| |_|\__\___|\__,_|
              |_|                                              
501 Not Implemented

The HyperText Transfer Protocol (HTTP)  501 Not Implemented server error
response code means that the server does not support the functionality
required to fulfill the request .

This status can also send a  Retry-After header, telling the requester
when to check back to see if the functionality is supported by then.

 501 is the appropriate response when the server does not recognize the
request method and is incapable of supporting it for any resource. The
only methods that servers are required to support (and therefore that
must not return  501 ) are  GET and  HEAD .

If the server does recognize the method, but intentionally does not
support it, the appropriate response is  405 Method Not Allowed .

Note:

-   A 501 error is not something you can fix, but requires a fix by the
    web server you are trying to access.
-   A 501 response is cacheable by default; that is, unless caching
    headers instruct otherwise.

Status

http

    501 Not Implemented

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.501

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 502 Bad Gateway #
 ____   ___ ____    ____            _ 
| ___| / _ \___ \  | __ )  __ _  __| |
|___ \| | | |__) | |  _ \ / _` |/ _` |
 ___) | |_| / __/  | |_) | (_| | (_| |
|____/ \___/_____| |____/ \__,_|\__,_|
                                      
  ____       _                           
 / ___| __ _| |_ _____      ____ _ _   _ 
| |  _ / _` | __/ _ \ \ /\ / / _` | | | |
| |_| | (_| | ||  __/\ V  V / (_| | |_| |
 \____|\__,_|\__\___| \_/\_/ \__,_|\__, |
                                   |___/ 
502 Bad Gateway

The HyperText Transfer Protocol (HTTP)  502 Bad Gateway server error
response code indicates that the server, while acting as a gateway or
proxy, received an invalid response from the upstream server.

Note: A Gateway might refer to different things in networking and a 502
error is usually not something you can fix, but requires a fix by the
web server or the proxies you are trying to get access through.

Status

http

    502 Bad Gateway

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.502

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    504
-   HTTP Status Code Definitions

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 503 Service Unavailable #
 ____   ___ _____   ____                  _          
| ___| / _ \___ /  / ___|  ___ _ ____   _(_) ___ ___ 
|___ \| | | ||_ \  \___ \ / _ \ '__\ \ / / |/ __/ _ \
 ___) | |_| |__) |  ___) |  __/ |   \ V /| | (_|  __/
|____/ \___/____/  |____/ \___|_|    \_/ |_|\___\___|
                                                     
 _   _                        _ _       _     _      
| | | |_ __   __ ___   ____ _(_) | __ _| |__ | | ___ 
| | | | '_ \ / _` \ \ / / _` | | |/ _` | '_ \| |/ _ \
| |_| | | | | (_| |\ V / (_| | | | (_| | |_) | |  __/
 \___/|_| |_|\__,_| \_/ \__,_|_|_|\__,_|_.__/|_|\___|
                                                     
503 Service Unavailable

The HyperText Transfer Protocol (HTTP)  503 Service Unavailable server
error response code indicates that the server is not ready to handle the
request.

Common causes are a server that is down for maintenance or that is
overloaded. This response should be used for temporary conditions and
the  Retry-After HTTP header should, if possible, contain the estimated
time for the recovery of the service.

Note: together with this response, a user-friendly page explaining the
problem should be sent.

Caching-related headers that are sent along with this response should be
taken care of, as a 503 status is often a temporary condition and
responses shouldn't usually be cached.

Status

http

    503 Service Unavailable

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.503

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    Retry-After
-   HTTP Status Code Definitions

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 504 Gateway Timeout #
 ____   ___  _  _      ____       _                           
| ___| / _ \| || |    / ___| __ _| |_ _____      ____ _ _   _ 
|___ \| | | | || |_  | |  _ / _` | __/ _ \ \ /\ / / _` | | | |
 ___) | |_| |__   _| | |_| | (_| | ||  __/\ V  V / (_| | |_| |
|____/ \___/   |_|    \____|\__,_|\__\___| \_/\_/ \__,_|\__, |
                                                        |___/ 
 _____ _                            _   
|_   _(_)_ __ ___   ___  ___  _   _| |_ 
  | | | | '_ ` _ \ / _ \/ _ \| | | | __|
  | | | | | | | | |  __/ (_) | |_| | |_ 
  |_| |_|_| |_| |_|\___|\___/ \__,_|\__|
                                        
504 Gateway Timeout

The HyperText Transfer Protocol (HTTP)  504 Gateway Timeout server error
response code indicates that the server, while acting as a gateway or
proxy, did not get a response in time from the upstream server that it
needed in order to complete the request.

Note: A Gateway might refer to different things in networking and a 504
error is usually not something you can fix, but requires a fix by the
web server or the proxies you are trying to get access through.

Status

http

    504 Gateway Timeout

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.504

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTTP Status Code Definitions
-    502

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 505 HTTP Version Not Supported #
 ____   ___  ____    _   _ _____ _____ ____  
| ___| / _ \| ___|  | | | |_   _|_   _|  _ \ 
|___ \| | | |___ \  | |_| | | |   | | | |_) |
 ___) | |_| |___) | |  _  | | |   | | |  __/ 
|____/ \___/|____/  |_| |_| |_|   |_| |_|    
                                             
__     __            _               _   _       _   
\ \   / /__ _ __ ___(_) ___  _ __   | \ | | ___ | |_ 
 \ \ / / _ \ '__/ __| |/ _ \| '_ \  |  \| |/ _ \| __|
  \ V /  __/ |  \__ \ | (_) | | | | | |\  | (_) | |_ 
   \_/ \___|_|  |___/_|\___/|_| |_| |_| \_|\___/ \__|
                                                     
 ____                               _           _ 
/ ___| _   _ _ __  _ __   ___  _ __| |_ ___  __| |
\___ \| | | | '_ \| '_ \ / _ \| '__| __/ _ \/ _` |
 ___) | |_| | |_) | |_) | (_) | |  | ||  __/ (_| |
|____/ \__,_| .__/| .__/ \___/|_|   \__\___|\__,_|
            |_|   |_|                             
505 HTTP Version Not Supported

The HyperText Transfer Protocol (HTTP)  505 HTTP Version Not Supported
response status code indicates that the HTTP version used in the request
is not supported by the server.

Status

http

    505 HTTP Version Not Supported

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTTP Semantics
  # status.505

  -----------------------------------------------------------------------

See also

-    Upgrade

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 506 Variant Also Negotiates #
 ____   ___   __    __     __         _             _        _    _           
| ___| / _ \ / /_   \ \   / /_ _ _ __(_) __ _ _ __ | |_     / \  | |___  ___  
|___ \| | | | '_ \   \ \ / / _` | '__| |/ _` | '_ \| __|   / _ \ | / __|/ _ \ 
 ___) | |_| | (_) |   \ V / (_| | |  | | (_| | | | | |_   / ___ \| \__ \ (_) |
|____/ \___/ \___/     \_/ \__,_|_|  |_|\__,_|_| |_|\__| /_/   \_\_|___/\___/ 
                                                                              
 _   _                  _   _       _            
| \ | | ___  __ _  ___ | |_(_) __ _| |_ ___  ___ 
|  \| |/ _ \/ _` |/ _ \| __| |/ _` | __/ _ \/ __|
| |\  |  __/ (_| | (_) | |_| | (_| | ||  __/\__ \
|_| \_|\___|\__, |\___/ \__|_|\__,_|\__\___||___/
            |___/                                
506 Variant Also Negotiates

The HyperText Transfer Protocol (HTTP)  506 Variant Also Negotiates
response status code may be given in the context of Transparent Content
Negotiation (see RFC 2295 ). This protocol enables a client to retrieve
the best variant of a given resource, where the server supports multiple
variants.

The  Variant Also Negotiates status code indicates an internal server
configuration error in which the chosen variant is itself configured to
engage in content negotiation, so is not a proper negotiation endpoint.

Status

http

    506 Variant Also Negotiates

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  RFC 2295
  # section-8.1

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 507 Insufficient Storage #
 ____   ___ _____   ___                  __  __ _      _            _   
| ___| / _ \___  | |_ _|_ __  ___ _   _ / _|/ _(_) ___(_) ___ _ __ | |_ 
|___ \| | | | / /   | || '_ \/ __| | | | |_| |_| |/ __| |/ _ \ '_ \| __|
 ___) | |_| |/ /    | || | | \__ \ |_| |  _|  _| | (__| |  __/ | | | |_ 
|____/ \___//_/    |___|_| |_|___/\__,_|_| |_| |_|\___|_|\___|_| |_|\__|
                                                                        
 ____  _                             
/ ___|| |_ ___  _ __ __ _  __ _  ___ 
\___ \| __/ _ \| '__/ _` |/ _` |/ _ \
 ___) | || (_) | | | (_| | (_| |  __/
|____/ \__\___/|_|  \__,_|\__, |\___|
                          |___/      
507 Insufficient Storage

The HyperText Transfer Protocol (HTTP)  507 Insufficient Storage
response status code may be given in the context of the Web Distributed
Authoring and Versioning (WebDAV) protocol (see RFC 4918 ).

It indicates that a method could not be performed because the server
cannot store the representation needed to successfully complete the
request.

Status

http

    507 Insufficient Storage

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  RFC 4918
  # section-11.5

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 508 Loop Detected #
 ____   ___   ___    _                      
| ___| / _ \ ( _ )  | |    ___   ___  _ __  
|___ \| | | |/ _ \  | |   / _ \ / _ \| '_ \ 
 ___) | |_| | (_) | | |__| (_) | (_) | |_) |
|____/ \___/ \___/  |_____\___/ \___/| .__/ 
                                     |_|    
 ____       _            _           _ 
|  _ \  ___| |_ ___  ___| |_ ___  __| |
| | | |/ _ \ __/ _ \/ __| __/ _ \/ _` |
| |_| |  __/ ||  __/ (__| ||  __/ (_| |
|____/ \___|\__\___|\___|\__\___|\__,_|
                                       
508 Loop Detected

The HyperText Transfer Protocol (HTTP)  508 Loop Detected response
status code may be given in the context of the Web Distributed Authoring
and Versioning (WebDAV) protocol.

It indicates that the server terminated an operation because it
encountered an infinite loop while processing a request with "Depth:
infinity". This status indicates that the entire operation failed.

Status

http

    508 Loop Detected

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  RFC 5842
  # section-7.2

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 510 Not Extended #
 ____  _  ___    _   _       _     _____      _                 _          _ 
| ___|/ |/ _ \  | \ | | ___ | |_  | ____|_  _| |_ ___ _ __   __| | ___  __| |
|___ \| | | | | |  \| |/ _ \| __| |  _| \ \/ / __/ _ \ '_ \ / _` |/ _ \/ _` |
 ___) | | |_| | | |\  | (_) | |_  | |___ >  <| ||  __/ | | | (_| |  __/ (_| |
|____/|_|\___/  |_| \_|\___/ \__| |_____/_/\_\\__\___|_| |_|\__,_|\___|\__,_|
                                                                             
510 Not Extended

The HyperText Transfer Protocol (HTTP)  510 Not Extended response status
code is sent in the context of the HTTP Extension Framework, defined in
RFC 2774 .

In that specification a client may send a request that contains an
extension declaration, that describes the extension to be used. If the
server receives such a request, but any described extensions are not
supported for the request, then the server responds with the 510 status
code.

Status

http

    510 Not Extended

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  RFC 2774
  # section-7

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# 511 Network Authentication Required #
 ____  _ _   _   _      _                      _    
| ___|/ / | | \ | | ___| |___      _____  _ __| | __
|___ \| | | |  \| |/ _ \ __\ \ /\ / / _ \| '__| |/ /
 ___) | | | | |\  |  __/ |_ \ V  V / (_) | |  |   < 
|____/|_|_| |_| \_|\___|\__| \_/\_/ \___/|_|  |_|\_\
                                                    
    _         _   _                _   _           _   _             
   / \  _   _| |_| |__   ___ _ __ | |_(_) ___ __ _| |_(_) ___  _ __  
  / _ \| | | | __| '_ \ / _ \ '_ \| __| |/ __/ _` | __| |/ _ \| '_ \ 
 / ___ \ |_| | |_| | | |  __/ | | | |_| | (_| (_| | |_| | (_) | | | |
/_/   \_\__,_|\__|_| |_|\___|_| |_|\__|_|\___\__,_|\__|_|\___/|_| |_|
                                                                     
 ____                  _              _ 
|  _ \ ___  __ _ _   _(_)_ __ ___  __| |
| |_) / _ \/ _` | | | | | '__/ _ \/ _` |
|  _ <  __/ (_| | |_| | | | |  __/ (_| |
|_| \_\___|\__, |\__,_|_|_|  \___|\__,_|
              |_|                       
511 Network Authentication Required

The HTTP  511 Network Authentication Required response status code
indicates that the client needs to authenticate to gain network access.

This status is not generated by origin servers, but by intercepting
proxies that control access to the network.

Network operators sometimes require some authentication, acceptance of
terms, or other user interaction before granting access (for example in
an internet café or at an airport). They often identify clients who have
not done so using their Media Access Control (MAC) addresses.

Status

http

    511 Network Authentication Required

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  RFC 6585
  # section-6

  -----------------------------------------------------------------------

See also

-   Proxy server

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Apr 10, 2023 by MDN contributors .
# HTTP response status codes #
 _   _ _____ _____ ____                                             
| | | |_   _|_   _|  _ \   _ __ ___  ___ _ __   ___  _ __  ___  ___ 
| |_| | | |   | | | |_) | | '__/ _ \/ __| '_ \ / _ \| '_ \/ __|/ _ \
|  _  | | |   | | |  __/  | | |  __/\__ \ |_) | (_) | | | \__ \  __/
|_| |_| |_|   |_| |_|     |_|  \___||___/ .__/ \___/|_| |_|___/\___|
                                        |_|                         
     _        _                             _           
 ___| |_ __ _| |_ _   _ ___    ___ ___   __| | ___  ___ 
/ __| __/ _` | __| | | / __|  / __/ _ \ / _` |/ _ \/ __|
\__ \ || (_| | |_| |_| \__ \ | (_| (_) | (_| |  __/\__ \
|___/\__\__,_|\__|\__,_|___/  \___\___/ \__,_|\___||___/
                                                        
HTTP response status codes

HTTP response status codes indicate whether a specific HTTP request has
been successfully completed. Responses are grouped in five classes:

1.  Informational responses (  100 –  199 )
2.  Successful responses (  200 –  299 )
3.  Redirection messages (  300 –  399 )
4.  Client error responses (  400 –  499 )
5.  Server error responses (  500 –  599 )

The status codes listed below are defined by RFC 9110 .

Note: If you receive a response that is not in this list , it is a
non-standard response, possibly custom to the server's software.

Information responses

 100 Continue

    This interim response indicates that the client should continue the
    request or ignore the response if the request is already finished.

 101 Switching Protocols

    This code is sent in response to an  Upgrade request header from the
    client and indicates the protocol the server is switching to.

 102 Processing ( WebDAV )

    This code indicates that the server has received and is processing
    the request, but no response is available yet.

 103 Early Hints

    This status code is primarily intended to be used with the  Link
    header, letting the user agent start preloading resources while the
    server prepares a response or preconnect to an origin from which the
    page will need resources.

Successful responses

 200 OK

    The request succeeded. The result meaning of "success" depends on
    the HTTP method:

    -    GET : The resource has been fetched and transmitted in the
        message body.
    -    HEAD : The representation headers are included in the response
        without any message body.
    -    PUT or  POST : The resource describing the result of the action
        is transmitted in the message body.
    -    TRACE : The message body contains the request message as
        received by the server.

 201 Created

    The request succeeded, and a new resource was created as a result.
    This is typically the response sent after  POST requests, or some
     PUT requests.

 202 Accepted

    The request has been received but not yet acted upon. It is
    noncommittal, since there is no way in HTTP to later send an
    asynchronous response indicating the outcome of the request. It is
    intended for cases where another process or server handles the
    request, or for batch processing.

 203 Non-Authoritative Information

    This response code means the returned metadata is not exactly the
    same as is available from the origin server, but is collected from a
    local or a third-party copy. This is mostly used for mirrors or
    backups of another resource. Except for that specific case, the
     200 OK response is preferred to this status.

 204 No Content

    There is no content to send for this request, but the headers may be
    useful. The user agent may update its cached headers for this
    resource with the new ones.

 205 Reset Content

    Tells the user agent to reset the document which sent this request.

 206 Partial Content

    This response code is used when the  Range header is sent from the
    client to request only part of a resource.

 207 Multi-Status ( WebDAV )

    Conveys information about multiple resources, for situations where
    multiple status codes might be appropriate.

 208 Already Reported ( WebDAV )

    Used inside a  <dav:propstat> response element to avoid repeatedly
    enumerating the internal members of multiple bindings to the same
    collection.

 226 IM Used ( HTTP Delta encoding )

    The server has fulfilled a  GET request for the resource, and the
    response is a representation of the result of one or more
    instance-manipulations applied to the current instance.

Redirection messages

 300 Multiple Choices

    The request has more than one possible response. The user agent or
    user should choose one of them. (There is no standardized way of
    choosing one of the responses, but HTML links to the possibilities
    are recommended so the user can pick.)

 301 Moved Permanently

    The URL of the requested resource has been changed permanently. The
    new URL is given in the response.

 302 Found

    This response code means that the URI of requested resource has been
    changed temporarily . Further changes in the URI might be made in
    the future. Therefore, this same URI should be used by the client in
    future requests.

 303 See Other

    The server sent this response to direct the client to get the
    requested resource at another URI with a GET request.

 304 Not Modified

    This is used for caching purposes. It tells the client that the
    response has not been modified, so the client can continue to use
    the same cached version of the response.

 305 Use Proxy  Deprecated 

    Defined in a previous version of the HTTP specification to indicate
    that a requested response must be accessed by a proxy. It has been
    deprecated due to security concerns regarding in-band configuration
    of a proxy.

 306 unused

    This response code is no longer used; it is just reserved. It was
    used in a previous version of the HTTP/1.1 specification.

 307 Temporary Redirect

    The server sends this response to direct the client to get the
    requested resource at another URI with the same method that was used
    in the prior request. This has the same semantics as the  302 Found
    HTTP response code, with the exception that the user agent must not
    change the HTTP method used: if a  POST was used in the first
    request, a  POST must be used in the second request.

 308 Permanent Redirect

    This means that the resource is now permanently located at another
    URI, specified by the  Location: HTTP Response header. This has the
    same semantics as the  301 Moved Permanently HTTP response code,
    with the exception that the user agent must not change the HTTP
    method used: if a  POST was used in the first request, a  POST must
    be used in the second request.

Client error responses

 400 Bad Request

    The server cannot or will not process the request due to something
    that is perceived to be a client error (e.g., malformed request
    syntax, invalid request message framing, or deceptive request
    routing).

 401 Unauthorized

    Although the HTTP standard specifies "unauthorized", semantically
    this response means "unauthenticated". That is, the client must
    authenticate itself to get the requested response.

 402 Payment Required  Experimental 

    This response code is reserved for future use. The initial aim for
    creating this code was using it for digital payment systems, however
    this status code is used very rarely and no standard convention
    exists.

 403 Forbidden

    The client does not have access rights to the content; that is, it
    is unauthorized, so the server is refusing to give the requested
    resource. Unlike  401 Unauthorized , the client's identity is known
    to the server.

 404 Not Found

    The server cannot find the requested resource. In the browser, this
    means the URL is not recognized. In an API, this can also mean that
    the endpoint is valid but the resource itself does not exist.
    Servers may also send this response instead of  403 Forbidden to
    hide the existence of a resource from an unauthorized client. This
    response code is probably the most well known due to its frequent
    occurrence on the web.

 405 Method Not Allowed

    The request method is known by the server but is not supported by
    the target resource. For example, an API may not allow calling
     DELETE to remove a resource.

 406 Not Acceptable

    This response is sent when the web server, after performing
    server-driven content negotiation , doesn't find any content that
    conforms to the criteria given by the user agent.

 407 Proxy Authentication Required

    This is similar to  401 Unauthorized but authentication is needed to
    be done by a proxy.

 408 Request Timeout

    This response is sent on an idle connection by some servers, even
    without any previous request by the client. It means that the server
    would like to shut down this unused connection. This response is
    used much more since some browsers, like Chrome, Firefox 27+, or
    IE9, use HTTP pre-connection mechanisms to speed up surfing. Also
    note that some servers merely shut down the connection without
    sending this message.

 409 Conflict

    This response is sent when a request conflicts with the current
    state of the server.

 410 Gone

    This response is sent when the requested content has been
    permanently deleted from server, with no forwarding address. Clients
    are expected to remove their caches and links to the resource. The
    HTTP specification intends this status code to be used for
    "limited-time, promotional services". APIs should not feel compelled
    to indicate resources that have been deleted with this status code.

 411 Length Required

    Server rejected the request because the  Content-Length header field
    is not defined and the server requires it.

 412 Precondition Failed

    The client has indicated preconditions in its headers which the
    server does not meet.

 413 Payload Too Large

    Request entity is larger than limits defined by server. The server
    might close the connection or return an  Retry-After header field.

 414 URI Too Long

    The URI requested by the client is longer than the server is willing
    to interpret.

 415 Unsupported Media Type

    The media format of the requested data is not supported by the
    server, so the server is rejecting the request.

 416 Range Not Satisfiable

    The range specified by the  Range header field in the request cannot
    be fulfilled. It's possible that the range is outside the size of
    the target URI's data.

 417 Expectation Failed

    This response code means the expectation indicated by the  Expect
    request header field cannot be met by the server.

 418 I'm a teapot

    The server refuses the attempt to brew coffee with a teapot.

 421 Misdirected Request

    The request was directed at a server that is not able to produce a
    response. This can be sent by a server that is not configured to
    produce responses for the combination of scheme and authority that
    are included in the request URI.

 422 Unprocessable Content ( WebDAV )

    The request was well-formed but was unable to be followed due to
    semantic errors.

 423 Locked ( WebDAV )

    The resource that is being accessed is locked.

 424 Failed Dependency ( WebDAV )

    The request failed due to failure of a previous request.

 425 Too Early  Experimental 

    Indicates that the server is unwilling to risk processing a request
    that might be replayed.

 426 Upgrade Required

    The server refuses to perform the request using the current protocol
    but might be willing to do so after the client upgrades to a
    different protocol. The server sends an  Upgrade header in a 426
    response to indicate the required protocol(s).

 428 Precondition Required

    The origin server requires the request to be conditional. This
    response is intended to prevent the 'lost update' problem, where a
    client  GET s a resource's state, modifies it and  PUT s it back to
    the server, when meanwhile a third party has modified the state on
    the server, leading to a conflict.

 429 Too Many Requests

    The user has sent too many requests in a given amount of time ("rate
    limiting").

 431 Request Header Fields Too Large

    The server is unwilling to process the request because its header
    fields are too large. The request may be resubmitted after reducing
    the size of the request header fields.

 451 Unavailable For Legal Reasons

    The user agent requested a resource that cannot legally be provided,
    such as a web page censored by a government.

Server error responses

 500 Internal Server Error

    The server has encountered a situation it does not know how to
    handle.

 501 Not Implemented

    The request method is not supported by the server and cannot be
    handled. The only methods that servers are required to support (and
    therefore that must not return this code) are  GET and  HEAD .

 502 Bad Gateway

    This error response means that the server, while working as a
    gateway to get a response needed to handle the request, got an
    invalid response.

 503 Service Unavailable

    The server is not ready to handle the request. Common causes are a
    server that is down for maintenance or that is overloaded. Note that
    together with this response, a user-friendly page explaining the
    problem should be sent. This response should be used for temporary
    conditions and the  Retry-After HTTP header should, if possible,
    contain the estimated time before the recovery of the service. The
    webmaster must also take care about the caching-related headers that
    are sent along with this response, as these temporary condition
    responses should usually not be cached.

 504 Gateway Timeout

    This error response is given when the server is acting as a gateway
    and cannot get a response in time.

 505 HTTP Version Not Supported

    The HTTP version used in the request is not supported by the server.

 506 Variant Also Negotiates

    The server has an internal configuration error: the chosen variant
    resource is configured to engage in transparent content negotiation
    itself, and is therefore not a proper end point in the negotiation
    process.

 507 Insufficient Storage ( WebDAV )

    The method could not be performed on the resource because the server
    is unable to store the representation needed to successfully
    complete the request.

 508 Loop Detected ( WebDAV )

    The server detected an infinite loop while processing the request.

 510 Not Extended

    Further extensions to the request are required for the server to
    fulfill it.

 511 Network Authentication Required

    Indicates that the client needs to authenticate to gain network
    access.

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   List of HTTP status codes on Wikipedia
-   IANA official registry of HTTP status codes

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Nov 3, 2023 by MDN contributors .
