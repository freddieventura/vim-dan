In this article

-   Getting Started with SVG
-   Documentation
-   Tools
-   Examples

1.  SVG

2.  Tutorials

3.  Introducing SVG from scratch
    1.  Introduction
    2.  Getting started
    3.  Positions
    4.  Basic shapes
    5.  Paths
    6.  Fills and Strokes
    7.  Gradients in SVG
    8.  Patterns
    9.  Texts
    10. Basic transformations
    11. Clipping and masking
    12. Other content in SVG
    13. Filter effects
    14. SVG fonts
    15. SVG image element
    16. Tools for SVG
    17. SVG and CSS

4.  Reference

5.  Elements
    1.   <a>
    2.   <animate>
    3.   <animateMotion>
    4.   <animateTransform>
    5.   <circle>
    6.   <clipPath>
    7.   <cursor> Deprecated
    8.   <defs>
    9.   <desc>
    10.  <ellipse>
    11.  <feBlend>
    12.  <feColorMatrix>
    13.  <feComponentTransfer>
    14.  <feComposite>
    15.  <feConvolveMatrix>
    16.  <feDiffuseLighting>
    17.  <feDisplacementMap>
    18.  <feDistantLight>
    19.  <feDropShadow>
    20.  <feFlood>
    21.  <feFuncA>
    22.  <feFuncB>
    23.  <feFuncG>
    24.  <feFuncR>
    25.  <feGaussianBlur>
    26.  <feImage>
    27.  <feMerge>
    28.  <feMergeNode>
    29.  <feMorphology>
    30.  <feOffset>
    31.  <fePointLight>
    32.  <feSpecularLighting>
    33.  <feSpotLight>
    34.  <feTile>
    35.  <feTurbulence>
    36.  <filter>
    37.  <font-face-format> Deprecated
    38.  <font-face-name> Deprecated
    39.  <font-face-src> Deprecated
    40.  <font-face-uri> Deprecated
    41.  <font-face> Deprecated
    42.  <font> Deprecated
    43.  <foreignObject>
    44.  <g>
    45.  <glyph> Deprecated
    46.  <glyphRef> Deprecated
    47.  <hkern> Deprecated
    48.  <image>
    49.  <line>
    50.  <linearGradient>
    51.  <marker>
    52.  <mask>
    53.  <metadata>
    54.  <missing-glyph> Deprecated
    55.  <mpath>
    56.  <path>
    57.  <pattern>
    58.  <polygon>
    59.  <polyline>
    60.  <radialGradient>
    61.  <rect>
    62.  <script>
    63.  <set>
    64.  <stop>
    65.  <style>
    66.  <svg>
    67.  <switch>
    68.  <symbol>
    69.  <text>
    70.  <textPath>
    71.  <title> — the SVG accessible name element
    72.  <tref> Deprecated
    73.  <tspan>
    74.  <use>
    75.  <view>
    76.  <vkern> Deprecated

6.  Attributes
    1.   accent-height Deprecated
    2.   accumulate
    3.   additive
    4.   alignment-baseline
    5.   alphabetic Deprecated
    6.   amplitude
    7.   arabic-form Deprecated
    8.   ascent Deprecated
    9.   attributeName
    10.  attributeType Deprecated
    11.  azimuth
    12.  baseFrequency
    13.  baseline-shift
    14.  baseProfile Deprecated
    15.  bbox Deprecated
    16.  begin
    17.  bias
    18.  by
    19.  calcMode
    20.  cap-height Deprecated
    21.  class
    22.  clip Deprecated
    23.  clip-path
    24.  clip-rule
    25.  clipPathUnits
    26.  color
    27.  color-interpolation
    28.  color-interpolation-filters
    29.  color-profile Deprecated
    30.  cursor
    31.  cx
    32.  cy
    33.  d
    34.  data-*
    35.  decoding
    36.  descent Deprecated
    37.  diffuseConstant
    38.  direction
    39.  display
    40.  divisor
    41.  dominant-baseline
    42.  dur
    43.  dx
    44.  dy
    45.  edgeMode
    46.  elevation
    47.  enable-background Deprecated
    48.  end
    49.  exponent
    50.  fill
    51.  fill-opacity
    52.  fill-rule
    53.  filter
    54.  filterUnits
    55.  flood-color
    56.  flood-opacity
    57.  font-family
    58.  font-size
    59.  font-size-adjust
    60.  font-stretch
    61.  font-style
    62.  font-variant
    63.  font-weight
    64.  fr
    65.  from
    66.  fx
    67.  fy
    68.  g1 Deprecated
    69.  g2 Deprecated
    70.  glyph-name Deprecated
    71.  glyph-orientation-horizontal Deprecated
    72.  glyph-orientation-vertical Deprecated
    73.  gradientTransform
    74.  gradientUnits
    75.  hanging Deprecated
    76.  height
    77.  horiz-adv-x Deprecated
    78.  horiz-origin-x Deprecated
    79.  horiz-origin-y Deprecated
    80.  href
    81.  id
    82.  ideographic Deprecated
    83.  image-rendering
    84.  in
    85.  in2
    86.  intercept
    87.  k Deprecated
    88.  k1
    89.  k2
    90.  k3
    91.  k4
    92.  kernelMatrix
    93.  kernelUnitLength
    94.  kerning Deprecated
    95.  keyPoints
    96.  keySplines
    97.  keyTimes
    98.  lang
    99.  lengthAdjust
    100.  letter-spacing
    101.  lighting-color
    102.  limitingConeAngle
    103.  marker-end
    104.  marker-mid
    105.  marker-start
    106.  markerHeight
    107.  markerUnits
    108.  markerWidth
    109.  mask
    110.  maskContentUnits
    111.  maskUnits
    112.  mathematical Deprecated
    113.  max
    114.  media
    115.  method Experimental
    116.  min
    117.  mode
    118.  name Deprecated
    119.  numOctaves
    120.  onclick
    121.  opacity
    122.  operator
    123.  order
    124.  orient
    125.  orientation Deprecated
    126.  origin
    127.  overflow
    128.  overline-position
    129.  overline-thickness
    130.  paint-order
    131.  panose-1 Deprecated
    132.  path
    133.  pathLength
    134.  patternContentUnits
    135.  patternTransform
    136.  patternUnits
    137.  pointer-events
    138.  points
    139.  pointsAtX
    140.  pointsAtY
    141.  pointsAtZ
    142.  preserveAlpha
    143.  preserveAspectRatio
    144.  primitiveUnits
    145.  r
    146.  radius
    147.  refX
    148.  refY
    149.  repeatCount
    150.  repeatDur
    151.  requiredFeatures Deprecated
    152.  restart
    153.  result
    154.  rotate Experimental
    155.  rx
    156.  ry
    157.  scale
    158.  seed
    159.  shape-rendering
    160.  side Experimental
    161.  slope Deprecated
    162.  spacing
    163.  specularConstant
    164.  specularExponent
    165.  spreadMethod
    166.  startOffset
    167.  stdDeviation
    168.  stemh Deprecated
    169.  stemv Deprecated
    170.  stitchTiles
    171.  stop-color
    172.  stop-opacity
    173.  strikethrough-position
    174.  strikethrough-thickness
    175.  string Deprecated
    176.  stroke
    177.  stroke-dasharray
    178.  stroke-dashoffset
    179.  stroke-linecap
    180.  stroke-linejoin
    181.  stroke-miterlimit
    182.  stroke-opacity
    183.  stroke-width
    184.  style
    185.  surfaceScale
    186.  SVG attribute: crossorigin
    187.  SVG Conditional Processing Attributes
    188.  SVG Core Attributes
    189.  SVG Event Attributes
    190.  SVG Presentation Attributes
    191.  SVG Styling Attributes
    192.  systemLanguage
    193.  tabindex
    194.  tableValues
    195.  target
    196.  targetX
    197.  targetY
    198.  text-anchor
    199.  text-decoration
    200.  text-rendering
    201.  textLength
    202.  to
    203.  transform
    204.  transform-origin
    205.  type
    206.  u1 Deprecated
    207.  u2 Deprecated
    208.  underline-position
    209.  underline-thickness
    210.  unicode Deprecated
    211.  unicode-bidi
    212.  unicode-range Deprecated
    213.  units-per-em Deprecated
    214.  v-alphabetic Deprecated
    215.  v-hanging Deprecated
    216.  v-ideographic Deprecated
    217.  v-mathematical Deprecated
    218.  values
    219.  vector-effect
    220.  version Deprecated
    221.  vert-adv-y Deprecated
    222.  vert-origin-x Deprecated
    223.  vert-origin-y Deprecated
    224.  viewBox
    225.  visibility
    226.  width
    227.  widths Deprecated
    228.  word-spacing
    229.  writing-mode
    230.  x
    231.  x-height Deprecated
    232.  x1
    233.  x2
    234.  xChannelSelector
    235.  xlink:arcrole Deprecated
    236.  xlink:href Deprecated
    237.  xlink:show Deprecated
    238.  xlink:title Deprecated
    239.  xlink:type Deprecated
    240.  xml:base Deprecated
    241.  xml:lang Deprecated
    242.  xml:space Deprecated
    243.  y
    244.  y1
    245.  y2
    246.  yChannelSelector
    247.  z
    248.  zoomAndPan Deprecated

7.  Guides

8.  1.  Applying SVG effects to HTML content
    2.  Content type
    3.  Namespaces crash course
    4.  SVG animation with SMIL
    5.  SVG as an Image
# Applying SVG effects to HTML content #

Modern browsers support using SVG within CSS styles to apply graphical
effects to HTML content.

You may specify SVG in styles either within the same document or an
external style sheet. There are 3 properties you can use:  mask ,
 clip-path , and  filter .

Note: References to SVG in external files must be to the same origin as
the referencing document.

Using embedded SVG

To apply an SVG effect using CSS styles, you first need to create the
CSS style that references the SVG to apply.

html

    <style>
      p {
        mask: url(#my-mask);
      }
    </style>

In the above example, all paragraphs are masked by an SVG  <mask> with
the ID  my-mask .

Example: Masking

For example, you can make a gradient mask for HTML content using SVG and
CSS code similar to the following, inside your HTML document:

html

    <svg height="0">
      <mask id="mask-1">
        <linearGradient id="gradient-1" y2="1">
          <stop stop-color="white" offset="0" />
          <stop stop-opacity="0" offset="1" />
        </linearGradient>
        <circle cx="0.25" cy="0.25" r="0.25" id="circle" fill="white" />
        <rect x="0.5" y="0.2" width="300" height="100" fill="url(#gradient-1)" />
      </mask>
    </svg>

css

    .target {
      mask: url(#mask-1);
    }
    p {
      width: 300px;
      border: 1px solid #000;
      display: inline-block;
    }

Note that in the CSS, the mask is specified using a URL to the ID
 #mask-1 , which is the ID of the SVG mask specified below it.
Everything else specifies details about the gradient mask itself.

Applying the SVG effect to HTML is accomplished by assigning the  target
class defined above to an element, like this:

html

    <p class="target" style="background:lime;">
      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.
    </p>
    <p>
      Lorem ipsum dolor sit amet, consectetur adipisicing
      <em class="target"
        >elit, sed do eiusmod tempor incididunt ut labore et dolore magna
        aliqua.</em
      >
      Ut enim ad minim veniam.
    </p>

The above example would be rendered with the mask applied to it.

Example: Clipping

This example demonstrates using SVG to clip HTML content. Notice that
even the clickable areas for links are clipped.

html

    <p class="target" style="background:lime;">
      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.
    </p>
    <p>
      Lorem ipsum dolor sit amet, consectetur adipisicing
      <em class="target"
        >elit, sed do eiusmod tempor incididunt ut labore et dolore magna
        aliqua.</em
      >
      Ut enim ad minim veniam.
    </p>

    <button onclick="toggleRadius()">Toggle radius</button>

    <svg height="0">
      <clipPath id="clipping-path-1" clipPathUnits="objectBoundingBox">
        <circle cx="0.25" cy="0.25" r="0.25" id="circle" />
        <rect x="0.5" y="0.2" width="0.5" height="0.8" />
      </clipPath>
    </svg>

css

    .target {
      clip-path: url(#clipping-path-1);
    }
    p {
      width: 300px;
      border: 1px solid #000;
      display: inline-block;
    }

This establishes a clipping area made of a circle and rectangle, assigns
it the ID  #clipping-path-1 , then references it in the CSS. The clip
path can be assigned to any element with the  target class.

You can make changes to the SVG in real time and see them immediately
affect the rendering of the HTML. For example, you can resize the circle
in the clip path established above:

js

    function toggleRadius() {
      const circle = document.getElementById("circle");
      circle.r.baseVal.value = 0.4 - circle.r.baseVal.value;
    }

Example: Filtering

This demonstrates applying a filter to HTML content using SVG. It
establishes several filters, which are applied with CSS to three
elements in both the normal and mouse hover states.

html

    <p class="target" style="background: lime;">
      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.
    </p>
    <pre class="target">lorem</pre>
    <p>
      Lorem ipsum dolor sit amet, consectetur adipisicing
      <em class="target"
        >elit, sed do eiusmod tempor incididunt ut labore et dolore magna
        aliqua.</em
      >
      Ut enim ad minim veniam.
    </p>

Any SVG filter can be applied this way. For example, to apply a blur
effect, you might use:

html

    <svg height="0">
      <filter id="f1">
        <feGaussianBlur stdDeviation="3" />
      </filter>
    </svg>

You could also apply a color matrix:

html

    <svg height="0">
      <filter id="f2">
        <feColorMatrix
          values="0.3333 0.3333 0.3333 0 0
                  0.3333 0.3333 0.3333 0 0
                  0.3333 0.3333 0.3333 0 0
                  0      0      0      1 0" />
      </filter>
    </svg>

And some more filters:

html

    <svg height="0">
      <filter id="f3">
        <feConvolveMatrix
          filterRes="100 100"
          style="color-interpolation-filters:sRGB"
          order="3"
          kernelMatrix="0 -1 0   -1 4 -1   0 -1 0"
          preserveAlpha="true" />
      </filter>
      <filter id="f4">
        <feSpecularLighting
          surfaceScale="5"
          specularConstant="1"
          specularExponent="10"
          lighting-color="white">
          <fePointLight x="-5000" y="-10000" z="20000" />
        </feSpecularLighting>
      </filter>
      <filter id="f5">
        <feColorMatrix
          values="1 0 0 0 0
                               0 1 0 0 0
                               0 0 1 0 0
                               0 1 0 0 0"
          style="color-interpolation-filters:sRGB" />
      </filter>
    </svg>

The five filters are applied using the following CSS:

css

    p.target {
      filter: url(#f3);
    }
    p.target:hover {
      filter: url(#f5);
    }
    em.target {
      filter: url(#f1);
    }
    em.target:hover {
      filter: url(#f4);
    }
    pre.target {
      filter: url(#f2);
    }
    pre.target:hover {
      filter: url(#f3);
    }

Example: Blurred Text

In order to blur text, Webkit based browsers have a (prefixed) CSS
filter called blur (see also CSS filter ). You can achieve the same
effect using SVG filters.

html

    <p class="blur">Time to clean my glasses</p>
    <svg height="0">
      <defs>
        <filter id="wherearemyglasses" x="0" y="0">
          <feGaussianBlur in="SourceGraphic" stdDeviation="1" />
        </filter>
      </defs>
    </svg>

You can apply the SVG and the CSS filter in the same class:

css

    .blur {
      filter: url(#wherearemyglasses);
    }

Blurring is computation heavy, so ensure to use it sparingly, especially
in elements that get scrolled or animated.

Example: Text Effects

SVG effects can also be used to add a more dynamic and flexible approach
to adding text compared to plain HTML text.

By creating the text using SVG elements combined with HTML you can make
a variety of different text effects. You can rotate the text:

html

    <svg height="60" width="200">
      <text x="0" y="15" fill="blue" transform="rotate(30 20,50)">
        Example text
      </text>
    </svg>

Using external references

SVG used for clipping, masking, and filtering can be loaded from an
external source, as long as that source comes from the same origin as
the HTML document to which it's applied.

For example, if your CSS is in a file named  default.css , it can look
like this:

css

    .target {
      clip-path: url(resources.svg#c1);
    }

The SVG is then imported from a file named  resources.svg , using the
clip path with the ID  c1 .

See also

-   SVG
-    clip-path property
-    mask property
-   Shapes in clipping and masking – and how to use them

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# accent-height #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  accent-height attribute defines the distance from the origin to the
top of accent characters, measured by a distance within the font
coordinate system.

You can use this attribute with the following SVG elements:

-    <font-face>

font-face

For  <font-face> ,  accent-height defines the distance from the origin
to the top of accent characters, measured by a distance within the font
coordinate system.

  --------------- --------------------
  Value           <number>
  Default value   Value of   ascent 
  Animatable      No
  --------------- --------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementAccentHeightAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     cap-height 
-     x-height 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# accumulate #

The  accumulate attribute controls whether or not an animation is
cumulative.

It is frequently useful for repeated animations to build upon the
previous results, accumulating with each iteration. This attribute said
to the animation if the value is added to the previous animated
attribute's value on each iteration.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>

Usage notes

  --------------- --------------
  Value            none |  sum
  Default value    none
  Animatable      No
  --------------- --------------

 sum

    Specifies that each repeat iteration after the first builds upon the
    last value of the previous iteration.

 none

    Specifies that repeat iterations are not cumulative.

This attribute is ignored if the target attribute value does not support
addition, or if the animation element does not repeat.

This attribute will be ignored if the animation function is specified
with only the   to  attribute.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # AccumulateAttribute

  -----------------------------------------------------------------------

See also

-   SMIL Animation specification

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# additive #

The  additive attribute controls whether or not an animation is
additive.

It is frequently useful to define animation as an offset or delta to an
attribute's value, rather than as absolute values.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>

Usage notes

  --------------- -----------------
  Value            replace |  sum
  Default value    replace
  Animatable      No
  --------------- -----------------

sum

    Specifies that the animation will add to the underlying value of the
    attribute and other lower priority animations.

replace

    Specifies that the animation will override the underlying value of
    the attribute and other lower priority animations. This is the
    default, however the behavior is also affected by the animation
    value attributes   by  and   to  , as described in SMIL Animation:
    How from, to and by attributes affect additive behavior .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # AdditiveAttribute

  -----------------------------------------------------------------------

See also

-   SMIL Animation specification

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# alignment-baseline #

The  alignment-baseline attribute specifies how an object is aligned
with respect to its parent. This property specifies which baseline of
this element is to be aligned with the corresponding baseline of the
parent. For example, this allows alphabetic baselines in Roman text to
stay aligned across font size changes. It defaults to the baseline with
the same name as the computed value of the  alignment-baseline property.

Note: As a presentation attribute  alignment-baseline can be used as a
CSS property.

You can use this attribute with the following SVG elements:

-    <tspan>
-    <tref>
-    <textPath>

Usage notes

  --------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Value            auto |  baseline |  before-edge |  text-before-edge |  middle |  central |  after-edge |  text-after-edge |  ideographic |  alphabetic |  hanging |  mathematical |  top |  center |  bottom
  Default value    auto
  Animatable      Yes
  --------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 auto  Deprecated 

    The value is the dominant-baseline of the script to which the
    character belongs - i.e., use the dominant-baseline of the parent.

 baseline

    Uses the dominant baseline choice of the parent. Matches the box's
    corresponding baseline to that of its parent.

 before-edge  Deprecated 

    The alignment-point of the object being aligned is aligned with the
    "before-edge" baseline of the parent text content element.

 text-bottom

    Matches the bottom of the box to the top of the parent's content
    area.

 text-before-edge

    The alignment-point of the object being aligned is aligned with the
    "text-before-edge" baseline of the parent text content element.

    Note: This keyword may be mapped to  text-top .

 middle

    Aligns the vertical midpoint of the box with the baseline of the
    parent box plus half the x-height of the parent.

 central

    Matches the box's central baseline to the central baseline of its
    parent.

 after-edge  Deprecated 

    The alignment-point of the object being aligned is aligned with the
    "after-edge" baseline of the parent text content element.

 text-top

    Matches the top of the box to the top of the parent's content area.

 text-after-edge

    The alignment-point of the object being aligned is aligned with the
    "text-after-edge" baseline of the parent text content element.

    Note: This keyword may be mapped to  text-bottom .

 ideographic

    Matches the box's ideographic character face under-side baseline to
    that of its parent.

 alphabetic

    Matches the box's alphabetic baseline to that of its parent.

 hanging

    The alignment-point of the object being aligned is aligned with the
    "hanging" baseline of the parent text content element.

 mathematical

    Matches the box's mathematical baseline to that of its parent.

 top

    Aligns the top of the aligned subtree with the top of the line box.

 center

    Aligns the center of the aligned subtree with the center of the line
    box.

 bottom

    Aligns the bottom of the aligned subtree with the bottom of the line
    box.

SVG 2 introduces some changes to the definition of this property. In
particular: the values  auto ,  before-edge , and  after-edge have been
removed. For backwards compatibility,  text-before-edge may be mapped to
 text-top and  text-after-edge to  text-bottom . Neither
 text-before-edge nor  text-after-edge should be used with the
 vertical-align property.

Example

html

    <svg
      width="300"
      height="120"
      viewBox="0 0 300 120"
      xmlns="http://www.w3.org/2000/svg">
      <!-- Materialization of anchors -->
      <path
        d="M60,10 L60,110
                  M30,10 L300,10
                  M30,65 L300,65
                  M30,110 L300,110
                  "
        stroke="grey" />

      <!-- Anchors in action -->
      <text alignment-baseline="hanging" x="60" y="10">A hanging</text>

      <text alignment-baseline="middle" x="60" y="65">A middle</text>

      <text alignment-baseline="baseline" x="60" y="110">A baseline</text>

      <!-- Materialization of anchors -->
      <circle cx="60" cy="10" r="3" fill="red" />
      <circle cx="60" cy="65" r="3" fill="red" />
      <circle cx="60" cy="110" r="3" fill="red" />

      <style>
        <![CDATA[
          text{
            font: bold 36px Verdana, Helvetica, Arial, sans-serif;
          }
        ]]>
      </style>
    </svg>

For object alignment in other elements (such as  <text> ), see
  dominant-baseline  .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Inline Layout Module Level 3
  # alignment-baseline-property

  Scalable Vector Graphics (SVG) 2
  # AlignmentBaselineProperty
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS alignment-baseline

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# alphabetic #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  alphabetic attribute defines the lower baseline of a font. It has
the same syntax and semantics as the  baseline descriptor within an
 @font-face .

For horizontally oriented glyph layouts, it indicates the alignment
coordinate for glyphs to achieve alphabetic baseline alignment. The
value is an offset in the font coordinate system.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- -----------
  Value            <number>
  Default value    0
  Animatable      No
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementAlphabeticAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     v-alphabetic 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# amplitude #

The  amplitude attribute controls the amplitude of the gamma function of
a component transfer element when its   type  attribute is  gamma .

You can use this attribute with the following SVG elements:

-    <feFuncA>
-    <feFuncB>
-    <feFuncG>
-    <feFuncR>

Usage notes

  --------------- ----------
  Value           <number>
  Default value    1
  Animatable      Yes
  --------------- ----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fecomponenttransfer-amplitude

  -----------------------------------------------------------------------

See also

-    <feComponentTransfer>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 3, 2023 by MDN contributors .
# arabic-form #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  arabic-form attribute indicates which of the four possible forms an
Arabic glyph represents.

You can use this attribute with the following SVG elements:

-    <glyph>

Context notes

  --------------- --------------------------------------------
  Value            initial |  medial |  terminal |  isolated
  Default value    isolated
  Animatable      No
  --------------- --------------------------------------------

 initial

    This value indicates that the glyph represents the initial form.

 medial

    This value indicates that the glyph represents the medial form.

 terminal

    This value indicates that the glyph represents the terminal form.

 isolated

    This value indicates that the glyph represents the isolated form.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # GlyphElementArabicFormAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Wikipedia page on the Arabic alphabet

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# ascent #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  ascent attribute defines the maximum unaccented height of the font
within the font coordinate system.

If the attribute is not specified, the effect is as if the attribute
were set to the difference between the   units-per-em  value and the
  vert-origin-y  value for the corresponding font.

You can use this attribute with the following SVG elements:

-    <font-face>

font-face

For  <font-face> ,  ascent defines the maximum unaccented height of the
font within the font coordinate system.

  --------------- ---------------------------------------------------------
  Value           <number>
  Default value   Difference between   units-per-em  and   vert-origin-y 
  Animatable      No
  --------------- ---------------------------------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementAscentAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# attributeName #

The  attributeName attribute indicates the name of the CSS property or
attribute of the target element that is going to be changed during an
animation.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateTransform>
-    <set>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 250 250" xmlns="http://www.w3.org/2000/svg">
      <rect x="50" y="50" width="100" height="100">
        <animate
          attributeType="XML"
          attributeName="y"
          from="0"
          to="50"
          dur="5s"
          repeatCount="indefinite" />
      </rect>
    </svg>

Usage notes

  --------------- ---------
  Value            <name>
  Default value   None
  Animatable      No
  --------------- ---------

 <name>

    This value indicates the name of the CSS property or attribute of
    the target element to be animated.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # AttributeNameAttribute

  -----------------------------------------------------------------------

See also

-   SMIL Animation specification

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# attributeType #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  attributeType attribute specifies the namespace in which the target
attribute and its associated values are defined.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateTransform>
-    <set>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 250 250" xmlns="http://www.w3.org/2000/svg">
      <rect x="50" y="50" width="100" height="100">
        <animate
          attributeType="XML"
          attributeName="y"
          from="0"
          to="50"
          dur="5s"
          repeatCount="indefinite" />
      </rect>
    </svg>

Usage notes

  --------------- ---------------------
  Value            CSS |  XML |  auto
  Default value    auto
  Animatable      No
  --------------- ---------------------

 CSS

    This value specifies that the value of   attributeName  is the name
    of a CSS property defined as animatable.

 XML

    This value specifies that the value of   attributeName  is the name
    of an XML attribute defined as animatable in the default XML
    namespace for the target element.

 auto

    This value specifies that the implementation should match the
      attributeName  to an attribute for the target element. User agents
    first search through the list of CSS properties for a matching
    property name, and if none is found, search the default XML
    namespace for the element.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # AttributeTypeAttribute

  -----------------------------------------------------------------------

See also

-   SMIL Animation specification

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# azimuth #

The  azimuth attribute specifies the direction angle for the light
source on the XY plane (clockwise), in degrees from the x axis.

You can use this attribute with the following SVG elements:

-    <feDistantLight>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 440 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="distantLight1">
        <feDiffuseLighting>
          <feDistantLight azimuth="0" />
        </feDiffuseLighting>
      </filter>
      <filter id="distantLight2">
        <feDiffuseLighting>
          <feDistantLight azimuth="240" />
        </feDiffuseLighting>
      </filter>

      <circle cx="100" cy="100" r="80" style="filter: url(#distantLight1);" />
      <circle
        cx="100"
        cy="100"
        r="80"
        style="filter: url(#distantLight2); transform: translateX(240px);" />
    </svg>

Usage notes

  --------------- -----------
  Value            <number>
  Default value   0
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fedistantlight-azimuth

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# baseFrequency #

The  baseFrequency attribute represents the base frequency parameter for
the noise function of the  <feTurbulence> filter primitive.

You can use this attribute with the following SVG elements:

-    <feTurbulence>

Example

Example 1

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="noise1" x="0" y="0" width="100%" height="100%">
        <feTurbulence baseFrequency="0.025" />
      </filter>
      <filter id="noise2" x="0" y="0" width="100%" height="100%">
        <feTurbulence baseFrequency="0.05" />
      </filter>

      <rect x="0" y="0" width="200" height="200" style="filter: url(#noise1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#noise2); transform: translateX(220px);" />
    </svg>

Example 2

html

    <svg
      width="200"
      height="200"
      viewBox="0 0 220 220"
      xmlns="http://www.w3.org/2000/svg">
      <filter id="displacementFilter">
        <feTurbulence
          type="turbulence"
          baseFrequency="0.05"
          numOctaves="2"
          result="turbulence" />
        <feDisplacementMap
          in2="turbulence"
          in="SourceGraphic"
          scale="50"
          xChannelSelector="R"
          yChannelSelector="G" />
      </filter>

      <circle cx="100" cy="100" r="100" style="filter: url(#displacementFilter)" />
    </svg>

Usage notes

  --------------- --------------------------
  Value           <number-optional-number>
  Default value    0
  Animatable      Yes
  --------------- --------------------------

 <number-optional-number>

    If two numbers are provided, the first one represents the base
    frequency in the horizontal direction and the second one the base
    frequency in the vertical direction. If one number is provided, then
    that value is used for both x and y.

    Negative values are forbidden.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-feturbulence-basefrequency

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# baseline-shift #

The  baseline-shift attribute allows repositioning of the
dominant-baseline relative to the dominant-baseline of the parent text
content element. The shifted object might be a sub- or superscript.

Note: As a presentation attribute  baseline-shift can be used as a CSS
property.

Note: This property is going to be deprecated and authors are advised to
use  vertical-align instead.

You can use this attribute with the following SVG elements:

-    <textPath>
-    <tref>
-    <tspan>

Usage notes

  --------------- --------------------------------------
  Value            <length-percentage> |  sub |  super
  Default value    0
  Animatable      Yes
  --------------- --------------------------------------

 sub

    The dominant-baseline is shifted to the default position for
    subscripts.

 super

    The dominant-baseline is shifted to the default position for
    superscripts.

 <length-percentage>

    A length value raises (positive value) or lowers (negative value)
    the dominant-baseline of the parent text content element by the
    specified length.

    A percentage value raises (positive value) or lowers (negative
    value) the dominant-baseline of the parent text content element by
    the specified percentage of the   line-height  .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Inline Layout Module Level 3
  # baseline-shift-property

  Scalable Vector Graphics (SVG) 2
  # BaselineShiftProperty
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# baseProfile #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  baseProfile attribute describes the minimum SVG language profile
that the author believes is necessary to correctly render the content.
The attribute does not specify any processing restrictions; It can be
considered metadata.

For example, the value of the attribute could be used by an authoring
tool to warn the user when they are modifying the document beyond the
scope of the specified base profile.

Each SVG profile should define the text that is appropriate for this
attribute.

You can use this attribute with the following SVG elements:

-    <svg>

Context notes

  --------------- --------------
  Value           Profile name
  Default value    none
  Animatable      No
  --------------- --------------

Example

svg

    <svg width="120" height="120" version="1.1"
     xmlns="http://www.w3.org/2000/svg" baseProfile="full">

      ...

    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # SVGElementBaseProfileAttribute

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# bbox #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  bbox attribute defines the maximal bounding box of a font.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- -----------
  Value            <string>
  Default value   None
  Animatable      No
  --------------- -----------

 <string>

    A comma-separated list of exactly four numbers specifying, in order,
    the lower left x, lower left y, upper right x, and upper right y of
    the bounding box for the complete font.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementBboxAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# begin #

The  begin attribute defines when an animation should begin.

The attribute value is a semicolon separated list of values. The
interpretation of a list of start times is detailed in the SMIL
specification in "Evaluation of begin and end time lists" . Each
individual value can be one of the following:  <offset-value> ,
 <syncbase-value> ,  <event-value> ,  <repeat-value> ,
 <accessKey-value> ,  <wallclock-sync-value> or the keyword  indefinite
.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <set>

animate, animateMotion, animateTransform, set

For  <animate> ,  <animateMotion> ,  <animateTransform> , and  <set> ,
 begin defines when the element should begin, i.e. become active.

  --------------- ---------------------
  Value            <begin-value-list>
  Default value    0s
  Animatable      No
  --------------- ---------------------

The  <begin-value-list> is a semicolon-separated list of values. Each
value can be one of the following:

 <offset-value>

    This value defines a clock-value that represents a point in time
    relative to the beginning of the SVG document (usually the  load or
     DOMContentLoaded event). Negative values are valid.

 <syncbase-value>

    This value defines a syncbase and an optional offset from that
    syncbase . The element's animation start time is defined relative to
    the begin or active end of another animation.

    A valid syncbase-value consists of an ID reference to another
    animation element followed by a dot and either  begin or  end to
    identify whether to synchronize with the beginning or active end of
    the referenced animation element. An optional offset value as
    defined in  <offset-value> can be appended.

 <event-value>

    This value defines an event and an optional offset that determines
    the time at which the element's animation should begin. The
    animation start time is defined relative to the time that the
    specified event is fired.

    A valid event-value consists of an element ID followed by a dot and
    one of the supported events for that element. All valid events (not
    necessarily supported by all elements) are defined by the DOM and
    HTML specifications. Those are:

    -    focus
    -    blur
    -    focusin
    -    focusout
    -    DOMActivate
    -    auxclick
    -    click
    -    dblclick
    -    mousedown
    -    mouseenter
    -    mouseleave
    -    mousemove
    -    mouseout
    -    mouseover
    -    mouseup
    -    wheel
    -    beforeinput
    -    input
    -    keydown
    -    keyup
    -    compositionstart
    -    compositionupdate
    -    compositionend
    -    load
    -    unload
    -    abort
    -    error
    -    select
    -    resize
    -    scroll
    -    beginEvent
    -    endEvent
    -    repeatEvent

    An optional offset value as defined in  <offset-value> can be
    appended.

 <repeat-value>

    This value defines a qualified repeat event. The element animation
    start time is defined relative to the time that the repeat event is
    raised with the specified iteration value.

    A valid repeat value consists of an element ID followed by a dot and
    the function  repeat() with an integer value specifying the number
    of repetitions as parameter. An optional offset value as defined in
     <offset-value> can be appended.

 <accessKey-value>

    This value defines an access key that should trigger the animation.
    The element animation will begin when the user presses the specified
    key.

    A valid accessKey-value consists of the function  accessKey() with
    the character to be input as parameter. An optional offset value as
    defined in  <offset-value> can be appended.

 <wallclock-sync-value>

    This value defines the animation start time as a real-world clock
    time.

    A valid wallclock-sync-value consists of the function  wallclock()
    with a time value as parameter. The time syntax is based upon the
    syntax defined in ISO 8601 .

 indefinite

    The begin of the animation will be determined by a  beginElement()
    method call or a hyperlink targeted to the element.

Examples

Offset example

html

    <svg
      width="120"
      height="120"
      viewBox="0 0 120 120"
      xmlns="http://www.w3.org/2000/svg"
      version="1.1">
      <!-- animated rectangles -->
      <rect x="10" y="35" height="15" width="0">
        <animate
          attributeType="XML"
          attributeName="width"
          to="100"
          begin="0s"
          dur="8s"
          fill="freeze" />
      </rect>

      <rect x="35" y="60" height="15" width="0">
        <animate
          attributeType="XML"
          attributeName="width"
          to="75"
          begin="2s"
          dur="6s"
          fill="freeze" />
      </rect>

      <rect x="60" y="85" height="15" width="0">
        <animate
          attributeType="XML"
          attributeName="width"
          to="50"
          begin="4s"
          dur="4s"
          fill="freeze" />
      </rect>

      <!-- grid -->
      <text x="10" y="20" text-anchor="middle">0s</text>
      <line x1="10" y1="25" x2="10" y2="105" stroke="grey" stroke-width=".5" />
      <text x="35" y="20" text-anchor="middle">2s</text>
      <line x1="35" y1="25" x2="35" y2="105" stroke="grey" stroke-width=".5" />
      <text x="60" y="20" text-anchor="middle">4s</text>
      <line x1="60" y1="25" x2="60" y2="105" stroke="grey" stroke-width=".5" />
      <text x="85" y="20" text-anchor="middle">6s</text>
      <line x1="85" y1="25" x2="85" y2="105" stroke="grey" stroke-width=".5" />
      <text x="110" y="20" text-anchor="middle">8s</text>
      <line x1="110" y1="25" x2="110" y2="105" stroke="grey" stroke-width=".5" />

      <line x1="10" y1="30" x2="110" y2="30" stroke="grey" stroke-width=".5" />
      <line x1="10" y1="105" x2="110" y2="105" stroke="grey" stroke-width=".5" />
    </svg>

begin-1-offset.svg

Syncbase example

html

    <svg
      width="120"
      height="120"
      viewBox="0 0 120 120"
      xmlns="http://www.w3.org/2000/svg"
      version="1.1"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <!-- animated rectangles -->
      <rect x="10" y="35" height="15" width="0">
        <animate
          attributeType="XML"
          attributeName="width"
          to="50"
          id="first"
          begin="0s;third.end"
          dur="4s" />
      </rect>

      <rect x="60" y="60" height="15" width="0">
        <animate
          attributeType="XML"
          attributeName="width"
          to="25"
          id="second"
          begin="first.end"
          dur="2s" />
      </rect>

      <rect x="85" y="85" height="15" width="0">
        <animate
          attributeType="XML"
          attributeName="width"
          to="25"
          id="third"
          begin="second.end"
          dur="2s" />
      </rect>

      <!-- grid -->
      <text x="10" y="20" text-anchor="middle">0s</text>
      <line x1="10" y1="25" x2="10" y2="105" stroke="grey" stroke-width=".5" />
      <text x="35" y="20" text-anchor="middle">2s</text>
      <line x1="35" y1="25" x2="35" y2="105" stroke="grey" stroke-width=".5" />
      <text x="60" y="20" text-anchor="middle">4s</text>
      <line x1="60" y1="25" x2="60" y2="105" stroke="grey" stroke-width=".5" />
      <text x="85" y="20" text-anchor="middle">6s</text>
      <line x1="85" y1="25" x2="85" y2="105" stroke="grey" stroke-width=".5" />
      <text x="110" y="20" text-anchor="middle">8s</text>
      <line x1="110" y1="25" x2="110" y2="105" stroke="grey" stroke-width=".5" />

      <line x1="10" y1="30" x2="110" y2="30" stroke="grey" stroke-width=".5" />
      <line x1="10" y1="105" x2="110" y2="105" stroke="grey" stroke-width=".5" />
    </svg>

begin-2-syncbase.svg

Event example

html

    <svg
      width="120"
      height="120"
      viewBox="0 0 120 120"
      xmlns="http://www.w3.org/2000/svg"
      version="1.1"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <!-- animated rectangle -->
      <rect x="10" y="35" height="15" width="0">
        <animate
          attributeType="XML"
          attributeName="width"
          from="0"
          to="100"
          begin="startButton.click"
          dur="8s"
          fill="freeze" />
      </rect>

      <!-- trigger -->
      <rect
        id="startButton"
        style="cursor:pointer;"
        x="19.5"
        y="62.5"
        rx="5"
        height="25"
        width="80"
        fill="#EFEFEF"
        stroke="black"
        stroke-width="1" />

      <text x="60" y="80" text-anchor="middle" style="pointer-events:none;">
        Click me.
      </text>

      <!-- grid -->
      <text x="10" y="20" text-anchor="middle">0s</text>
      <line x1="10" y1="25" x2="10" y2="55" stroke="grey" stroke-width=".5" />
      <text x="35" y="20" text-anchor="middle">2s</text>
      <line x1="35" y1="25" x2="35" y2="55" stroke="grey" stroke-width=".5" />
      <text x="60" y="20" text-anchor="middle">4s</text>
      <line x1="60" y1="25" x2="60" y2="55" stroke="grey" stroke-width=".5" />
      <text x="85" y="20" text-anchor="middle">6s</text>
      <line x1="85" y1="25" x2="85" y2="55" stroke="grey" stroke-width=".5" />
      <text x="110" y="20" text-anchor="middle">8s</text>
      <line x1="110" y1="25" x2="110" y2="55" stroke="grey" stroke-width=".5" />

      <line x1="10" y1="30" x2="110" y2="30" stroke="grey" stroke-width=".5" />
      <line x1="10" y1="55" x2="110" y2="55" stroke="grey" stroke-width=".5" />
    </svg>

begin-3-event.svg

Repeat example

html

    <svg
      width="120"
      height="120"
      viewBox="0 0 120 120"
      xmlns="http://www.w3.org/2000/svg"
      version="1.1"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <!-- animated rectangle -->
      <rect x="10" y="35" height="15" width="0">
        <animate
          attributeType="XML"
          attributeName="width"
          from="0"
          to="100"
          id="myLoop"
          begin="0s;myLoop.end"
          dur="4s"
          repeatCount="3" />

        <set
          attributeType="CSS"
          attributeName="fill"
          to="green"
          begin="myLoop.begin" />

        <set
          attributeType="CSS"
          attributeName="fill"
          to="gold"
          begin="myLoop.repeat(1)" />

        <set
          attributeType="CSS"
          attributeName="fill"
          to="red"
          begin="myLoop.repeat(2)" />
      </rect>

      <!-- grid -->
      <text x="10" y="20" text-anchor="middle">0s</text>
      <line x1="10" y1="25" x2="10" y2="55" stroke="grey" stroke-width=".5" />
      <text x="35" y="20" text-anchor="middle">1s</text>
      <line x1="35" y1="25" x2="35" y2="55" stroke="grey" stroke-width=".5" />
      <text x="60" y="20" text-anchor="middle">2s</text>
      <line x1="60" y1="25" x2="60" y2="55" stroke="grey" stroke-width=".5" />
      <text x="85" y="20" text-anchor="middle">3s</text>
      <line x1="85" y1="25" x2="85" y2="55" stroke="grey" stroke-width=".5" />
      <text x="110" y="20" text-anchor="middle">4s</text>
      <line x1="110" y1="25" x2="110" y2="55" stroke="grey" stroke-width=".5" />

      <line x1="10" y1="30" x2="110" y2="30" stroke="grey" stroke-width=".5" />
      <line x1="10" y1="55" x2="110" y2="55" stroke="grey" stroke-width=".5" />
    </svg>

begin-4-repeat.svg

Accesskey example

html

    <svg
      width="120"
      height="120"
      viewBox="0 0 120 120"
      xmlns="http://www.w3.org/2000/svg"
      version="1.1"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <!-- animated rectangles -->
      <rect x="10" y="35" height="15" width="0">
        <animate
          attributeType="XML"
          attributeName="width"
          from="0"
          to="100"
          begin="accessKey(s)"
          dur="8s"
          fill="freeze" />
      </rect>

      <!-- trigger -->
      <text x="60" y="80" text-anchor="middle" style="pointer-events:none;">
        Hit the "s" key
      </text>

      <!-- grid -->
      <text x="10" y="20" text-anchor="middle">0s</text>
      <line x1="10" y1="25" x2="10" y2="55" stroke="grey" stroke-width=".5" />
      <text x="35" y="20" text-anchor="middle">2s</text>
      <line x1="35" y1="25" x2="35" y2="55" stroke="grey" stroke-width=".5" />
      <text x="60" y="20" text-anchor="middle">4s</text>
      <line x1="60" y1="25" x2="60" y2="55" stroke="grey" stroke-width=".5" />
      <text x="85" y="20" text-anchor="middle">6s</text>
      <line x1="85" y1="25" x2="85" y2="55" stroke="grey" stroke-width=".5" />
      <text x="110" y="20" text-anchor="middle">8s</text>
      <line x1="110" y1="25" x2="110" y2="55" stroke="grey" stroke-width=".5" />

      <line x1="10" y1="30" x2="110" y2="30" stroke="grey" stroke-width=".5" />
      <line x1="10" y1="55" x2="110" y2="55" stroke="grey" stroke-width=".5" />
    </svg>

This example is embedded in an iFrame. If you want to activate the key
events, you have to click on it first.

begin-5-accesskey.svg

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # BeginAttribute

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 8, 2024 by MDN contributors .
# bias #

The  bias attribute shifts the range of the filter. After applying the
  kernelMatrix  of the  <feConvolveMatrix> element to the input image to
yield a number and applied the   divisor  attribute, the  bias attribute
is added to each component. This allows representation of values that
would otherwise be clamped to 0 or 1.

You can use this attribute with the following SVG elements:

-    <feConvolveMatrix>

Usage notes

  --------------- ----------
  Value           <number>
  Default value    0
  Animatable      Yes
  --------------- ----------

One application of bias is when it is desirable to have 0.5 gray value
be the zero response of the filter.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-feconvolvematrix-bias

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# by #

The  by attribute specifies a relative offset value for an attribute
that will be modified during an animation.

The starting value for the attribute is either indicated by specifying
it as value for the attribute given in the   attributeName  or the
  from  attribute.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
      <rect x="10" y="10" width="100" height="100">
        <animate attributeName="width" fill="freeze" by="50" dur="3s" />
      </rect>
    </svg>

Usage notes

  --------------- -----------
  Value           See below
  Default value   None
  Animatable      No
  --------------- -----------

The exact value type for this attribute depends on the value of the
attribute that will be animated.

When a list of values is defined via the   values  attribute, the  by
attribute is ignored.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # ByAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# calcMode #

The  calcMode attribute specifies the interpolation mode for the
animation.

The default mode is  linear , however if the attribute does not support
linear interpolation (e.g. for strings), the  calcMode attribute is
ignored and discrete interpolation is used.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>

Usage notes

  --------------- ----------------------------------------
  Value            discrete |  linear |  paced |  spline
  Default value    linear
  Animatable      No
  --------------- ----------------------------------------

 discrete

    This specifies that the animation function will jump from one value
    to the next without any interpolation.

 linear

    Simple linear interpolation between values is used to calculate the
    animation function. Except for  <animateMotion> , this is the
    default value.

 paced

    Defines interpolation to produce an even pace of change across the
    animation. This is only supported for values that define a linear
    numeric range, and for which some notion of "distance" between
    points can be calculated (e.g. position, width, height, etc.). If
    paced is specified, any   keyTimes  or   keySplines  will be
    ignored. For  <animateMotion> , this is the default value.

 spline

    Interpolates from one value in the   values  list to the next
    according to a time function defined by a cubic Bézier spline. The
    points of the spline are defined in the   keyTimes  attribute, and
    the control points for each interval are defined in the
      keySplines  attribute.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # CalcModeAttribute

  -----------------------------------------------------------------------

See also

-   SMIL Animation specification

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# cap-height #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  cap-height attribute defines the height of uppercase glyphs of the
font within the font coordinate system.

Note: It was specified to share the syntax and semantics of the obsolete
 cap-height descriptor of the  @font-face at-rule defined in an early
version of CSS 2.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- -----------
  Value            <number>
  Default value   None
  Animatable      No
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementCapHeightAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     x-height 
-     accent-height 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# class #

« SVG Attribute reference home

Assigns a class name or set of class names to an element. You may assign
the same class name or names to any number of elements, however,
multiple class names must be separated by whitespace characters.

An element's class name serves two key roles:

-   As a style sheet selector, for when an author assigns style
    information to a set of elements.
-   For general use by the browser.

You can use this class to style SVG content using CSS.

Usage context

  -------------------- --------------------------------------------
  Categories           None
  Value                <list-of-class-names>
  Animatable           Yes
  Normative document   SVG 1.1 (2nd Edition): The class attribute
  -------------------- --------------------------------------------

Example

html

    <html lang="en">
      <body>
        <svg
          width="120"
          height="220"
          viewPort="0 0 120 120"
          version="1.1"
          xmlns="http://www.w3.org/2000/svg">
          <style>
            <![CDATA[
                rect.rectClass {
                    stroke: #000066;
                    fill:   #00cc00;
                }
                circle.circleClass {
                    stroke: #006600;
                    fill:   #cc0000;
                }
            ]]>
          </style>

          <rect class="rectClass" x="10" y="10" width="100" height="100" />
          <circle class="circleClass" cx="40" cy="50" r="26" />
        </svg>
      </body>
    </html>

Elements

The following elements can use the  class attribute:

-    <a>
-    <circle>
-    <clipPath>
-    <defs>
-    <desc>
-    <ellipse>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>
-    <filter>
-    <font>
-    <foreignObject>
-    <g>
-    <glyph>
-    <glyphRef>
-    <image>
-    <line>
-    <linearGradient>
-    <marker>
-    <mask>
-    <missing-glyph>
-    <path>
-    <pattern>
-    <polygon>
-    <polyline>
-    <radialGradient>
-    <rect>
-    <stop>
-    <svg>
-    <switch>
-    <symbol>
-    <text>
-    <textPath>
-    <title>
-    <tref>
-    <tspan>
-    <use>

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# clip #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  clip attribute is a presentation attribute defining the visible
region of an element.

This attribute has the same parameter values as defined for the
 CSS clip property . Unitless values, which indicate current user
coordinates, are permitted on the coordinate values on the  rect() . The
value of  auto defines a clipping path along the bounds of the viewport
created by the given element.

You can use this attribute with the following SVG elements:

-    <svg>
-    <symbol>
-    <image>
-    <foreignObject>
-    <pattern>
-    <marker>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 20 10" xmlns="http://www.w3.org/2000/svg">
      <!-- Auto clipping -->
      <svg x="0" width="10" height="10" clip="auto">
        <circle cx="5" cy="5" r="4" stroke="green" />
      </svg>

      <!-- Rect(top, right, bottom, left) clipping -->
      <svg x="10" width="10" height="10" clip="rect(1, 9, 8, 2)">
        <circle cx="5" cy="5" r="4" stroke="green" />
      </svg>
    </svg>

Usage notes

Warning: This property is deprecated. Use  clip-path instead.

  --------------- -----------------
  Value            auto |  rect()
  Default value    auto
  Animatable      Yes
  --------------- -----------------

The value  auto defines a clipping path along the bounds of the viewport
created by the given element. The value  rect() defines a clipping
rectangle following the following syntax:
 rect(<top>, <right>, <bottom>, <left>) . The  <top> and  <bottom>
values specify offsets from the top border edge of the element viewport,
while  <right> and  <left> specify offsets from the left border edge of
the element viewport.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Masking Module Level 1
  # clip-property

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 12, 2023 by MDN contributors .
# clip-path #

The  clip-path presentation attribute defines or associates a clipping
path with the element it is related to.

Note: As a presentation attribute  clip-path can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <a>
-    <circle>
-    <clipPath>
-    <ellipse>
-    <g>
-    <glyph>
-    <image>
-    <line>
-    <marker>
-    <mask>
-    <path>
-    <pattern>
-    <polygon>
-    <polyline>
-    <rect>
-    <svg>
-    <symbol>
-    <text>
-    <use>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
      <clipPath id="myClip" clipPathUnits="objectBoundingBox">
        <circle cx=".5" cy=".5" r=".5" />
      </clipPath>

      <!-- Top-left: Apply a custom defined clipping path -->
      <rect
        x="1"
        y="1"
        width="8"
        height="8"
        stroke="green"
        clip-path="url(#myClip)" />

      <!-- Top-right: Apply a CSS basic shape on a fill-box
           geometry. This is the same as having a custom clipping
           path with a clipPathUnits set to objectBoundingBox -->
      <rect
        x="11"
        y="1"
        width="8"
        height="8"
        stroke="green"
        clip-path="circle() fill-box" />

      <!-- Bottom-left -->
      <rect
        x="1"
        y="11"
        width="8"
        height="8"
        stroke="green"
        clip-path="circle() stroke-box" />

      <!-- Bottom-right: Apply a CSS basic shape on a view-box
           geometry. This is the same as having a custom clipping
           path with a clipPathUnits set to userSpaceOnUse -->
      <rect
        x="11"
        y="11"
        width="8"
        height="8"
        stroke="green"
        clip-path="circle() view-box" />
    </svg>

Usage notes

  --------------- --------------------------------------------------------
  Value            url() | [  <basic-shape> ||  <geometry-box> ] |  none
  Default value    none
  Animatable      Yes
  --------------- --------------------------------------------------------

<geometry-box>

    An extra information to tell how a  <basic-shape> is applied to an
    element:  fill-box indicates to use the object bounding box;
     stroke-box indicates to use the object bounding box extended with
    the stroke;  view-box indicates to use the nearest SVG viewport as
    the reference box.

Note: For more details on the clip-path syntax, see the CSS property
 clip-path reference page.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Masking Module Level 1
  # the-clip-path

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   The CSS  clip-path property

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# clipPathUnits #

The  clipPathUnits attribute indicates which coordinate system to use
for the contents of the  <clipPath> element.

You can use this attribute with the following SVG elements:

-    <clipPath>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100">
      <clipPath id="myClip1" clipPathUnits="userSpaceOnUse">
        <circle cx="50" cy="50" r="35" />
      </clipPath>

      <clipPath id="myClip2" clipPathUnits="objectBoundingBox">
        <circle cx=".5" cy=".5" r=".35" />
      </clipPath>

      <!-- Some reference rect to materialized to clip path -->
      <rect id="r1" x="0" y="0" width="45" height="45" />
      <rect id="r2" x="0" y="55" width="45" height="45" />
      <rect id="r3" x="55" y="55" width="45" height="45" />
      <rect id="r4" x="55" y="0" width="45" height="45" />

      <!-- The first 3 rect are clipped with userSpaceOnUse units -->
      <use clip-path="url(#myClip1)" href="#r1" fill="red" />
      <use clip-path="url(#myClip1)" href="#r2" fill="red" />
      <use clip-path="url(#myClip1)" href="#r3" fill="red" />

      <!-- The last rect is clipped with objectBoundingBox units -->
      <use clip-path="url(#myClip2)" href="#r4" fill="red" />
    </svg>

clipPath

For  <clipPath> ,  clipPathUnits define the coordinate system in use for
the content of the element.

  --------------- --------------------------------------
  Value            userSpaceOnUse |  objectBoundingBox
  Default value    userSpaceOnUse
  Animatable      Yes
  --------------- --------------------------------------

userSpaceOnUse

    This value indicates that all coordinates inside the  <clipPath>
    element refer to the user coordinate system as defined when the
    clipping path was created.

objectBoundingBox

    This value indicates that all coordinates inside the  <clipPath>
    element are relative to the bounding box of the element the clipping
    path is applied to. It means that the origin of the coordinate
    system is the top left corner of the object bounding box and the
    width and height of the object bounding box are considered to have a
    length of 1 unit value.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Masking Module Level 1
  # element-attrdef-clippath-clippathunits

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 28, 2023 by MDN contributors .
# clip-rule #

« SVG Attribute reference home

The  clip-rule attribute only applies to graphics elements that are
contained within a  <clipPath> element. The  clip-rule attribute
basically works as the   fill-rule  attribute, except that it applies to
 <clipPath> definitions.

The following fragment of code will cause an evenodd clipping rule to be
applied to the clipping path because  clip-rule is specified on the
 <path> element that defines the clipping shape:

html

    <g>
      <clipPath id="MyClip">
        <path d="..." clip-rule="evenodd" />
      </clipPath>
      <rect clip-path="url(#MyClip)" ... />
    </g>

whereas the following fragment of code will not cause an evenodd
clipping rule to be applied because the  clip-rule is specified on the
referencing element, not on the object defining the clipping shape:

html

    <g>
      <clipPath id="MyClip">
        <path d="..." />
      </clipPath>
      <rect clip-path="url(#MyClip)" clip-rule="evenodd" ... />
    </g>

As a presentation attribute, it also can be used as a property directly
inside a CSS stylesheet

Usage notes

  --------------- -----------------------------
  Value           nonzero | evenodd | inherit
  Default value   nonzero
  Animatable      Yes
  --------------- -----------------------------

nonzero

    See description of   fill-rule  property.

evenodd

    See description of   fill-rule  property.

Example

html

    <svg
      width="100"
      viewBox="0 0 100 90"
      xmlns="http://www.w3.org/2000/svg"
      version="1.1">
      <!-- Define star path -->
      <defs>
        <path d="M50,0 21,90 98,35 2,35 79,90z" id="star" />
      </defs>

      <!-- Left: evenodd -->
      <clipPath id="emptyStar">
        <use href="#star" clip-rule="evenodd" />
      </clipPath>
      <rect clip-path="url(#emptyStar)" width="50" height="90" fill="blue" />

      <!-- Right: nonzero -->
      <clipPath id="filledStar">
        <use href="#star" clip-rule="nonzero" />
      </clipPath>
      <rect clip-path="url(#filledStar)" width="50" height="90" x="50" fill="red" />
    </svg>

Elements

The following elements can use the  clip-rule attribute, but only if
they are inside a  <clipPath> element.

-   Graphical elements »

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <clipPath>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# color #

The  color attribute is used to provide a potential indirect value,
 currentcolor , for the   fill  ,   stroke  ,   stop-color  ,
  flood-color  , and   lighting-color  attributes.

Note: As a presentation attribute,  color can be used as a CSS property.
See CSS color for further information.

As a presentation attribute, it can be applied to any element, but as
noted above, it has no direct effect on SVG elements.

Usage notes

  --------------- -----------------------
  Value             <color>  |  inherit
  Default value   Depends on user agent
  Animatable      Yes
  --------------- -----------------------

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <g color="green">
        <rect width="50" height="50" fill="currentcolor" />
        <circle
          r="25"
          cx="70"
          cy="70"
          stroke="currentcolor"
          fill="none"
          stroke-width="5" />
      </g>
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # ColorProperty

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# color-interpolation-filters #

The  color-interpolation-filters attribute specifies the color space for
imaging operations performed via filter effects.

Note: This property just has an affect on filter operations. Therefore,
it has no effect on filter primitives like  <feOffset> ,  <feImage> ,
 <feTile> or  <feFlood> .

 color-interpolation-filters has a different initial value than
  color-interpolation  .  color-interpolation-filters has an initial
value of  linearRGB , whereas  color-interpolation has an initial value
of  sRGB . Thus, in the default case, filter effects operations occur in
the linearRGB color space, whereas all other color interpolations occur
by default in the sRGB color space.

It has no affect on filter functions, which operate in the sRGB color
space.

Note: As a presentation attribute,  color-interpolation-filters can be
used as a CSS property.

You can use this attribute with the following SVG elements:

-    <feSpotLight>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feDropShadow>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>

Usage notes

  --------------- ----------------------------
  Value            auto |  sRGB |  linearRGB
  Default value    linearRGB
  Animatable      discrete
  --------------- ----------------------------

 auto

    Indicates that the user agent can choose either the  sRGB or
     linearRGB spaces for color interpolation. This option indicates
    that the author doesn't require that color interpolation occur in a
    particular color space.

 sRGB

    Indicates that color interpolation should occur in the sRGB color
    space.

 linearRGB

    Indicates that color interpolation should occur in the linearized
    RGB color space as described in the sRGB specification .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # ColorInterpolationFiltersProperty

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   sRGB specification
-     color-interpolation 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# color-interpolation #

The  color-interpolation attribute specifies the color space for
gradient interpolations, color animations, and alpha compositing.

Note: For filter effects, the   color-interpolation-filters  property
controls which color space is used.

The color-interpolation property chooses between color operations
occurring in the sRGB color space or in a (light energy linear)
linearized RGB color space. Having chosen the appropriate color space,
component-wise linear interpolation is used.

When a child element is blended into a background, the value of the
 color-interpolation property on the child determines the type of
blending, not the value of the  color-interpolation on the parent. For
gradients which make use of the   href  or the deprecated   xlink:href 
attribute to reference another gradient, the gradient uses the
property's value from the gradient element which is directly referenced
by the   fill  or   stroke  property. When animating colors, color
interpolation is performed according to the value of the
 color-interpolation property on the element being animated.

Note: As a presentation attribute,  color-interpolation can be used as a
CSS property.

You can use this attribute with the following SVG elements:

-    <a>
-    <animate>
-    <circle>
-    <clipPath>
-    <defs>
-    <ellipse>
-    <foreignObject>
-    <g>
-    <glyph>
-    <image>
-    <line>
-    <linearGradient>
-    <marker>
-    <mask>
-    <missing-glyph>
-    <path>
-    <pattern>
-    <polygon>
-    <polyline>
-    <radialGradient>
-    <rect>
-    <svg>
-    <switch>
-    <symbol>
-    <text>
-    <textPath>
-    <tspan>
-    <use>

Usage notes

  --------------- ----------------------------
  Value            auto |  sRGB |  linearRGB
  Default value    sRGB
  Animatable      discrete
  --------------- ----------------------------

 auto

    Indicates that the user agent can choose either the  sRGB or
     linearRGB spaces for color interpolation. This option indicates
    that the author doesn't require that color interpolation occur in a
    particular color space.

 sRGB

    Indicates that color interpolation should occur in the sRGB color
    space.

 linearRGB

    Indicates that color interpolation should occur in the linearized
    RGB color space as described in the sRGB specification .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # ColorInterpolation

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   sRGB specification
-     color-interpolation-filters 
-   Computer color is broken - popular demonstration of linearRGB

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# color-profile #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  color-profile attribute is used to define which color profile a
raster image included through the  <image> element should use.

Note: As a presentation attribute,  color-profile can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <image>

Usage notes

  --------------- ------------------------------------
  Value            auto |  sRGB |  <name> |   <iri> 
  Default value    auto
  Animatable      Yes
  --------------- ------------------------------------

 auto

    All colors are presumed to be defined in the sRGB color space unless
    a more precise embedded profile is specified within content data.
    For images that do have a profile built into their data, that
    profile is used. For images that do not have a profile, the sRGB
    profile is used.

 sRGB

    The source profile is assumed to be sRGB. This differs from auto in
    that it overrides an embedded profile inside an image.

 <name>

    A name corresponding to a defined color profile that is in the
    browser's color profile description database. The browser searches
    the color profile description database for a color profile
    description entry whose name descriptor matches  <name> and uses the
    last matching entry that is found. If a match is found, the
    corresponding profile overrides an embedded profile inside an image.
    If no match is found, then the embedded profile inside the image is
    used.

 <iri>

    An IRI reference to the source color profile. The referenced color
    profile overrides an embedded profile inside the image.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # ColorProfileProperty

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# SVG Conditional Processing Attributes #

The SVG conditional processing attributes are all the attributes that
can be specified on some SVG elements to control whether or not the
element on which it appears should be rendered.

-   requiredExtensions
-   requiredFeatures
-   systemLanguage

Attributes

  requiredExtensions 

    List all the browser specific capabilities that must be supported by
    the browser to be allowed to render the associated element. Value :
    A list of space-separated URI; Animatable : No

  requiredFeatures   Deprecated 

    List all the features, as defined is the SVG 1.1 specification ,
    that must be supported by the browser to be allowed to render the
    associated element. Value : A list of space-separated URI;
    Animatable : No

  systemLanguage 

    Indicates which language the user must have chosen to render the
    associated element. Value : A list of comma-separated language tags
    according to RFC 5646: Tags for Identifying Languages (also known as
    BCP 47) ; Animatable : No

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 22, 2023 by MDN contributors .
# SVG Core Attributes #

The SVG core attributes are all the common attributes that can be
specified on any SVG element.

-    id
-    lang
-    tabindex
-    xml:base
-    xml:lang
-    xml:space

Attributes

  id 

    Defines a unique identifier (ID) which must be unique in the whole
    document. Its purpose is to identify the element when linking (using
    a fragment identifier), scripting, or styling (with CSS). Value :
    Any valid ID string; Animatable : No

  lang 

    Participates in defining the language of the element, the language
    that non-editable elements are written in or the language that
    editable elements should be written in. The tag contains one single
    entry value in the format defined in RFC 5646: Tags for Identifying
    Languages (also known as BCP 47) .

    Note: SVG 2 introduced the new  lang attributes. If both  lang and
     xml:lang attribute are used,  xml:lang has priority over  lang .

    Value : Any valid language ID; Animatable : No

  tabindex 

    The tabindex SVG attribute allows you to control whether an element
    is focusable and to define the relative order of the element for the
    purposes of sequential focus navigation. Value type : <integer> ;
    Animatable : No

  xml:base 

    Specifies a base IRI other than the base IRI of the document. Value
    type : <IRI> ; Animatable : No

  xml:lang 

    It is a universal attribute allowed in all XML dialects to mark up
    the natural human language that an element contains. It's almost
    identical in usage to HTML's lang , but in conforming XML 1.0
    documents, it does not allow the use of a null attribute value (
     xml:lang="" ) to indicate an unknown language. Instead, use
     xml:lang="und" .

    Note: SVG 2 introduced the new  lang attributes. If both  lang and
     xml:lang attribute are used,  xml:lang has priority over  lang .

    Value : Any valid language ID; Animatable : No

  xml:space   Deprecated 

    SVG supports the standard XML attribute  xml:space to specify the
    handling of white space characters within a given  <text> element's
    character data.

    Note: Instead of using the  xml:space attribute you should use the
     white-space CSS property.

    Value :  default |  preserve ; Animatable : No

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 22, 2023 by MDN contributors .
# SVG attribute: crossorigin #

The crossorigin attribute, valid on the  <image> and  <feImage>
elements, provides support for configuration of the Cross-Origin
Resource Sharing ( CORS ) requests for the element's fetched data.

This table shows possible keywords and their meaning:

  Keyword            Description
  ------------------ ------------------------------------------------------------------------------------------------------------------
   anonymous         Client CORS requests for this element will have the credentials flag set to 'same-origin'.
   use-credentials   Client CORS requests for this element will have the credentials flag set to 'include'.
   ""                Setting the attribute name to an empty value, like  crossorigin or  crossorigin="" , is the same as  anonymous .

It follows the same processing rules as the HTML attribute  crossorigin
.

Example

html

    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
      <image
        href="https://example.com/mdn_logo_dark.png"
        height="200"
        width="200"
        crossorigin="use-credentials" />
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # ImageElementCrossoriginAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Cross-Origin Resource Sharing (CORS)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jun 2, 2023 by MDN contributors .
# cursor #

SVG Attribute reference home

The  cursor attribute specifies the mouse cursor displayed when the
mouse pointer is over an element.

This attribute behaves exactly like the  CSS cursor property except that
if the browser supports the  <cursor> element, you should be able to use
it with the <funciri> notation.

As a presentation attribute, it also can be used as a property directly
inside a CSS stylesheet, see  CSS cursor for further information.

Usage context

  -------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Categories           Presentation attribute
  Value                [[ <funciri> ,]* [ auto | crosshair | default | pointer | move | e-resize | ne-resize | nw-resize | n-resize | se-resize | sw-resize | s-resize | w-resize| text | wait | help ]] | inherit
  Animatable           Yes
  Normative document   SVG 1.1 (2nd Edition)
  -------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Elements

The following elements can use the  cursor attribute

-   Container elements
-   Graphics elements

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS cursor

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# cx #

The  cx attribute define the x-axis coordinate of a center point.

You can use this attribute with the following SVG elements:

-    <circle>
-    <ellipse>
-    <radialGradient>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 300 100" xmlns="http://www.w3.org/2000/svg">
      <radialGradient cx="25%" id="myGradient">
        <stop offset="0" stop-color="white" />
        <stop offset="100%" stop-color="black" />
      </radialGradient>

      <circle cx="50" cy="50" r="45" />
      <ellipse cx="150" cy="50" rx="45" ry="25" />
      <rect x="205" y="5" width="90" height="90" fill="url(#myGradient)" />
    </svg>

circle

For  <circle> ,  cx defines the x-axis coordinate of the center of the
shape.

  --------------- ----------------------
  Value            <length-percentage>
  Default value    0
  Animatable      Yes
  --------------- ----------------------

Note: Starting with SVG2  cx , is a Geometry Property , meaning this
attribute can also be used as CSS property for circles.

ellipse

For  <ellipse> ,  cx defines the x-axis coordinate of the center of the
shape.

  --------------- ----------------------
  Value            <length-percentage>
  Default value    0
  Animatable      Yes
  --------------- ----------------------

Note: Starting with SVG2  cx , is a Geometry Property , meaning this
attribute can also be used as CSS property for ellipses.

radialGradient

For  <radialGradient> ,  cx defines the x-axis coordinate of the end
circle for the radial gradient.

  --------------- ----------------------
  Value            <length-percentage>
  Default value    50%
  Animatable      Yes
  --------------- ----------------------

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 34 10" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <radialGradient cx="0" id="myGradient000">
          <stop offset="0%" stop-color="gold" />
          <stop offset="50%" stop-color="green" />
          <stop offset="100%" stop-color="white" />
        </radialGradient>

        <radialGradient cx="50%" id="myGradient050">
          <stop offset="0%" stop-color="gold" />
          <stop offset="50%" stop-color="green" />
          <stop offset="100%" stop-color="white" />
        </radialGradient>

        <radialGradient cx="100%" id="myGradient100">
          <stop offset="0%" stop-color="gold" />
          <stop offset="50%" stop-color="green" />
          <stop offset="100%" stop-color="white" />
        </radialGradient>
      </defs>

      <rect
        x="1"
        y="1"
        width="8"
        height="8"
        fill="url(#myGradient000)"
        stroke="black" />
      <rect
        x="13"
        y="1"
        width="8"
        height="8"
        fill="url(#myGradient050)"
        stroke="black" />
      <rect
        x="25"
        y="1"
        width="8"
        height="8"
        fill="url(#myGradient100)"
        stroke="black" />
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # CX

  Scalable Vector Graphics (SVG) 2
  # RadialGradientElementCXAttribute
  -----------------------------------------------------------------------

See also

-     cy 
-     r 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 23, 2024 by MDN contributors .
# cy #

The  cy attribute define the y-axis coordinate of a center point.

You can use this attribute with the following SVG elements:

-    <circle>
-    <ellipse>
-    <radialGradient>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 300" xmlns="http://www.w3.org/2000/svg">
      <radialGradient cy="25%" id="myGradient">
        <stop offset="0" stop-color="white" />
        <stop offset="100%" stop-color="black" />
      </radialGradient>

      <circle cy="50" cx="50" r="45" />
      <ellipse cy="150" cx="50" rx="45" ry="25" />
      <rect x="5" y="205" width="90" height="90" fill="url(#myGradient)" />
    </svg>

circle

For  <circle> ,  cy defines the y-axis coordinate of the center of the
shape.

  --------------- ----------------------
  Value            <length-percentage>
  Default value    0
  Animatable      Yes
  --------------- ----------------------

Note: Starting with SVG2,  cy is a Geometry Property meaning this
attribute can also be used as a CSS property for circles.

ellipse

For  <ellipse> ,  cy defines the y-axis coordinate of the center of the
shape.

  --------------- ----------------------
  Value            <length-percentage>
  Default value    0
  Animatable      Yes
  --------------- ----------------------

Note: Starting with SVG2,  cy is a Geometry Property meaning this
attribute can also be used as a CSS property for ellipses.

radialGradient

For  <radialGradient> ,  cy defines the y-axis coordinate of the end
circle for the radial gradient.

  --------------- ----------------------
  Value            <length-percentage>
  Default value    50%
  Animatable      Yes
  --------------- ----------------------

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 34 10" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <radialGradient cy="0" id="myGradient000">
          <stop offset="0%" stop-color="gold" />
          <stop offset="50%" stop-color="green" />
          <stop offset="100%" stop-color="white" />
        </radialGradient>

        <radialGradient cy="50%" id="myGradient050">
          <stop offset="0%" stop-color="gold" />
          <stop offset="50%" stop-color="green" />
          <stop offset="100%" stop-color="white" />
        </radialGradient>

        <radialGradient cy="100%" id="myGradient100">
          <stop offset="0%" stop-color="gold" />
          <stop offset="50%" stop-color="green" />
          <stop offset="100%" stop-color="white" />
        </radialGradient>
      </defs>

      <rect
        x="1"
        y="1"
        width="8"
        height="8"
        fill="url(#myGradient000)"
        stroke="black" />
      <rect
        x="13"
        y="1"
        width="8"
        height="8"
        fill="url(#myGradient050)"
        stroke="black" />
      <rect
        x="25"
        y="1"
        width="8"
        height="8"
        fill="url(#myGradient100)"
        stroke="black" />
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # CY

  Scalable Vector Graphics (SVG) 2
  # RadialGradientElementCYAttribute
  -----------------------------------------------------------------------

See also

-     cx 
-     r 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 23, 2024 by MDN contributors .
# data-* #

The  data-* SVG attributes are called custom data attributes. They let
SVG markup and its resulting DOM share information that standard
attributes can't, usually for scripting purposes. Their custom data are
available via the  SVGElement interface of the element the attributes
belong to, with the  HTMLElement.dataset property.

The  * can be replaced by any characters allowed in XML's rules for
names , with the following restrictions:

-   Can't start with  xml .
-   No semicolons (  ; ,  U+003A ).
-   No capital  A to  Z letters.

Note: The  HTMLElement.dataset property is a  DOMStringMap that provides
the attribute  data-test-value via  SVGElement.dataset.testValue .
Hyphen characters (  - ,  U+002D ) are removed and the next letter is
capitalized, resulting in the camel case format.

You can use this attribute with any SVG element.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # DataAttributes

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    SVGElement
-   The  HTMLElement.dataset property used to access these attributes
    from scripts.
-   Using data attributes

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Sep 8, 2023 by MDN contributors .
# decoding #

The  decoding attribute, valid on  <image> elements, provides a hint to
the browser as to whether it should perform image decoding along with
rendering other content in a single presentation step that looks more
"correct" (  sync ), or render and present the other content first and
then decode the image and present it later (  async ). In practice,
 async means that the next paint does not wait for the image to decode.

It is often difficult to perceive any noticeable effect when using
 decoding on static  <image> elements. They'll likely be initially
rendered as empty images while the image files are fetched (either from
the network or from the cache) and then handled independently anyway, so
the "syncing" of content updates is less apparent. However, the blocking
of rendering while decoding happens, while often quite small, can be
measured — even if it is difficult to observe with the human eye.

Using different  decoding types can result in more noticeable
differences when dynamically inserting  <image> elements into the DOM
via JavaScript — see  SVGImageElement.decoding for more details.

Allowed values:

 sync

    Decode the image synchronously along with rendering the other
    content, and present everything together.

 async

    Decode the image asynchronously, after rendering and presenting the
    other content.

 auto

    No preference for the decoding mode; the browser decides what is
    best for the user. This is the default value.

Example

html

    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
      <image
        href="https://example.com/mdn_logo_dark.png"
        height="200"
        width="200"
        decoding="async" />
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  HTML Standard
  # dom-img-decoding

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   SVGImageElement: decoding property
-   What does the image decoding attribute actually do? on
    tunetheweb.com (2023)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 10, 2023 by MDN contributors .
# descent #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  descent attribute defines the maximum unaccented depth of the font.

Note: It was specified to share the syntax and semantics of the obsolete
 descent descriptor of the  @font-face at-rule defined in an early
version of CSS 2.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- ---------------------------
  Value            <number>
  Default value   Value of   vert-origin-y 
  Animatable      No
  --------------- ---------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementDescentAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# d #

The  d attribute defines a path to be drawn.

A path definition is a list of path commands where each command is
composed of a command letter and numbers that represent the command
parameters. The commands are detailed below .

You can use this attribute with the following SVG elements:  <path> ,
 <glyph> ,  <missing-glyph> .

 d is a presentation attribute , and hence can also be used as a CSS
property .

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <path
        fill="none"
        stroke="red"
        d="M 10,30
           A 20,20 0,0,1 50,30
           A 20,20 0,0,1 90,30
           Q 90,60 50,90
           Q 10,60 10,30 z" />
    </svg>

path

For  <path> ,  d is a string containing a series of path commands that
define the path to be drawn.

  --------------- ----------
  Value           <string>
  Default value   none
  Animatable      Yes
  --------------- ----------

glyph

Warning: As of SVG2  <glyph> is deprecated and shouldn't be used.

For  <glyph> ,  d is a string containing a series of path commands that
define the outline shape of the glyph.

  --------------- ----------
  Value           <string>
  Default value   none
  Animatable      Yes
  --------------- ----------

Note: The point of origin (the coordinate  0 ,  0 ) is usually the upper
left corner of the context. However the  <glyph> element has its origin
in the bottom left corner of its letterbox.

missing-glyph

Warning: As of SVG2  <missing-glyph> is deprecated and shouldn't be
used.

For  <missing-glyph> ,  d is a string containing a series of path
commands that define the outline shape of the glyph.

  --------------- ----------
  Value           <string>
  Default value   none
  Animatable      Yes
  --------------- ----------

Using d as a CSS property

 d is a presentation attribute , and hence can be also be modified using
CSS. The property takes either path() or  none .

The example below shows how you might apply a new path on hover over an
element. The new path is the same as the old one, but adds a line across
the heart.

css

    html,
    body,
    svg {
      height: 100%;
    }

    /* This path is displayed on hover*/
    #svg_css_ex1:hover path {
      d: path(
        "M10,30 A20,20 0,0,1 50,30 A20,20 0,0,1 90,30 Q90,60 50,90 Q10,60 10,30 z M5,5 L90,90"
      );
    }

html

    <svg id="svg_css_ex1" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <path
        fill="none"
        stroke="red"
        d="M 10,30
           A 20,20 0,0,1 50,30
           A 20,20 0,0,1 90,30
           Q 90,60 50,90
           Q 10,60 10,30 z
           " />
    </svg>

Path commands

Path commands are instructions that define a path to be drawn. Each
command is composed of a command letter and numbers that represent the
command parameters.

SVG defines 6 types of path commands, for a total of 20 commands:

-   MoveTo:  M ,  m
-   LineTo:  L ,  l ,  H ,  h ,  V ,  v
-   Cubic Bézier Curve:  C ,  c ,  S ,  s
-   Quadratic Bézier Curve:  Q ,  q ,  T ,  t
-   Elliptical Arc Curve:  A ,  a
-   ClosePath:  Z ,  z

Note: Commands are case-sensitive . An upper-case command specifies
absolute coordinates, while a lower-case command specifies coordinates
relative to the current position.

It is always possible to specify a negative value as an argument to a
command:

-   negative angles will be anti-clockwise;
-   absolute negative x and y values are interpreted as negative
    coordinates;
-   relative negative x values move to the left, and relative negative y
    values move upwards.

MoveTo path commands

MoveTo instructions can be thought of as picking up the drawing
instrument, and setting it down somewhere else—in other words, moving
the current point ( P _(o) ; { x _(o) , y _(o) }). There is no line
drawn between P _(o) and the new current point ( P _(n) ; { x _(n) , y
_(n) }).

+-----------------------+-----------------------+-----------------------+
| Command               | Parameters            | Notes                 |
+-----------------------+-----------------------+-----------------------+
| M                     | (   x  ,   y  )+      | Move the current      |
|                       |                       | point to the          |
|                       |                       | coordinate   x  ,     |
|                       |                       |   y  . Any subsequent |
|                       |                       | coordinate pair(s)    |
|                       |                       | are interpreted as    |
|                       |                       | parameter(s) for      |
|                       |                       | implicit absolute     |
|                       |                       | LineTo (  L )         |
|                       |                       | command(s) ( see      |
|                       |                       | below ).              |
|                       |                       |                       |
|                       |                       | Formula:  P  n  = {   |
|                       |                       |   x  ,   y  }         |
+-----------------------+-----------------------+-----------------------+
| m                     | (   dx  ,   dy  )+    | Move the current      |
|                       |                       | point by shifting the |
|                       |                       | last known position   |
|                       |                       | of the path by   dx   |
|                       |                       | along the x-axis and  |
|                       |                       | by   dy  along the    |
|                       |                       | y-axis. Any           |
|                       |                       | subsequent coordinate |
|                       |                       | pair(s) are           |
|                       |                       | interpreted as        |
|                       |                       | parameter(s) for      |
|                       |                       | implicit relative     |
|                       |                       | LineTo (  l )         |
|                       |                       | command(s) ( see      |
|                       |                       | below ).              |
|                       |                       |                       |
|                       |                       | Formula:  P  n  = {   |
|                       |                       |  x  o  +   dx  ,      |
|                       |                       |  y  o  +   dy  }      |
+-----------------------+-----------------------+-----------------------+

Examples

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <path
        fill="none"
        stroke="red"
        d="M 10,10 h 10
           m  0,10 h 10
           m  0,10 h 10
           M 40,20 h 10
           m  0,10 h 10
           m  0,10 h 10
           m  0,10 h 10
           M 50,50 h 10
           m-20,10 h 10
           m-20,10 h 10
           m-20,10 h 10" />
    </svg>

LineTo path commands

LineTo instructions draw a straight line from the current point ( P _(o)
; { x _(o) , y _(o) }) to the end point ( P _(n) ; { x _(n) , y _(n) }),
based on the parameters specified. The end point ( P _(n) ) then becomes
the current point for the next command ( P _(o) ′ ).

+-----------------------+-----------------------+-----------------------+
| Command               | Parameters            | Notes                 |
+-----------------------+-----------------------+-----------------------+
| L                     | (  x ,  y )+          | Draw a line from the  |
|                       |                       | current point to the  |
|                       |                       | end point specified   |
|                       |                       | by   x  ,   y  . Any  |
|                       |                       | subsequent coordinate |
|                       |                       | pair(s) are           |
|                       |                       | interpreted as        |
|                       |                       | parameter(s) for      |
|                       |                       | implicit absolute     |
|                       |                       | LineTo (  L )         |
|                       |                       | command(s).           |
|                       |                       |                       |
|                       |                       | Formula:  P  o  ′ =   |
|                       |                       |  P  n  = {   x  ,     |
|                       |                       |   y  }                |
+-----------------------+-----------------------+-----------------------+
| l                     | (   dx  ,   dy  )+    | Draw a line from the  |
|                       |                       | current point to the  |
|                       |                       | end point, which is   |
|                       |                       | the current point     |
|                       |                       | shifted by   dx       |
|                       |                       | along the x-axis and  |
|                       |                       |   dy  along the       |
|                       |                       | y-axis. Any           |
|                       |                       | subsequent coordinate |
|                       |                       | pair(s) are           |
|                       |                       | interpreted as        |
|                       |                       | parameter(s) for      |
|                       |                       | implicit relative     |
|                       |                       | LineTo (  l )         |
|                       |                       | command(s) ( see      |
|                       |                       | below ).              |
|                       |                       |                       |
|                       |                       | Formula:  P  o  ′ =   |
|                       |                       |  P  n  = {  x  o  +   |
|                       |                       |   dx  ,  y  o  +      |
|                       |                       |   dy  }               |
+-----------------------+-----------------------+-----------------------+
| H                     |   x  +                | Draw a horizontal     |
|                       |                       | line from the current |
|                       |                       | point to the end      |
|                       |                       | point , which is      |
|                       |                       | specified by the   x  |
|                       |                       | parameter and the     |
|                       |                       | current point's  y    |
|                       |                       | coordinate. Any       |
|                       |                       | subsequent value(s)   |
|                       |                       | are interpreted as    |
|                       |                       | parameter(s) for      |
|                       |                       | implicit absolute     |
|                       |                       | horizontal LineTo (   |
|                       |                       |  H ) command(s).      |
|                       |                       |                       |
|                       |                       | Formula:  P  o  ′ =   |
|                       |                       |  P  n  = {   x  ,     |
|                       |                       |  y  o  }              |
+-----------------------+-----------------------+-----------------------+
| h                     |   dx  +               | Draw a horizontal     |
|                       |                       | line from the current |
|                       |                       | point to the end      |
|                       |                       | point, which is       |
|                       |                       | specified by the      |
|                       |                       | current point shifted |
|                       |                       | by   dx  along the    |
|                       |                       | x-axis and the        |
|                       |                       | current point's  y    |
|                       |                       | coordinate. Any       |
|                       |                       | subsequent value(s)   |
|                       |                       | are interpreted as    |
|                       |                       | parameter(s) for      |
|                       |                       | implicit relative     |
|                       |                       | horizontal LineTo (   |
|                       |                       |  h ) command(s).      |
|                       |                       |                       |
|                       |                       | Formula:  P  o  ′ =   |
|                       |                       |  P  n  = {  x  o  +   |
|                       |                       |   dx  ,  y  o  }      |
+-----------------------+-----------------------+-----------------------+
| V                     |   y  +                | Draw a vertical line  |
|                       |                       | from the current      |
|                       |                       | point to the end      |
|                       |                       | point , which is      |
|                       |                       | specified by the   y  |
|                       |                       | parameter and the     |
|                       |                       | current point's  x    |
|                       |                       | coordinate. Any       |
|                       |                       | subsequent values are |
|                       |                       | interpreted as        |
|                       |                       | parameters for        |
|                       |                       | implicit absolute     |
|                       |                       | vertical LineTo (  V  |
|                       |                       | ) command(s).         |
|                       |                       |                       |
|                       |                       | Formula:  P  o  ′ =   |
|                       |                       |  P  n  = {  x  o  ,   |
|                       |                       |   y  }                |
+-----------------------+-----------------------+-----------------------+
| v                     |   dy  +               | Draw a vertical line  |
|                       |                       | from the current      |
|                       |                       | point to the end      |
|                       |                       | point, which is       |
|                       |                       | specified by the      |
|                       |                       | current point shifted |
|                       |                       | by   dy  along the    |
|                       |                       | y-axis and the        |
|                       |                       | current point's  x    |
|                       |                       | coordinate. Any       |
|                       |                       | subsequent value(s)   |
|                       |                       | are interpreted as    |
|                       |                       | parameter(s) for      |
|                       |                       | implicit relative     |
|                       |                       | vertical LineTo (  v  |
|                       |                       | ) command(s).         |
|                       |                       |                       |
|                       |                       | Formula:  P  o  ′ =   |
|                       |                       |  P  n  = {  x  o  ,   |
|                       |                       |  y  o  +   dy  }      |
+-----------------------+-----------------------+-----------------------+

Examples

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 100" xmlns="http://www.w3.org/2000/svg">
      <!-- LineTo commands with absolute coordinates -->
      <path
        fill="none"
        stroke="red"
        d="M 10,10
               L 90,90
               V 10
               H 50" />

      <!-- LineTo commands with relative coordinates -->
      <path
        fill="none"
        stroke="red"
        d="M 110,10
               l 80,80
               v -80
               h -40" />
    </svg>

Cubic Bézier Curve

Cubic Bézier curves are smooth curve definitions using four points:

starting point (current point)

    ( P _(o) = { x _(o) , y _(o) })

end point

    ( P _(n) = { x _(n) , y _(n) })

start control point

    ( P _(cs) = { x _(cs) , y _(cs) }) (controls curvature near the
    start of the curve)

end control point

    ( P _(ce) = { x _(ce) , y _(ce) }) (controls curvature near the end
    of the curve)

After drawing, the end point ( P _(n) ) becomes the current point for
the next command ( P _(o) ′ ).

+-----------------------+-----------------------+-----------------------+
| Command               | Parameters            | Notes                 |
+-----------------------+-----------------------+-----------------------+
| C                     | (   x1  ,   y1  ,     | Draw a cubic Bézier   |
|                       |   x2  ,   y2  ,   x   | curve from the        |
|                       | ,   y  )+             | current point to the  |
|                       |                       | end point specified   |
|                       |                       | by   x  ,   y  . The  |
|                       |                       | start control point   |
|                       |                       | is specified by   x1  |
|                       |                       | ,   y1  and the end   |
|                       |                       | control point is      |
|                       |                       | specified by   x2  ,  |
|                       |                       |   y2  . Any           |
|                       |                       | subsequent triplet(s) |
|                       |                       | of coordinate pairs   |
|                       |                       | are interpreted as    |
|                       |                       | parameter(s) for      |
|                       |                       | implicit absolute     |
|                       |                       | cubic Bézier curve (  |
|                       |                       |  C ) command(s).      |
|                       |                       |                       |
|                       |                       | Formulae:             |
|                       |                       |      P  o  ′ =  P  n  |
|                       |                       |     = {   x  ,   y  } |
|                       |                       |     ;                 |
|                       |                       |      P  cs  = {   x1  |
|                       |                       |     ,   y1  } ;       |
|                       |                       |      P  ce  = {   x2  |
|                       |                       |     ,   y2  }         |
+-----------------------+-----------------------+-----------------------+
| c                     | (   dx1  ,   dy1  ,   | Draw a cubic Bézier   |
|                       |   dx2  ,   dy2  ,     | curve from the        |
|                       |   dx  ,   dy  )+      | current point to the  |
|                       |                       | end point, which is   |
|                       |                       | the current point     |
|                       |                       | shifted by   dx       |
|                       |                       | along the x-axis and  |
|                       |                       |   dy  along the       |
|                       |                       | y-axis. The start     |
|                       |                       | control point is the  |
|                       |                       | current point         |
|                       |                       | (starting point of    |
|                       |                       | the curve) shifted by |
|                       |                       |   dx1  along the      |
|                       |                       | x-axis and   dy1      |
|                       |                       | along the y-axis. The |
|                       |                       | end control point is  |
|                       |                       | the current point     |
|                       |                       | (starting point of    |
|                       |                       | the curve) shifted by |
|                       |                       |   dx2  along the      |
|                       |                       | x-axis and   dy2      |
|                       |                       | along the y-axis. Any |
|                       |                       | subsequent triplet(s) |
|                       |                       | of coordinate pairs   |
|                       |                       | are interpreted as    |
|                       |                       | parameter(s) for      |
|                       |                       | implicit relative     |
|                       |                       | cubic Bézier curve (  |
|                       |                       |  c ) command(s).      |
|                       |                       |                       |
|                       |                       | Formulae:             |
|                       |                       |      P  o  ′ =  P  n  |
|                       |                       |     = {  x  o  +      |
|                       |                       |       dx  ,  y  o  +  |
|                       |                       |       dy  } ;         |
|                       |                       |      P  cs  = {       |
|                       |                       |      x  o  +   dx1  , |
|                       |                       |      y  o  +   dy1  } |
|                       |                       |     ;                 |
|                       |                       |      P  ce  = {       |
|                       |                       |      x  o  +   dx2  , |
|                       |                       |      y  o  +   dy2  } |
+-----------------------+-----------------------+-----------------------+
| S                     | (   x2  ,   y2  ,     | Draw a smooth cubic   |
|                       |   x  ,   y  )+        | Bézier curve from the |
|                       |                       | current point to the  |
|                       |                       | end point specified   |
|                       |                       | by   x  ,   y  . The  |
|                       |                       | end control point is  |
|                       |                       | specified by   x2  ,  |
|                       |                       |   y2  . The start     |
|                       |                       | control point is the  |
|                       |                       | reflection of the end |
|                       |                       | control point of the  |
|                       |                       | previous curve        |
|                       |                       | command about the     |
|                       |                       | current point . If    |
|                       |                       | the previous command  |
|                       |                       | wasn't a cubic Bézier |
|                       |                       | curve, the start      |
|                       |                       | control point is the  |
|                       |                       | same as the curve     |
|                       |                       | starting point (      |
|                       |                       | current point ). Any  |
|                       |                       | subsequent pair(s) of |
|                       |                       | coordinate pairs are  |
|                       |                       | interpreted as        |
|                       |                       | parameter(s) for      |
|                       |                       | implicit absolute     |
|                       |                       | smooth cubic Bézier   |
|                       |                       | curve (  S )          |
|                       |                       | commands.             |
+-----------------------+-----------------------+-----------------------+
| s                     | (   dx2  ,   dy2  ,   | Draw a smooth cubic   |
|                       |   dx  ,   dy  )+      | Bézier curve from the |
|                       |                       | current point to the  |
|                       |                       | end point , which is  |
|                       |                       | the current point     |
|                       |                       | shifted by   dx       |
|                       |                       | along the x-axis and  |
|                       |                       |   dy  along the       |
|                       |                       | y-axis. The end       |
|                       |                       | control point is the  |
|                       |                       | current point         |
|                       |                       | (starting point of    |
|                       |                       | the curve) shifted by |
|                       |                       |   dx2  along the      |
|                       |                       | x-axis and   dy2      |
|                       |                       | along the y-axis. The |
|                       |                       | start control point   |
|                       |                       | is the reflection of  |
|                       |                       | the end control point |
|                       |                       | of the previous curve |
|                       |                       | command about the     |
|                       |                       | current point . If    |
|                       |                       | the previous command  |
|                       |                       | wasn't a cubic Bézier |
|                       |                       | curve, the start      |
|                       |                       | control point is the  |
|                       |                       | same as the curve     |
|                       |                       | starting point (      |
|                       |                       | current point ). Any  |
|                       |                       | subsequent pair(s) of |
|                       |                       | coordinate pairs are  |
|                       |                       | interpreted as        |
|                       |                       | parameter(s) for      |
|                       |                       | implicit relative     |
|                       |                       | smooth cubic Bézier   |
|                       |                       | curve (  s )          |
|                       |                       | commands.             |
+-----------------------+-----------------------+-----------------------+

Examples

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg
      viewBox="0 0 200 100"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <!-- Cubic Bézier curve with absolute coordinates -->
      <path
        fill="none"
        stroke="red"
        d="M 10,90
               C 30,90 25,10 50,10
               S 70,90 90,90" />

      <!-- Cubic Bézier curve with relative coordinates -->
      <path
        fill="none"
        stroke="red"
        d="M 110,90
               c 20,0 15,-80 40,-80
               s 20,80 40,80" />

      <!-- Highlight the curve vertex and control points -->
      <g id="ControlPoints">
        <!-- First cubic command control points -->
        <line x1="10" y1="90" x2="30" y2="90" stroke="lightgrey" />
        <circle cx="30" cy="90" r="1.5" />

        <line x1="50" y1="10" x2="25" y2="10" stroke="lightgrey" />
        <circle cx="25" cy="10" r="1.5" />

        <!-- Second smooth command control points (the first one is implicit) -->
        <line
          x1="50"
          y1="10"
          x2="75"
          y2="10"
          stroke="lightgrey"
          stroke-dasharray="2" />
        <circle cx="75" cy="10" r="1.5" fill="lightgrey" />

        <line x1="90" y1="90" x2="70" y2="90" stroke="lightgrey" />
        <circle cx="70" cy="90" r="1.5" />

        <!-- curve vertex points -->
        <circle cx="10" cy="90" r="1.5" />
        <circle cx="50" cy="10" r="1.5" />
        <circle cx="90" cy="90" r="1.5" />
      </g>
      <use href="#ControlPoints" x="100" />
    </svg>

Quadratic Bézier Curve

Quadratic Bézier curves are smooth curve definitions using three points:

starting point (current point)

    P _(o) = { x _(o) , y _(o) }

end point

    P _(n) = { x _(n) , y _(n) }

control point

    P _(c) = { x _(c) , y _(c) } (controls curvature)

After drawing, the end point ( P _(n) ) becomes the current point for
the next command ( P _(o) ′ ).

+-----------------------+-----------------------+-----------------------+
| Command               | Parameters            | Notes                 |
+-----------------------+-----------------------+-----------------------+
| Q                     | (   x1  ,   y1  ,     | Draw a quadratic      |
|                       |   x  ,   y  )+        | Bézier curve from the |
|                       |                       | current point to the  |
|                       |                       | end point specified   |
|                       |                       | by   x  ,   y  . The  |
|                       |                       | control point is      |
|                       |                       | specified by   x1  ,  |
|                       |                       |   y1  . Any           |
|                       |                       | subsequent pair(s) of |
|                       |                       | coordinate pairs are  |
|                       |                       | interpreted as        |
|                       |                       | parameter(s) for      |
|                       |                       | implicit absolute     |
|                       |                       | quadratic Bézier      |
|                       |                       | curve (  Q )          |
|                       |                       | command(s).           |
|                       |                       |                       |
|                       |                       | Formulae:             |
|                       |                       |      P  o  ′ =  P  n  |
|                       |                       |     = {   x  ,   y  } |
|                       |                       |     ;                 |
|                       |                       |      P  c  = {   x1   |
|                       |                       |     ,   y1  }         |
+-----------------------+-----------------------+-----------------------+
| q                     | (   dx1  ,   dy1  ,   | Draw a quadratic      |
|                       |   dx  ,   dy  )+      | Bézier curve from the |
|                       |                       | current point to the  |
|                       |                       | end point , which is  |
|                       |                       | the current point     |
|                       |                       | shifted by   dx       |
|                       |                       | along the x-axis and  |
|                       |                       |   dy  along the       |
|                       |                       | y-axis. The control   |
|                       |                       | point is the current  |
|                       |                       | point (starting point |
|                       |                       | of the curve) shifted |
|                       |                       | by   dx1  along the   |
|                       |                       | x-axis and   dy1      |
|                       |                       | along the y-axis. Any |
|                       |                       | subsequent pair(s) of |
|                       |                       | coordinate pairs are  |
|                       |                       | interpreted as        |
|                       |                       | parameter(s) for      |
|                       |                       | implicit relative     |
|                       |                       | quadratic Bézier      |
|                       |                       | curve (  q )          |
|                       |                       | command(s).           |
|                       |                       |                       |
|                       |                       | Formulae:             |
|                       |                       |      P  o  ′ =  P  n  |
|                       |                       |     = {  x  o  +      |
|                       |                       |       dx  ,  y  o  +  |
|                       |                       |       dy  } ;         |
|                       |                       |      P  c  = {        |
|                       |                       |      x  o  +   dx1  , |
|                       |                       |      y  o  +   dy1  } |
+-----------------------+-----------------------+-----------------------+
| T                     | (   x  ,   y  )+      | Draw a smooth         |
|                       |                       | quadratic Bézier      |
|                       |                       | curve from the        |
|                       |                       | current point to the  |
|                       |                       | end point specified   |
|                       |                       | by   x  ,   y  . The  |
|                       |                       | control point is the  |
|                       |                       | reflection of the     |
|                       |                       | control point of the  |
|                       |                       | previous curve        |
|                       |                       | command about the     |
|                       |                       | current point . If    |
|                       |                       | the previous command  |
|                       |                       | wasn't a quadratic    |
|                       |                       | Bézier curve, the     |
|                       |                       | control point is the  |
|                       |                       | same as the curve     |
|                       |                       | starting point (      |
|                       |                       | current point ). Any  |
|                       |                       | subsequent coordinate |
|                       |                       | pair(s) are           |
|                       |                       | interpreted as        |
|                       |                       | parameter(s) for      |
|                       |                       | implicit absolute     |
|                       |                       | smooth quadratic      |
|                       |                       | Bézier curve (  T )   |
|                       |                       | command(s).           |
|                       |                       |                       |
|                       |                       | Formula:              |
|                       |                       |      P  o  ′ =  P  n  |
|                       |                       |     = {   x  ,   y  } |
+-----------------------+-----------------------+-----------------------+
| t                     | (   dx  ,   dy  )+    | Draw a smooth         |
|                       |                       | quadratic Bézier      |
|                       |                       | curve from the        |
|                       |                       | current point to the  |
|                       |                       | end point , which is  |
|                       |                       | the current point     |
|                       |                       | shifted by   dx       |
|                       |                       | along the x-axis and  |
|                       |                       |   dy  along the       |
|                       |                       | y-axis. The control   |
|                       |                       | point is the          |
|                       |                       | reflection of the     |
|                       |                       | control point of the  |
|                       |                       | previous curve        |
|                       |                       | command about the     |
|                       |                       | current point . If    |
|                       |                       | the previous command  |
|                       |                       | wasn't a quadratic    |
|                       |                       | Bézier curve, the     |
|                       |                       | control point is the  |
|                       |                       | same as the curve     |
|                       |                       | starting point (      |
|                       |                       | current point ). Any  |
|                       |                       | subsequent coordinate |
|                       |                       | pair(s) are           |
|                       |                       | interpreted as        |
|                       |                       | parameter(s) for      |
|                       |                       | implicit relative     |
|                       |                       | smooth quadratic      |
|                       |                       | Bézier curve (  t )   |
|                       |                       | command(s).           |
|                       |                       |                       |
|                       |                       | Formulae:             |
|                       |                       |      P  o  ′ =  P  n  |
|                       |                       |     = {  x  o  +      |
|                       |                       |       dx  ,  y  o  +  |
|                       |                       |       dy  }           |
+-----------------------+-----------------------+-----------------------+

Examples

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg
      viewBox="0 0 200 100"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <!-- Quadratic Bézier curve with implicit repetition -->
      <path
        fill="none"
        stroke="red"
        d="M 10,50
               Q 25,25 40,50
               t 30,0 30,0 30,0 30,0 30,0" />

      <!-- Highlight the curve vertex and control points -->
      <g>
        <polyline
          points="10,50 25,25 40,50"
          stroke="rgb(0 0 0 / 20%)"
          fill="none" />
        <circle cx="25" cy="25" r="1.5" />

        <!-- Curve vertex points -->
        <circle cx="10" cy="50" r="1.5" />
        <circle cx="40" cy="50" r="1.5" />

        <g id="SmoothQuadraticDown">
          <polyline
            points="40,50 55,75 70,50"
            stroke="rgb(0 0 0 / 20%)"
            stroke-dasharray="2"
            fill="none" />
          <circle cx="55" cy="75" r="1.5" fill="lightgrey" />
          <circle cx="70" cy="50" r="1.5" />
        </g>

        <g id="SmoothQuadraticUp">
          <polyline
            points="70,50 85,25 100,50"
            stroke="rgb(0 0 0 / 20%)"
            stroke-dasharray="2"
            fill="none" />
          <circle cx="85" cy="25" r="1.5" fill="lightgrey" />
          <circle cx="100" cy="50" r="1.5" />
        </g>

        <use href="#SmoothQuadraticDown" x="60" />
        <use href="#SmoothQuadraticUp" x="60" />
        <use href="#SmoothQuadraticDown" x="120" />
      </g>
    </svg>

Elliptical Arc Curve

Elliptical arc curves are curves defined as a portion of an ellipse. It
is sometimes easier to draw highly regular curves with an elliptical arc
than with a Bézier curve.

+-----------------------+-----------------------+-----------------------+
| Command               | Parameters            | Notes                 |
+-----------------------+-----------------------+-----------------------+
| A                     | (   rx    ry          | Draw an Arc curve     |
|                       |   angle               | from the current      |
|                       |   large-arc-flag      | point to the          |
|                       |   sweep-flag    x     | coordinate   x  ,     |
|                       |   y  )+               |   y  . The center of  |
|                       |                       | the ellipse used to   |
|                       |                       | draw the arc is       |
|                       |                       | determined            |
|                       |                       | automatically based   |
|                       |                       | on the other          |
|                       |                       | parameters of the     |
|                       |                       | command:              |
|                       |                       |                       |
|                       |                       | -     rx  and   ry    |
|                       |                       |     are the two radii |
|                       |                       |     of the ellipse;   |
|                       |                       | -     angle           |
|                       |                       |     represents a      |
|                       |                       |     rotation (in      |
|                       |                       |     degrees) of the   |
|                       |                       |     ellipse relative  |
|                       |                       |     to the x-axis;    |
|                       |                       | -     large-arc-flag  |
|                       |                       |     and   sweep-flag  |
|                       |                       |     allows to chose   |
|                       |                       |     which arc must be |
|                       |                       |     drawn as 4        |
|                       |                       |     possible arcs can |
|                       |                       |     be drawn out of   |
|                       |                       |     the other         |
|                       |                       |     parameters.       |
|                       |                       |                       |
|                       |                       | -     large-arc-flag  |
|                       |                       |         allows to     |
|                       |                       |         chose one of  |
|                       |                       |         the large arc |
|                       |                       |         (  1 ) or     |
|                       |                       |         small arc (   |
|                       |                       |          0 ),         |
|                       |                       |     -     sweep-flag  |
|                       |                       |         allows to     |
|                       |                       |         chose one of  |
|                       |                       |         the clockwise |
|                       |                       |         turning arc ( |
|                       |                       |          1 ) or       |
|                       |                       |                       |
|                       |                       |      counterclockwise |
|                       |                       |         turning arc ( |
|                       |                       |          0 )          |
|                       |                       |                       |
|                       |                       | The coordinate   x  , |
|                       |                       |   y  becomes the new  |
|                       |                       | current point for the |
|                       |                       | next command. All     |
|                       |                       | subsequent sets of    |
|                       |                       | parameters are        |
|                       |                       | considered implicit   |
|                       |                       | absolute arc curve (  |
|                       |                       |  A ) commands.        |
+-----------------------+-----------------------+-----------------------+
| a                     | (   rx    ry          | Draw an Arc curve     |
|                       |   angle               | from the current      |
|                       |   large-arc-flag      | point to a point for  |
|                       |   sweep-flag    dx    | which coordinates are |
|                       |   dy  )+              | those of the current  |
|                       |                       | point shifted by      |
|                       |                       |   dx  along the       |
|                       |                       | x-axis and   dy       |
|                       |                       | along the y-axis. The |
|                       |                       | center of the ellipse |
|                       |                       | used to draw the arc  |
|                       |                       | is determined         |
|                       |                       | automatically based   |
|                       |                       | on the other          |
|                       |                       | parameters of the     |
|                       |                       | command:              |
|                       |                       |                       |
|                       |                       | -     rx  and   ry    |
|                       |                       |     are the two radii |
|                       |                       |     of the ellipse;   |
|                       |                       | -     angle           |
|                       |                       |     represents a      |
|                       |                       |     rotation (in      |
|                       |                       |     degrees) of the   |
|                       |                       |     ellipse relative  |
|                       |                       |     to the x-axis;    |
|                       |                       | -     large-arc-flag  |
|                       |                       |     and   sweep-flag  |
|                       |                       |     allows to chose   |
|                       |                       |     which arc must be |
|                       |                       |     drawn as 4        |
|                       |                       |     possible arcs can |
|                       |                       |     be drawn out of   |
|                       |                       |     the other         |
|                       |                       |     parameters.       |
|                       |                       |                       |
|                       |                       | -     large-arc-flag  |
|                       |                       |         allows a      |
|                       |                       |         choice of     |
|                       |                       |         large arc (   |
|                       |                       |          1 ) or small |
|                       |                       |         arc (  0 ),   |
|                       |                       |     -     sweep-flag  |
|                       |                       |         allows a      |
|                       |                       |         choice of a   |
|                       |                       |         clockwise arc |
|                       |                       |         (  1 ) or     |
|                       |                       |                       |
|                       |                       |      counterclockwise |
|                       |                       |         arc (  0 )    |
|                       |                       |                       |
|                       |                       | The current point     |
|                       |                       | gets its X and Y      |
|                       |                       | coordinates shifted   |
|                       |                       | by   dx  and   dy     |
|                       |                       | for the next command. |
|                       |                       | All subsequent sets   |
|                       |                       | of parameters are     |
|                       |                       | considered implicit   |
|                       |                       | relative arc curve (  |
|                       |                       |  a ) commands.        |
+-----------------------+-----------------------+-----------------------+

Examples

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
      <!-- The influence of the arc flags with which the arc is drawn -->
      <path
        fill="none"
        stroke="red"
        d="M 6,10
               A 6 4 10 1 0 14,10" />

      <path
        fill="none"
        stroke="lime"
        d="M 6,10
               A 6 4 10 1 1 14,10" />

      <path
        fill="none"
        stroke="purple"
        d="M 6,10
               A 6 4 10 0 1 14,10" />

      <path
        fill="none"
        stroke="pink"
        d="M 6,10
               A 6 4 10 0 0 14,10" />
    </svg>

ClosePath

ClosePath instructions draw a straight line from the current position to
the first point in the path.

  --------- ------------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Command   Parameters   Notes
  Z, z                   Close the current subpath by connecting the last point of the path with its initial point. If the two points are at different coordinates, a straight line is drawn between those two points.
  --------- ------------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Note: The appearance of a shape closed with ClosePath may be different
to that of one closed by drawing a line to the origin, using one of the
other commands, because the line ends are joined together (according to
the   stroke-linejoin  setting), rather than just being placed at the
same coordinates.

Examples

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 -1 30 11" xmlns="http://www.w3.org/2000/svg">
      <!--
      An open shape with the last point of
      the path different to the first one
      -->
      <path
        stroke="red"
        d="M 5,1
               l -4,8 8,0" />

      <!--
      An open shape with the last point of
      the path matching the first one
      -->
      <path
        stroke="red"
        d="M 15,1
               l -4,8 8,0 -4,-8" />

      <!--
      A closed shape with the last point of
      the path different to the first one
      -->
      <path
        stroke="red"
        d="M 25,1
               l -4,8 8,0
               z" />
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # DProperty

  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # GlyphElementDAttribute

  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # DAttribute
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 15, 2024 by MDN contributors .
# diffuseConstant #

The  diffuseConstant attribute represents the k _(d) value in the Phong
lighting model . In SVG, this can be any non-negative number.

It's used to determine the final RGB value of a given pixel. The
brighter the lighting-color, the smaller this number should be.

You can use this attribute with the following SVG elements:

-    <feDiffuseLighting>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="diffuseLighting1" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting in="SourceGraphic" diffuseConstant="1">
          <fePointLight x="60" y="60" z="20" />
        </feDiffuseLighting>
      </filter>
      <filter id="diffuseLighting2" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting in="SourceGraphic" diffuseConstant="2">
          <fePointLight x="60" y="60" z="20" />
        </feDiffuseLighting>
      </filter>

      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#diffuseLighting1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#diffuseLighting2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- -----------
  Value            <number>
  Default value    1
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fediffuselighting-diffuseconstant

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Description of Phong reflection model on Wikipedia

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# direction #

The  direction attribute specifies the inline-base direction of a
 <text> or  <tspan> element. It defines the start and end points of a
line of text as used by the   text-anchor  and   inline-size 
properties. It also may affect the direction in which characters are
positioned if the   unicode-bidi  property's value is either  embed or
 bidi-override .

It applies only to glyphs oriented perpendicular to the inline-base
direction, which includes the usual case of horizontally-oriented Latin
or Arabic text and the case of narrow-cell Latin or Arabic characters
rotated 90 degrees clockwise relative to a top-to-bottom inline-base
direction.

In many cases, the bidirectional Unicode algorithm produces the desired
result automatically, so this attribute doesn't need to be specified in
those cases. For other cases, such as when using right-to-left
languages, it may be sufficient to add the  direction attribute to the
outermost  <svg> element, and allow that direction to inherit to all
text elements:

Note: As a presentation attribute,  direction can be used as a CSS
property. See  CSS direction for further information.

You can use this attribute with the following SVG elements:

-    <textPath>
-    <text>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg
      viewBox="0 0 600 72"
      xmlns="http://www.w3.org/2000/svg"
      direction="rtl"
      lang="fa">
      <text x="300" y="50" text-anchor="middle" font-size="36">
        داستان SVG 1.1 SE طولا ني است.
      </text>
    </svg>

Usage notes

  --------------- -------------
  Value            ltr |  rtl
  Default value    ltr
  Animatable      Yes
  --------------- -------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Writing Modes Level 4
  # direction

  Scalable Vector Graphics (SVG) 2
  # DirectionProperty
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS direction

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# display #

The  display attribute lets you control the rendering of graphical or
container elements.

A value of  display="none" indicates that the given element and its
children will not be rendered. Any value other than  none or  inherit
indicates that the given element will be rendered by the browser.

When applied to a container element, setting  display to  none causes
the container and all of its children to be invisible; thus, it acts on
groups of elements as a group. This means that any child of an element
with  display="none" will never be rendered even if the child has a
value for  display other than  none .

When the  display attribute is set to  none , then the given element
does not become part of the rendering tree. It has implications for the
 <tspan> and  <tref> elements, event processing, for bounding box
calculations and for calculation of clipping paths:

-   If  display is set to  none on a  <tspan> or  <tref> element, then
    the text string is ignored for the purposes of text layout.
-   Regarding events, if  display is set to  none , the element receives
    no events.
-   The geometry of a graphics element with  display set to  none is not
    included in bounding box and clipping paths calculations.

The  display attribute only affects the direct rendering of a given
element, whereas it does not prevent elements from being referenced by
other elements. For example, setting it to  none on a  <path> element
will prevent that element from getting rendered directly onto the
canvas, but the  <path> element can still be referenced by a  <textPath>
element; furthermore, its geometry will be used in text-on-a-path
processing even if the  <path> has a  display value of  none .

This attribute also affects direct rendering into offscreen canvases,
such as occurs with masks or clip paths. Thus, setting  display="none"
on a child of a  <mask> will prevent the given child element from being
rendered as part of the mask. Similarly, setting  display="none" on a
child of a  <clipPath> element will prevent the given child element from
contributing to the clipping path.

Note: As a presentation attribute,  display can be used as a CSS
property. See  CSS display for further information.

You can use this attribute with any SVG element.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 220 100" xmlns="http://www.w3.org/2000/svg">
      <!-- Here the yellow rectangle is displayed -->
      <rect x="0" y="0" width="100" height="100" fill="skyblue"></rect>
      <rect x="20" y="20" width="60" height="60" fill="yellow"></rect>

      <!-- Here the yellow rectangle is not displayed -->
      <rect x="120" y="0" width="100" height="100" fill="skyblue"></rect>
      <rect
        x="140"
        y="20"
        width="60"
        height="60"
        fill="yellow"
        display="none"></rect>
    </svg>

Usage notes

  --------------- --------------------------------------------
  Default value    inline
  Value           Error: could not find syntax for this item
  Animatable      Yes
  --------------- --------------------------------------------

For a description of the values, please refer to the  CSS display
property.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # VisibilityControl

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     visibility  attribute
-    CSS display

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# divisor #

The  divisor attribute specifies the value by which the resulting number
of applying the   kernelMatrix  of a  <feConvolveMatrix> element to the
input image color value is divided to yield the destination color value.

A divisor that is the sum of all the matrix values tends to have an
evening effect on the overall color intensity of the result.

You can use this attribute with the following SVG elements:

-    <feConvolveMatrix>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="convolveMatrix1" x="0" y="0" width="100%" height="100%">
        <feConvolveMatrix kernelMatrix="1 2 0 0 0 0 0 0 -1" divisor="1" />
      </filter>
      <filter id="convolveMatrix2" x="0" y="0" width="100%" height="100%">
        <feConvolveMatrix kernelMatrix="1 2 0 0 0 0 0 0 -1" divisor="8" />
      </filter>

      <image
        href="mdn_logo_only_color.png"
        width="200"
        height="200"
        style="filter:url(#convolveMatrix1);" />
      <image
        href="mdn_logo_only_color.png"
        width="200"
        height="200"
        style="filter:url(#convolveMatrix2); transform:translateX(220px);" />
    </svg>

Usage notes

  --------------- --------------------------------------------------------
  Value            <number>
  Default value   Sum of all values in   kernelMatrix  or  1 if sum is 0
  Animatable      Yes
  --------------- --------------------------------------------------------

 <number>

    This value defines the divisor. If the specified divisor is  0 then
    the default value will be used instead.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-feconvolvematrix-divisor

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# dominant-baseline #

The  dominant-baseline attribute specifies the dominant baseline, which
is the baseline used to align the box's text and inline-level contents.
It also indicates the default alignment baseline of any boxes
participating in baseline alignment in the box's alignment context.

It is used to determine or re-determine a scaled-baseline-table. A
scaled-baseline-table is a compound value with three components:

1.  a baseline-identifier for the dominant-baseline,
2.  a baseline-table, and
3.  a baseline-table font-size.

Some values of the property re-determine all three values. Others only
re-establish the baseline-table font-size. When the initial value,  auto
, would give an undesired result, this property can be used to
explicitly set the desired scaled-baseline-table.

If there is no baseline table in the nominal font, or if the baseline
table lacks an entry for the desired baseline, then the browser may use
heuristics to determine the position of the desired baseline.

Note: As a presentation attribute,  dominant-baseline can be used as a
CSS property.

You can use this attribute with the following SVG elements:

-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

    text {
      font:
        bold 14px Verdana,
        Helvetica,
        Arial,
        sans-serif;
    }

html

    <svg viewBox="0 0 200 120" xmlns="http://www.w3.org/2000/svg">
      <path d="M20,20 L180,20 M20,50 L180,50 M20,80 L180,80" stroke="grey" />

      <text dominant-baseline="auto" x="30" y="20">Auto</text>
      <text dominant-baseline="middle" x="30" y="50">Middle</text>
      <text dominant-baseline="hanging" x="30" y="80">Hanging</text>
    </svg>

Usage notes

  --------------- ---------------------------------------------------------------------------------------------------------------
  Value            auto |  text-bottom |  alphabetic |  ideographic |  middle |  central |  mathematical |  hanging |  text-top
  Default value    auto
  Animatable      discrete
  --------------- ---------------------------------------------------------------------------------------------------------------

 auto

    If this property occurs on a  <text> element, then the computed
    value depends on the value of the   writing-mode  attribute.

    If the   writing-mode  is horizontal, then the value of the
    dominant-baseline component is  alphabetic . Otherwise, if the
      writing-mode  is vertical, then the value of the dominant-baseline
    component is  central .

    If this property occurs on a  <tspan> ,  <tref> , or  <textPath>
    element, then the dominant-baseline and the baseline-table
    components remain the same as those of the parent text content
    element.

    If the computed   baseline-shift  value actually shifts the
    baseline, then the baseline-table font-size component is set to the
    value of the   font-size  attribute on the element on which the
     dominant-baseline attribute occurs, otherwise the baseline-table
    font-size remains the same as that of the element.

    If there is no parent text content element, the
    scaled-baseline-table value is constructed as above for  <text>
    elements.

 use-script  Deprecated 

    The dominant-baseline and the baseline-table components are set by
    determining the predominant script of the character data content.
    The   writing-mode  , whether horizontal or vertical, is used to
    select the appropriate set of baseline-tables and the dominant
    baseline is used to select the baseline-table that corresponds to
    that baseline. The baseline-table font-size component is set to the
    value of the   font-size  attribute on the element on which the
     dominant-baseline attribute occurs.

 no-change  Deprecated 

    The dominant-baseline, the baseline-table, and the baseline-table
    font-size remain the same as that of the parent text content
    element.

 reset-size  Deprecated 

    The dominant-baseline and the baseline-table remain the same, but
    the baseline-table font-size is changed to the value of the
      font-size  attribute on this element. This re-scales the
    baseline-table for the current   font-size  .

 ideographic

    The baseline-identifier for the dominant-baseline is set to be
     ideographic , the derived baseline-table is constructed using the
     ideographic baseline-table in the font, and the baseline-table
    font-size is changed to the value of the   font-size  attribute on
    this element.

 alphabetic

    The baseline-identifier for the dominant-baseline is set to be
     alphabetic , the derived baseline-table is constructed using the
     alphabetic baseline-table in the font, and the baseline-table
    font-size is changed to the value of the   font-size  attribute on
    this element.

 hanging

    The baseline-identifier for the dominant-baseline is set to be
     hanging , the derived baseline-table is constructed using the
     hanging baseline-table in the font, and the baseline-table
    font-size is changed to the value of the   font-size  attribute on
    this element.

 mathematical

    The baseline-identifier for the dominant-baseline is set to be
     mathematical , the derived baseline-table is constructed using the
     mathematical baseline-table in the font, and the baseline-table
    font-size is changed to the value of the   font-size  attribute on
    this element.

 central

    The baseline-identifier for the dominant-baseline is set to be
     central . The derived baseline-table is constructed from the
    defined baselines in a baseline-table in the font. That font
    baseline-table is chosen using the following priority order of
    baseline-table names:  ideographic ,  alphabetic ,  hanging ,
     mathematical . The baseline-table font-size is changed to the value
    of the   font-size  attribute on this element.

 middle

    The baseline-identifier for the dominant-baseline is set to be
     middle . The derived baseline-table is constructed from the defined
    baselines in a baseline-table in the font. That font baseline-table
    is chosen using the following priority order of baseline-table
    names:  alphabetic ,  ideographic ,  hanging ,  mathematical . The
    baseline-table font-size is changed to the value of the   font-size 
    attribute on this element.

 text-after-edge

    The baseline-identifier for the dominant-baseline is set to be
     text-after-edge . The derived baseline-table is constructed from
    the defined baselines in a baseline-table in the font. The choice of
    which font baseline-table to use from the baseline-tables in the
    font is browser dependent. The baseline-table font-size is changed
    to the value of the   font-size  attribute on this element.

 text-before-edge

    The baseline-identifier for the dominant-baseline is set to be
     text-before-edge . The derived baseline-table is constructed from
    the defined baselines in a baseline-table in the font. The choice of
    which baseline-table to use from the baseline-tables in the font is
    browser dependent. The baseline-table font-size is changed to the
    value of the   font-size  attribute on this element.

 text-top

    This value uses the top of the em box as the baseline.

SVG

html

    <svg
      width="400"
      height="300"
      viewBox="0 0 300 300"
      xmlns="http://www.w3.org/2000/svg">
      <!-- Materialization of anchors -->
      <path
        d="M60,20 L60,270
               M30,20 L400,20
               M30,70 L400,70
               M30,120 L400,120
               M30,170 L400,170
               M30,220 L400,220
               M30,270 L400,270"
        stroke="grey" />

      <!-- Anchors in action -->
      <text dominant-baseline="auto" x="70" y="20">auto</text>
      <text dominant-baseline="middle" x="70" y="70">middle</text>
      <text dominant-baseline="hanging" x="70" y="170">hanging</text>
      <text dominant-baseline="mathematical" x="70" y="220">mathematical</text>
      <text dominant-baseline="text-top" x="70" y="270">text-top</text>

      <!-- Materialization of anchors -->
      <circle cx="60" cy="20" r="3" fill="red" />
      <circle cx="60" cy="70" r="3" fill="red" />
      <circle cx="60" cy="120" r="3" fill="red" />
      <circle cx="60" cy="170" r="3" fill="red" />
      <circle cx="60" cy="220" r="3" fill="red" />
      <circle cx="60" cy="270" r="3" fill="red" />

      <style>
        <![CDATA[
          text {
            font: bold 30px Verdana, Helvetica, Arial, sans-serif;
          }
          ]]>
      </style>
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # DominantBaselineProperty

  CSS Inline Layout Module Level 3
  # dominant-baseline-property
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 7, 2023 by MDN contributors .
# dur #

The  dur attribute indicates the simple duration of an animation.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <set>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 220 150" xmlns="http://www.w3.org/2000/svg">
      <rect x="0" y="0" width="100" height="100">
        <animate
          attributeType="XML"
          attributeName="y"
          from="0"
          to="50"
          dur="1s"
          repeatCount="indefinite" />
      </rect>
      <rect x="120" y="0" width="100" height="100">
        <animate
          attributeType="XML"
          attributeName="y"
          from="0"
          to="50"
          dur="3s"
          repeatCount="indefinite" />
      </rect>
    </svg>

Usage notes

  --------------- -----------------------------------------
  Value             <clock-value>  |  media |  indefinite
  Default value    indefinite
  Animatable      No
  --------------- -----------------------------------------

 <clock-value>

    This value specifies the length of the simple duration. The value
    must be greater than 0 and can be expressed with hours (  h ),
    minutes (  m ), seconds (  s ) or milliseconds (  ms ). It's
    possible to combine those time representations to create some
    complex durations like  hh:mm:ss.iii or  mm:ss.iii .

 media

    This value specifies the simple duration as the intrinsic media
    duration. This is only valid for elements that define media. (For
    animation elements the attribute will be ignored if  media is
    specified.)

 indefinite

    This value specifies the simple duration as indefinite.

Note: the interpolation will not work if the simple duration is
indefinite (although this may still be useful for  <set> elements).

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # DurAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# dx #

The  dx attribute indicates a shift along the x-axis on the position of
an element or its content.

You can use this attribute with the following SVG elements:

-    <feDropShadow>
-    <feOffset>
-    <glyphRef>
-    <text>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <!-- Lines materialized the position of the glyphs -->
      <line x1="0" x2="100%" y1="50%" y2="50%" />
      <line x1="10%" x2="10%" y1="0" y2="100%" />
      <line x1="60%" x2="60%" y1="0" y2="100%" />

      <!-- Some reference text -->
      <text x="10%" y="50%" fill="grey">SVG</text>

      <!-- The same text with a shift along the x-axis -->
      <text dx="50%" x="10%" y="50%">SVG</text>
    </svg>

css

    line {
      stroke: red;
      stroke-width: 0.5px;
      stroke-dasharray: 3px;
    }

feDropShadow

For  <feDropShadow> ,  dx defines the x offset of the dropped shadow.
The unit used to resolve the value of the attribute is set by the
  primitiveUnits  attribute of the  <filter> element.

  --------------- ----------
  Value           <number>
  Default value    2
  Animatable      Yes
  --------------- ----------

feOffset

For  <feOffset> ,  dx defines the x offset of the filter input graphic.
The unit used to resolve the value of the attribute is set by the
  primitiveUnits  attribute of the  <filter> element.

  --------------- ----------
  Value           <number>
  Default value    0
  Animatable      Yes
  --------------- ----------

glyphRef

Warning: As of SVG2  <glyphRef> is deprecated and shouldn't be used.

For  <glyphRef> ,  dx defines the x offset of the glyph, in the font
metric system.

  --------------- ----------
  Value           <number>
  Default value    0
  Animatable      Yes
  --------------- ----------

text

For  <text> , if it contains a single value,  dx defines a shift along
the x-axis for all glyphs.

If there are multiple values,  dx defines a shift along the x-axis for
each individual glyph relative to the preceding glyph. If there are less
values than glyphs, the remaining glyphs use a value of  0 . If there
are more values than glyphs, extra values are ignored.

  --------------- ------------------
  Value           List of <length>
  Default value   none
  Animatable      Yes
  --------------- ------------------

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <!-- Lines materialized the position of the glyphs -->
      <line x1="0" x2="100%" y1="25%" y2="25%" />
      <line x1="0" x2="100%" y1="50%" y2="50%" />
      <line x1="0" x2="100%" y1="75%" y2="75%" />

      <line x1="10%" x2="10%" y1="0" y2="100%" />
      <line x1="30%" x2="30%" y1="0" y2="100%" />
      <line x1="60%" x2="60%" y1="0" y2="100%" />

      <!-- Behaviors change based on the number
           of values in the attributes -->
      <text dx="20%" x="10%" y="25%">SVG</text>
      <text dx="0 10%" x="10%" y="50%">SVG</text>
      <text dx="0 10% 20%" x="10%" y="75%">SVG</text>
    </svg>

css

    line {
      stroke: red;
      stroke-width: 0.5px;
      stroke-dasharray: 3px;
    }

tref

Warning: As of SVG2  <tref> is deprecated and shouldn't be used.

For  <tref> , if it contains a single value,  dx defines a shift along
the x-axis for all glyphs.

If there are multiple values,  dx defines a shift along the x-axis for
each individual glyph relative to the preceding glyph. If there are less
values than glyphs, the remaining glyphs use a value of  0 . If there
are more values than glyphs, extra values are ignored.

  --------------- ------------------
  Value           List of <length>
  Default value   none
  Animatable      Yes
  --------------- ------------------

tspan

For  <tspan> , if it contains a single value,  dx defines a shift along
the x-axis for all alternate glyph.

If there are multiple values,  dx defines a shift along the x-axis for
each individual glyph relative to the preceding glyph. If there are less
values than glyphs, the remaining glyphs use a value of  0 . If there
are more values than glyphs, extra values are ignored.

  --------------- ------------------
  Value           List of <length>
  Default value   none
  Animatable      Yes
  --------------- ------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fedropshadow-dx

  Filter Effects Module Level 1
  # element-attrdef-feoffset-dx

  Scalable Vector Graphics (SVG) 2
  # TextElementDXAttribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# dy #

The  dy attribute indicates a shift along the y-axis on the position of
an element or its content.

You can use this attribute with the following SVG elements:

-    <feDropShadow>
-    <feOffset>
-    <glyphRef>
-    <text>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <!-- Lines materialized the position of the glyphs -->
      <line x1="10%" x2="10%" y1="0" y2="100%" />
      <line x1="0" x2="100%" y1="30%" y2="30%" />
      <line x1="0" x2="100%" y1="80%" y2="80%" />

      <!-- Some reference text -->
      <text x="10%" y="30%" fill="grey">SVG</text>

      <!-- The same text with a shift along the y-axis -->
      <text dy="50%" x="10%" y="30%">SVG</text>
    </svg>

css

    line {
      stroke: red;
      stroke-width: 0.5px;
      stroke-dasharray: 3px;
    }

feDropShadow

For  <feDropShadow> ,  dy defines the y offset of the dropped shadow.
The unit used to resolve the value of the attribute is set by the
  primitiveUnits  attribute of the  <filter> element.

  --------------- ----------
  Value           <number>
  Default value    2
  Animatable      Yes
  --------------- ----------

feOffset

For  <feOffset> ,  dy defines the y offset of the filter input graphic.
The unit used to resolve the value of the attribute is set by the
  primitiveUnits  attribute of the  <filter> element.

  --------------- ----------
  Value           <number>
  Default value    0
  Animatable      Yes
  --------------- ----------

glyphRef

Warning: As of SVG2  <glyphRef> is deprecated and shouldn't be used.

For  <glyphRef> ,  dy defines the y offset of the glyph, in the font
metric system.

  --------------- ----------
  Value           <number>
  Default value    0
  Animatable      Yes
  --------------- ----------

text

For  <text> , if it contains a single value,  dy defines a shift along
the y-axis for all glyphs.

If there are multiple values,  dy defines a shift along the y-axis for
each individual glyph relative to the preceding glyph. If there are less
values than glyphs, the remaining glyphs use a value of  0 . If there
are more values than glyphs, extra values are ignored.

  --------------- ------------------
  Value           List of <length>
  Default value   none
  Animatable      Yes
  --------------- ------------------

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 150 100" xmlns="http://www.w3.org/2000/svg">
      <!-- Horizontal lines -->
      <line x1="0" x2="100%" y1="30" y2="30" />
      <line x1="0" x2="100%" y1="40" y2="40" />
      <line x1="0" x2="100%" y1="50" y2="50" />
      <line x1="0" x2="100%" y1="60" y2="60" />

      <!-- Vertical lines -->
      <line x1="10" x2="10" y1="0" y2="100%" />
      <line x1="50" x2="50" y1="0" y2="100%" />
      <line x1="90" x2="90" y1="0" y2="100%" />

      <!-- Behaviors change based on the number of values in the attributes -->
      <text dy="20" x="10" y="30">SVG</text>
      <text dy="0 10" x="50" y="30">SVG</text>
      <text dy="0 10 20" x="90" y="30">SVG</text>
    </svg>

css

    line {
      stroke: red;
      stroke-width: 0.5px;
      stroke-dasharray: 3px;
    }

tref

Warning: As of SVG2  <tref> is deprecated and shouldn't be used.

For  <tref> , if it contains a single value,  dy defines a shift along
the y-axis for all glyphs.

If there are multiple values,  dy defines a shift along the y-axis for
each individual glyph relative to the preceding glyph. If there are less
values than glyphs, the remaining glyphs use a value of  0 . If there
are more values than glyphs, extra values are ignored.

  --------------- ------------------
  Value           List of <length>
  Default value   none
  Animatable      Yes
  --------------- ------------------

tspan

For  <tspan> , if it contains a single value,  dy defines a shift along
the y-axis for all alternate glyph.

If there are multiple values,  dy defines a shift along the y-axis for
each individual glyph relative to the preceding glyph. If there are less
values than glyphs, the remaining glyphs use a value of  0 . If there
are more values than glyphs, extra values are ignored.

  --------------- ------------------
  Value           List of <length>
  Default value   none
  Animatable      Yes
  --------------- ------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fedropshadow-dy

  Filter Effects Module Level 1
  # element-attrdef-feoffset-dy

  Scalable Vector Graphics (SVG) 2
  # TextElementDYAttribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# edgeMode #

The  edgeMode attribute determines how to extend the input image as
necessary with color values so that the matrix operations can be applied
when the kernel is positioned at or near the edge of the input image.

You can use this attribute with the following SVG elements:

-    <feConvolveMatrix>
-    <feGaussianBlur>

feConvolveMatrix

For  <feConvolveMatrix> ,  edgeMode determines how to extend the input
image as necessary with color values so that the matrix operations can
be applied when the kernel is positioned at or near the edge of the
input image.

  --------------- ----------------------------
  Value            duplicate |  wrap |  none
  Default value    duplicate
  Animatable      Yes
  --------------- ----------------------------

 duplicate

    This value indicates that the input image is extended along each of
    its borders as necessary by duplicating the color values at the
    given edge of the input image.

 wrap

    This value indicates that the input image is extended by taking the
    color values from the opposite edge of the image.

 none

    This value indicates that the input image is extended with pixel
    values of zero for R, G, B and A.

feGaussianBlur

For  <feGaussianBlur> ,  edgeMode determines how to extend the input
image as necessary with color values so that the matrix operations can
be applied when the kernel is positioned at or near the edge of the
input image.

  --------------- ----------------------------
  Value            duplicate |  wrap |  none
  Default value    none
  Animatable      Yes
  --------------- ----------------------------

 duplicate

    This value indicates that the input image is extended along each of
    its borders as necessary by duplicating the color values at the
    given edge of the input image.

 wrap

    This value indicates that the input image is extended by taking the
    color values from the opposite edge of the image.

 none

    This value indicates that the input image is extended with pixel
    values of zero for R, G, B and A.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-feconvolvematrix-edgemode

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 3, 2023 by MDN contributors .
# elevation #

The  elevation attribute specifies the direction angle for the light
source from the XY plane towards the Z-axis, in degrees. Note that the
positive Z-axis points towards the viewer of the content.

You can use this attribute with the following SVG elements:

-    <feDistantLight>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 440 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="distantLight1">
        <feDiffuseLighting>
          <feDistantLight elevation="0" />
        </feDiffuseLighting>
      </filter>
      <filter id="distantLight2">
        <feDiffuseLighting>
          <feDistantLight elevation="45" />
        </feDiffuseLighting>
      </filter>

      <circle cx="100" cy="100" r="80" style="filter: url(#distantLight1);" />
      <circle
        cx="100"
        cy="100"
        r="80"
        style="filter: url(#distantLight2); transform: translateX(240px);" />
    </svg>

Usage notes

  --------------- -----------
  Value            <number>
  Default value   0
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fedistantlight-elevation

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# enable-background #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  enable-background attribute specifies how the accumulation of the
background image is managed.

Note: As a presentation attribute,  enable-background can be used as a
CSS property.

You can use this attribute with the following SVG elements:

-    <a>
-    <defs>
-    <glyph>
-    <g>
-    <marker>
-    <mask>
-    <missing-glyph>
-    <pattern>
-    <svg>
-    <switch>
-    <symbol>

Context notes

  --------------- ------------------------------------------------------
  Value            accumulate |  new [  <x>  <y>  <width>  <height> ]?
  Default value    accumulate
  Animatable      No
  --------------- ------------------------------------------------------

 accumulate

    If an ancestor container element has a property value of
     enable-background: new , then all graphics elements within the
    current container element are rendered both onto the parent
    container element's background image canvas and onto the target
    device.

    Otherwise, there is no current background image canvas, so graphics
    elements are only rendered onto the target device.

 new [ <x> <y> <width> <height> ]?

    This value enables the ability of children of the current container
    element to access the background image.

    It also indicates that a new (i.e., initially transparent black)
    background image canvas is established and that in effect all
    children of the current container element shall be rendered into the
    new background image canvas in addition to being rendered onto the
    target device.

    The optional  <x> ,  <y> ,  <width> , and  <height> parameters are
     <number> values that indicate the subregion of the container
    element's user space where access to the background image is allowed
    to happen. Those values act as a clipping rectangle on the
    background image canvas. Negative values for  <width> or  <height>
    are forbidden. If one, two, or three values are specified or if
    neither  <width> nor  <height> are specified, the  BackgroundImage
    and  BackgroundAlpha of a filter primitive are processed as if
    background image processing were not enabled.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # EnableBackgroundProperty

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# end #

The  end attribute defines an end value for the animation that can
constrain the active duration.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <set>

Usage notes

  --------------- -------------------
  Default value   None
  Value            <end-value-list>
  Animatable      No
  --------------- -------------------

The  <end-value-list> is a semicolon-separated list of values. Each
value can be one of the following:

 <offset-value>

    This value defines a clock-value that represents a point in time
    relative to the beginning of the SVG document (usually the  load or
     DOMContentLoaded event). Negative values are valid.

 <syncbase-value>

    This value defines a syncbase and an optional offset from that
    syncbase . The element's animation end time is defined relative to
    the begin or active end of another animation.

    A valid syncbase-value consists of an ID reference to another
    animation element followed by a dot and either  begin or  end to
    identify whether to synchronize with the beginning or active end of
    the referenced animation element. An optional offset value as
    defined in  <offset-value> can be appended.

 <event-value>

    This value defines an event and an optional offset that determines
    the time at which the element's animation should end. The animation
    end time is defined relative to the time that the specified event is
    fired.

    A valid event-value consists of an element ID followed by a dot and
    one of the supported events for that element. All valid events (not
    necessarily supported by all elements) are defined by the DOM and
    HTML specifications. Those are:

    -    focus
    -    blur
    -    focusin
    -    focusout
    -    activate
    -    auxclick
    -    click
    -    dblclick
    -    mousedown
    -    mouseenter
    -    mouseleave
    -    mousemove
    -    mouseout
    -    mouseover
    -    mouseup
    -    wheel
    -    beforeinput
    -    input
    -    keydown
    -    keyup
    -    compositionstart
    -    compositionupdate
    -    compositionend
    -    load
    -    unload
    -    abort
    -    error
    -    select
    -    resize
    -    scroll
    -    beginEvent
    -    endEvent
    -    repeatEvent

    An optional offset value as defined in  <offset-value> can be
    appended.

 <repeat-value>

    This value defines a qualified repeat event. The element animation
    end time is defined relative to the time that the repeat event is
    raised with the specified iteration value.

    A valid repeat value consists of an element ID followed by a dot and
    the function  repeat() with an integer value specifying the number
    of repetitions as parameter. An optional offset value as defined in
     <offset-value> can be appended.

 <accessKey-value>

    This value defines an access key that should trigger the end of the
    animation. The element animation will end when the user presses the
    specified key.

    A valid accessKey-value consists of the function  accessKey() with
    the character to be input as parameter. An optional offset value as
    defined in  <offset-value> can be appended.

 <wallclock-sync-value>

    This value defines the animation end time as a real-world clock
    time.

    A valid wallclock-sync-value consists of the function  wallclock()
    with a time value as parameter. The time syntax is based upon the
    syntax defined in ISO 8601 .

 indefinite

    The end of the animation will be determined by an
     SVGAnimationElement.endElement() method call.

Examples

Offset example

html

    <svg
      width="120"
      height="120"
      viewBox="0 0 120 120"
      xmlns="http://www.w3.org/2000/svg"
      version="1.1">
      <!-- animated rectangles -->
      <rect x="10" y="35" height="15" width="0">
        <animate
          attributeType="XML"
          attributeName="width"
          to="100"
          begin="0s"
          end="8s"
          fill="freeze" />
      </rect>

      <rect x="10" y="60" height="15" width="0">
        <animate
          attributeType="XML"
          attributeName="width"
          to="75"
          begin="0s"
          end="6s"
          fill="freeze" />
      </rect>

      <rect x="10" y="85" height="15" width="0">
        <animate
          attributeType="XML"
          attributeName="width"
          to="50"
          begin="0s"
          end="4s"
          fill="freeze" />
      </rect>

      <!-- grid -->
      <text x="10" y="20" text-anchor="middle">0s</text>
      <line x1="10" y1="25" x2="10" y2="105" stroke="grey" stroke-width=".5" />
      <text x="35" y="20" text-anchor="middle">2s</text>
      <line x1="35" y1="25" x2="35" y2="105" stroke="grey" stroke-width=".5" />
      <text x="60" y="20" text-anchor="middle">4s</text>
      <line x1="60" y1="25" x2="60" y2="105" stroke="grey" stroke-width=".5" />
      <text x="85" y="20" text-anchor="middle">6s</text>
      <line x1="85" y1="25" x2="85" y2="105" stroke="grey" stroke-width=".5" />
      <text x="110" y="20" text-anchor="middle">8s</text>
      <line x1="110" y1="25" x2="110" y2="105" stroke="grey" stroke-width=".5" />

      <line x1="10" y1="30" x2="110" y2="30" stroke="grey" stroke-width=".5" />
      <line x1="10" y1="105" x2="110" y2="105" stroke="grey" stroke-width=".5" />
    </svg>

Event example

html

    <svg
      width="120"
      height="120"
      viewBox="0 0 120 120"
      xmlns="http://www.w3.org/2000/svg"
      version="1.1"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <!-- animated rectangle -->
      <rect x="10" y="35" height="15" width="0">
        <animate
          attributeType="XML"
          attributeName="width"
          from="0"
          to="100"
          begin="0s"
          end="endButton.click"
          dur="8s"
          repeatCount="indefinite"
          fill="freeze" />
      </rect>

      <!-- trigger -->
      <rect
        id="endButton"
        style="cursor:pointer;"
        x="19.5"
        y="62.5"
        rx="5"
        height="25"
        width="80"
        fill="#EFEFEF"
        stroke="black"
        stroke-width="1" />

      <text x="60" y="80" text-anchor="middle" style="pointer-events:none;">
        Click me.
      </text>

      <!-- grid -->
      <text x="10" y="20" text-anchor="middle">0s</text>
      <line x1="10" y1="25" x2="10" y2="55" stroke="grey" stroke-width=".5" />
      <text x="35" y="20" text-anchor="middle">2s</text>
      <line x1="35" y1="25" x2="35" y2="55" stroke="grey" stroke-width=".5" />
      <text x="60" y="20" text-anchor="middle">4s</text>
      <line x1="60" y1="25" x2="60" y2="55" stroke="grey" stroke-width=".5" />
      <text x="85" y="20" text-anchor="middle">6s</text>
      <line x1="85" y1="25" x2="85" y2="55" stroke="grey" stroke-width=".5" />
      <text x="110" y="20" text-anchor="middle">8s</text>
      <line x1="110" y1="25" x2="110" y2="55" stroke="grey" stroke-width=".5" />

      <line x1="10" y1="30" x2="110" y2="30" stroke="grey" stroke-width=".5" />
      <line x1="10" y1="55" x2="110" y2="55" stroke="grey" stroke-width=".5" />
    </svg>

Accesskey example

html

    <svg
      width="120"
      height="120"
      viewBox="0 0 120 120"
      xmlns="http://www.w3.org/2000/svg"
      version="1.1"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <!-- animated rectangles -->
      <rect x="10" y="35" height="15" width="0">
        <animate
          attributeType="XML"
          attributeName="width"
          from="0"
          to="100"
          begin="0s"
          end="accessKey(e)"
          dur="8s"
          repeatCount="indefinite"
          fill="freeze" />
      </rect>

      <!-- trigger -->
      <text x="60" y="80" text-anchor="middle" style="pointer-events:none;">
        Hit the "s" key
      </text>

      <!-- grid -->
      <text x="10" y="20" text-anchor="middle">0s</text>
      <line x1="10" y1="25" x2="10" y2="55" stroke="grey" stroke-width=".5" />
      <text x="35" y="20" text-anchor="middle">2s</text>
      <line x1="35" y1="25" x2="35" y2="55" stroke="grey" stroke-width=".5" />
      <text x="60" y="20" text-anchor="middle">4s</text>
      <line x1="60" y1="25" x2="60" y2="55" stroke="grey" stroke-width=".5" />
      <text x="85" y="20" text-anchor="middle">6s</text>
      <line x1="85" y1="25" x2="85" y2="55" stroke="grey" stroke-width=".5" />
      <text x="110" y="20" text-anchor="middle">8s</text>
      <line x1="110" y1="25" x2="110" y2="55" stroke="grey" stroke-width=".5" />

      <line x1="10" y1="30" x2="110" y2="30" stroke="grey" stroke-width=".5" />
      <line x1="10" y1="55" x2="110" y2="55" stroke="grey" stroke-width=".5" />
    </svg>

This example is embedded in an iFrame. If you want to activate the key
events, you have to click on it first.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # EndAttribute

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 18, 2023 by MDN contributors .
# SVG Event Attributes #

Event attributes always have their name starting with "on" followed by
the name of the event for which they are intended. They specifies some
script to run when the event of the given type is dispatched to the
element on which the attributes are specified.

For every event type that the browser supports, SVG supports that as an
event attribute, following the same requirements as for HTML event
attributes.

The global event attributes are available on all SVG elements . Other
event attributes are available on a case by case basis for each
elements.

All event attribute are not animatable .

Attributes

Animation Event Attributes

 onbegin ,  onend ,  onrepeat

Document Event Attributes

 onabort ,  onerror ,  onresize ,  onscroll ,  onunload

Document Element Event Attributes

 oncopy ,  oncut ,  onpaste

Global Event Attributes

 oncancel ,  oncanplay ,  oncanplaythrough ,  onchange ,  onclick ,
 onclose ,  oncuechange ,  ondblclick ,  ondrag ,  ondragend ,
 ondragenter ,  ondragleave ,  ondragover ,  ondragstart ,  ondrop ,
 ondurationchange ,  onemptied ,  onended ,  onerror ,  onfocus ,
 oninput ,  oninvalid ,  onkeydown ,  onkeypress ,  onkeyup ,  onload ,
 onloadeddata ,  onloadedmetadata ,  onloadstart ,  onmousedown ,
 onmouseenter ,  onmouseleave ,  onmousemove ,  onmouseout ,
 onmouseover ,  onmouseup ,  onmousewheel ,  onpause ,  onplay ,
 onplaying ,  onprogress ,  onratechange ,  onreset ,  onresize ,
 onscroll ,  onseeked ,  onseeking ,  onselect ,  onshow ,  onstalled ,
 onsubmit ,  onsuspend ,  ontimeupdate ,  ontoggle ,  onvolumechange ,
 onwaiting

Graphical Event Attributes

 onactivate ,  onfocusin ,  onfocusout

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 22, 2023 by MDN contributors .
# exponent #

The  exponent attribute defines the exponent of the gamma function.

You can use this attribute with the following SVG elements:

-    <feFuncA>
-    <feFuncB>
-    <feFuncG>
-    <feFuncR>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <linearGradient
          id="gradient"
          gradientUnits="userSpaceOnUse"
          x1="0"
          y1="0"
          x2="200"
          y2="0">
          <stop offset="0" stop-color="#ff0000" />
          <stop offset="0.5" stop-color="#00ff00" />
          <stop offset="1" stop-color="#0000ff" />
        </linearGradient>
      </defs>

      <filter id="componentTransfer1" x="0" y="0" width="100%" height="100%">
        <feComponentTransfer>
          <feFuncR type="gamma" exponent="1" />
          <feFuncG type="gamma" exponent="1" />
          <feFuncB type="gamma" exponent="1" />
        </feComponentTransfer>
      </filter>
      <filter id="componentTransfer2" x="0" y="0" width="100%" height="100%">
        <feComponentTransfer>
          <feFuncR type="gamma" exponent="5" />
          <feFuncG type="gamma" exponent="5" />
          <feFuncB type="gamma" exponent="5" />
        </feComponentTransfer>
      </filter>

      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        fill="url(#gradient)"
        style="filter: url(#componentTransfer1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        fill="url(#gradient)"
        style="filter: url(#componentTransfer2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- -----------
  Value            <number>
  Default value    1
  Animatable      Yes
  --------------- -----------

 <number>

    If the   type  attribute of the component element is set to  gamma ,
    this value specifies the exponent of the gamma function

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fecomponenttransfer-exponent

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 3, 2023 by MDN contributors .
# fill #

The  fill attribute has two different meanings. For shapes and text it's
a presentation attribute that defines the color ( or any SVG paint
servers like gradients or patterns ) used to paint the element; for
animation it defines the final state of the animation.

You can use this attribute with the following SVG elements:

-    <circle>
-    <ellipse>
-    <path>
-    <polygon>
-    <polyline>
-    <rect>
-    <text>
-    <textPath>
-    <tref>
-    <tspan>

For animation, these elements are using this attribute:  <animate> ,
 <animateMotion> ,  <animateTransform> , and  <set> .

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 300 100" xmlns="http://www.w3.org/2000/svg">
      <!-- Simple color fill -->
      <circle cx="50" cy="50" r="40" fill="pink" />

      <!-- Fill circle with a gradient -->
      <defs>
        <radialGradient id="myGradient">
          <stop offset="0%" stop-color="pink" />
          <stop offset="100%" stop-color="black" />
        </radialGradient>
      </defs>

      <circle cx="150" cy="50" r="40" fill="url(#myGradient)" />

      <!--
      Keeping the final state of an animated circle
      which is a circle with a radius of 40.
      -->
      <circle cx="250" cy="50" r="20">
        <animate
          attributeType="XML"
          attributeName="r"
          from="0"
          to="40"
          dur="5s"
          fill="freeze" />
      </circle>
    </svg>

animate

For  <animate> ,  fill defines the final state of the animation.

  --------------- ------------------------------------------------------------------------------------------------------------------
  Value            freeze ( Keep the state of the last animation frame ) |  remove ( Keep the state of the first animation frame )
  Default value    remove
  Animatable      No
  --------------- ------------------------------------------------------------------------------------------------------------------

animateMotion

For  <animateMotion> ,  fill defines the final state of the animation.

  --------------- ------------------------------------------------------------------------------------------------------------------
  Value            freeze ( Keep the state of the last animation frame ) |  remove ( Keep the state of the first animation frame )
  Default value    remove
  Animatable      No
  --------------- ------------------------------------------------------------------------------------------------------------------

animateTransform

For  <animateTransform> ,  fill defines the final state of the
animation.

  --------------- ------------------------------------------------------------------------------------------------------------------
  Value            freeze ( Keep the state of the last animation frame ) |  remove ( Keep the state of the first animation frame )
  Default value    remove
  Animatable      No
  --------------- ------------------------------------------------------------------------------------------------------------------

circle

For  <circle> ,  fill is a presentation attribute that defines the color
of the circle.

  --------------- ---------
  Value           <paint>
  Default value    black
  Animatable      Yes
  --------------- ---------

Note: As a presentation attribute  fill can be used as a CSS property.

ellipse

For  <ellipse> ,  fill is a presentation attribute that defines the
color of the ellipse.

  --------------- ---------
  Value           <paint>
  Default value    black
  Animatable      Yes
  --------------- ---------

Note: As a presentation attribute  fill can be used as a CSS property.

path

For  <path> ,  fill is a presentation attribute that defines the color
of the interior of the shape. ( Interior is define by the   fill-rule 
attribute )

  --------------- ---------
  Value           <paint>
  Default value    black
  Animatable      Yes
  --------------- ---------

Note: As a presentation attribute  fill can be used as a CSS property.

polygon

For  <polygon> ,  fill is a presentation attribute that defines the
color of the interior of the shape. ( Interior is define by the
  fill-rule  attribute )

  --------------- ---------
  Value           <paint>
  Default value    black
  Animatable      Yes
  --------------- ---------

Note: As a presentation attribute  fill can be used as a CSS property.

polyline

For  <polyline> ,  fill is a presentation attribute that defines the
color of the interior of the shape. ( Interior is define by the
  fill-rule  attribute )

  --------------- ---------
  Value           <paint>
  Default value    black
  Animatable      Yes
  --------------- ---------

Note: As a presentation attribute  fill can be used as a CSS property.

rect

For  <rect> ,  fill is a presentation attribute that defines the color
of the rectangle.

  --------------- ---------
  Value           <paint>
  Default value    black
  Animatable      Yes
  --------------- ---------

Note: As a presentation attribute  fill can be used as a CSS property.

set

For  <set> ,  fill defines the final state of the animation.

  --------------- ------------------------------------------------------------------------------------------------------------------
  Value            freeze ( Keep the state of the last animation frame ) |  remove ( Keep the state of the first animation frame )
  Default value    remove
  Animatable      No
  --------------- ------------------------------------------------------------------------------------------------------------------

text

For  <text> ,  fill is a presentation attribute that defines the color
of the text.

  --------------- ---------
  Value           <paint>
  Default value    black
  Animatable      Yes
  --------------- ---------

Note: As a presentation attribute  fill can be used as a CSS property.

textPath

For  <textPath> ,  fill is a presentation attribute that defines the
color of the text.

  --------------- ---------
  Value           <paint>
  Default value    black
  Animatable      Yes
  --------------- ---------

Note: As a presentation attribute  fill can be used as a CSS property.

tref

Warning: As of SVG2  <tref> is deprecated and shouldn't be used.

For  <tref> ,  fill is a presentation attribute that defines the color
of the text.

  --------------- ---------
  Value           <paint>
  Default value    black
  Animatable      Yes
  --------------- ---------

Note: As a presentation attribute  fill can be used as a CSS property.

tspan

For  <tspan> ,  fill is a presentation attribute that defines the color
of the text.

  --------------- ---------
  Value           <paint>
  Default value    black
  Animatable      Yes
  --------------- ---------

Note: As a presentation attribute  fill can be used as a CSS property.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # FillAttribute

  Scalable Vector Graphics (SVG) 2
  # SpecifyingFillPaint
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 18, 2024 by MDN contributors .
# fill-opacity #

The  fill-opacity attribute is a presentation attribute defining the
opacity of the paint server ( color , gradient , pattern , etc.) applied
to a shape.

Note: As a presentation attribute  fill-opacity can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <circle>
-    <ellipse>
-    <path>
-    <polygon>
-    <polyline>
-    <rect>
-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 400 100" xmlns="http://www.w3.org/2000/svg">
      <!-- Default fill opacity: 1 -->
      <circle cx="50" cy="50" r="40" />

      <!-- Fill opacity as a number -->
      <circle cx="150" cy="50" r="40" fill-opacity="0.7" />

      <!-- Fill opacity as a percentage -->
      <circle cx="250" cy="50" r="40" fill-opacity="50%" />

      <!-- Fill opacity as a CSS property -->
      <circle cx="350" cy="50" r="40" style="fill-opacity: .25;" />
    </svg>

Usage notes

  --------------- -----------------------
  Value            [0-1] | <percentage>
  Default value    1
  Animatable      Yes
  --------------- -----------------------

Note: SVG2 introduces percentage values for  fill-opacity , however, it
is not widely supported yet ( See Browser compatibility below ) as a
consequence, it is best practices to set opacity with a value in the
range  [0-1] .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # FillOpacity

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# fill-rule #

The  fill-rule attribute is a presentation attribute defining the
algorithm to use to determine the inside part of a shape.

Note: As a presentation attribute,  fill-rule can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <path>
-    <polygon>
-    <polyline>
-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="-10 -10 220 120" xmlns="http://www.w3.org/2000/svg">
      <!-- Default value for fill-rule -->
      <polygon
        fill-rule="nonzero"
        stroke="red"
        points="50,0 21,90 98,35 2,35 79,90" />

      <!--
      The center of the shape has two
      path segments (shown by the red stroke)
      between it and infinity. It is therefore
      considered outside the shape, and not filled.
      -->
      <polygon
        fill-rule="evenodd"
        stroke="red"
        points="150,0 121,90 198,35 102,35 179,90" />
    </svg>

Usage notes

  --------------- ---------------------
  Value            nonzero |  evenodd
  Default value    nonzero
  Animatable      discrete
  --------------- ---------------------

The  fill-rule attribute provides two options for how the inside (that
is, the area to be filled) of a shape is determined:

nonzero

The value  nonzero determines the "insideness" of a point in the shape
by drawing a ray from that point to infinity in any direction, and then
examining the places where a segment of the shape crosses the ray.
Starting with a count of zero, add one each time a path segment crosses
the ray from left to right and subtract one each time a path segment
crosses the ray from right to left. After counting the crossings, if the
result is zero then the point is outside the path. Otherwise, it is
inside.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="-10 -10 320 120" xmlns="http://www.w3.org/2000/svg">
      <!-- Effect of nonzero fill rule on crossing path segments -->
      <polygon
        fill-rule="nonzero"
        stroke="red"
        points="50,0 21,90 98,35 2,35 79,90" />

      <!--
      Effect of nonzero fill rule on a shape inside a shape
      with the path segment moving in the same direction
      (both squares drawn clockwise, to the "right")
      -->
      <path
        fill-rule="nonzero"
        stroke="red"
        d="M110,0  h90 v90 h-90 z
               M130,20 h50 v50 h-50 z" />

      <!--
      Effect of nonzero fill rule on a shape inside a shape
      with the path segment moving in the opposite direction
      (one square drawn clockwise, the other anti-clockwise)
      -->
      <path
        fill-rule="nonzero"
        stroke="red"
        d="M210,0  h90 v90 h-90 z
               M230,20 v50 h50 v-50 z" />
    </svg>

evenodd

The value  evenodd determines the "insideness" of a point in the shape
by drawing a ray from that point to infinity in any direction and
counting the number of path segments from the given shape that the ray
crosses. If this number is odd, the point is inside; if even, the point
is outside.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="-10 -10 320 120" xmlns="http://www.w3.org/2000/svg">
      <!-- Effect of evenodd fill rule on crossing path segments -->
      <polygon
        fill-rule="evenodd"
        stroke="red"
        points="50,0 21,90 98,35 2,35 79,90" />

      <!--
      Effect of evenodd fill rule on a shape inside a shape
      with the path segment moving in the same direction
      (both squares drawn clockwise, to the "right")
      -->
      <path
        fill-rule="evenodd"
        stroke="red"
        d="M110,0  h90 v90 h-90 z
               M130,20 h50 v50 h-50 z" />

      <!--
      Effect of evenodd fill rule on a shape inside a shape
      with the path segment moving in opposite direction
      (one square drawn clockwise, the other anti-clockwise)
      -->
      <path
        fill-rule="evenodd"
        stroke="red"
        d="M210,0  h90 v90 h-90 z
               M230,20 v50 h50 v-50 z" />
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # WindingRule

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# filter #

The  filter attribute specifies the filter effects defined by the
 <filter> element that shall be applied to its element.

Note: As a presentation attribute,  filter can be used as a CSS
property. See  CSS filter for further information.

As a presentation attribute, it can be applied to any element but it
only has effect on container elements without the  <defs> element, all
graphics elements and the  <use> element.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <filter id="blur">
        <feGaussianBlur stdDeviation="2" />
      </filter>

      <rect x="10" y="10" width="80" height="80" filter="url(#blur)" />
    </svg>

Usage notes

  --------------- ---------------------------------
  Value            none |  <filter-function-list>
  Default value    none
  Animatable      Yes
  --------------- ---------------------------------

For a description of the values see the  CSS filter property.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # FilterProperty

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    CSS filter

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# filterUnits #

The  filterUnits attribute defines the coordinate system for the
attributes   x  ,   y  ,   width  and   height  .

You can use this attribute with the following SVG elements:

-    <filter>

Usage notes

  --------------- --------------------------------------
  Value            userSpaceOnUse |  objectBoundingBox
  Default value    objectBoundingBox
  Animatable      Yes
  --------------- --------------------------------------

 userSpaceOnUse

      x  ,   y  ,   width  and   height  represent values in the current
    coordinate system that results from taking the current user
    coordinate system in place at the time when the  <filter> element is
    referenced (i.e., the user coordinate system for the element
    referencing the  <filter> element via a   filter  attribute).

 objectBoundingBox

    In that case,   x  ,   y  ,   width  and   height  represent
    fractions or percentages of the bounding box on the referencing
    element.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-filter-filterunits

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# flood-color #

The  flood-color attribute indicates what color to use to flood the
current filter primitive subregion.

Note: As a presentation attribute,  flood-color can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <feFlood>
-    <feDropShadow>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="flood1">
        <feFlood flood-color="skyblue" x="0" y="0" width="200" height="200" />
      </filter>
      <filter id="flood2">
        <feFlood flood-color="seagreen" x="0" y="0" width="200" height="200" />
      </filter>

      <rect x="0" y="0" width="200" height="200" style="filter: url(#flood1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#flood2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- --------
  Value            color
  Initial value    black
  Animatable      Yes
  --------------- --------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # FloodColorProperty

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     flood-opacity 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# flood-opacity #

The  flood-opacity attribute indicates the opacity value to use across
the current filter primitive subregion.

Note: As a presentation attribute,  flood-opacity can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <feFlood> and  <feDropShadow>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="flood1">
        <feFlood
          flood-color="seagreen"
          flood-opacity="1"
          x="0"
          y="0"
          width="200"
          height="200" />
      </filter>
      <filter id="flood2">
        <feFlood
          flood-color="seagreen"
          flood-opacity="0.3"
          x="0"
          y="0"
          width="200"
          height="200" />
      </filter>

      <rect x="0" y="0" width="200" height="200" style="filter: url(#flood1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#flood2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- ----------------
  Value            <alpha-value>
  Initial value    1
  Animatable      Yes
  --------------- ----------------

 <alpha-value>

    A number or percentage indicating the opacity value to use across
    the current filter primitive subregion. A number of  0 or a
    percentage of  0% represents a fully transparent color,  1 or  100%
    represents a fully opaque color.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # FloodOpacityProperty

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     flood-color 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# font-family #

The  font-family attribute indicates which font family will be used to
render the text, specified as a prioritized list of font family names
and/or generic family names.

Note: As a presentation attribute,  font-family can be used as a CSS
property. See the  CSS font-family property for more information.

You can use this attribute with the following SVG elements:

-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 30" xmlns="http://www.w3.org/2000/svg">
      <text y="20" font-family="Arial, Helvetica, sans-serif">Sans serif</text>
      <text x="100" y="20" font-family="monospace">Monospace</text>
    </svg>

Usage notes

  --------------- --------------------------------------------
  Value           Error: could not find syntax for this item
  Default value   Depends on user agent
  Animatable      Yes
  --------------- --------------------------------------------

For a description of the values, please refer to the CSS  font-family
property.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Fonts Module Level 4
  # generic-font-families

  CSS Fonts Module Level 4
  # font-family-prop
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS font-family

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# font-size-adjust #

The  font-size-adjust attribute allows authors to specify an aspect
value for an element that will preserve the x-height of the first choice
font in a substitute font.

Note: As a presentation attribute,  font-size-adjust can be used as a
CSS property. See the  CSS font-size-adjust property for more
information.

You can use this attribute with the following SVG elements:

-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg
      width="600"
      height="80"
      viewBox="0 0 500 80"
      xmlns="http://www.w3.org/2000/svg">
      <text y="20" font-family="Times, serif" font-size="10px">
        This text uses the Times font (10px), which is hard to read in small sizes.
      </text>
      <text y="40" font-family="Verdana, sans-serif" font-size="10px">
        This text uses the Verdana font (10px), which has relatively large lowercase
        letters.
      </text>
      <text
        y="60"
        font-family="Times, serif"
        font-size="10px"
        font-size-adjust="0.58">
        This is the 10px Times, but now adjusted to the same aspect ratio as the
        Verdana.
      </text>
    </svg>

Usage notes

  --------------- -------------------
  Default value    none
  Value            none |  <number>
  Animatable      Yes
  --------------- -------------------

 none

    Choose the size of the font based only on the  font-size property.

 <number>

    Choose the size of the font so that its lowercase letters (as
    determined by the x-height of the font) are the specified number
    times the  font-size .

    The number specified should generally be the aspect ratio (ratio of
    x-height to font size) of the first choice  font-family . This means
    that the first-choice font, when available, will appear the same
    size in browsers, whether or not they support  font-size-adjust .

     0 yields text of zero height (hidden text).

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Fonts Module Level 4
  # font-size-adjust-prop

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS font-size-adjust

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# font-size #

The  font-size attribute refers to the size of the font from baseline to
baseline when multiple lines of text are set solid in a multiline layout
environment.

Note: As a presentation attribute,  font-size can be used as a CSS
property. See the  CSS font-size property for more information.

You can use this attribute with the following SVG elements:

-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 30" xmlns="http://www.w3.org/2000/svg">
      <text y="20" font-size="smaller">smaller</text>
      <text x="100" y="20" font-size="2em">2em</text>
    </svg>

Usage notes

  --------------- ------------------------------------------------------------
  Value            <absolute-size> |  <relative-size> |  <length-percentage>
  Default value    medium
  Animatable      Yes
  --------------- ------------------------------------------------------------

For a description of the values, please refer to the CSS  font-size
property.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Fonts Module Level 4
  # font-size-prop

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS font-size

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# font-stretch #

The  font-stretch attribute indicates the desired amount of condensing
or expansion in the glyphs used to render the text.

Note: As a presentation attribute,  font-stretch can be used as a CSS
property. See the  CSS font-stretch property for more information.

You can use this attribute with the following SVG elements:

-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Usage notes

  --------------- --------------------------------------------
  Value           Error: could not find syntax for this item
  Default value    normal
  Animatable      Yes
  --------------- --------------------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Fonts Module Level 4
  # font-stretch-prop

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS font-stretch

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# font-style #

The  font-style attribute specifies whether the text is to be rendered
using a normal, italic, or oblique face.

Note: As a presentation attribute,  font-style can be used as a CSS
property. See the  CSS font-style property for more information.

You can use this attribute with the following SVG elements:

-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 250 30" xmlns="http://www.w3.org/2000/svg">
      <text y="20" font-style="normal">Normal font style</text>
      <text x="150" y="20" font-style="italic">Italic font style</text>
    </svg>

Usage notes

  --------------- ------------------------------
  Value            normal |  italic |  oblique
  Default value    normal
  Animatable      Yes
  --------------- ------------------------------

For a description of the values, please refer to the CSS  font-style
property.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Fonts Module Level 4
  # font-style-prop

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS font-style

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# font-variant #

The  font-variant attribute indicates whether the text is to be rendered
using variations of the font's glyphs .

Note: As a presentation attribute,  font-variant can be used as a CSS
property. See the  CSS font-variant property for more information.

You can use this attribute with the following SVG elements:

-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 250 30" xmlns="http://www.w3.org/2000/svg">
      <text y="20" font-variant="normal">Normal text</text>
      <text x="100" y="20" font-variant="small-caps">Small-caps text</text>
    </svg>

Usage notes


  Value            normal |  none | [  <common-lig-values> ||  <discretionary-lig-values> ||  <historical-lig-values> ||  <contextual-alt-values> ||  stylistic( <feature-value-name> ) ||  historical-forms ||  styleset( <feature-value-name># ) ||  character-variant( <feature-value-name># ) ||  swash( <feature-value-name> ) ||  ornaments( <feature-value-name> ) ||  annotation( <feature-value-name> ) || [  small-caps |  all-small-caps |  petite-caps |  all-petite-caps |  unicase |  titling-caps ] ||  <numeric-figure-values> ||  <numeric-spacing-values> ||  <numeric-fraction-values> ||  ordinal ||  slashed-zero ||  <east-asian-variant-values> ||  <east-asian-width-values> ||  ruby ]
  Default value    normal
  Animatable      Yes


For a description of the values, please refer to the CSS  font-variant
property.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Fonts Module Level 4
  # font-variant-prop

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS font-variant

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# font-weight #

The  font-weight attribute refers to the boldness or lightness of the
glyphs used to render the text, relative to other fonts in the same font
family.

Note: As a presentation attribute,  font-weight can be used as a CSS
property. See the  CSS font-weight property for more information.

You can use this attribute with the following SVG elements:

-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 30" xmlns="http://www.w3.org/2000/svg">
      <text y="20" font-weight="normal">Normal text</text>
      <text x="100" y="20" font-weight="bold">Bold text</text>
    </svg>

Usage notes

  --------------- --------------------------------------------------
  Value            normal |  bold |  bolder |  lighter |  <number>
  Default value    normal
  Animatable      Yes
  --------------- --------------------------------------------------

For a description of the values, please refer to the CSS  font-weight
property.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Fonts Module Level 4
  # font-weight-prop

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS font-weight

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# fr #

The  fr attribute defines the radius of the focal point for the radial
gradient.

You can use this attribute with the following SVG elements:

-    <radialGradient>

Examples

    html,
    body,
    svg {
      height: 100%;
    }

Changing the value of  fr

The following example presents two circles: the first one has  fr set to
 5% while the other circle has  fr set to  25% .

html

    <svg
      viewBox="0 0 480 200"
      width="420"
      height="160"
      xmlns="http://www.w3.org/2000/svg">
      <defs>
        <radialGradient
          id="gradient1"
          cx="0.5"
          cy="0.5"
          r="0.5"
          fx="0.35"
          fy="0.35"
          fr="5%">
          <stop offset="0%" stop-color="white" />
          <stop offset="100%" stop-color="darkseagreen" />
        </radialGradient>
        <radialGradient
          id="gradient2"
          cx="0.5"
          cy="0.5"
          r="0.5"
          fx="0.35"
          fy="0.35"
          fr="25%">
          <stop offset="0%" stop-color="white" />
          <stop offset="100%" stop-color="darkseagreen" />
        </radialGradient>
      </defs>

      <circle cx="100" cy="100" r="100" fill="url(#gradient1)" />
      <circle
        cx="100"
        cy="100"
        r="100"
        fill="url(#gradient2)"
        style="transform: translateX(240px);" />
    </svg>

The focal point's relationship to  (fx, fy)

This example has  fr equal to  5% and is representing how the attributes
 fx and  fy (the points labeled as such in the SVG) act as the origin
for the focal point of the radial gradient. This focal point is a circle
whose radius (the value of  fr ) defines when the first color stop, in
this case the color red, should start transitioning into the other color
stop, which in this case is the color blue.

html

    <svg
      viewBox="0 0 120 120"
      width="165"
      height="165"
      xmlns="http://www.w3.org/2000/svg">
      <defs>
        <radialGradient
          id="Gradient"
          cx="0.5"
          cy="0.5"
          r="0.5"
          fx="0.35"
          fy="0.35"
          fr="5%">
          <stop offset="0%" stop-color="red" />
          <stop offset="100%" stop-color="blue" />
        </radialGradient>
      </defs>

      <rect
        x="10"
        y="10"
        rx="15"
        ry="15"
        width="100"
        height="100"
        fill="url(#Gradient)"
        stroke="black"
        stroke-width="2" />

      <circle
        cx="60"
        cy="60"
        r="50"
        fill="transparent"
        stroke="white"
        stroke-width="2" />
      <circle cx="45" cy="45" r="2" fill="white" stroke="white" />
      <circle cx="60" cy="60" r="2" fill="white" stroke="white" />
      <text x="38" y="40" fill="white" font-family="sans-serif" font-size="10pt">
        (fx,fy)
      </text>
      <text x="63" y="63" fill="white" font-family="sans-serif" font-size="10pt">
        (cx,cy)
      </text>
    </svg>

Usage notes

  --------------- -----------
  Value            <length>
  Default value    0
  Animatable      None
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # RadialGradientElementFRAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# from #

The  from attribute indicates the initial value of the attribute that
will be modified during the animation.

When used with the   to  attribute, the animation will change the
modified attribute from the  from value to the  to value. When used with
the   by  attribute, the animation will change the attribute relatively
from the  from value by the value specified in  by .

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
      <rect x="10" y="10" height="100">
        <animate attributeName="width" fill="freeze" from="100" to="150" dur="3s" />
      </rect>
    </svg>

Usage notes

  --------------- -----------
  Value           See below
  Default value   None
  Animatable      No
  --------------- -----------

The exact value type for this attribute depends on the value of the
attribute that will be animated.

When a list of values is defined via the   values  attribute, the  from
attribute is ignored.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # FromAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# fx #

The  fx attribute defines the x-axis coordinate of the focal point for a
radial gradient.

You can use this attribute with the following SVG elements:

-    <radialGradient>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 480 200" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <radialGradient
          id="gradient1"
          cx="0.5"
          cy="0.5"
          r="0.5"
          fx="0.35"
          fy="0.35"
          fr="5%">
          <stop offset="0%" stop-color="white" />
          <stop offset="100%" stop-color="darkseagreen" />
        </radialGradient>
        <radialGradient
          id="gradient2"
          cx="0.5"
          cy="0.5"
          r="0.5"
          fx="0.75"
          fy="0.35"
          fr="5%">
          <stop offset="0%" stop-color="white" />
          <stop offset="100%" stop-color="darkseagreen" />
        </radialGradient>
      </defs>

      <circle cx="100" cy="100" r="100" fill="url(#gradient1)" />
      <circle
        cx="100"
        cy="100"
        r="100"
        fill="url(#gradient2)"
        style="transform: translateX(240px);" />
    </svg>

Usage notes

  --------------- ------------------------------------------------------------------------------------------------------------------
  Value            <length>
  Default value   Coincides with the presentational value of   cx  for the element whether the value for  cx was inherited or not.
  Animatable      None
  --------------- ------------------------------------------------------------------------------------------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # RadialGradientElementFXAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# fy #

The  fy attribute defines the y-axis coordinate of the focal point for a
radial gradient.

You can use this attribute with the following SVG elements:

-    <radialGradient>

Example

Example 1

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 480 200" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <radialGradient
          id="gradient1"
          cx="0.5"
          cy="0.5"
          r="0.5"
          fx="0.35"
          fy="0.35"
          fr="5%">
          <stop offset="0%" stop-color="white" />
          <stop offset="100%" stop-color="darkseagreen" />
        </radialGradient>
        <radialGradient
          id="gradient2"
          cx="0.5"
          cy="0.5"
          r="0.5"
          fx="0.35"
          fy="0.75"
          fr="5%">
          <stop offset="0%" stop-color="white" />
          <stop offset="100%" stop-color="darkseagreen" />
        </radialGradient>
      </defs>

      <circle cx="100" cy="100" r="100" fill="url(#gradient1)" />
      <circle
        cx="100"
        cy="100"
        r="100"
        fill="url(#gradient2)"
        style="transform: translateX(240px);" />
    </svg>

Example 2

html

    <svg
      viewBox="0 0 120 120"
      width="200"
      height="200"
      xmlns="http://www.w3.org/2000/svg">
      <defs>
        <radialGradient
          id="Gradient"
          cx="0.5"
          cy="0.5"
          r="0.5"
          fx="0.35"
          fy="0.35"
          fr="5%">
          <stop offset="0%" stop-color="red" />
          <stop offset="100%" stop-color="blue" />
        </radialGradient>
      </defs>

      <rect
        x="10"
        y="10"
        rx="15"
        ry="15"
        width="100"
        height="100"
        fill="url(#Gradient)"
        stroke="black"
        stroke-width="2" />

      <circle
        cx="60"
        cy="60"
        r="50"
        fill="transparent"
        stroke="white"
        stroke-width="2" />
      <circle cx="35" cy="35" r="2" fill="white" stroke="white" />
      <circle cx="60" cy="60" r="2" fill="white" stroke="white" />
      <text x="38" y="40" fill="white" font-family="sans-serif" font-size="10pt">
        (fx,fy)
      </text>
      <text x="63" y="63" fill="white" font-family="sans-serif" font-size="10pt">
        (cx,cy)
      </text>
    </svg>

Usage notes

  --------------- ------------------------------------------------------------------------------------------------------------------
  Value            <length>
  Default value   Coincides with the presentational value of   cy  for the element whether the value for  cy was inherited or not.
  Animatable      None
  --------------- ------------------------------------------------------------------------------------------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # RadialGradientElementFYAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# g1 #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  g1 attribute specifies a list of glyph names which identify a set
of possible first glyphs in the kerning pair.

All glyphs with the given glyph name are included in the set. The total
set of possible first glyphs in the kerning pair is the union of glyphs
specified by the   u1  and  g1 attributes.

You can use this attribute with the following SVG elements:

-    <hkern>
-    <vkern>

Context notes

  --------------- -------------
  Value            <name>  # 
  Default value   None
  Animatable      No
  --------------- -------------

 <name>#

    This value indicates a comma-separated sequence of glyph names
    (i.e., values that match   glyph-name  attributes on  <glyph>
    elements) which identify a set of possible first glyphs in the
    kerning pair.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # HKernElementG1Attribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# g2 #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  g2 attribute specifies a list of glyph names which identify a set
of possible second glyphs in the kerning pair.

All glyphs with the given glyph name are included in the set. The total
set of possible second glyphs in the kerning pair is the union of glyphs
specified by the   u2  and  g2 attributes.

You can use this attribute with the following SVG elements:

-    <hkern>
-    <vkern>

Context notes

  --------------- -------------
  Value            <name>  # 
  Default value   None
  Animatable      No
  --------------- -------------

 <name>#

    This value indicates a comma-separated sequence of glyph names
    (i.e., values that match   glyph-name  attributes on  <glyph>
    elements) which identify a set of possible second glyphs in the
    kerning pair.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # HKernElementG2Attribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# glyph-name #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  glyph-name attribute specifies the name of a glyph .

It is recommended that glyph names be unique within a font. The glyph
names can be used in situations where Unicode character numbers do not
provide sufficient information to access the correct glyph, such as when
there are multiple glyphs per Unicode character.

The glyph names can be referenced in kerning definitions created by
 <hkern> and  <vkern> elements.

You can use this attribute with the following SVG elements:

-    <glyph>

Context notes

  --------------- ----------
  Value            <name>#
  Default value   None
  Animatable      No
  --------------- ----------

 <name>#

    This value specifies a comma-separated list of names for the glyph.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # GlyphElementGlyphNameAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# glyph-orientation-horizontal #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  glyph-orientation-horizontal attribute affects the amount that the
current text position advances as each glyph is rendered.

When the reference orientation direction is horizontal and the
 glyph-orientation-horizontal results in an orientation angle that is a
multiple of 180 degrees, then the current text position is incremented
according to the horizontal metrics of the glyph. Otherwise, if the
value of this attribute is not a multiple of 180 degrees, then the
current text position is incremented according to the vertical metrics
of the glyph.

This attribute is applied only to text written in a horizontal
  writing-mode  .

Note: As a presentation attribute,  glyph-orientation-horizontal can be
used as a CSS property.

You can use this attribute with the following SVG elements:

-    <textPath>
-    <text>
-    <tref>
-    <tspan>

Context notes

  --------------- ------------
  Value             <angle> 
  Default value    0deg
  Animatable      No
  --------------- ------------

 <angle>

    The value of the angle is restricted to 0, 90, 180, and 270 degrees.
    If another angle is specified, it is rounded to the closest of the
    permitted values. A value of  0deg indicates that all glyphs are set
    with the top of the glyphs oriented towards the reference
    orientation. A value of  90deg indicates an orientation of 90
    degrees clockwise from the reference orientation.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # GlyphOrientationHorizontalProperty

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# glyph-orientation-vertical #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  glyph-orientation-vertical attribute affects the amount that the
current text position advances as each glyph is rendered.

When the inline-progression-direction is vertical and the
 glyph-orientation-vertical results in an orientation angle that is a
multiple of 180 degrees, then the current text position is incremented
according to the vertical metrics of the glyph. Otherwise, if the angle
is not a multiple of 180 degrees, then the current text position is
incremented according to the horizontal metrics of the glyph.

This attribute is applied only to text written in a vertical
  writing-mode  .

Note: As a presentation attribute,  glyph-orientation-vertical can be
used as a CSS property.

You can use this attribute with the following SVG elements:

-    <textPath>
-    <text>
-    <tref>
-    <tspan>

Context notes

  --------------- --------------------
  Value            auto |   <angle> 
  Default value    auto
  Animatable      No
  --------------- --------------------

 auto

    Fullwidth ideographic and fullwidth Latin text will be set with a
    glyph orientation of 0 degrees. Ideographic punctuation and other
    ideographic characters having alternate horizontal and vertical
    forms will use the vertical form of the glyph. Text which is not
    fullwidth will be set with a glyph orientation of 90 degrees.

    This reorientation rule applies only to the first-level
    non-ideographic text. All further embedding of writing modes or
    bidirectional processing will be based on the first-level rotation.

    Note: Text set in this "rotated" manner may contain ligatures or
    other glyph combining and reordering common to the language and
    script. (This presentation form does not disable auto-ligature
    formation or similar context-driven variations.)

    The determination of which characters should be auto-rotated may
    vary across user agents. The determination is based on a complex
    interaction between country, language, script, character properties,
    font, and character context.

 <angle>

    The value of the angle is restricted to 0, 90, 180, and 270 degrees.
    If another angle is specified, it is rounded to the closest of the
    permitted values. A value of  0deg indicates that all glyphs are set
    with the top of the glyphs oriented towards the reference
    orientation. A value of  90deg indicates an orientation of 90
    degrees clockwise from the reference orientation.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # GlyphOrientationVerticalProperty

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# gradientTransform #

The  gradientTransform attribute contains the definition of an optional
additional transformation from the gradient coordinate system onto the
target coordinate system (i.e., userSpaceOnUse or objectBoundingBox).
This allows for things such as skewing the gradient. This additional
transformation matrix is post-multiplied to (i.e., inserted to the right
of) any previously defined transformations, including the implicit
transformation necessary to convert from object bounding box units to
user space.

You can use this attribute with the following SVG elements:

-    <linearGradient>
-    <radialGradient>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <radialGradient
        id="gradient1"
        gradientUnits="userSpaceOnUse"
        cx="100"
        cy="100"
        r="100"
        fx="100"
        fy="100">
        <stop offset="0%" stop-color="darkblue" />
        <stop offset="50%" stop-color="skyblue" />
        <stop offset="100%" stop-color="darkblue" />
      </radialGradient>
      <radialGradient
        id="gradient2"
        gradientUnits="userSpaceOnUse"
        cx="100"
        cy="100"
        r="100"
        fx="100"
        fy="100"
        gradientTransform="skewX(20) translate(-35, 0)">
        <stop offset="0%" stop-color="darkblue" />
        <stop offset="50%" stop-color="skyblue" />
        <stop offset="100%" stop-color="darkblue" />
      </radialGradient>

      <rect x="0" y="0" width="200" height="200" fill="url(#gradient1)" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        fill="url(#gradient2)"
        style="transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- --------------------
  Default value   Identity transform
  Value            <transform-list>
  Animatable      Yes
  --------------- --------------------

 <transform-list>

    A list of transformation functions specifying some additional
    transformation from the gradient coordinate system onto the target
    coordinate system.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Transforms Module Level 1
  # typedef-transform-list

  Scalable Vector Graphics (SVG) 2
  # LinearGradientElementGradientTransformAttribute

  Scalable Vector Graphics (SVG) 2
  # RadialGradientElementGradientTransformAttribute
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <transform-function>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# gradientUnits #

The  gradientUnits attribute defines the coordinate system used for
attributes specified on the gradient elements.

You can use this attribute with the following SVG elements:

-    <linearGradient>
-    <radialGradient>

linearGradient

For  <linearGradient> ,  gradientUnits defines the coordinate system
used for the attributes   x1  ,   y1  ,   x2  , and   y2  .

  --------------- --------------------------------------
  Value            userSpaceOnUse |  objectBoundingBox
  Default value    objectBoundingBox
  Animatable      Yes
  --------------- --------------------------------------

 userSpaceOnUse

    This value indicates that the attributes represent values in the
    coordinate system that results from taking the current user
    coordinate system in place at the time when the gradient element is
    referenced (i.e., the user coordinate system for the element
    referencing the gradient element via a   fill  or   stroke 
    property) and then applying the transform specified by attribute
      gradientTransform  . Percentages represent values relative to the
    current SVG viewport.

 objectBoundingBox

    This value indicates that the user coordinate system for the
    attributes is established using the bounding box of the element to
    which the gradient is applied and then applying the transform
    specified by attribute  gradientTransform .

    Percentages represent values relative to the bounding box for the
    object.

    With this value and  gradientTransform being the identity matrix,
    the normal of the linear gradient is perpendicular to the gradient
    vector in object bounding box space (i.e., the abstract coordinate
    system where (0,0) is at the top/left of the object bounding box and
    (1,1) is at the bottom/right of the object bounding box). When the
    object's bounding box is not square, the gradient normal which is
    initially perpendicular to the gradient vector within object
    bounding box space may render non-perpendicular relative to the
    gradient vector in user space. If the gradient vector is parallel to
    one of the axes of the bounding box, the gradient normal will remain
    perpendicular. This transformation is due to application of the
    non-uniform scaling transformation from bounding box space to user
    space.

radialGradient

For  <radialGradient> ,  gradientUnits defines the coordinate system
used for the attributes   cx  ,   cy  ,   r  ,   fx  ,   fy  , and   fr 
.

  --------------- --------------------------------------
  Value            userSpaceOnUse |  objectBoundingBox
  Default value    objectBoundingBox
  Animatable      Yes
  --------------- --------------------------------------

 userSpaceOnUse

      cx  ,   cy  ,   r  ,   fx  ,   fy  , and   fr  represent values in
    the coordinate system that results from taking the current user
    coordinate system in place at the time when the gradient element is
    referenced (i.e., the user coordinate system for the element
    referencing the gradient element via a   fill  or   stroke 
    property) and then applying the transform specified by attribute
      gradientTransform  .

 objectBoundingBox

    for  <radialGradient> : the user coordinate system for attributes
      cx  ,   cy  ,   r  ,   fx  ,   fy  , and   fr  is established
    using the bounding box of the element to which the gradient is
    applied (see Object bounding box units) and then applying the
    transform specified by attribute  gradientTransform . With this
    value and  gradientTransform being the identity matrix, the rings of
    the radial gradient are circular with respect to the object bounding
    box space (i.e., the abstract coordinate system where (0,0) is at
    the top/left of the object bounding box and (1,1) is at the
    bottom/right of the object bounding box). When the object's bounding
    box is not square, the rings that are conceptually circular within
    object bounding box space will render as elliptical due to
    application of the non-uniform scaling transformation from bounding
    box space to user space.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # RadialGradientElementGradientUnitsAttribute

  Scalable Vector Graphics (SVG) 2
  # LinearGradientElementGradientUnitsAttribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 3, 2023 by MDN contributors .
# hanging #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  hanging attribute indicates the alignment coordinate for glyphs to
achieve hanging baseline alignment for horizontally oriented glyph
layouts. The value is an offset in the font coordinate system.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- -------------
  Value             <number> 
  Default value   None
  Animatable      No
  --------------- -------------

 <number>

    This value indicates the alignment coordinate for the glyphs.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementHangingAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# height #

The  height attribute defines the vertical length of an element in the
user coordinate system.

You can use this attribute with the following SVG elements:

-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feDropShadow>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>
-    <filter>
-    <foreignObject>
-    <image>
-    <mask>
-    <pattern>
-    <rect>
-    <svg>
-    <use>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 300 100" xmlns="http://www.w3.org/2000/svg">
      <!-- With a height of 0 or less, nothing will be rendered -->
      <rect y="0" x="0" width="90" height="0" />
      <rect y="0" x="100" width="90" height="60" />
      <rect y="0" x="200" width="90" height="100%" />
    </svg>

feBlend

For  <feBlend> ,  height defines the vertical length for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feColorMatrix

For  <feColorMatrix> ,  height defines the vertical length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feComponentTransfer

For  <feComponentTransfer> ,  height defines the vertical length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feComposite

For  <feComposite> ,  height defines the vertical length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feConvolveMatrix

For  <feConvolveMatrix> ,  height defines the vertical length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feDiffuseLighting

For  <feDiffuseLighting> ,  height defines the vertical length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feDisplacementMap

For  <feDisplacementMap> ,  height defines the vertical length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feDropShadow

For  <feDropShadow> ,  height defines the vertical length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feFlood

For  <feFlood> ,  height defines the vertical length for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feGaussianBlur

For  <feGaussianBlur> ,  height defines the vertical length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feImage

For  <feImage> ,  height defines the vertical length for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feMerge

For  <feMerge> ,  height defines the vertical length for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feMorphology

For  <feMorphology> ,  height defines the vertical length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feOffset

For  <feOffset> ,  height defines the vertical length for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feSpecularLighting

For  <feSpecularLighting> ,  height defines the vertical length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feTile

For  <feTile> ,  height defines the vertical length for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feTurbulence

For  <feTurbulence> ,  height defines the vertical length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

filter

For  <filter> ,  height defines the vertical length for the rendering
area of the filter.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    120%
  Animatable      Yes
  --------------- -------------------------

foreignObject

For  <foreignObject> ,  height defines the vertical length for the
rendering area for the referenced document.

  --------------- ---------------------------------
  Value            auto | <length> | <percentage>
  Default value    auto (treated as  0 )
  Animatable      Yes
  --------------- ---------------------------------

Note: Starting with SVG2,  height is a Geometry Property meaning this
attribute can also be used as a CSS property for  <foreignObject> .

image

For  <image> ,  height defines the vertical length for the image.

  --------------- ------------------------------------------------------
  Value            auto | <length> | <percentage>
  Default value    auto (treated as the intrinsic height of the image)
  Animatable      Yes
  --------------- ------------------------------------------------------

Note: Starting with SVG2,  height is a Geometry Property meaning this
attribute can also be used as a CSS property for images.

mask

For  <mask> ,  height defines the vertical length of its area of effect.
The exact effect of this attribute is influenced by the   maskUnits 
attribute.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    120%
  Animatable      Yes
  --------------- -------------------------

pattern

For  <pattern> ,  height defines the vertical length of the tile
pattern. The exact effect of this attribute is influenced by the
  patternUnits  and   patternTransform  attributes.

  --------------- ----------
  Value           <length>
  Default value    0
  Animatable      Yes
  --------------- ----------

rect

For  <rect> ,  height defines the vertical length for the rectangle.

  --------------- ---------------------------------
  Value            auto | <length> | <percentage>
  Default value    auto (treated as  0 )
  Animatable      Yes
  --------------- ---------------------------------

Note: Starting with SVG2,  height is a Geometry Property meaning this
attribute can also be used as a CSS property for rectangles.

svg

For  <svg> ,  height defines the vertical length for the rendering area
of the SVG viewport.

Note: In an HTML document if both the   viewBox  and  height attributes
are omitted, the svg element will be rendered with a height of  150px

  --------------- ---------------------------------
  Value            auto | <length> | <percentage>
  Default value    auto (treated as  100% )
  Animatable      Yes
  --------------- ---------------------------------

Note: Starting with SVG2,  height is a Geometry Property meaning this
attribute can also be used as a CSS property for  <svg> .

use

For  <use> ,  height defines the vertical length for the referenced
element.

  --------------- ---------------------------------
  Value            auto | <length> | <percentage>
  Default value    auto (treated as  0 )
  Animatable      Yes
  --------------- ---------------------------------

Note:  height has no effect on  use elements, unless the element
referenced has a viewBox - i.e. they only have an effect when  use
refers to a  svg or  symbol element.

Note: Starting with SVG2,  height is a Geometry Property meaning this
attribute can also be used as a CSS property for used elements.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-filter-height

  Filter Effects Module Level 1
  # element-attrdef-filter-primitive-height

  CSS Masking Module Level 1
  # element-attrdef-mask-height

  Scalable Vector Graphics (SVG) 2
  # Sizing

  Scalable Vector Graphics (SVG) 2
  # PatternElementHeightAttribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 3, 2023 by MDN contributors .
# horiz-adv-x #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  horiz-adv-x attribute indicates the horizontal advance after
rendering a glyph in horizontal orientation.

You can use this attribute with the following SVG elements:

-    <font>
-    <glyph>
-    <missing-glyph>

font

For  <font> elements,  horiz-adv-x specifies the default horizontal
advance of a glyph in horizontal orientation.

  --------------- -------------
  Value             <number> 
  Default value   None
  Animatable      No
  --------------- -------------

 <number>

    This value indicates the horizontal advance of the glyph.

glyph, missing-glyph

For  <glyph> and  <missing-glyph> elements,  horiz-adv-x specifies the
horizontal advance of the glyph in horizontal orientation.

  --------------- -------------------------------
  Value             <number> 
  Default value    <font> 's  horiz-adv-x value
  Animatable      No
  --------------- -------------------------------

 <number>

    This value indicates the horizontal advance of the glyph.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # GlyphElementHorizAdvXAttribute

  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontElementHorizAdvXAttribute
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     vert-adv-y 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# horiz-origin-x #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  horiz-origin-x attribute indicates the x-coordinate in the font
coordinate system of the origin of a glyph to be used when drawing
horizontally oriented text.

Note: The origin applies to all glyphs in the font.

You can use this attribute with the following SVG elements:

-    <font>

Usage notes

  --------------- -------------
  Value             <number> 
  Default value    0
  Animatable      No
  --------------- -------------

 <number>

    This value indicates the x-coordinate of the origin of a glyph for
    horizontally oriented text.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontElementHorizOriginXAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     horiz-origin-y 
-     vert-origin-x 
-     vert-origin-y 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# horiz-origin-y #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  horiz-origin-y attribute indicates the y-coordinate in the font
coordinate system of the origin of a glyph to be used when drawing
horizontally oriented text.

Note: The origin applies to all glyphs in the font.

You can use this attribute with the following SVG elements:

-    <font>

Usage notes

  --------------- -------------
  Value             <number> 
  Default value    0
  Animatable      No
  --------------- -------------

 <number>

    This value indicates the x-coordinate of the origin of a glyph for
    horizontally oriented text.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontElementHorizOriginYAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     horiz-origin-x 
-     vert-origin-x 
-     vert-origin-y 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# href #

The  href attribute defines a link to a resource as a reference URL .
The exact meaning of that link depends on the context of each element
using it.

Note: Specifications before SVG 2 defined an   xlink:href  attribute,
which is now rendered obsolete by the  href attribute. If you need to
support earlier browser versions, the deprecated  xlink:href attribute
can be used as a fallback in addition to the  href attribute, e.g.
 <use href="some-id" xlink:href="some-id" x="5" y="5" /> .

You can use this attribute with the following SVG elements:

-    <a>
-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <feImage>
-    <image>
-    <linearGradient>
-    <mpath>
-    <pattern>
-    <radialGradient>
-    <script>
-    <set>
-    <textPath>
-    <use>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 160 40" xmlns="http://www.w3.org/2000/svg">
      <a href="https://developer.mozilla.org/">
        <text x="10" y="25">MDN Web Docs</text>
      </a>
    </svg>

In SVG

a

For  <a> ,  href defines the location of the referenced object,
expressed as a URL reference.

  --------------- ----------
  Value             <url> 
  Default value   None
  Animatable      Yes
  --------------- ----------

animate, animateMotion, animateTransform, set

For the  <animate> ,  <animateMotion> ,  <animateTransform> , and  <set>
,  href defines a URL referring to the element which is the target of
this animation element and which therefore will be modified over time.

The URL must point to exactly one target element which is capable of
being the target of the given animation element. If the URL points to
multiple target elements, if the given target element is not capable of
being a target of the given animation element, or if the given target
element is not part of the current document, then the animation element
will not affect any target element. However, the animation element will
still operate normally with regard to its timing properties.
Specifically, TimeEvents are dispatched and the animation element can be
used as syncbase in an identical fashion to when the URL refers to a
valid target element.

If the  href attribute or the deprecated   xlink:href  attribute is not
provided, then the target element will be the immediate parent element
of the current animation element. If both  xlink:href and  href are
specified, the value of the latter attribute is used.

Refer to the descriptions of the individual animation elements for any
restrictions on what types of elements can be targets of particular
types of animations.

Except for any SVG-specific rules explicitly mentioned in this
specification, the normative definition for this attribute is the SMIL
Animation specification. In particular, see SMIL Animation: Specifying
the animation target .

  --------------- ----------
  Value             <url> 
  Default value   None
  Animatable      No
  --------------- ----------

feImage

For  <feImage> ,  href defines a URL referring to an image resource or
to an element. If both, the   xlink:href  and the  href attribute are
specified, the latter overrides the former.

  --------------- ----------
  Value             <url> 
  Default value   None
  Animatable      Yes
  --------------- ----------

image

For  <image> ,  href defines a URL referring to the image to render.

  --------------- ----------
  Value             <url> 
  Default value   None
  Animatable      Yes
  --------------- ----------

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <image href="fxlogo.png" x="0" y="0" height="100" width="100" />
    </svg>

linearGradient

For  <linearGradient> ,  href defines URL referring to a template
gradient element; to be valid, the reference must be to a different
 <linearGradient> or  <radialGradient> element.

  --------------- ----------
  Value             <url> 
  Default value   None
  Animatable      Yes
  --------------- ----------

mpath

For  <mpath> ,  href defines a URL referring to the  <path> element or
basic shape which defines the motion path.

  --------------- ----------
  Value             <url> 
  Default value   None
  Animatable      No
  --------------- ----------

pattern

For  <pattern> ,  href defines a URL referring to a different  <pattern>
element within the current SVG document. Any attributes which are
defined on the referenced element which are not defined on this element
are inherited by this element. If this element has no children, and the
referenced element does (possibly due to its own  href attribute), then
this element inherits the children from the referenced element.
Inheritance can be indirect to an arbitrary level; thus, if the
referenced element inherits attributes or children due to its own  href
attribute, then the current element can inherit those attributes or
children. On the  <pattern> element, the  href attribute is animatable.

  --------------- ----------
  Value             <url> 
  Default value   None
  Animatable      Yes
  --------------- ----------

radialGradient

For  <radialGradient> ,  href defines URL referring to a template
gradient element; to be valid, the reference must be to a different
 <linearGradient> or  <radialGradient> element.

  --------------- ----------
  Value             <url> 
  Default value   None
  Animatable      Yes
  --------------- ----------

script

For  <script> ,  href defines a URL referring to an external resource
containing the script code.

  --------------- ----------
  Value             <url> 
  Default value   None
  Animatable      No
  --------------- ----------

textPath

For  <textPath> ,  href defines a URL referring to the  <path> element
or basic shape onto which the text will be rendered if no   path 
attribute is provided. On the  <textPath> element, the  href attribute
is animatable.

  --------------- ----------
  Value             <url> 
  Default value   None
  Animatable      Yes
  --------------- ----------

use

For  <use> ,  href defines a URL referring to an element or fragment
within an SVG document to be cloned.

The  <use> element can reference an entire SVG document by specifying an
 href value without a fragment. Such references are taken to be
referring to the root element of the referenced document.

  --------------- ----------
  Value             <url> 
  Default value   None
  Animatable      Yes
  --------------- ----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-feimage-href

  SVG Animations Level 2
  # DiscardElementHrefAttribute

  SVG Animations Level 2
  # HrefAttribute

  SVG Animations Level 2
  # MPathElementHrefAttribute

  Scalable Vector Graphics (SVG) 2
  # ImageElementHrefAttribute

  Scalable Vector Graphics (SVG) 2
  # AElementHrefAttribute

  Scalable Vector Graphics (SVG) 2
  # LinearGradientElementHrefAttribute

  Scalable Vector Graphics (SVG) 2
  # PatternElementHrefAttribute

  Scalable Vector Graphics (SVG) 2
  # RadialGradientElementHrefAttribute

  Scalable Vector Graphics (SVG) 2
  # ScriptElementHrefAttribute

  Scalable Vector Graphics (SVG) 2
  # UseElementHrefAttribute

  Scalable Vector Graphics (SVG) 2
  # TextPathElementHrefAttribute
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     xlink:href 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 17, 2023 by MDN contributors .
# SVG Attribute reference #

SVG elements can be modified using attributes that specify details about
exactly how the element should be handled or rendered.

Below is a list of all of the attributes available in SVG along with
links to reference documentation to help you learn which elements
support them and how they work.

SVG attributes A to Z

A

-     accent-height 
-     accumulate 
-     additive 
-     alignment-baseline 
-     alphabetic 
-     amplitude 
-     arabic-form 
-     ascent 
-     attributeName 
-     attributeType 
-     azimuth 

B

-     baseFrequency 
-     baseline-shift 
-     baseProfile 
-     bbox 
-     begin 
-     bias 
-     by 

C

-     calcMode 
-     cap-height 
-     class 
-     clip 
-     clipPathUnits 
-     clip-path 
-     clip-rule 
-     color 
-     color-interpolation 
-     color-interpolation-filters 
-     color-profile 
-     color-rendering 
-     crossorigin 
-     cursor 
-     cx 
-     cy 

D

-     d 
-     decelerate 
-     descent 
-     diffuseConstant 
-     direction 
-     display 
-     divisor 
-     dominant-baseline 
-     dur 
-     dx 
-     dy 

E

-     edgeMode 
-     elevation 
-     enable-background 
-     end 
-     exponent 

F

-     fill 
-     fill-opacity 
-     fill-rule 
-     filter 
-     filterUnits 
-     flood-color 
-     flood-opacity 
-     font-family 
-     font-size 
-     font-size-adjust 
-     font-stretch 
-     font-style 
-     font-variant 
-     font-weight 
-     format 
-     from 
-     fr 
-     fx 
-     fy 

G

-     g1 
-     g2 
-     glyph-name 
-     glyph-orientation-horizontal 
-     glyph-orientation-vertical 
-     glyphRef 
-     gradientTransform 
-     gradientUnits 

H

-     hanging 
-     height 
-     href 
-     hreflang 
-     horiz-adv-x 
-     horiz-origin-x 

I

-     id 
-     ideographic 
-     image-rendering 
-     in 
-     in2 
-     intercept 

K

-     k 
-     k1 
-     k2 
-     k3 
-     k4 
-     kernelMatrix 
-     kernelUnitLength 
-     kerning 
-     keyPoints 
-     keySplines 
-     keyTimes 

L

-     lang 
-     lengthAdjust 
-     letter-spacing 
-     lighting-color 
-     limitingConeAngle 
-     local 

M

-     marker-end 
-     marker-mid 
-     marker-start 
-     markerHeight 
-     markerUnits 
-     markerWidth 
-     mask 
-     maskContentUnits 
-     maskUnits 
-     mathematical 
-     max 
-     media 
-     method 
-     min 
-     mode 

N

-     name 
-     numOctaves 

O

-     offset 
-     opacity 
-     operator 
-     order 
-     orient 
-     orientation 
-     origin 
-     overflow 
-     overline-position 
-     overline-thickness 

P

-     panose-1 
-     paint-order 
-     path 
-     pathLength 
-     patternContentUnits 
-     patternTransform 
-     patternUnits 
-     ping 
-     pointer-events 
-     points 
-     pointsAtX 
-     pointsAtY 
-     pointsAtZ 
-     preserveAlpha 
-     preserveAspectRatio 
-     primitiveUnits 

R

-     r 
-     radius 
-     referrerPolicy 
-     refX 
-     refY 
-     rel 
-     rendering-intent 
-     repeatCount 
-     repeatDur 
-     requiredExtensions 
-     requiredFeatures 
-     restart 
-     result 
-     rotate 
-     rx 
-     ry 

S

-     scale 
-     seed 
-     shape-rendering 
-     slope 
-     spacing 
-     specularConstant 
-     specularExponent 
-     speed 
-     spreadMethod 
-     startOffset 
-     stdDeviation 
-     stemh 
-     stemv 
-     stitchTiles 
-     stop-color 
-     stop-opacity 
-     strikethrough-position 
-     strikethrough-thickness 
-     string 
-     stroke 
-     stroke-dasharray 
-     stroke-dashoffset 
-     stroke-linecap 
-     stroke-linejoin 
-     stroke-miterlimit 
-     stroke-opacity 
-     stroke-width 
-     style 
-     surfaceScale 
-     systemLanguage 

T

-     tabindex 
-     tableValues 
-     target 
-     targetX 
-     targetY 
-     text-anchor 
-     text-decoration 
-     text-rendering 
-     textLength 
-     to 
-     transform 
-     transform-origin 
-     type 

U

-     u1 
-     u2 
-     underline-position 
-     underline-thickness 
-     unicode 
-     unicode-bidi 
-     unicode-range 
-     units-per-em 

V

-     v-alphabetic 
-     v-hanging 
-     v-ideographic 
-     v-mathematical 
-     values 
-     vector-effect 
-     version 
-     vert-adv-y 
-     vert-origin-x 
-     vert-origin-y 
-     viewBox 
-     visibility 

W

-     width 
-     widths 
-     word-spacing 
-     writing-mode 

X

-     x 
-     x-height 
-     x1 
-     x2 
-     xChannelSelector 
-     xlink:actuate 
-     xlink:arcrole 
-     xlink:href  Deprecated
-     xlink:role 
-     xlink:show 
-     xlink:title 
-     xlink:type 
-     xml:base 
-     xml:lang 
-     xml:space 

Y

-     y 
-     y1 
-     y2 
-     yChannelSelector 

Z

-     z 
-     zoomAndPan 

SVG attributes by category

Generic attributes

Core attributes

    Core attributes

      id  ,   lang  ,   tabindex  ,   xml:base  ,   xml:lang  ,
      xml:space 

Style attributes

    Style attributes

      class  ,   style 

Conditional processing attributes

      requiredExtensions  ,   requiredFeatures  ,   systemLanguage  .

XLink attributes

  xlink:href  Deprecated ,   xlink:type  ,   xlink:role  ,
  xlink:arcrole  ,   xlink:title  ,   xlink:show  ,   xlink:actuate 

Presentation attributes

Note: All SVG presentation attributes can be used as CSS properties.

-     alignment-baseline 
-     baseline-shift 
-     clip 
-     clip-path 
-     clip-rule 
-     color 
-     color-interpolation 
-     color-interpolation-filters 
-     color-profile 
-     color-rendering 
-     cursor 
-     direction 
-     display 
-     dominant-baseline 
-     enable-background 
-     fill 
-     fill-opacity 
-     fill-rule 
-     filter 
-     flood-color 
-     flood-opacity 
-     font-family 
-     font-size 
-     font-size-adjust 
-     font-stretch 
-     font-style 
-     font-variant 
-     font-weight 
-     glyph-orientation-horizontal 
-     glyph-orientation-vertical 
-     image-rendering 
-     kerning 
-     letter-spacing 
-     lighting-color 
-     marker-end 
-     marker-mid 
-     marker-start 
-     mask 
-     opacity 
-     overflow 
-     pointer-events 
-     shape-rendering 
-     stop-color 
-     stop-opacity 
-     stroke 
-     stroke-dasharray 
-     stroke-dashoffset 
-     stroke-linecap 
-     stroke-linejoin 
-     stroke-miterlimit 
-     stroke-opacity 
-     stroke-width 
-     text-anchor 
-     text-decoration 
-     text-rendering 
-     transform 
-     transform-origin 
-     unicode-bidi 
-     vector-effect 
-     visibility 
-     word-spacing 
-     writing-mode 

Filters attributes

Filter primitive attributes
      height  ,   result  ,   width  ,   x  ,   y 

Transfer function attributes
      type  ,   tableValues  ,   slope  ,   intercept  ,   amplitude  ,
      exponent  ,   offset 

Animation attributes

Animation target element attributes
      href 

Animation attribute target attributes
      attributeType  ,   attributeName 

Animation timing attributes
      begin  ,   dur  ,   end  ,   min  ,   max  ,   restart  ,
      repeatCount  ,   repeatDur  ,   fill 

Animation value attributes
      calcMode  ,   values  ,   keyTimes  ,   keySplines  ,   from  ,
      to  ,   by  ,   autoReverse  ,   accelerate  ,   decelerate 

Animation addition attributes
      additive  ,   accumulate 

Event attributes

Animation event attributes

    Animation event attributes

     onbegin ,  onend ,  onrepeat

Document event attributes

    Document event attributes

     onabort ,  onerror ,  onresize ,  onscroll ,  onunload

Global event attributes

    Global event attributes

     oncancel ,  oncanplay ,  oncanplaythrough ,  onchange ,  onclick ,
     onclose ,  oncuechange ,  ondblclick ,  ondrag ,  ondragend ,
     ondragenter ,  ondragleave ,  ondragover ,  ondragstart ,  ondrop ,
     ondurationchange ,  onemptied ,  onended ,  onerror ,  onfocus ,
     oninput ,  oninvalid ,  onkeydown ,  onkeypress ,  onkeyup ,
     onload ,  onloadeddata ,  onloadedmetadata ,  onloadstart ,
     onmousedown ,  onmouseenter ,  onmouseleave ,  onmousemove ,
     onmouseout ,  onmouseover ,  onmouseup ,  onmousewheel ,  onpause ,
     onplay ,  onplaying ,  onprogress ,  onratechange ,  onreset ,
     onresize ,  onscroll ,  onseeked ,  onseeking ,  onselect ,  onshow
    ,  onstalled ,  onsubmit ,  onsuspend ,  ontimeupdate ,  ontoggle ,
     onvolumechange ,  onwaiting

Graphical event attributes

    Graphical event attributes

     onactivate ,  onfocusin ,  onfocusout

See also

-   SVG element reference
-   SVG Tutorial
-   SVG interface reference

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 19, 2023 by MDN contributors .
# ideographic #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  ideographic attribute indicates the alignment coordinate for glyphs
to achieve ideographic baseline alignment for horizontally oriented
glyph layouts. The value is an offset in the font coordinate system.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- -------------
  Value             <number> 
  Default value   None
  Animatable      No
  --------------- -------------

 <number>

    This value indicates the alignment coordinate for the glyphs.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementIdeographicAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 9, 2023 by MDN contributors .
# id #

The  id attribute assigns a unique name to an element.

You can use this attribute with any SVG element.

Example

html

    <svg
      width="120"
      height="120"
      viewBox="0 0 120 120"
      xmlns="http://www.w3.org/2000/svg">
      <style>
        <![CDATA[
          #smallRect {
            stroke: #000066;
            fill: #00cc00;
          }
        ]]>
      </style>

      <rect id="smallRect" x="10" y="10" width="100" height="100" />
    </svg>

Usage notes

  --------------- ------
  Value           <id>
  Default value   None
  Animatable      No
  --------------- ------

<id>

    Specifies the element's ID. The ID must be unique within the node
    tree, must not be an empty string, and must not contain any
    whitespace characters.

    Note: You should avoid the use of  id values that would be parsed as
    an SVG view specification (e.g.,
     MyDrawing.svg#svgView(viewBox(0,200,1000,1000)) ) or a basic media
    fragment when used as a URL target fragment.

    It must be valid in XML documents. A stand-alone SVG document uses
    XML 1.0 syntax, which specifies that valid IDs only include
    designated characters (letters, digits, and a few punctuation
    marks), and do not start with a digit, a full stop (.) character, or
    a hyphen-minus (-) character.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # Core.attrib

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTML  id
-     class 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# image-rendering #

The  image-rendering attribute provides a hint to the browser about how
to make speed vs. quality tradeoffs as it performs image processing.

The resampling is always done in a truecolor (e.g., 24-bit) color space
even if the original data and/or the target device is indexed color.

Note: As a presentation attribute,  image-rendering can be used as a CSS
property. See the  CSS image-rendering property for more information.

You can use this attribute with the following SVG elements:

-    <image>

Usage notes

  --------------- -------------------------------------------
  Value            auto |  optimizeSpeed |  optimizeQuality
  Default value    auto
  Animatable      Yes
  --------------- -------------------------------------------

 auto

    Indicates that the user agent shall make appropriate tradeoffs to
    balance speed and quality, but quality shall be given more
    importance than speed.

 optimizeSpeed

    Indicates that the user agent shall emphasize rendering speed over
    quality.

 optimizeQuality

    Indicates that the user agent shall emphasize quality over rendering
    speed.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Images Module Level 3
  # the-image-rendering

  Scalable Vector Graphics (SVG) 2
  # ImageRendering
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS image-rendering

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# in2 #

The  in2 attribute identifies the second input for the given filter
primitive. It works exactly like the   in  attribute.

You can use this attribute with the following SVG elements:

-    <feBlend>
-    <feComposite>
-    <feDisplacementMap>

feBlend

For  <feBlend> ,  in2 defines the second input image to the blending
operation.

  --------------- ---------------------------------------------------------------------------------------------------------------------------------
  Value            SourceGraphic |  SourceAlpha |  BackgroundImage |  BackgroundAlpha |  FillPaint |  StrokePaint |  <filter-primitive-reference>
  Default value    SourceGraphic for first filter primitive, otherwise result of previous filter primitive
  Animatable      Yes
  --------------- ---------------------------------------------------------------------------------------------------------------------------------

feComposite

For  <feComposite> ,  in2 defines the second input image to the
compositing operation.

  --------------- ---------------------------------------------------------------------------------------------------------------------------------
  Value            SourceGraphic |  SourceAlpha |  BackgroundImage |  BackgroundAlpha |  FillPaint |  StrokePaint |  <filter-primitive-reference>
  Default value    SourceGraphic for first filter primitive, otherwise result of previous filter primitive
  Animatable      Yes
  --------------- ---------------------------------------------------------------------------------------------------------------------------------

feDisplacementMap

For  <feDisplacementMap> ,  in2 defines the second input image, which is
used to displace the pixels in the image defined in the   in  attribute.

  --------------- ---------------------------------------------------------------------------------------------------------------------------------
  Value            SourceGraphic |  SourceAlpha |  BackgroundImage |  BackgroundAlpha |  FillPaint |  StrokePaint |  <filter-primitive-reference>
  Default value    SourceGraphic for first filter primitive, otherwise result of previous filter primitive
  Animatable      Yes
  --------------- ---------------------------------------------------------------------------------------------------------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fedisplacementmap-in2

  Filter Effects Module Level 1
  # element-attrdef-fecomposite-in2

  Filter Effects Module Level 1
  # element-attrdef-feblend-in2
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 3, 2023 by MDN contributors .
# in #

The  in attribute identifies input for the given filter primitive.

The value can be either one of the six keywords defined below, or a
string which matches a previous   result  attribute value within the
same  <filter> element. If no value is provided and this is the first
filter primitive, then this filter primitive will use  SourceGraphic as
its input. If no value is provided and this is a subsequent filter
primitive, then this filter primitive will use the result from the
previous filter primitive as its input.

If the value for   result  appears multiple times within a given
 <filter> element, then a reference to that result will use the closest
preceding filter primitive with the given value for attribute   result 
.

You can use this attribute with the following SVG elements:

-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feDropShadow>
-    <feGaussianBlur>
-    <feMergeNode>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>

Usage notes

  --------------- ---------------------------------------------------------------------------------------------------------------------------------
  Value            SourceGraphic |  SourceAlpha |  BackgroundImage |  BackgroundAlpha |  FillPaint |  StrokePaint |  <filter-primitive-reference>
  Default value    SourceGraphic for first filter primitive, otherwise result of previous filter primitive
  Animatable      Yes
  --------------- ---------------------------------------------------------------------------------------------------------------------------------

 SourceGraphic

    This keyword represents the graphics elements that were the original
    input into the  <filter> element.

 SourceAlpha

    This keyword represents the graphics elements that were the original
    input into the  <filter> element.  SourceAlpha has all of the same
    rules as  SourceGraphic except that only the alpha channel is used.

 BackgroundImage

    This keyword represents an image snapshot of the SVG document under
    the filter region at the time that the  <filter> element was
    invoked.

 BackgroundAlpha

    Same as  BackgroundImage except only the alpha channel is used.

 FillPaint

    This keyword represents the value of the   fill  property on the
    target element for the filter effect. In many cases, the  FillPaint
    is opaque everywhere, but that might not be the case if a shape is
    painted with a gradient or pattern which itself includes transparent
    or semi-transparent parts.

 StrokePaint

    This keyword represents the value of the   stroke  property on the
    target element for the filter effect. In many cases, the
     StrokePaint is opaque everywhere, but that might not be the case if
    a shape is painted with a gradient or pattern which itself includes
    transparent or semi-transparent parts.

 <filter-primitive-reference>

    This value is an assigned name for the filter primitive in the form
    of a  <custom-ident> . If supplied, then graphics that result from
    processing this filter primitive can be referenced by an in
    attribute on a subsequent filter primitive within the same filter
    element. If no value is provided, the output will only be available
    for re-use as the implicit input into the next filter primitive if
    that filter primitive provides no value for its in attribute.

Workaround for BackgroundImage

 BackgroundImage is not supported as a filter source in modern browsers
(see the feComposite compatibility table ). We therefore need to import
one of the images to blend inside the filter itself, using an  <feImage>
element.

Note: Firefox Bug 455986 means that  feImage cannot load partial images,
including circles, rectangles, paths or other fragments defined in the
document. So that this example works on more browsers, a full external
image of the logo is loaded.

HTML

html

    <div style="width: 420px; height: 220px;">
      <svg
        style="width:200px; height:200px; display: inline;"
        xmlns="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
          <filter id="backgroundMultiply">
            <!-- This will not work. -->
            <feBlend in="BackgroundImage" in2="SourceGraphic" mode="multiply" />
          </filter>
        </defs>
        <image
          href="mdn_logo_only_color.png"
          x="10%"
          y="10%"
          width="80%"
          height="80%" />
        <circle
          cx="50%"
          cy="40%"
          r="40%"
          fill="#c00"
          style="filter:url(#backgroundMultiply);" />
      </svg>

      <svg
        style="width:200px; height:200px; display: inline;"
        xmlns="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
          <filter id="imageMultiply">
            <!-- This is a workaround. -->
            <feImage
              href="mdn_logo_only_color.png"
              x="10%"
              y="10%"
              width="80%"
              height="80%" />
            <feBlend in2="SourceGraphic" mode="multiply" />
          </filter>
        </defs>
        <circle
          cx="50%"
          cy="40%"
          r="40%"
          fill="#c00"
          style="filter:url(#imageMultiply);" />
      </svg>
    </div>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-filter-primitive-in

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# intercept #

The  intercept attribute defines the intercept of the linear function of
color component transfers when the   type  attribute is set to  linear .

You can use this attribute with the following SVG elements:

-    <feFuncA>
-    <feFuncB>
-    <feFuncG>
-    <feFuncR>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <linearGradient
          id="gradient"
          gradientUnits="userSpaceOnUse"
          x1="0"
          y1="0"
          x2="200"
          y2="0">
          <stop offset="0" stop-color="#ff0000" />
          <stop offset="0.5" stop-color="#00ff00" />
          <stop offset="1" stop-color="#0000ff" />
        </linearGradient>
      </defs>

      <filter id="componentTransfer1" x="0" y="0" width="100%" height="100%">
        <feComponentTransfer>
          <feFuncR type="linear" intercept="0" />
          <feFuncG type="linear" intercept="0" />
          <feFuncB type="linear" intercept="0" />
        </feComponentTransfer>
      </filter>
      <filter id="componentTransfer2" x="0" y="0" width="100%" height="100%">
        <feComponentTransfer>
          <feFuncR type="linear" intercept="0.3" />
          <feFuncG type="linear" intercept="0.1" />
          <feFuncB type="linear" intercept="0.8" />
        </feComponentTransfer>
      </filter>

      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        fill="url(#gradient)"
        style="filter: url(#componentTransfer1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        fill="url(#gradient)"
        style="filter: url(#componentTransfer2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- -----------
  Value            <number>
  Default value    0
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fecomponenttransfer-intercept

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 3, 2023 by MDN contributors .
# k1 #

The  k1 attribute defines one of the values to be used within the
 arithmetic operation of the  <feComposite> filter primitive.

The pixel composition is computed using the following formula:

js

    result = k1 * i1 * i2 + k2 * i1 + k3 * i2 + k4;

You can use this attribute with the following SVG elements:

-    <feComposite>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="composite1" x="0" y="0" width="100%" height="100%">
        <feComposite
          in2="SourceGraphic"
          operator="arithmetic"
          k1="1"
          k2="0"
          k3="0"
          k4="0" />
      </filter>
      <filter id="composite2" x="0" y="0" width="100%" height="100%">
        <feComposite
          in2="SourceGraphic"
          operator="arithmetic"
          k1="10"
          k2="0"
          k3="0"
          k4="0" />
      </filter>

      <image
        href="mdn.svg"
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#composite1);" />
      <image
        href="mdn.svg"
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#composite2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- -----------
  Value            <number>
  Default value    0
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fecomposite-k1

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# k2 #

The  k2 attribute defines one of the values to be used within the
 arithmetic operation of the  <feComposite> filter primitive.

The pixel composition is computed using the following formula:

js

    result = k1 * i1 * i2 + k2 * i1 + k3 * i2 + k4;

You can use this attribute with the following SVG elements:

-    <feComposite>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="composite1" x="0" y="0" width="100%" height="100%">
        <feComposite
          in2="SourceGraphic"
          operator="arithmetic"
          k1="1"
          k2="1"
          k3="0"
          k4="0" />
      </filter>
      <filter id="composite2" x="0" y="0" width="100%" height="100%">
        <feComposite
          in2="SourceGraphic"
          operator="arithmetic"
          k1="1"
          k2="10"
          k3="0"
          k4="0" />
      </filter>

      <image
        href="mdn.svg"
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#composite1);" />
      <image
        href="mdn.svg"
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#composite2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- -----------
  Value            <number>
  Default value    0
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fecomposite-k2

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# k3 #

The  k3 attribute defines one of the values to be used within the
 arithmetic operation of the  <feComposite> filter primitive.

The pixel composition is computed using the following formula:

js

    result = k1 * i1 * i2 + k2 * i1 + k3 * i2 + k4;

You can use this attribute with the following SVG elements:

-    <feComposite>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="composite1" x="0" y="0" width="100%" height="100%">
        <feComposite
          in2="SourceGraphic"
          operator="arithmetic"
          k1="1"
          k2="0"
          k3="1"
          k4="0" />
      </filter>
      <filter id="composite2" x="0" y="0" width="100%" height="100%">
        <feComposite
          in2="SourceGraphic"
          operator="arithmetic"
          k1="1"
          k2="0"
          k3="10"
          k4="0" />
      </filter>

      <image
        href="mdn.svg"
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#composite1);" />
      <image
        href="mdn.svg"
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#composite2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- -----------
  Value            <number>
  Default value    0
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fecomposite-k3

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# k4 #

The  k4 attribute defines one of the values to be used within the
 arithmetic operation of the  <feComposite> filter primitive.

The pixel composition is computed using the following formula:

    result = k1*i1*i2 + k2*i1 + k3*i2 + k4

You can use this attribute with the following SVG elements:

-    <feComposite>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="composite1" x="0" y="0" width="100%" height="100%">
        <feComposite
          in2="SourceGraphic"
          operator="arithmetic"
          k1="1"
          k2="0"
          k3="0"
          k4="0" />
      </filter>
      <filter id="composite2" x="0" y="0" width="100%" height="100%">
        <feComposite
          in2="SourceGraphic"
          operator="arithmetic"
          k1="10"
          k2="0"
          k3="0"
          k4="0.3" />
      </filter>

      <image
        href="mdn.svg"
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#composite1);" />
      <image
        href="mdn.svg"
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#composite2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- -----------
  Value            <number>
  Default value    0
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fecomposite-k4

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# kernelMatrix #

The  kernelMatrix attribute defines the list of numbers that make up the
kernel matrix for the  <feConvolveMatrix> element.

Values are separated by space characters and/or a comma. The number of
entries in the list must equal to  <orderX> by  <orderY> as defined in
the   order  attribute.

You can use this attribute with the following SVG elements:

-    <feConvolveMatrix>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="convolveMatrix1" x="0" y="0" width="100%" height="100%">
        <feConvolveMatrix kernelMatrix="1 1 0 0 0 0 0 0 -1" />
      </filter>
      <filter id="convolveMatrix2" x="0" y="0" width="100%" height="100%">
        <feConvolveMatrix kernelMatrix="-1 0 0 0 0 0 0 0 1" />
      </filter>

      <image
        href="mdn_logo_only_color.png"
        width="200"
        height="200"
        style="filter:url(#convolveMatrix1);" />
      <image
        href="mdn_logo_only_color.png"
        width="200"
        height="200"
        style="filter:url(#convolveMatrix2); transform:translateX(220px);" />
    </svg>

Usage notes

  --------------- ----------------------
  Value             <list of numbers> 
  Default value   None
  Animatable      Yes
  --------------- ----------------------

 <list of numbers>

    The list of  <number> s that make up the kernel matrix for the
    convolution. Values are separated by space characters and/or a
    comma. The number of entries in the list must equal  <orderX> times
     <orderY> .

    If the result of  orderX *  orderY is not equal to the number of
    entries in the value list, the filter primitive acts as a pass
    through filter.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-feconvolvematrix-kernelmatrix

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# kernelUnitLength #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  kernelUnitLength attribute has two meanings based on the context
it's used in. For lighting filter primitives, it indicates the intended
distance for the x and y coordinates, for  <feConvolveMatrix> , it
indicates the intended distance between successive columns and rows in
the kernel matrix.

You can use this attribute with the following SVG elements:

-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feSpecularLighting>

feConvolveMatrix

For the  <feConvolveMatrix> ,  kernelUnitLength indicates the intended
distance in current filter units (i.e., units as determined by the value
of   primitiveUnits  attribute) between successive columns and rows,
respectively, in the   kernelMatrix  . By specifying value(s) for
 kernelUnitLength , the kernel becomes defined in a scalable, abstract
coordinate system. If the attribute is not specified, the default value
is one pixel in the offscreen bitmap, which is a pixel-based coordinate
system, and thus potentially not scalable.

If a negative or zero value is specified the default value will be used
instead.

  --------------- -----------------------------
  Value             <number-optional-number> 
  Default value   Pixel in offscreen bitmap
  Animatable      Yes
  --------------- -----------------------------

 <number-optional-number>

    The first number is the x value. The second number is the y value.
    If the x value is not specified, it defaults to the same value as x.

feDiffuseLighting

For the  <feDiffuseLighting> ,  kernelUnitLength indicates the intended
distance in current filter units (i.e., units as determined by the value
of attribute   primitiveUnits  ) for the x and y coordinate,
respectively, in the surface normal calculation formulas.

The first number is the x value. The second number is the y value. If
the y value is not specified, it defaults to the same value as x. By
specifying value(s) for  kernelUnitLength , the kernel becomes defined
in a scalable, abstract coordinate system. If the attribute is not
specified, the x and y values represent very small deltas relative to a
given position, which might be implemented in some cases as one pixel in
the intermediate image offscreen bitmap, which is a pixel-based
coordinate system, and thus potentially not scalable.

If a negative or zero value is specified the default value will be used
instead.

  --------------- -----------------------------
  Value             <number-optional-number> 
  Default value   Pixel in offscreen bitmap
  Animatable      Yes
  --------------- -----------------------------

feSpecularLighting

For the  <feSpecularLighting> ,  kernelUnitLength indicates the intended
distance in current filter units (i.e., units as determined by the value
of attribute   primitiveUnits  ) for the x and y coordinate,
respectively, in the surface normal calculation formulas.

The first number is the x value. The second number is the y value. If
the y value is not specified, it defaults to the same value as x. By
specifying value(s) for  kernelUnitLength , the kernel becomes defined
in a scalable, abstract coordinate system. If the attribute is not
specified, the x and y values represent very small deltas relative to a
given position, which might be implemented in some cases as one pixel in
the intermediate image offscreen bitmap, which is a pixel-based
coordinate system, and thus potentially not scalable.

If a negative or zero value is specified the default value will be used
instead.

  --------------- -----------------------------
  Value             <number-optional-number> 
  Default value   Pixel in offscreen bitmap
  Animatable      Yes
  --------------- -----------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fespecularlighting-kernelunitlength

  Filter Effects Module Level 1
  # element-attrdef-fediffuselighting-kernelunitlength

  Filter Effects Module Level 1
  # element-attrdef-feconvolvematrix-kernelunitlength
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 3, 2023 by MDN contributors .
# kerning #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  kerning attribute indicates whether the spacing between glyphs
should be adjusted based on kerning tables that are included in the
relevant font (i.e., enable auto-kerning) or instead disable
auto-kerning and set the spacing between them to a specific length
(typically, zero).

Note: As a presentation attribute  kerning can be used as a CSS
property. In CSS the property is called  font-kerning , though.

You can use this attribute with the following SVG elements:

-    <textPath>
-    <text>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
      font:
        36px Verdana,
        Helvetica,
        Arial,
        sans-serif;
    }

html

    <svg viewBox="0 0 150 125" xmlns="http://www.w3.org/2000/svg">
      <text x="10" y="30" kerning="auto">auto</text>
      <text x="10" y="70" kerning="0">number</text>
      <text x="10" y="110" kerning="20px">length</text>
    </svg>

Usage notes

  --------------- ---------------------
  Value            auto |   <length> 
  Default value    auto
  Animatable      Yes
  --------------- ---------------------

 auto

    This value indicates that the spacing between glyphs is adjusted
    based on kerning tables that are included in the font that will be
    used.

 <length>

    If a length is provided, then auto-kerning is disabled. Instead,
    inter-character spacing is set to the given length.

    If a length is provided without a unit identifier (e.g., an
    unqualified number such as 128), the length is processed as a width
    value in the current user coordinate system. If a unit identifier
    (e.g.,  0.25em or  1% ) is provided, then the length is converted
    into a corresponding value in the current user coordinate system.

    The most common scenario, other than  auto , is to set  kerning to a
    value of  0 so that auto-kerning is disabled.

    The given length is added to the inter-character spacing value
    specified by the   letter-spacing  attribute.

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS font-kerning

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 7, 2023 by MDN contributors .
# keyPoints #

The  keyPoints attribute indicates the simple duration of an animation.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <set>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg
      viewBox="0 0 120 120"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <path
        d="M10,110 A120,120 -45 0,1 110 10 A120,120 -45 0,1 10,110"
        stroke="lightgrey"
        stroke-width="2"
        fill="none"
        id="motionPath" />
      <circle cx="10" cy="110" r="3" fill="lightgrey" />
      <circle cx="110" cy="10" r="3" fill="lightgrey" />

      <circle r="5" fill="red">
        <animateMotion
          dur="3s"
          repeatCount="indefinite"
          keyPoints="0;0.5;1"
          keyTimes="0;0.15;1"
          calcMode="linear">
          <mpath href="#motionPath" />
        </animateMotion>
      </circle>
    </svg>

Usage notes

  --------------- ------------------------------
  Value            <number> [;  <number> ]* ;?
  Default value   None
  Animatable      No
  --------------- ------------------------------

 <number> [; <number>] ;?

    This value defines a semicolon-separated list of floating point
    values between 0 and 1 and indicates how far along the motion path
    the object shall move at the moment in time specified by
    corresponding   keyTimes  value. The distance is calculated along
    the path specified by the   path  attribute. Each progress value in
    the list corresponds to a value in the  keyTimes attribute list.

    If a list of key points is specified, there must be exactly as many
    values in the  keyPoints list as in the  keyTimes list.

    If there's a semicolon at the end of the value, optionally followed
    by white space, both the semicolon and the trailing white space are
    ignored.

    If there are any errors in the value specification (i.e. bad values,
    too many or too few values), then that's an error.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # KeyPointsAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# keySplines #

The  keySplines attribute defines a set of Bézier curve control points
associated with the   keyTimes  list, defining a cubic Bézier function
that controls interval pacing.

This attribute is ignored unless the   calcMode  attribute is set to
 spline .

If there are any errors in the keySplines specification (bad values, too
many or too few values), the animation will not occur.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 120 120" xmlns="http://www.w3.org/2000/svg">
      <circle cx="60" cy="10" r="10">
        <animate
          attributeName="cx"
          dur="4s"
          calcMode="spline"
          repeatCount="indefinite"
          values="60; 110; 60; 10; 60"
          keyTimes="0; 0.25; 0.5; 0.75; 1"
          keySplines="0.5 0 0.5 1; 0.5 0 0.5 1; 0.5 0 0.5 1; 0.5 0 0.5 1" />
        <animate
          attributeName="cy"
          dur="4s"
          calcMode="spline"
          repeatCount="indefinite"
          values="10; 60; 110; 60; 10"
          keyTimes="0; 0.25; 0.5; 0.75; 1"
          keySplines="0.5 0 0.5 1; 0.5 0 0.5 1; 0.5 0 0.5 1; 0.5 0 0.5 1" />
      </circle>
    </svg>

Usage notes

  --------------- ------------------------------------------------
  Value            <control-point> [  ;  <control-point> ]*  ; ?
  Default value   None
  Animatable      No
  --------------- ------------------------------------------------

The attribute value is a semicolon-separated list of control point
descriptions.

 <control-point>

    Each control point description is a set of four values:  x1 y1 x2 y2
    , describing the Bézier control points for one time segment. The
      keyTimes  values that define the associated segment are the Bézier
    "anchor points", and the  keySplines values are the control points.
    Thus, there must be one fewer sets of control points than there are
      keyTimes  .

    The values of  x1 y1 x2 y2 must all be in the range 0 to 1.

Safari issues

     keyTimes values should be separated with semicolon without space
    before, f.e:  keyTimes="0; 0.25; 0.5; 0.75; 1"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # KeySplinesAttribute

  -----------------------------------------------------------------------

See also

-   Bézier curve

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# keyTimes #

The  keyTimes attribute represents a list of time values used to control
the pacing of the animation.

Each time in the list corresponds to a value in the   values  attribute
list, and defines when the value is used in the animation. Each time
value in the  keyTimes list is specified as a floating point value
between 0 and 1 (inclusive), representing a proportional offset into the
duration of the animation element.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 120 120" xmlns="http://www.w3.org/2000/svg">
      <circle cx="60" cy="10" r="10">
        <animate
          attributeName="cx"
          dur="4s"
          repeatCount="indefinite"
          values="60; 110; 60; 10; 60"
          keyTimes="0; 0.25; 0.5; 0.75; 1" />
        <animate
          attributeName="cy"
          dur="4s"
          repeatCount="indefinite"
          values="10; 60; 110; 60; 10"
          keyTimes="0; 0.25; 0.5; 0.75; 1" />
      </circle>
    </svg>

Usage notes

  --------------- ----------------------------------
  Value            <number> [  ;  <number> ]*  ; ?
  Default value   None
  Animatable      No
  --------------- ----------------------------------

The value of the  keyTimes attribute is a semicolon-separated list of
values.

There must be exactly as many values in the  keyTimes list as in the
 values list.

Each successive time value must be greater than or equal to the
preceding time value.

The  keyTimes list semantics depends upon the interpolation mode:

-   For linear and spline animation, the first time value in the list
    must be 0, and the last time value in the list must be  1 . The key
    time associated with each value defines when the value is set;
    values are interpolated between the key times.
-   For discrete animation, the first time value in the list must be  0
    . The time associated with each value defines when the value is set;
    the animation function uses that value until the next time defined
    in the list.

If the   calcMode  attribute is set to  paced , the  keyTimes attribute
is ignored.

If the duration of the animation is indefinite, any  keyTimes
specification will be ignored.

-   Safari issue:  keyTimes values should be separated with semicolon
    without space before, f.e:  keyTimes="0; 0.25; 0.5; 0.75; 1"

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # KeyTimesAttribute

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 10, 2023 by MDN contributors .
# k #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  k attribute specifies the amount for decreasing the spacing between
the two glyphs in a kerning pair.

The value is in the font coordinate system. This attribute is required.

You can use this attribute with the following SVG elements:

-    <hkern>
-    <vkern>

Context notes

  --------------- -------------
  Value             <number> 
  Default value   None
  Animatable      No
  --------------- -------------

 <number>

    This value indicates the amount for decreasing the spacing between
    the two glyphs in the kerning pair.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # HKernElementKAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# lang #

The  lang attribute specifies the primary language used in contents and
attributes containing text content of particular elements.

There is also an   xml:lang  attribute (with namespace). If both of them
are defined, the one with namespace is used and the one without is
ignored.

In SVG 1.1 there was a  lang attribute defined with a different meaning
and only applying to  <glyph> elements. That attribute specified a list
of languages according to RFC 5646: Tags for Identifying Languages (also
known as BCP 47) . The glyph was meant to be used if the  xml:lang
attribute exactly matched one of the languages given in the value of
this parameter, or if the  xml:lang attribute exactly equaled a prefix
of one of the languages given in the value of this parameter such that
the first tag character following the prefix was "-".

You can use this attribute with any SVG element.

Example

html

    <svg viewBox="0 0 200 100" xmlns="http://www.w3.org/2000/svg">
      <text lang="en-US">This is some English text</text>
    </svg>

Usage notes

  --------------- -----------------
  Value            <language-tag>
  Default value   None
  Animatable      No
  --------------- -----------------

 <language-tag>

    This value specifies the language used for the element. The syntax
    of this value is defined in RFC 5646: Tags for Identifying Languages
    (also known as BCP 47) .

    The most common syntax is a value formed by a lowercase
    two-character part for the language and an uppercase two-character
    part for the region or country, separated by a minus sign, e.g.
     en-US for US English or  de-AT for Austrian German.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # LangSpaceAttrs

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   RFC 5646: Tags for Identifying Languages (also known as BCP 47)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# lengthAdjust #

The lengthAdjust attribute controls how the text is stretched into the
length defined by the   textLength  attribute.

You can use this attribute with the following SVG elements:

-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg width="300" height="150" xmlns="http://www.w3.org/2000/svg">
      <g font-face="sans-serif">
        <text x="0" y="20" textLength="300" lengthAdjust="spacing">
          Stretched using spacing only.
        </text>
        <text x="0" y="50" textLength="300" lengthAdjust="spacingAndGlyphs">
          Stretched using spacing and glyphs.
        </text>
        <text x="0" y="80" textLength="100" lengthAdjust="spacing">
          Shrunk using spacing only.
        </text>
        <text x="0" y="110" textLength="100" lengthAdjust="spacingAndGlyphs">
          Shrunk using spacing and glyphs.
        </text>
      </g>
    </svg>

Usage notes

  --------------- ------------------------------
  Value            spacing |  spacingAndGlyphs
  Default value    spacing
  Animatable      Yes
  --------------- ------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # TextElementLengthAdjustAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# letter-spacing #

The  letter-spacing attribute controls spacing between text characters,
in addition to any spacing from the   kerning  attribute.

If the attribute value is a unitless number (like  128 ), the browser
processes it as a  <length> in the current user coordinate system.

If the attribute value has a unit identifier, such as  .25em or  1% ,
then the browser converts the <length> into its corresponding value in
the current user coordinate system.

Note: As a presentation attribute,  letter-spacing can be used as a CSS
property. See the  CSS letter-spacing property for more information.

You can use this attribute with the following SVG elements:

-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 400 30" xmlns="http://www.w3.org/2000/svg">
      <text y="20" letter-spacing="2">Bigger letter-spacing</text>
      <text x="200" y="20" letter-spacing="-0.5">Smaller letter-spacing</text>
    </svg>

Usage notes

  --------------- ---------------------
  Value            normal |  <length>
  Default value    normal
  Animatable      Yes
  --------------- ---------------------

For a description of the values, please refer to the CSS  letter-spacing
property.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Text Module Level 3
  # letter-spacing-property

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS letter-spacing

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# lighting-color #

The  lighting-color attribute defines the color of the light source for
lighting filter primitives.

You can use this attribute with the following SVG elements:

-    <feDiffuseLighting>
-    <feSpecularLighting>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="diffuseLighting1" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting in="SourceGraphic" lighting-color="white">
          <fePointLight x="60" y="60" z="20" />
        </feDiffuseLighting>
      </filter>
      <filter id="diffuseLighting2" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting in="SourceGraphic" lighting-color="blue">
          <fePointLight x="60" y="60" z="20" />
        </feDiffuseLighting>
      </filter>

      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#diffuseLighting1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#diffuseLighting2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- --------
  Value            color
  Default value    white
  Animatable      Yes
  --------------- --------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # LightingColorProperty

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Description of Phong reflection model on Wikipedia

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# limitingConeAngle #

The  limitingConeAngle attribute represents the angle in degrees between
the spot light axis (i.e. the axis between the light source and the
point to which it is pointing at) and the spot light cone. So it defines
a limiting cone which restricts the region where the light is projected.
No light is projected outside the cone.

You can use this attribute with the following SVG elements:

-    <feSpotLight>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 480 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="spotLight1" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting diffuseConstant="2">
          <feSpotLight
            x="10"
            y="10"
            z="50"
            pointsAtX="100"
            pointsAtY="100"
            limitingConeAngle="10" />
        </feDiffuseLighting>
      </filter>
      <filter id="spotLight2" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting diffuseConstant="2">
          <feSpotLight
            x="10"
            y="10"
            z="50"
            pointsAtX="100"
            pointsAtY="100"
            limitingConeAngle="40" />
        </feDiffuseLighting>
      </filter>

      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#spotLight1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#spotLight2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- -----------
  Value            <number>
  Default value    0
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fespotlight-limitingconeangle

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# marker-end #

The  marker-end attribute defines the arrowhead or polymarker that will
be drawn at the final vertex of the given shape .

For all shape elements, except  <polyline> and  <path> , the last vertex
is the same as the first vertex. In this case, if the value of
  marker-start  and  marker-end are both not  none , then two markers
will be rendered on that final vertex. For  <path> elements, for each
closed subpath, the last vertex is the same as the first vertex.
 marker-end is only rendered on the final vertex of the path data .

Note: As a presentation attribute,  marker-end can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <circle>
-    <ellipse>
-    <line>
-    <path>
-    <polygon>
-    <polyline>
-    <rect>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 120 120" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <marker
          id="triangle"
          viewBox="0 0 10 10"
          refX="1"
          refY="5"
          markerUnits="strokeWidth"
          markerWidth="10"
          markerHeight="10"
          orient="auto">
          <path d="M 0 0 L 10 5 L 0 10 z" fill="#f00" />
        </marker>
      </defs>
      <polyline
        fill="none"
        stroke="black"
        points="20,100 40,60 70,80 100,20"
        marker-end="url(#triangle)" />
    </svg>

Usage notes

  --------------- -----------------------
  Value            none |  <marker-ref>
  Default value    none
  Animatable      discrete
  --------------- -----------------------

 none

    Indicates that no marker symbol shall be drawn at the final vertex.

 <marker-ref>

    This value is a reference to a  <marker> element, which will be
    drawn at the final vertex. If the reference is not valid, then no
    marker will be drawn.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # VertexMarkerProperties

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <marker>
-     marker-start 
-     marker-mid 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# markerHeight #

The  markerHeight attribute represents the height of the viewport into
which the  <marker> is to be fitted when it is rendered according to the
  viewBox  and   preserveAspectRatio  attributes.

You can use this attribute with the following SVG elements:

-    <marker>

Usage notes

  --------------- ----------------------------------
  Value            <length-percentage> |  <number>
  Default value    3
  Animatable      Yes
  --------------- ----------------------------------

 <length-percentage>

    This value defines either an absolute or a relative height of the
    marker. Relative values refer to the height specified via the
      viewBox  and   preserveAspectRatio  attributes.

 <number>

    This value defines the height of the marker in the units defined by
    the   markerUnits  attribute.

A value of zero disables rendering of the element and negative values
are an error.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # MarkerHeightAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <marker>
-     markerWidth 
-     markerUnits 
-     viewBox 
-     preserveAspectRatio 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# marker-mid #

The  marker-mid attribute defines the arrowhead or polymarker that will
be drawn at all interior vertices of the given shape .

The marker is rendered on every vertex other than the first and last
vertices of the path data .

Note: As a presentation attribute,  marker-mid can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <circle>
-    <ellipse>
-    <line>
-    <path>
-    <polygon>
-    <polyline>
-    <rect>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 120 120" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <marker id="circle" markerWidth="8" markerHeight="8" refX="4" refY="4">
          <circle cx="4" cy="4" r="4" stroke="none" fill="#f00" />
        </marker>
      </defs>
      <polyline
        fill="none"
        stroke="black"
        points="20,100 40,60 70,80 100,20"
        marker-mid="url(#circle)" />
    </svg>

Usage notes

  --------------- -----------------------
  Value            none |  <marker-ref>
  Default value    none
  Animatable      discrete
  --------------- -----------------------

 none

    Indicates that no marker symbol shall be drawn at the given
    vertices.

 <marker-ref>

    This value is a reference to a  <marker> element, which will be
    drawn at the given vertices. If the reference is not valid, then no
    marker will be drawn.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # VertexMarkerProperties

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <marker>
-     marker-start 
-     marker-end 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# marker-start #

The  marker-start attribute defines the arrowhead or polymarker that
will be drawn at the first vertex of the given shape .

For all shape elements, except  <polyline> and  <path> , the last vertex
is the same as the first vertex. In this case, if the value of
 marker-start and   marker-end  are both not  none , then two markers
will be rendered on that final vertex. For  <path> elements, for each
closed subpath, the last vertex is the same as the first vertex.
 marker-start is only rendered on the first vertex of the path data .

Note: As a presentation attribute,  marker-start can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <circle>
-    <ellipse>
-    <line>
-    <path>
-    <polygon>
-    <polyline>
-    <rect>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 120 120" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <marker
          id="triangle"
          viewBox="0 0 10 10"
          refX="1"
          refY="5"
          markerUnits="strokeWidth"
          markerWidth="10"
          markerHeight="10"
          orient="auto">
          <path d="M 0 0 L 10 5 L 0 10 z" fill="#f00" />
        </marker>
      </defs>
      <polyline
        fill="none"
        stroke="black"
        points="20,100 40,60 70,80 100,20"
        marker-start="url(#triangle)" />
    </svg>

Usage notes

  --------------- -----------------------
  Value            none |  <marker-ref>
  Default value    none
  Animatable      discrete
  --------------- -----------------------

 none

    Indicates that no marker symbol shall be drawn at the first vertex.

 <marker-ref>

    This value is a reference to a  <marker> element, which will be
    drawn at the first vertex. If the reference is not valid, then no
    marker will be drawn.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # VertexMarkerProperties

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <marker>
-     marker-end 
-     marker-mid 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# markerUnits #

The  markerUnits attribute defines the coordinate system for the
  markerWidth  and   markerHeight  attributes and the contents of the
 <marker> .

You can use this attribute with the following SVG elements:

-    <marker>

Usage notes

  --------------- --------------------------------
  Value            userSpaceOnUse |  strokeWidth
  Default value    strokeWidth
  Animatable      Yes
  --------------- --------------------------------

 userSpaceOnUse

    This value specifies that the  markerWidth and  markerHeight
    attributes and the contents of the  <marker> element represent
    values in the current user coordinate system in place for the
    graphic object referencing the marker (i.e., the user coordinate
    system for the element referencing the  <marker> element via a
      marker  ,  marker-start ,  marker-mid , or  marker-end property).

 strokeWidth

    This value specifies that the  markerWidth and  markerHeight
    attributes and the contents of the  <marker> element represent
    values in a coordinate system which has a single unit equal the size
    in user units of the current stroke width (see the   stroke-width 
    attribute) in place for the graphic object referencing the marker.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # MarkerUnitsAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <marker>
-     markerWidth 
-     markerHeight 
-     stroke-width 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# markerWidth #

The  markerWidth attribute represents the width of the viewport into
which the  <marker> is to be fitted when it is rendered according to the
  viewBox  and   preserveAspectRatio  attributes.

You can use this attribute with the following SVG elements:

-    <marker>

Usage notes

  --------------- ----------------------------------
  Value            <length-percentage> |  <number>
  Default value    3
  Animatable      Yes
  --------------- ----------------------------------

 <length-percentage>

    This value defines either an absolute or a relative width of the
    marker. Relative values refer to the width specified via the
      viewBox  and   preserveAspectRatio  attributes.

 <number>

    This value defines the width of the marker in the units defined by
    the   markerUnits  attribute.

A value of zero disables rendering of the element and negative values
are an error.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # MarkerWidthAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <marker>
-     markerHeight 
-     markerUnits 
-     viewBox 
-     preserveAspectRatio 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# maskContentUnits #

The  maskContentUnits attribute indicates which coordinate system to use
for the contents of the  <mask> element.

You can use this attribute with the following SVG elements:

-    <mask>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <mask id="myMask1" maskContentUnits="userSpaceOnUse">
        <rect fill="black" x="0" y="0" width="100%" height="100%" />
        <circle fill="white" cx="50" cy="50" r="35" />
      </mask>

      <mask id="myMask2" maskContentUnits="objectBoundingBox">
        <rect fill="black" x="0" y="0" width="100%" height="100%" />
        <circle fill="white" cx=".5" cy=".5" r=".35" />
      </mask>

      <!-- Some reference rect to materialized the mask -->
      <rect id="r1" x="0" y="0" width="45" height="45" />
      <rect id="r2" x="0" y="55" width="45" height="45" />
      <rect id="r3" x="55" y="55" width="45" height="45" />
      <rect id="r4" x="55" y="0" width="45" height="45" />

      <!-- The first 3 rect are masked with useSpaceOnUse units -->
      <use mask="url(#myMask1)" href="#r1" fill="red" />
      <use mask="url(#myMask1)" href="#r2" fill="red" />
      <use mask="url(#myMask1)" href="#r3" fill="red" />

      <!-- The last rect is masked with objectBoundingBox units -->
      <use mask="url(#myMask2)" href="#r4" fill="red" />
    </svg>

mask

For  <mask> ,  maskContentUnits defines the coordinate system in use for
the content of the element.

  --------------- --------------------------------------
  Value            userSpaceOnUse |  objectBoundingBox
  Default value    userSpaceOnUse
  Animatable      Yes
  --------------- --------------------------------------

 userSpaceOnUse

    This value indicates that all coordinates inside the  <mask> element
    refer to the user coordinate system as defined when the mask was
    created.

 objectBoundingBox

    This value indicates that all coordinates inside the  <mask> element
    are relative to the bounding box of the element the mask is applied
    to. A bounding box could be considered the same as if the content of
    the  <mask> were bound to a "  0 0 1 1 "   viewBox  .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Masking Module Level 1
  # element-attrdef-mask-maskcontentunits

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 28, 2023 by MDN contributors .
# mask #

The  mask attribute is a presentation attribute mainly used to bind a
given  <mask> element with the element the attribute belongs to.

Note: As a presentation attribute  mask can be used as a CSS property.

You can use this attribute with the following SVG elements:

-    <a>
-    <circle>
-    <clipPath>
-    <ellipse>
-    <g>
-    <glyph>
-    <image>
-    <line>
-    <marker>
-    <mask>
-    <path>
-    <pattern>
-    <polygon>
-    <polyline>
-    <rect>
-    <svg>
-    <symbol>
-    <text>
-    <use>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 100" xmlns="http://www.w3.org/2000/svg">
      <mask id="myMask" maskContentUnits="objectBoundingBox">
        <rect fill="white" x="0" y="0" width="100%" height="100%" />
        <polygon
          fill="black"
          points="0.5,0.2 0.68,0.74 0.21,0.41 0.79,0.41 0.32,0.74" />
      </mask>

      <!--
      Punch a hole in a shape of a star inside the red circle,
      revealing the yellow circle underneath
      -->
      <circle cx="50" cy="50" r="20" fill="yellow" />
      <circle cx="50" cy="50" r="45" fill="red" mask="url(#myMask)" />
    </svg>

Since SVG2, the  mask attribute is defined as a CSS property and is a
shorthand for many other properties:  mask-image ,  mask-mode ,
 mask-repeat ,  mask-position ,  mask-clip ,  mask-origin ,  mask-size ,
and  mask-composite .

Usage notes

  --------------- ----------------------------
  Value           See the CSS property  mask
  Default value    none
  Animatable      Yes
  --------------- ----------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Masking Module Level 1
  # the-mask

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# maskUnits #

The  maskUnits attribute indicates which coordinate system to use for
the geometry properties of the  <mask> element.

You can use this attribute with the following SVG elements:

-    <mask>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <mask
        id="myMask1"
        maskUnits="userSpaceOnUse"
        x="20%"
        y="20%"
        width="60%"
        height="60%">
        <rect fill="black" x="0" y="0" width="100%" height="100%" />
        <circle fill="white" cx="50" cy="50" r="35" />
      </mask>

      <mask
        id="myMask2"
        maskUnits="objectBoundingBox"
        x="20%"
        y="20%"
        width="60%"
        height="60%">
        <rect fill="black" x="0" y="0" width="100%" height="100%" />
        <circle fill="white" cx="50" cy="50" r="35" />
      </mask>

      <!-- Some reference rect to materialized the mask -->
      <rect id="r1" x="0" y="0" width="45" height="45" />
      <rect id="r2" x="0" y="55" width="45" height="45" />
      <rect id="r3" x="55" y="55" width="45" height="45" />
      <rect id="r4" x="55" y="0" width="45" height="45" />

      <!-- The first 3 rect are masked with useSpaceOnUse units -->
      <use mask="url(#myMask1)" href="#r1" fill="red" />
      <use mask="url(#myMask1)" href="#r2" fill="red" />
      <use mask="url(#myMask1)" href="#r3" fill="red" />

      <!-- The last rect is masked with objectBoundingBox units -->
      <use mask="url(#myMask2)" href="#r4" fill="red" />
    </svg>

mask

For  <mask> ,  maskUnits defines the coordinate system in use for the
geometry attributes (   x  ,   y  ,   width  and   height  ) of the
element.

  --------------- --------------------------------------
  Value            userSpaceOnUse |  objectBoundingBox
  Default value    objectBoundingBox
  Animatable      Yes
  --------------- --------------------------------------

 userSpaceOnUse

    This value indicates that all coordinates for the geometry
    attributes refer to the user coordinate system as defined when the
    mask was created.

 objectBoundingBox

    This value indicates that all coordinates for the geometry
    attributes represent fractions or percentages of the bounding box of
    the element to which the mask is applied. A bounding box could be
    considered the same as if the content of the  <mask> were bound to a
    "  0 0 1 1 "   viewBox  .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Masking Module Level 1
  # element-attrdef-mask-maskunits

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 28, 2023 by MDN contributors .
# mathematical #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  mathematical attribute indicates the alignment coordinate for
glyphs to achieve mathematical baseline alignment for horizontally
oriented glyph layouts. The value is an offset in the font coordinate
system.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- -------------
  Value             <number> 
  Default value   None
  Animatable      No
  --------------- -------------

 <number>

    This value indicates the alignment coordinate for the glyphs.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementMathematicalAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# max #

The  max attribute specifies the maximum value of the active animation
duration.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <set>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 120 120" xmlns="http://www.w3.org/2000/svg">
      <circle cx="60" cy="10" r="10">
        <animate
          attributeName="cx"
          dur="4s"
          max="6s"
          repeatCount="indefinite"
          values="60 ; 110 ; 60 ; 10 ; 60"
          keyTimes="0 ; 0.25 ; 0.5 ; 0.75 ; 1" />
        <animate
          attributeName="cy"
          dur="4s"
          max="6s"
          repeatCount="indefinite"
          values="10 ; 60 ; 110 ; 60 ; 10"
          keyTimes="0 ; 0.25 ; 0.5 ; 0.75 ; 1" />
      </circle>
    </svg>

Usage notes

  --------------- ------------------
  Value             <clock-value> 
  Default value   None
  Animatable      No
  --------------- ------------------

 <clock-value>

    Specifies the length of the maximum value of the active duration,
    measured in local time. The value must be greater than 0.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # MaxAttribute

  -----------------------------------------------------------------------

See also

-     min 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# media #

The  media attribute specifies a media query that must be matched for a
style sheet to apply.

You can use this attribute with the following SVG elements:

-    <style>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 240 220" xmlns="http://www.w3.org/2000/svg">
      <style>
        rect {
          fill: black;
        }
      </style>
      <style media="all and (min-width: 600px)">
        rect {
          fill: seagreen;
        }
      </style>

      <text y="15">Resize the window to see the effect</text>
      <rect y="20" width="200" height="200" />
    </svg>

Usage notes

  --------------- -----------------------
  Value             <media-query-list> 
  Default value    all
  Animatable      Yes
  --------------- -----------------------

 <media-query-list>

    This value holds a media query that needs to match in order for the
    style sheet to be applied.

    If not specified, the style sheet is applied unconditionally.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # StyleElementMediaAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 3, 2024 by MDN contributors .
# method #

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The  method attribute indicates the method by which text should be
rendered along the path of a  <textPath> element.

You can use this attribute with the following SVG elements:

-    <textPath>

textPath

For  <textPath> ,  method indicates the method by which text should be
rendered along the path.

  --------------- -------------------
  Value            align |  stretch
  Default value    align
  Animatable      Yes
  --------------- -------------------

align

    This value indicates that the characters should be rendered so that
    they are not stretched or warped. The characters are rotated, scaled
    and stretched when they are rendered. As a result, for fonts with
    connected characters (e.g. cursive fonts), the connections may not
    align properly when text is rendered along the path.

stretch

    This value indicates that the character outlines will be converted
    into paths, and then stretched and possibly warped. With this
    approach, connected characters, such as in cursive fonts, will
    maintain their connections.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # TextPathElementMethodAttribute

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# min #

The  min attribute specifies the minimum value of the active animation
duration.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <set>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 120 120" xmlns="http://www.w3.org/2000/svg">
      <circle cx="60" cy="10" r="10">
        <animate
          attributeName="cx"
          dur="4s"
          min="2s"
          repeatCount="indefinite"
          values="60 ; 110 ; 60 ; 10 ; 60"
          keyTimes="0 ; 0.25 ; 0.5 ; 0.75 ; 1" />
        <animate
          attributeName="cy"
          dur="4s"
          min="2s"
          repeatCount="indefinite"
          values="10 ; 60 ; 110 ; 60 ; 10"
          keyTimes="0 ; 0.25 ; 0.5 ; 0.75 ; 1" />
      </circle>
    </svg>

Usage notes

  --------------- ------------------
  Value             <clock-value> 
  Default value    0
  Animatable      No
  --------------- ------------------

 <clock-value>

    Specifies the length of the minimum value of the active duration,
    measured in local time. The value must be greater than 0.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # MinAttribute

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# mode #

The  mode attribute defines the blending mode on the  <feBlend> filter
primitive.

You can use this attribute with the following SVG elements:

-    <feBlend>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 480 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="blending1" x="0" y="0" width="100%" height="100%">
        <feFlood
          result="floodFill"
          x="0"
          y="0"
          width="100%"
          height="100%"
          flood-color="seagreen"
          flood-opacity="1" />
        <feBlend in="SourceGraphic" in2="floodFill" mode="multiply" />
      </filter>
      <filter id="blending2" x="0" y="0" width="100%" height="100%">
        <feFlood
          result="floodFill"
          x="0"
          y="0"
          width="100%"
          height="100%"
          flood-color="seagreen"
          flood-opacity="1" />
        <feBlend in="SourceGraphic" in2="floodFill" mode="color-dodge" />
      </filter>

      <image
        href="mdn_logo_only_color.png"
        width="200"
        height="200"
        style="filter:url(#blending1);" />
      <image
        href="mdn_logo_only_color.png"
        width="200"
        height="200"
        style="filter:url(#blending2); transform:translateX(220px);" />
    </svg>

Usage notes

  --------------- ---------------
  Value            <blend-mode>
  Default value    normal
  Animatable      Yes
  --------------- ---------------

For a description of the values, see  <blend-mode> .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-feblend-mode

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# name #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  name attribute specifies either the name of a color profile or a
font face.

You can use this attribute with the following SVG elements:

-    <font-face-name>

font-face-name

For  <font-face-name> ,  name defines the name of the font face.

  --------------- ---------
  Value            <name>
  Default value   None
  Animatable      Yes
  --------------- ---------

 <name>

    This value specifies the name of a local font. Unlike the syntax
    allowed between the parentheses of the  local(…) clause in an
     @font-face rule  src descriptor, the font name specified in this
    attribute is not surrounded in single or double quotes.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceNameElementNameAttribute

  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # ColorProfileElementNameAttribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# numOctaves #

The  numOctaves attribute defines the number of octaves for the noise
function of the  <feTurbulence> primitive.

An octave is a noise function defined by its frequency and amplitude. A
turbulence is built by accumulating several octaves with increasing
frequencies and decreasing amplitudes. The higher the number of octaves,
the more natural the noise looks. Though more octaves also require more
calculations, resulting in a negative impact on performance.

You can use this attribute with the following SVG elements:

-    <feTurbulence>

Example

Example 1

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="noise1" x="0" y="0" width="100%" height="100%">
        <feTurbulence baseFrequency="0.025" numOctaves="1" />
      </filter>
      <filter id="noise2" x="0" y="0" width="100%" height="100%">
        <feTurbulence baseFrequency="0.025" numOctaves="3" />
      </filter>

      <rect x="0" y="0" width="200" height="200" style="filter: url(#noise1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#noise2); transform: translateX(220px);" />
    </svg>

Example 2

html

    <svg
      width="200"
      height="200"
      viewBox="0 0 220 220"
      xmlns="http://www.w3.org/2000/svg">
      <filter id="displacementFilter">
        <feTurbulence baseFrequency="0.05" numOctaves="3" result="turbulence" />
        <feDisplacementMap
          in2="turbulence"
          in="SourceGraphic"
          scale="50"
          xChannelSelector="R"
          yChannelSelector="G" />
      </filter>

      <circle cx="100" cy="100" r="100" style="filter: url(#displacementFilter)" />
    </svg>

Usage notes

  --------------- ------------
  Value            <integer>
  Default value    1
  Animatable      Yes
  --------------- ------------

 <integer>

    Defines the number of octaves. Negative values are forbidden.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-feturbulence-numoctaves

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Understanding Perlin Noise
-     baseFrequency 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# onclick #

The  onclick attribute specifies some script to run when the element is
clicked.

You can use this attribute with the following SVG elements:

-    <a>
-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <circle>
-    <defs>
-    <desc>
-    <ellipse>
-    <foreignObject>
-    <g>
-    <image>
-    <line>
-    <linearGradient>
-    <marker>
-    <metadata>
-    <mpath>
-    <path>
-    <pattern>
-    <polygon>
-    <polyline>
-    <radialGradient>
-    <rect>
-    <script>
-    <set>
-    <stop>
-    <style>
-    <svg>
-    <switch>
-    <symbol>
-    <text>
-    <textPath>
-    <title>
-    <tref>
-    <tspan>
-    <use>
-    <view>

Example

    html,
    body,
    svg {
      height: 100%;
      margin: 0;
    }

html

    <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
      <circle
        cx="100"
        cy="100"
        r="100"
        onclick="alert('You have clicked the circle.')" />
    </svg>

Usage notes

  --------------- ---------------
  Value             <anything> 
  Default value   None
  Animatable      No
  --------------- ---------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # EventAttributes

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# opacity #

The  opacity attribute specifies the transparency of an object or of a
group of objects, that is, the degree to which the background behind the
element is overlaid.

Note: As a presentation attribute,  opacity can be used as a CSS
property. See the  CSS opacity property for more information.

You can use this attribute with the following SVG elements:

-    <a>
-    <audio>
-    <canvas>
-    <circle>
-    <ellipse>
-    <foreignObject>
-    <g>
-    <iframe>
-    <image>
-    <line>
-    <marker>
-    <path>
-    <polygon>
-    <polyline>
-    <rect>
-    <svg>
-    <switch>
-    <symbol>
-    <text>
-    <textPath>
-    <tspan>
-    <use>
-    <unknown>
-    <video>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 100" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <linearGradient id="gradient" x1="0%" y1="0%" x2="0" y2="100%">
          <stop offset="0%" style="stop-color:skyblue;" />
          <stop offset="100%" style="stop-color:seagreen;" />
        </linearGradient>
      </defs>
      <rect x="0" y="0" width="100%" height="100%" fill="url(#gradient)" />
      <circle cx="50" cy="50" r="40" fill="black" />
      <circle cx="150" cy="50" r="40" fill="black" opacity="0.3" />
    </svg>

Usage notes

  --------------- ----------------
  Default value    1
  Value            <alpha-value>
  Animatable      Yes
  --------------- ----------------

 <alpha-value>

    The uniform opacity setting to be applied across an entire object,
    as a  <number> . Any values outside the range 0.0 (fully
    transparent) to 1.0 (fully opaque) will be clamped to this range.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Color Module Level 4
  # transparency

  Scalable Vector Graphics (SVG) 2
  # ObjectAndGroupOpacityProperties
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS opacity

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# operator #

The  operator attribute has two meanings based on the context it's used
in. Either it defines the compositing or morphing operation to be
performed.

You can use this attribute with the following SVG elements:

-    <feComposite>
-    <feMorphology>

Example

    html,
    body,
    svg {
      height: 100%;
      font:
        20px Arial,
        Helvetica,
        sans-serif;
    }

html

    <svg viewBox="0 0 120 70" xmlns="http://www.w3.org/2000/svg">
      <filter id="erode">
        <feMorphology operator="erode" radius="0.4" />
      </filter>
      <filter id="dilate">
        <feMorphology operator="dilate" radius="0.8" />
      </filter>

      <text x="0" y="15">Normal text</text>
      <text x="0" y="40" filter="url(#erode)">Thin text</text>
      <text x="0" y="65" filter="url(#dilate)">Fat text</text>
    </svg>

feComposite

For  <feComposite> ,  operator defines the compositing operation that is
to be performed.

  --------------- ------------------------------------------------------------
  Value            over |  in |  out |  atop |  xor |  lighter |  arithmetic
  Default value    over
  Animatable      Yes
  --------------- ------------------------------------------------------------

 over

    This value indicates that the source graphic defined in the   in 
    attribute is placed over the destination graphic defined in the
      in2  attribute.

 in

    This value indicates that the parts of the source graphic defined in
    the  in attribute that overlap the destination graphic defined in
    the  in2 attribute, replace the destination graphic.

 out

    This value indicates that the parts of the source graphic defined in
    the  in attribute that fall outside the destination graphic defined
    in the  in2 attribute, are displayed.

 atop

    This value indicates that the parts of the source graphic defined in
    the  in attribute, which overlap the destination graphic defined in
    the  in2 attribute, replace the destination graphic. The parts of
    the destination graphic that do not overlap with the source graphic
    stay untouched.

 xor

    This value indicates that the non-overlapping regions of the source
    graphic defined in the  in attribute and the destination graphic
    defined in the  in2 attribute are combined.

 lighter

    This value indicates that the sum of the source graphic defined in
    the  in attribute and the destination graphic defined in the  in2
    attribute is displayed.

 arithmetic

    This value indicates that the source graphic defined in the  in
    attribute and the destination graphic defined in the  in2 attribute
    are combined using the following formula:

     result = k1*i1*i2 + k2*i1 + k3*i2 + k4

    where:  i1 and  i2 indicate the corresponding pixel channel values
    of the input image, which map to  in and  in2 respectively, and
      k1  ,   k2  ,   k3  , and   k4  indicate the values of the
    attributes with the same name.

feMorphology

For  <feMorphology> ,  operator defines whether to erode (i.e., thin) or
dilate (fatten) the source graphic.

  --------------- ------------------
  Value            erode |  dilate
  Default value    erode
  Animatable      Yes
  --------------- ------------------

 erode

    This value thins the source graphic defined in the   in  attribute.

 dilate

    This value fattens the source graphic defined in the  in attribute.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-femorphology-operator

  Filter Effects Module Level 1
  # element-attrdef-fecomposite-operator
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 7, 2023 by MDN contributors .
# order #

The  order attribute indicates the size of the matrix to be used by a
 <feConvolveMatrix> element.

You can use this attribute with the following SVG elements:

-    <feConvolveMatrix>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="emboss1" x="0" y="0" width="100%" height="100%">
        <feTurbulence baseFrequency="0.025" seed="0" />
        <feConvolveMatrix kernelMatrix="3 0 0 -4" order="2" />
      </filter>
      <filter id="emboss2" x="0" y="0" width="100%" height="100%">
        <feTurbulence baseFrequency="0.025" seed="0" />
        <feConvolveMatrix kernelMatrix="3 0 0 0 0 0 0 0 -4" order="3" />
      </filter>

      <rect x="0" y="0" width="200" height="200" style="filter:url(#emboss1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter:url(#emboss2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- -----------------------------
  Value             <number-optional-number> 
  Default value    3
  Animatable      Yes
  --------------- -----------------------------

 <number-optional-number>

    This value indicates the number of cells in each dimension for the
    kernel matrix. The values provided must be  <integer> s greater than
    zero. Values that are not integers will be truncated, i.e. rounded
    to the closest integer value towards zero. The first number,
    indicates the number of columns in the matrix. The second number,
    indicates the number of rows in the matrix. If no second number is
    not provided, it defaults to the first number.

    It is recommended that only small values (e.g., 3) be used; higher
    values may result in very high CPU overhead and usually do not
    produce results that justify the impact on performance.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-order

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# orientation #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  orientation attribute indicates that the given glyph is only to be
used for a particular text direction, i.e. horizontal or vertical.

You can use this attribute with the following SVG elements:

-    <glyph>

Usage notes

  --------------- -----------------------------------------------------------
  Value            h |  v
  Default value   None (meaning glyph can be used for both text directions)
  Animatable      Yes
  --------------- -----------------------------------------------------------

 h

    This value indicates that the glyph is only used for a horizontal
    text direction.

 v

    This value indicates that the glyph is only used for a vertical text
    direction.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # GlyphElementOrientationAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# orient #

The  orient attribute indicates how a marker is rotated when it is
placed at its position on the shape.

You can use this attribute with the following SVG elements:

-    <marker>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <marker
          id="arrow"
          viewBox="0 0 10 10"
          refX="5"
          refY="5"
          markerWidth="6"
          markerHeight="6"
          orient="auto-start-reverse">
          <path d="M 0 0 L 10 5 L 0 10 z" />
        </marker>

        <marker
          id="dataArrow"
          viewBox="0 0 10 10"
          refX="5"
          refY="5"
          markerWidth="6"
          markerHeight="6"
          orient="-65deg">
          <path d="M 0 0 L 10 5 L 0 10 z" fill="red" />
        </marker>
      </defs>

      <polyline
        points="10,10 10,90 90,90"
        fill="none"
        stroke="black"
        marker-start="url(#arrow)"
        marker-end="url(#arrow)" />

      <polyline
        points="15,80 29,50 43,60 57,30 71,40 85,15"
        fill="none"
        stroke="grey"
        marker-start="url(#dataArrow)"
        marker-mid="url(#dataArrow)"
        marker-end="url(#dataArrow)" />
    </svg>

Usage notes

  --------------- ----------------------------------------------------
  Value            auto |  auto-start-reverse |  <angle> |  <number>
  Default value    0
  Animatable      Yes (non-additive)
  --------------- ----------------------------------------------------

 auto

    This value indicates that the marker is oriented such that its
    positive x-axis is pointing in a direction relative to the path at
    the position the marker is placed.

 auto-start-reverse

    If placed by   marker-start  , the marker is oriented 180° different
    from the orientation that would be used if  auto were specified. For
    all other markers,  auto-start-reverse means the same as  auto .

    Note: This allows a single arrowhead marker to be defined that can
    be used for both the start and end of a path, i.e. which points
    outwards from both ends.

 <angle>

    This value indicates that the marker is oriented such that the
    specified angle is that measured between the shape's positive x-axis
    and the marker's positive x-axis.

    Note: For example, if a value of  45 is given, then the marker's
    positive x-axis would be pointing down and right in the shape's
    coordinate system.

 <number>

    This value indicates an angle in degrees. The marker is oriented
    such that the specified angle is that measured between the shape's
    positive x-axis and the marker's positive x-axis.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # OrientAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# origin #

The  origin attribute specifies the origin of motion for an animation.
It has no effect in SVG.

You can use this attribute with the following SVG elements:

-    <animateMotion>

Context notes

  --------------- ----------
  Value            default
  Default value    default
  Animatable      No
  --------------- ----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # OriginAttribute

  -----------------------------------------------------------------------

See also

-   Definition of  origin in SMIL Animation specification

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# overflow #

The  overflow attribute sets what to do when an element's content is too
big to fit in its block formatting context. This feature is not widely
implemented yet .

This attribute has the same parameter values and meaning as the
 CSS overflow property , however, the following additional points apply:

-   If it has a value of  visible , the attribute has no effect (i.e., a
    clipping rectangle is not created).
-   If the  overflow property has the value  hidden or  scroll , a clip
    of the exact size of the SVG viewport is applied.
-   When  scroll is specified on an  <svg> element, a scrollbar or
    panner is normally shown for the SVG viewport whether or not any of
    its content is clipped.
-   Within SVG content, the value  auto implies that all rendered
    content for child elements must be visible, either through a
    scrolling mechanism, or by rendering with no clip.

Note: Although the initial value for overflow is  auto , it is
overwritten in the User Agent style sheet for the  <svg> element when it
is not the root element of a stand-alone document, the  <pattern>
element, and the  <marker> element to be hidden by default.

Note: As a presentation attribute,  overflow can be used as a CSS
property. See the CSS  overflow property for more information.

You can use this attribute with the following SVG elements:

-    <foreignObject>
-    <iframe>
-    <image>
-    <marker>
-    <pattern>
-    <symbol>
-    <svg>
-    <text>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 30" xmlns="http://www.w3.org/2000/svg" overflow="auto">
      <text y="20">
        This text is wider than the SVG, so there should be a scrollbar shown.
      </text>
    </svg>

Usage notes

  --------------- --------------------------------------
  Value            visible |  hidden |  scroll |  auto
  Default value    visible
  Animatable      Yes
  --------------- --------------------------------------

For a description of the values, please see the  CSS overflow property.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # OverflowAndClipProperties

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS overflow

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# overline-position #

The  overline-position attribute represents the ideal vertical position
of the overline. The overline position is expressed in the font's
coordinate system.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage context

  -------------------- -----------------------
  Categories           None
  Value                <number>
  Animatable           No
  Normative document   SVG 1.1 (2nd Edition)
  -------------------- -----------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 22, 2023 by MDN contributors .
# overline-thickness #

The  overline-thickness attribute represents the ideal thickness of the
overline. The overline thickness is expressed in the font's coordinate
system.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage context

  -------------------- -----------------------
  Categories           None
  Value                <number>
  Animatable           No
  Normative document   SVG 1.1 (2nd Edition)
  -------------------- -----------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 22, 2023 by MDN contributors .
# paint-order #

The  paint-order attribute specifies the order that the fill, stroke,
and markers of a given shape or text element are painted.

Note: As a presentation attribute,  paint-order can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <circle>
-    <ellipse>
-    <line>
-    <path>
-    <polygon>
-    <polyline>
-    <rect>
-    <text>
-    <textPath>
-    <tspan>

Usage notes

  --------------- --------------------------------------------
  Value            normal | [  fill ||  stroke ||  markers ]
  Default value    normal
  Animatable      discrete
  --------------- --------------------------------------------

normal

    This value indicates that the fill will be painted first, then the
    stroke, and finally the markers.

[ fill || stroke || markers ]

    The order of these three keywords indicates the order in which the
    painting happens, from left to right. If any of the three painting
    components is omitted, they will be painted in their default order
    after the specified components. For example, using  stroke is
    equivalent to  stroke fill markers .

Example

html

    <svg xmlns="http://www.w3.org/2000/svg" width="400" height="200">
      <linearGradient id="g" x1="0" y1="0" x2="0" y2="1">
        <stop stop-color="#888" />
        <stop stop-color="#ccc" offset="1" />
      </linearGradient>
      <rect width="400" height="200" fill="url(#g)" />
      <g
        fill="crimson"
        stroke="white"
        stroke-width="6"
        stroke-linejoin="round"
        text-anchor="middle"
        font-family="sans-serif"
        font-size="50px"
        font-weight="bold">
        <text x="200" y="75">stroke over</text>
        <text x="200" y="150" paint-order="stroke" id="stroke-under">
          stroke under
        </text>
      </g>
    </svg>

The example would be rendered as follows:

[An image showing how the paint-order example looks in a UA that
supports the paint-order property.]

The stroke under effect could be achieved via the following CSS
property:

css

    #stroke-under {
      paint-order: stroke;
    }

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # PaintOrder

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# panose-1 #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  panose-1 attribute indicates the Panose-1 number of a font face.

Panose-1 is an industry standard TrueType font classification and
matching technology. The PANOSE system consists of a set of ten numbers
that categorize the key attributes of a Latin typeface, a classification
procedure for creating those numbers, and mapper software that
determines the closest possible font match given a set of typefaces.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- ----------------------
  Value             <integer>  {10}
  Default value    0 0 0 0 0 0 0 0 0 0
  Animatable      No
  --------------- ----------------------

 <integer>{10}

    This value specifies a Panose-1 number and consists of ten decimal
    integers, separated by whitespace. The initial value zero for each
    PANOSE digit means "any", i.e. all fonts will match the Panose
    number if this value is used.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementPanose1Attribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# path #

The  path attribute has two different meanings, either it defines a text
path along which the characters of a text are rendered, or a motion path
along which a referenced element is animated.

You can use this attribute with the following SVG elements:

-    <animateMotion>
-    <textPath>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <path
        id="MyPath"
        fill="none"
        stroke="silver"
        d="M10,90 Q90,90 90,45 Q90,10 50,10 Q10,10 10,40 Q10,70 45,70 Q70,70 75,50" />

      <text>
        <textPath
          path="M10,90 Q90,90 90,45 Q90,10 50,10 Q10,10 10,40 Q10,70 45,70 Q70,70 75,50">
          Quick brown fox jumps over the lazy dog.
        </textPath>
      </text>
    </svg>

animateMotion

For  <animateMotion> ,  path defines the motion path, expressed in the
same format and interpreted the same way as the   d  geometric property
for the  <path> element. The effect of a motion path animation is a
translation along the x- and y-axes of the current user coordinate
system by the x and y values computed over time.

  --------------- --------------
  Value            <path-data>
  Default value   None
  Animatable      No
  --------------- --------------

 <path-data>

    This value defines the motion path along which the referenced
    element is animated. For detailed information about the commands
    that can be used, see the explanation for the  d attribute .

textPath

For  <textPath> ,  path defines the path onto which the glyphs of a
 <text> element will be rendered. An empty string indicates that there
is no path data for the element. This means that the text within the
 <textPath> element does not render or contribute to the bounding box of
the  <text> element. If the attribute is not specified, the path
specified in   href  is used instead.

  --------------- ---------------------------
  Value            <path-data>
  Default value   Path specified in   href 
  Animatable      Yes
  --------------- ---------------------------

 <path-data>

    This value defines the text path along which the glyphs of the
     <text> element are aligned. For detailed information about the
    commands that can be used, see the explanation for the  d attribute
    .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # TextPathElementPathAttribute

  SVG Animations Level 2
  # AnimateMotionElementPathAttribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# pathLength #

The  pathLength attribute lets authors specify a total length for the
path, in user units. This value is then used to calibrate the browser's
distance calculations with those of the author, by scaling all distance
computations using the ratio  pathLength / ( computed value of path
length ).

This can affect the actual rendered lengths of paths; including text
paths, animation paths, and various stroke operations. Basically, all
computations that require the length of the path.   stroke-dasharray  ,
for example, will assume the start of the path being 0 and the end point
the value defined in the  pathLength attribute.

You can use this attribute with the following SVG elements:

-    <circle>
-    <ellipse>
-    <line>
-    <path>
-    <polygon>
-    <polyline>
-    <rect>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 60" xmlns="http://www.w3.org/2000/svg">
      <style>
        path {
          fill: none;
          stroke: black;
          stroke-width: 2;
          stroke-dasharray: 10;
        }
      </style>

      <!-- No pathLength, the real length of the path is used. In that case, 100 user units -->
      <path d="M 0,10 h100" />

      <!-- compute everything like if the path length was 90 user units long -->
      <path d="M 0,20 h100" pathLength="90" />

      <!-- compute everything like if the path length was 50 user units long -->
      <path d="M 0,30 h100" pathLength="50" />

      <!-- compute everything like if the path length was 30 user units long -->
      <path d="M 0,40 h100" pathLength="30" />

      <!-- compute everything like if the path length was 10 user units long -->
      <path d="M 0,50 h100" pathLength="10" />
    </svg>

circle

For  <circle> ,  pathLength lets authors specify a total length for the
circle, in user units.

  --------------- ----------
  Value           <number>
  Default value   none
  Animatable      Yes
  --------------- ----------

ellipse

For  <ellipse> ,  pathLength lets authors specify a total length for the
ellipse, in user units.

  --------------- ----------
  Value           <number>
  Default value   none
  Animatable      Yes
  --------------- ----------

line

For  <line> ,  pathLength lets authors specify a total length for the
line, in user units.

  --------------- ----------
  Value           <number>
  Default value   none
  Animatable      Yes
  --------------- ----------

path

For  <path> ,  pathLength lets authors specify a total length for the
path, in user units.

  --------------- ----------
  Value           <number>
  Default value   none
  Animatable      Yes
  --------------- ----------

polygon

For  <polygon> ,  pathLength lets authors specify a total length for the
shape, in user units.

  --------------- ----------
  Value           <number>
  Default value   none
  Animatable      Yes
  --------------- ----------

polyline

For  <polyline> ,  pathLength lets authors specify a total length for
the shape, in user units.

  --------------- ----------
  Value           <number>
  Default value   none
  Animatable      Yes
  --------------- ----------

rect

For  <rect> ,  pathLength lets authors specify a total length for the
rectangle, in user units.

  --------------- ----------
  Value           <number>
  Default value   none
  Animatable      Yes
  --------------- ----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # PathLengthAttribute

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# patternContentUnits #

The  patternContentUnits attribute indicates which coordinate system to
use for the contents of the  <pattern> element.

Note: That this attribute has no effect if attribute   viewBox  is
specified on the  <pattern> element.

You can use this attribute with the following SVG elements:

-    <pattern>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 100" xmlns="http://www.w3.org/2000/svg">
      <!--
      A pattern tile that content coordinates and values are
      computed against the current coordinate user space.
      Note that the size of the tile is computed against
      the bounding box of the target element
      -->
      <pattern
        id="p1"
        width="20%"
        height="20%"
        patternContentUnits="userSpaceOnUse">
        <circle cx="10" cy="10" r="10" />
      </pattern>

      <!--
      A pattern tile that content coordinates and values are
      computed against the bounding box of the target element.
      Note that the size of the tile is also computed against
      the bounding box of the target element
      -->
      <pattern
        id="p2"
        width="20%"
        height="20%"
        patternContentUnits="objectBoundingBox">
        <circle cx=".1" cy=".1" r=".1" />
      </pattern>

      <!-- Left square with user space tiles -->
      <rect x="10" y="10" width="80" height="80" fill="url(#p1)" />

      <!-- Right square with bounding box tiles -->
      <rect x="110" y="10" width="80" height="80" fill="url(#p2)" />
    </svg>

pattern

For  <pattern> ,  patternContentUnits defines the coordinate system in
use for the content of the element.

  --------------- --------------------------------------
  Value            userSpaceOnUse |  objectBoundingBox
  Default value    userSpaceOnUse
  Animatable      Yes
  --------------- --------------------------------------

 userSpaceOnUse

    This value indicates that all coordinates inside the  <pattern>
    element refer to the user coordinate system as defined when the
    pattern tile was created.

 objectBoundingBox

    This value indicates that all coordinates inside the  <pattern>
    element are relative to the bounding box of the element the pattern
    is applied to. A bounding box could be considered the same as if the
    content of the  <pattern> were bound to a "  0 0 1 1 "   viewBox 
    for a pattern tile of width and height of 100%.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # PatternElementPatternContentUnitsAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# patternTransform #

The  patternTransform attribute defines a list of transform definitions
that are applied to a pattern tile.

You can use this attribute with the following SVG elements:

-    <pattern>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <!-- Apply a transform on the tile -->
      <pattern
        id="p1"
        width=".25"
        height=".25"
        patternTransform="rotate(20)
                          skewX(30)
                          scale(1 0.5)">
        <circle cx="10" cy="10" r="10" />
      </pattern>

      <!-- Apply the transformed pattern tile -->
      <rect x="10" y="10" width="80" height="80" fill="url(#p1)" />
    </svg>

pattern

For  <pattern> ,  patternTransform defines a list of transform
definitions that are applied to a pattern tile.

Note: As of SVG2, it is also allowed to use the CSS  transform property.
However, the current state of implementation isn't very good. For
backward compatibility reason, it is highly suggested to keep using the
 patternTransform attribute.

  --------------- --------------------
  Value           <transform-list>
  Default value   Identity transform
  Animatable      Yes
  --------------- --------------------

Transform functions

To know more about the definition of transform functions, see the
  transform  attribute definition.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # PatternElementPatternTransformAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# patternUnits #

The  patternUnits attribute indicates which coordinate system to use for
the geometry properties of the  <pattern> element.

You can use this attribute with the following SVG elements:

-    <pattern>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 100" xmlns="http://www.w3.org/2000/svg">
      <!-- All geometry properties are relative to the current user space -->
      <pattern
        id="p1"
        x="12.5"
        y="12.5"
        width="25"
        height="25"
        patternUnits="userSpaceOnUse">
        <circle cx="10" cy="10" r="10" />
      </pattern>

      <!-- All geometry properties are relative to the target bounding box -->
      <pattern
        id="p2"
        x=".125"
        y=".125"
        width=".25"
        height=".25"
        patternUnits="objectBoundingBox">
        <circle cx="10" cy="10" r="10" />
      </pattern>

      <!-- Left square with user space tiles -->
      <rect x="10" y="10" width="80" height="80" fill="url(#p1)" />

      <!-- Right square with bounding box tiles -->
      <rect x="110" y="10" width="80" height="80" fill="url(#p2)" />
    </svg>

pattern

For  <pattern> ,  patternUnits defines the coordinate system in use for
the geometry properties (   x  ,   y  ,   width  and   height  ) of the
element.

  --------------- --------------------------------------
  Value            userSpaceOnUse |  objectBoundingBox
  Default value    objectBoundingBox
  Animatable      Yes
  --------------- --------------------------------------

 userSpaceOnUse

    This value indicates that all coordinates for the geometry
    properties refer to the user coordinate system as defined when the
    pattern was applied.

 objectBoundingBox

    This value indicates that all coordinates for the geometry
    properties represent fractions or percentages of the bounding box of
    the element to which the pattern is applied. A bounding box could be
    considered the same as if the content of the  <pattern> were bound
    to a "  0 0 1 1 "   viewBox  .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # PatternElementPatternUnitsAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# pointer-events #

The  pointer-events attribute is a presentation attribute that allows
defining whether or when an element may be the target of a mouse event.

Note: As a presentation attribute  pointer-events can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <a>
-    <circle>
-    <clipPath>
-    <defs>
-    <ellipse>
-    <foreignObject>
-    <g>
-    <image>
-    <line>
-    <marker>
-    <mask>
-    <path>
-    <pattern>
-    <polygon>
-    <polyline>
-    <rect>
-    <svg>
-    <switch>
-    <symbol>
-    <text>
-    <textPath>
-    <tspan>
-    <use>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 20 10" xmlns="http://www.w3.org/2000/svg">
      <!--
      The circle will always intercept the mouse event.
      To change the color of the rect underneath you have
      to click outside the circle
      -->
      <rect x="0" y="0" height="10" width="10" fill="black" />
      <circle cx="5" cy="5" r="4" fill="white" pointer-events="visiblePainted" />

      <!--
      The circle below will never catch a mouse event.
      The rect underneath will change color whether you
      are clicking on the circle or the rect itself
      -->
      <rect x="10" y="0" height="10" width="10" fill="black" />
      <circle cx="15" cy="5" r="4" fill="white" pointer-events="none" />
    </svg>

js

    window.addEventListener("mouseup", (e) => {
      // Let's pick a random color between #000000 and #FFFFFF
      const color = Math.round(Math.random() * 0xffffff);

      // Let's format the color to fit CSS requirements
      const fill = `#${color.toString(16).padStart(6, "0")}`;

      // Let's apply our color in the
      // element we actually clicked on
      e.target.style.fill = fill;
    });

Usage notes

  --------------- ------------------------------------------------------------------------------------------------------------------------
  Value            bounding-box |  visiblePainted |  visibleFill |  visibleStroke |  visible |  painted |  fill |  stroke |  all |  none
  Default value    visiblePainted
  Animatable      Yes
  --------------- ------------------------------------------------------------------------------------------------------------------------

For a detailed explanation of each possible value, have a look at the
CSS  pointer-events documentation.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # PointerEventsProp

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# pointsAtX #

The  pointsAtX attribute represents the x location in the coordinate
system established by attribute   primitiveUnits  on the  <filter>
element of the point at which the light source is pointing.

You can use this attribute with the following SVG elements:

-    <feSpotLight>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="lighting1" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting in="SourceGraphic">
          <feSpotLight x="60" y="60" z="50" pointsAtX="0" />
        </feDiffuseLighting>
      </filter>
      <filter id="lighting2" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting in="SourceGraphic">
          <feSpotLight x="60" y="60" z="50" pointsAtX="400" />
        </feDiffuseLighting>
      </filter>

      <rect x="0" y="0" width="200" height="200" style="filter: url(#lighting1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#lighting2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- -----------
  Default value    0
  Value            <number>
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fespotlight-pointsatx

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# pointsAtY #

The  pointsAtY attribute represents the y location in the coordinate
system established by attribute   primitiveUnits  on the  <filter>
element of the point at which the light source is pointing.

You can use this attribute with the following SVG elements:

-    <feSpotLight>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="lighting1" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting in="SourceGraphic">
          <feSpotLight x="60" y="60" z="50" pointsAtY="0" />
        </feDiffuseLighting>
      </filter>
      <filter id="lighting2" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting in="SourceGraphic">
          <feSpotLight x="60" y="60" z="50" pointsAtY="400" />
        </feDiffuseLighting>
      </filter>

      <rect x="0" y="0" width="200" height="200" style="filter: url(#lighting1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#lighting2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- -----------
  Default value    0
  Value            <number>
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fespotlight-pointsaty

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# pointsAtZ #

The  pointsAtZ attribute represents the y location in the coordinate
system established by attribute   primitiveUnits  on the  <filter>
element of the point at which the light source is pointing, assuming
that, in the initial local coordinate system, the positive z-axis comes
out towards the person viewing the content and assuming that one unit
along the z-axis equals one unit in x and y.

You can use this attribute with the following SVG elements:

-    <feSpotLight>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="lighting1" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting in="SourceGraphic">
          <feSpotLight x="100" y="100" z="50" pointsAtZ="0" />
        </feDiffuseLighting>
      </filter>
      <filter id="lighting2" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting in="SourceGraphic">
          <feSpotLight x="100" y="100" z="50" pointsAtZ="80" />
        </feDiffuseLighting>
      </filter>

      <rect x="0" y="0" width="200" height="200" style="filter: url(#lighting1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#lighting2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- -----------
  Default value    0
  Value            <number>
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fespotlight-pointsatz

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# points #

The  points attribute defines a list of points. Each point is defined by
a pair of number representing a X and a Y coordinate in the user
coordinate system. If the attribute contains an odd number of
coordinates, the last one will be ignored.

You can use this attribute with the following SVG elements:

-    <polyline>
-    <polygon>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="-10 -10 220 120" xmlns="http://www.w3.org/2000/svg">
      <!-- polyline is an open shape -->
      <polyline stroke="black" fill="none" points="50,0 21,90 98,35 2,35 79,90" />

      <!-- polygon is a closed shape -->
      <polygon
        stroke="black"
        fill="none"
        transform="translate(100,0)"
        points="50,0 21,90 98,35 2,35 79,90" />

      <!--
      It is usually considered best practices to separate a X and Y
      coordinate with a comma and a group of coordinates by a space.
      It makes things more readable for human beings.
      -->
    </svg>

polyline

For  <polyline> ,  points defines a list of points, each representing a
vertex of the line to be drawn. Each point is define by a X and Y
coordinate in the user coordinate system.

Note: A polyline is an open shape, meaning the last point is not
connected to the first point.

  --------------- ------------------
  Value           [  <number> + ]#
  Default value   none
  Animatable      Yes
  --------------- ------------------

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="-10 -10 120 120" xmlns="http://www.w3.org/2000/svg">
      <!-- polyline is an open shape -->
      <polyline stroke="black" fill="none" points="50,0 21,90 98,35 2,35 79,90" />
    </svg>

polygon

For  <polygon> ,  points defines a list of points, each representing a
vertex of the shape to be drawn. Each point is define by a X and Y
coordinate in the user coordinate system.

Note: A polygon is a closed shape, meaning the last point is connected
to the first point.

  --------------- ------------------
  Value           [  <number> + ]#
  Default value   none
  Animatable      Yes
  --------------- ------------------

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="-10 -10 120 120" xmlns="http://www.w3.org/2000/svg">
      <!-- polygon is an closed shape -->
      <polygon stroke="black" fill="none" points="50,0 21,90 98,35 2,35 79,90" />
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # PolygonElementPointsAttribute

  Scalable Vector Graphics (SVG) 2
  # PolylineElementPointsAttribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# SVG Presentation Attributes #

SVG presentation attributes are CSS properties that can be used as
attributes on SVG elements.

-   alignment-baseline
-   baseline-shift
-   clip
-   clip-path
-   clip-rule
-   color
-   color-interpolation
-   color-interpolation-filters
-   color-profile
-   color-rendering
-   cursor
-   d
-   direction
-   display
-   dominant-baseline
-   enable-background
-   fill
-   fill-opacity
-   fill-rule
-   filter
-   flood-color
-   flood-opacity
-   font-family
-   font-size
-   font-size-adjust
-   font-stretch
-   font-style
-   font-variant
-   font-weight
-   glyph-orientation-horizontal
-   glyph-orientation-vertical
-   image-rendering
-   kerning
-   letter-spacing
-   lighting-color
-   marker-end
-   marker-mid
-   marker-start
-   mask
-   opacity
-   overflow
-   pointer-events
-   shape-rendering
-   solid-color
-   solid-opacity
-   stop-color
-   stop-opacity
-   stroke
-   stroke-dasharray
-   stroke-dashoffset
-   stroke-linecap
-   stroke-linejoin
-   stroke-miterlimit
-   stroke-opacity
-   stroke-width
-   text-anchor
-   text-decoration
-   text-rendering
-   transform
-   unicode-bidi
-   vector-effect
-   visibility
-   word-spacing
-   writing-mode

Attributes

  alignment-baseline 

    It specifies how an object is aligned along the font baseline with
    respect to its parent. Value :  auto |  baseline |  before-edge |
     text-before-edge |  middle |  central |  after-edge |
     text-after-edge |  ideographic |  alphabetic |  hanging |
     mathematical |  inherit ; Animatable : Yes

  baseline-shift 

    It allows repositioning of the dominant-baseline relative to the
    dominant-baseline of the parent text content element. Value :  auto
    |  baseline |  super |  sub | <percentage> | <length> |  inherit ;
    Animatable : Yes

  clip   Deprecated 

    It defines what portion of an element is visible. Value :  auto |
     <shape> |  inherit ; Animatable : Yes

  clip-path 

    It binds the element it is applied to with a given  <clipPath>
    element. Value :  none | <FuncIRI> |  inherit ; Animatable : Yes

  clip-rule 

    It indicates how to determine what side of a path is inside a shape
    in order to know how a  <clipPath> should clip its target. Value :
     nonzero |  evenodd |  inherit ; Animatable : Yes

  color 

    It provides a potential indirect value (  currentcolor ) for the
     fill ,  stroke ,  stop-color ,  flood-color and  lighting-color
    presentation attributes. Value : <color> |  inherit ; Animatable :
    Yes

  color-interpolation 

    It specifies the color space for gradient interpolations, color
    animations, and alpha compositing. Value :  auto |  sRGB |
     linearRGB |  inherit ; Animatable : Yes

  color-interpolation-filters 

    It specifies the color space for imaging operations performed via
    filter effects. Value :  auto |  sRGB |  linearRGB |  inherit ;
    Animatable : Yes

  color-profile   Deprecated 

    It defines which color profile a raster image included through the
     <image> element should use. Value :  auto |  sRGB |  linearRGB |
    <name> | <IRI> |  inherit ; Animatable : Yes

  color-rendering 

    It provides a hint to the browser about how to optimize its color
    interpolation and compositing operations. Value :  auto |
     optimizeSpeed |  optimizeQuality |  inherit ; Animatable : Yes

  cursor 

    It specifies the mouse cursor displayed when the mouse pointer is
    over an element. Value : <FuncIRI> | <keywords> |  inherit ;
    Animatable : Yes

  d 

    It defines a path to be drawn. Value : path() |  none

  direction 

    It specifies the base writing direction of text. Value :  ltr |  rtl
    |  inherit ; Animatable : Yes

  display 

    It allows to control the rendering of graphical or container
    elements. Value : see CSS  display ; Animatable : Yes

  dominant-baseline 

    It defines the baseline used to align the box's text and
    inline-level contents. Value :  auto |  text-bottom |  alphabetic |
     ideographic |  middle |  central |  mathematical |  hanging |
     text-top ; Animatable : Yes

  enable-background   Deprecated 

    It tells the browser how to manage the accumulation of the
    background image. Value :  accumulate |  new |  inherit ; Animatable
    : No

  fill 

    It defines the color of the inside of the graphical element it
    applies to. Value : <paint> ; Animatable : Yes

  fill-opacity 

    It specifies the opacity of the color or the content the current
    object is filled with. Value : <number> | <percentage> ; Animatable
    : Yes

  fill-rule 

    It indicates how to determine what side of a path is inside a shape.
    Value :  nonzero |  evenodd |  inherit ; Animatable : Yes

  filter 

    It defines the filter effects defined by the  <filter> element that
    shall be applied to its element. Value : <FuncIRI> |  none |
     inherit ; Animatable : Yes

  flood-color 

    It indicates what color to use to flood the current filter primitive
    subregion defined through the  <feFlood> or  <feDropShadow> element.
    Value : <color> ; Animatable : Yes

  flood-opacity 

    It indicates the opacity value to use across the current filter
    primitive subregion defined through the  <feFlood> or
     <feDropShadow> element. Value : <number> | <percentage> ;
    Animatable : Yes

  font-family 

    It indicates which font family will be used to render the text of
    the element. Value : see CSS  font-family ; Animatable : Yes

  font-size 

    It specifies the size of the font. Value : see CSS  font-size ;
    Animatable : Yes

  font-size-adjust 

    It specifies that the font size should be chosen based on the height
    of lowercase letters rather than the height of capital letters.
    Value : <number> |  none |  inherit ; Animatable : Yes

  font-stretch 

    It selects a normal, condensed, or expanded face from a font. Value
    : see CSS  font-stretch ; Animatable : Yes

  font-style 

    It specifies whether a font should be styled with a normal, italic,
    or oblique face from its   font-family  . Value :  normal |  italic
    |  oblique ; Animatable : Yes

  font-variant 

    It specifies whether a font should be used with some of their
    variation such as small caps or ligatures. Value : see CSS
     font-variant ; Animatable : Yes

  font-weight 

    It specifies the weight (or boldness) of the font. Value :  normal |
     bold |  lighter |  bolder |  100 |  200 |  300 |  400 |  500 |  600
    |  700 |  800 |  900 ; Animatable : Yes

  glyph-orientation-horizontal   Deprecated 

    It controls glyph orientation when the inline-progression-direction
    is horizontal. Value : <angle> |  inherit ; Animatable : No

  glyph-orientation-vertical   Deprecated 

    It controls glyph orientation when the inline-progression-direction
    is vertical. Value :  auto | <angle> |  inherit ; Animatable : No

  image-rendering 

    It provides a hint to the browser about how to make speed vs.
    quality tradeoffs as it performs image processing. Value :  auto |
     optimizeQuality |  optimizeSpeed ; Animatable : Yes

  kerning   Deprecated 

    It indicates whether the browser should adjust inter-glyph spacing.
    Value :  auto | <length> |  inherit ; Animatable : Yes

  letter-spacing 

    It controls spacing between text characters. Value :  normal |
    <length> |  inherit ; Animatable : Yes

  lighting-color 

    It defines the color of the light source for filter primitives
    elements  <feDiffuseLighting> and  <feSpecularLighting> . Value :
    <color> ; Animatable : Yes

  marker-end 

    It defines the arrowhead or polymarker that will be drawn at the
    final vertex of the given  <path> element or basic shape. Value :
    <FuncIRI> |  none |  inherit ; Animatable : Yes

  marker-mid 

    It defines the arrowhead or polymarker that will be drawn at every
    vertex other than the first and last vertex of the given  <path>
    element or basic shape. Value : <FuncIRI> |  none |  inherit ;
    Animatable : Yes

  marker-start 

    It defines the arrowhead or polymarker that will be drawn at the
    first vertex of the given  <path> element or basic shape. Value :
    <FuncIRI> |  none |  inherit ; Animatable : Yes

  mask 

    It alters the visibility of an element by either masking or clipping
    the image at specific points. Value : see CSS  mask ; Animatable :
    Yes

  opacity 

    It specifies the transparency of an object or a group of objects.
    Value : <opacity-value> ; Animatable : Yes

  overflow 

    Specifies whether the content of a block-level element is clipped
    when it overflows the element's box. Value :  visible |
     hidden|scroll |  auto |  inherit ; Animatable : Yes

  pointer-events 

    Defines whether or when an element may be the target of a mouse
    event. Value :  bounding-box |  visiblePainted |  visibleFill |
     visibleStroke |  visible |  painted |  fill |  stroke |  all |
     none ; Animatable : Yes

  shape-rendering 

    Hints about what tradeoffs to make as the browser renders  <path>
    element or basic shapes. Value :  auto |  optimizeSpeed |
     crispEdges |  geometricPrecision |  inherit ; Animatable : Yes

  solid-color 

    - Value :; Animatable : -

  solid-opacity 

    - Value :; Animatable : -

  stop-color 

    Indicates what color to use at that gradient stop. Value :
     currentcolor | <color> | <icccolor> |  inherit ; Animatable : Yes

  stop-opacity 

    Defines the opacity of a given gradient stop. Value :
    <opacity-value> |  inherit ; Animatable : Yes

  stroke 

    Defines the color used to paint the outline of the shape. Value :
    <paint> ; Animatable : Yes

  stroke-dasharray 

    Defines the pattern of dashes and gaps used to paint the outline of
    the shape. Value :  none |  <dasharray> ; Animatable : Yes

  stroke-dashoffset 

    Defines an offset on the rendering of the associated dash array.
    Value : <percentage> | <length> ; Animatable : Yes

  stroke-linecap 

    Defines the shape to be used at the end of open subpaths when they
    are stroked. Value :  butt |  round |  square ; Animatable : Yes

  stroke-linejoin 

    Defines the shape to be used at the corners of paths when they are
    stroked. Value :  arcs |  bevel |  miter |  miter-clip |  round ;
    Animatable : Yes

  stroke-miterlimit 

    Defines a limit on the ratio of the miter length to the
      stroke-width  used to draw a miter join. Value : <number> ;
    Animatable : Yes

  stroke-opacity 

    Defines the opacity of the stroke of a shape. Value :
    <opacity-value> | <percentage> ; Animatable : Yes

  stroke-width 

    Defines the width of the stroke to be applied to the shape. Value :
    <length> | <percentage> ; Animatable : Yes

  text-anchor 

    Defines the vertical alignment a string of text. Value :  start |
     middle |  end |  inherit ; Animatable : Yes

  text-decoration 

    Sets the appearance of decorative lines on text. Value :  none |
     underline |  overline |  line-through |  blink |  inherit ;
    Animatable : Yes

  text-rendering 

    Hints about what tradeoffs to make as the browser renders text.
    Value :  auto |  optimizeSpeed |  optimizeLegibility |
     geometricPrecision |  inherit ; Animatable : Yes

  transform 

    Defines a list of transform definitions that are applied to an
    element and the element's children. Value : <transform-list> ;
    Animatable : Yes

  unicode-bidi 

    - Value :; Animatable : -

  vector-effect 

    Specifies the vector effect to use when drawing an object. Value :
     default |  non-scaling-stroke |  inherit |  <uri> ; Animatable :
    Yes

  visibility 

    Lets you control the visibility of graphical elements. Value :
     visible |  hidden |  collapse |  inherit ; Animatable : Yes

  word-spacing 

    Specifies spacing behavior between words. Value : <length> |
     inherit ; Animatable : Yes

  writing-mode 

    Specifies whether the initial inline-progression-direction for a
     <text> element shall be left-to-right, right-to-left, or
    top-to-bottom. Value :  lr-tb |  rl-tb |  tb-rl |  lr |  rl |  tb |
     inherit ; Animatable : Yes

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 22, 2023 by MDN contributors .
# preserveAlpha #

the  preserveAlpha attribute indicates how a  <feConvolveMatrix> element
handles alpha transparency.

You can use this attribute with the following SVG elements:

-    <feConvolveMatrix>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="convolveMatrix1" x="0" y="0" width="100%" height="100%">
        <feConvolveMatrix kernelMatrix="1 -1 2 0 0 0 0 0 -2" preserveAlpha="true" />
      </filter>
      <filter id="convolveMatrix2" x="0" y="0" width="100%" height="100%">
        <feConvolveMatrix
          kernelMatrix="1 -1 2 0 0 0 0 0 -2"
          preserveAlpha="false" />
      </filter>

      <image
        href="mdn_logo_only_color.png"
        width="200"
        height="200"
        style="filter:url(#convolveMatrix1);" />
      <image
        href="mdn_logo_only_color.png"
        width="200"
        height="200"
        style="filter:url(#convolveMatrix2); transform:translateX(220px);" />
    </svg>

Usage notes

  --------------- ----------------
  Default value    false
  Value            true |  false
  Animatable      Yes
  --------------- ----------------

 true

    This value indicates that the convolution is applied only to the
    color channels. In this case, the filter temporarily removes alpha
    premultiplication from the color component values, applies the
    kernel, and then reapplies alpha premultiplication as a final step.

 false

    This value indicates that the convolution is applied to all
    channels, including the alpha channel.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-feconvolvematrix-preservealpha

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# preserveAspectRatio #

The  preserveAspectRatio attribute indicates how an element with a
viewBox providing a given aspect ratio must fit into a viewport with a
different aspect ratio.

Because the aspect ratio of an SVG image is defined by the   viewBox 
attribute, if this attribute isn't set, the  preserveAspectRatio
attribute has no effect ( with one exception, the  <image> element, as
described below ).

Example

meet (width > height)

This example shows the use of  meet when the element's  width is greater
than its  height . It presents three variations, with three different
alignment values:  xMidYMid ,  xMinYMid , and  xMaxYMid .

    html,
    body,
    svg {
      height: 100%;
    }

    /* place flex element on each iframe body for responsitivity at different screen sizes */
    body {
      display: flex;
    }

html

    <svg viewBox="-1 -1 202 40" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <path
          id="smiley"
          d="M50,10 A40,40,1,1,1,50,90 A40,40,1,1,1,50,10 M30,40 Q36,35,42,40 M58,40 Q64,35,70,40 M30,60 Q50,75,70,60 Q50,75,30,60" />
      </defs>
    </svg>

html

    <rect x="0" y="0" width="60" height="30">
      <title>xMidYMid meet</title>
    </rect>
    <svg
      viewBox="0 0 100 100"
      width="60"
      height="30"
      preserveAspectRatio="xMidYMid meet"
      x="0"
      y="0">
      <use href="#smiley" />
    </svg>

html

    <rect x="70" y="0" width="60" height="30">
      <title>xMinYMid meet</title>
    </rect>
    <svg
      viewBox="0 0 100 100"
      width="60"
      height="30"
      preserveAspectRatio="xMinYMid meet"
      x="70"
      y="0">
      <use href="#smiley" />
    </svg>

html

      <rect x="140" y="0" width="60" height="30">
        <title>xMaxYMid meet</title>
      </rect>
      <svg
        viewBox="0 0 100 100"
        width="60"
        height="30"
        preserveAspectRatio="xMaxYMid meet"
        x="140"
        y="0">
        <use href="#smiley" />
      </svg>
    </svg>

css

    path {
      fill: yellow;
      stroke: black;
      stroke-width: 8px;
      stroke-linecap: round;
      stroke-linejoin: round;
      pointer-events: none;
    }

    rect:hover,
    rect:active {
      outline: 1px solid red;
    }

slice (width > height)

This example shows the use of  slice when the element's  width is
greater than its  height . It presents three variations, with three
different alignment values:  xMidYMin ,  xMidYMid , and  xMidYMax .

    html,
    body,
    svg {
      height: 100%;
    }

    /* place flex element on each iframe body for responsitivity at different screen sizes */
    body {
      display: flex;
    }

html

    <svg viewBox="-1 -1 202 57" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <path
          id="smiley"
          d="M50,10 A40,40,1,1,1,50,90 A40,40,1,1,1,50,10 M30,40 Q36,35,42,40 M58,40 Q64,35,70,40 M30,60 Q50,75,70,60 Q50,75,30,60" />
      </defs>
    </svg>

html

    <rect x="0" y="15" width="60" height="30">
      <title>xMidYMin slice</title>
    </rect>
    <svg
      viewBox="0 0 100 100"
      width="60"
      height="30"
      preserveAspectRatio="xMidYMin slice"
      x="0"
      y="15">
      <use href="#smiley" />
    </svg>

html

    <rect x="70" y="15" width="60" height="30">
      <title>xMidYMid slice</title>
    </rect>
    <svg
      viewBox="0 0 100 100"
      width="60"
      height="30"
      preserveAspectRatio="xMidYMid slice"
      x="70"
      y="15">
      <use href="#smiley" />
    </svg>

html

      <rect x="140" y="15" width="60" height="30">
        <title>xMidYMax slice</title>
      </rect>
      <svg
        viewBox="0 0 100 100"
        width="60"
        height="30"
        preserveAspectRatio="xMidYMax slice"
        x="140"
        y="15">
        <use href="#smiley" />
      </svg>
    </svg>

css

    path {
      fill: yellow;
      stroke: black;
      stroke-width: 8px;
      stroke-linecap: round;
      stroke-linejoin: round;
      pointer-events: none;
    }

    rect:hover,
    rect:active {
      outline: 1px solid red;
    }

meet (height > width)

This example shows the use of  meet when the element's  height is
greater than its  width . It presents three variations, with three
different alignment values:  xMidYMin ,  xMidYMid , and  xMidYMax .

    html,
    body,
    svg {
      height: 100%;
    }

    /* place flex element on each iframe body for responsitivity at different screen sizes */
    body {
      display: flex;
    }

html

    <svg viewBox="-1 -1 202 80" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <path
          id="smiley"
          d="M50,10 A40,40,1,1,1,50,90 A40,40,1,1,1,50,10 M30,40 Q36,35,42,40 M58,40 Q64,35,70,40 M30,60 Q50,75,70,60 Q50,75,30,60" />
      </defs>
    </svg>

html

      <rect x=0" y="0" width="30" height="75">
        <title>xMidYMin meet</title>
      </rect>
      <svg
        viewBox="0 0 100 100"
        width="30"
        height="75"
        preserveAspectRatio="xMidYMin meet"
        x="0"
        y="0">
        <use href="#smiley" />
      </svg>

html

    <rect x="35" y="0" width="30" height="75">
      <title>xMidYMid meet</title>
    </rect>
    <svg
      viewBox="0 0 100 100"
      width="30"
      height="75"
      preserveAspectRatio="xMidYMid meet"
      x="35"
      y="0">
      <use href="#smiley" />
    </svg>

html

      <rect x="70" y="0" width="30" height="75">
        <title>xMidYMax meet</title>
      </rect>
      <svg
        viewBox="0 0 100 100"
        width="30"
        height="75"
        preserveAspectRatio="xMidYMax meet"
        x="70"
        y="0">
        <use href="#smiley" />
      </svg>
    </svg>

css

    path {
      fill: yellow;
      stroke: black;
      stroke-width: 8px;
      stroke-linecap: round;
      stroke-linejoin: round;
      pointer-events: none;
    }

    rect:hover,
    rect:active {
      outline: 1px solid red;
    }

slice (height > width)

This example shows the use of  slice when the element's  height is
greater than its  width . It presents three variations, with three
different alignment values:  xMinYMid ,  xMidYMid , and  xMaxYMid .

    html,
    body,
    svg {
      height: 100%;
    }

    /* place flex element on each iframe body for responsitivity at different screen sizes */
    body {
      display: flex;
    }

html

    <svg viewBox="-1 -1 202 80" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <path
          id="smiley"
          d="M50,10 A40,40,1,1,1,50,90 A40,40,1,1,1,50,10 M30,40 Q36,35,42,40 M58,40 Q64,35,70,40 M30,60 Q50,75,70,60 Q50,75,30,60" />
      </defs>
    </svg>

html

    <rect x="0" y="0" width="30" height="75">
      <title>xMinYMid slice</title>
    </rect>
    <svg
      viewBox="0 0 100 100"
      width="30"
      height="75"
      preserveAspectRatio="xMinYMid slice"
      x="0"
      y="0">
      <use href="#smiley" />
    </svg>

html

    <rect x="35" y="0" width="30" height="75">
      <title>xMidYMid slice</title>
    </rect>
    <svg
      viewBox="0 0 100 100"
      width="30"
      height="75"
      preserveAspectRatio="xMidYMid slice"
      x="35"
      y="0">
      <use href="#smiley" />
    </svg>

html

      <rect x="70" y="0" width="30" height="75">
        <title>xMaxYMid slice</title>
      </rect>
      <svg
        viewBox="0 0 100 100"
        width="30"
        height="75"
        preserveAspectRatio="xMaxYMid slice"
        x="70"
        y="0">
        <use href="#smiley" />
      </svg>
    </svg>

css

    path {
      fill: yellow;
      stroke: black;
      stroke-width: 8px;
      stroke-linecap: round;
      stroke-linejoin: round;
      pointer-events: none;
    }

    rect:hover,
    rect:active {
      outline: 1px solid red;
    }

none

This example shows an element with the alignment value set to  none .

    html,
    body,
    svg {
      height: 100%;
    }

    /* place flex element on each iframe body for responsitivity at different screen sizes */
    body {
      display: flex;
    }

html

    <svg viewBox="-1 -1 192 62" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <path
          id="smiley"
          d="M50,10 A40,40,1,1,1,50,90 A40,40,1,1,1,50,10 M30,40 Q36,35,42,40 M58,40 Q64,35,70,40 M30,60 Q50,75,70,60 Q50,75,30,60" />
      </defs>
    </svg>

html

      <!-- none -->
      <rect x="0" y="0" width="160" height="60">
        <title>none</title>
      </rect>
      <svg
        viewBox="0 0 100 100"
        width="160"
        height="60"
        preserveAspectRatio="none"
        x="0"
        y="0">
        <use href="#smiley" />
      </svg>
    </svg>

css

    path {
      fill: yellow;
      stroke: black;
      stroke-width: 8px;
      stroke-linecap: round;
      stroke-linejoin: round;
      pointer-events: none;
    }

    rect:hover,
    rect:active {
      outline: 1px solid red;
    }

Syntax

    preserveAspectRatio="<align> [<meetOrSlice>]"

Its value is made of one or two keywords: A required alignment value and
an optional "meet or slice" reference as described below:

Alignment value

    The alignment value indicates whether to force uniform scaling and,
    if so, the alignment method to use in case the aspect ratio of the
      viewBox  doesn't match the aspect ratio of the viewport. The
    alignment value must be one of the following keywords:

    -   none Do not force uniform scaling. Scale the graphic content of
        the given element non-uniformly if necessary such that the
        element's bounding box exactly matches the viewport rectangle.
        Note that if  <align> is  none , then the optional
         <meetOrSlice> value is ignored .
    -   xMinYMin - Force uniform scaling. Align the  <min-x> of the
        element's   viewBox  with the smallest X value of the viewport.
        Align the  <min-y> of the element's   viewBox  with the smallest
        Y value of the viewport.
    -   xMidYMin - Force uniform scaling. Align the midpoint X value of
        the element's   viewBox  with the midpoint X value of the
        viewport. Align the  <min-y> of the element's   viewBox  with
        the smallest Y value of the viewport.
    -   xMaxYMin - Force uniform scaling. Align the  <min-x>+<width> of
        the element's   viewBox  with the maximum X value of the
        viewport. Align the  <min-y> of the element's   viewBox  with
        the smallest Y value of the viewport.
    -   xMinYMid - Force uniform scaling. Align the  <min-x> of the
        element's   viewBox  with the smallest X value of the viewport.
        Align the midpoint Y value of the element's   viewBox  with the
        midpoint Y value of the viewport.
    -   xMidYMid (the default) - Force uniform scaling. Align the
        midpoint X value of the element's   viewBox  with the midpoint X
        value of the viewport. Align the midpoint Y value of the
        element's   viewBox  with the midpoint Y value of the viewport.
    -   xMaxYMid - Force uniform scaling. Align the  <min-x>+<width> of
        the element's   viewBox  with the maximum X value of the
        viewport. Align the midpoint Y value of the element's   viewBox 
        with the midpoint Y value of the viewport.
    -   xMinYMax - Force uniform scaling. Align the  <min-x> of the
        element's   viewBox  with the smallest X value of the viewport.
        Align the  <min-y>+<height> of the element's   viewBox  with the
        maximum Y value of the viewport.
    -   xMidYMax - Force uniform scaling. Align the midpoint X value of
        the element's   viewBox  with the midpoint X value of the
        viewport. Align the  <min-y>+<height> of the element's
          viewBox  with the maximum Y value of the viewport.
    -   xMaxYMax - Force uniform scaling. Align the  <min-x>+<width> of
        the element's   viewBox  with the maximum X value of the
        viewport. Align the  <min-y>+<height> of the element's
          viewBox  with the maximum Y value of the viewport.

Meet or slice reference

    The meet or slice reference is optional and, if provided, must be
    one of the following keywords:

    -   meet ( the default ) - Scale the graphic such that:
        -   aspect ratio is preserved
        -   the entire   viewBox  is visible within the viewport
        -   the   viewBox  is scaled up as much as possible, while still
            meeting the other criteria

        In this case, if the aspect ratio of the graphic does not match
        the viewport, some of the viewport will extend beyond the bounds
        of the   viewBox  (i.e., the area into which the   viewBox  will
        draw will be smaller than the viewport).
    -   slice - Scale the graphic such that:
        -   aspect ratio is preserved
        -   the entire viewport is covered by the   viewBox 
        -   the   viewBox  is scaled down as much as possible, while
            still meeting the other criteria

        In this case, if the aspect ratio of the   viewBox  does not
        match the viewport, some of the   viewBox  will extend beyond
        the bounds of the viewport (i.e., the area into which the
          viewBox  will draw is larger than the viewport).

Elements

You can use this attribute with the following SVG elements:

-    <svg>
-    <symbol>
-    <image>
-    <feImage>
-    <marker>
-    <pattern>
-    <view>

feImage

For  <feImage> ,  preserveAspectRatio defines how the referenced image
should fit in the rectangle define by the  <feImage> element.

  --------------- ------------------------
  Value           <align> <meetOrSlice>?
  Default value    xMidYMid  meet
  Animatable      Yes
  --------------- ------------------------

image

For  <image> ,  preserveAspectRatio defines how the referenced image
should fit in the rectangle define by the  <image> element.

  --------------- ------------------------
  Value           <align> <meetOrSlice>?
  Default value    xMidYMid  meet
  Animatable      Yes
  --------------- ------------------------

marker

For  <marker> ,  preserveAspectRatio indicates if a uniform scaling must
be performed to fit the element viewport.

  --------------- ------------------------
  Value           <align> <meetOrSlice>?
  Default value    xMidYMid  meet
  Animatable      Yes
  --------------- ------------------------

pattern

For  <pattern> ,  preserveAspectRatio indicates if a uniform scaling
must be performed to fit the element viewport.

  --------------- ------------------------
  Value           <align> <meetOrSlice>?
  Default value    xMidYMid  meet
  Animatable      Yes
  --------------- ------------------------

svg

For  <svg> ,  preserveAspectRatio indicates if a uniform scaling must be
performed to fit the element viewport.

  --------------- ------------------------
  Value           <align> <meetOrSlice>?
  Default value    xMidYMid  meet
  Animatable      Yes
  --------------- ------------------------

symbol

For  <symbol> ,  preserveAspectRatio indicates if a uniform scaling must
be performed to fit the element viewport.

  --------------- ------------------------
  Value           <align> <meetOrSlice>?
  Default value    xMidYMid  meet
  Animatable      Yes
  --------------- ------------------------

view

For  <view> ,  preserveAspectRatio indicates if a uniform scaling must
be performed to fit the element viewport.

  --------------- ------------------------
  Value           <align> <meetOrSlice>?
  Default value    xMidYMid  meet
  Animatable      Yes
  --------------- ------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-feimage-preserveaspectratio

  Scalable Vector Graphics (SVG) 2
  # PreserveAspectRatioAttribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 24, 2023 by MDN contributors .
# primitiveUnits #

The  primitiveUnits attribute specifies the coordinate system for the
various length values within the filter primitives and for the
attributes that define the filter primitive subregion.

You can use this attribute with the following SVG elements:

-    <filter>

Usage notes

  --------------- --------------------------------------
  Value            userSpaceOnUse |  objectBoundingBox
  Default value    userSpaceOnUse
  Animatable      Yes
  --------------- --------------------------------------

userSpaceOnUse

    This value indicates that any length values within the filter
    definitions represent values in the current user coordinate system
    in place at the time when the  <filter> element is referenced (i.e.,
    the user coordinate system for the element referencing the  <filter>
    element via a   filter  attribute).

objectBoundingBox

    This value indicates that any length values within the filter
    definitions represent fractions or percentages of the bounding box
    on the referencing element.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-filter-primitiveunits

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# radius #

The  radius attribute represents the radius (or radii) for the operation
on a given  <feMorphology> filter primitive.

If two numbers are provided, the first number represents the x-radius
and the second one the y-radius. If one number is provided, then that
value is used for both x and y. The values are in the coordinate system
established by the   primitiveUnits  attribute on the  <filter> element.

A negative or zero value disables the effect of the given filter
primitive (i.e., the result is the filter input image).

You can use this attribute with the following SVG elements:

-    <feMorphology>

Usage notes

  --------------- --------------------------
  Value           <number-optional-number>
  Default value    0
  Animatable      Yes
  --------------- --------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-femorphology-radius

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# refX #

The  refX attribute defines the x coordinate of an element's reference
point.

You can use this attribute with the following SVG elements:

-    <marker>
-    <symbol>

marker

For  <marker> ,  refX defines the x coordinate of the marker's reference
point, which is to be placed exactly at the marker's position on the
shape.

  --------------- -------------------------------------------------------------
  Value            <length-percentage> |  <number> |  left |  center |  right
  Default value    0
  Animatable      Yes
  --------------- -------------------------------------------------------------

 <length-percentage>

    Lengths are interpreted as being in the coordinate system of the
    marker contents, after application of the   viewBox  and
      preserveAspectRatio  attributes.

    Percentage values are interpreted as being a percentage of the
      viewBox  width.

 <number>

    Numbers are interpreted as being in the coordinate system of the
    marker contents, after application of the   viewBox  and
      preserveAspectRatio  attributes.

 left

    The reference point of the marker is placed at the left edge of the
    shape.

 center

    The reference point of the marker is placed at the horizontal center
    of the shape.

 right

    The reference point of the marker is placed at the right edge of the
    shape.

symbol

For  <symbol> ,  refX defines the x coordinate of the symbol, which is
defined by the cumulative effect of the   x  attribute and any
transformations on the  <symbol> and its host  <use> element.

Unlike other positioning attributes,  refX is interpreted as being in
the coordinate system of the symbol contents, after application of the
  viewBox  and   preserveAspectRatio  attributes. If the attribute is
not specified, no horizontal adjustment is made, and the left side of
the symbol's rectangular viewport region (regardless of the  viewBox
coordinate) is positioned at the x coordinate.

Note: For backwards compatibility, the behavior when  refX is not
specified on a  <symbol> element is different from when it is specified
with a value of  0 , and therefore different from the behavior when an
equivalent attribute is not specified on a  <marker> element.

  --------------- --------------------------------------
  Value            <length> |  left |  center |  right
  Default value   None
  Animatable      Yes
  --------------- --------------------------------------

 <length-percentage>

    Lengths are interpreted as being in the coordinate system of the
    marker contents, after application of the   viewBox  and
      preserveAspectRatio  attributes.

    Percentage values are interpreted as being a percentage of the
      viewBox  width.

 <number>

    Numbers are interpreted as being in the coordinate system of the
    marker contents, after application of the   viewBox  and
      preserveAspectRatio  attributes.

 left

    The reference point of the marker is placed at the left edge of the
    shape.

 center

    The reference point of the marker is placed at the horizontal center
    of the shape.

 right

    The reference point of the marker is placed at the right edge of the
    shape.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # MarkerElementRefXAttribute

  Scalable Vector Graphics (SVG) 2
  # SymbolElementRefXAttribute
  -----------------------------------------------------------------------

See also

-     refY 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# refY #

The  refY attribute defines the y coordinate of an element's reference
point.

You can use this attribute with the following SVG elements:

-    <marker>
-    <symbol>

marker

For  <marker> ,  refY defines the y coordinate of the marker's reference
point, which is to be placed exactly at the marker's position on the
shape.

  --------------- -------------------------------------------------------------
  Value            <length-percentage> |  <number> |  top |  center |  bottom
  Default value    0
  Animatable      Yes
  --------------- -------------------------------------------------------------

 <length-percentage>

    Lengths are interpreted as being in the coordinate system of the
    marker contents, after application of the   viewBox  and
      preserveAspectRatio  attributes.

    Percentage values are interpreted as being a percentage of the
      viewBox  height.

 <number>

    Numbers are interpreted as being in the coordinate system of the
    marker contents, after application of the   viewBox  and
      preserveAspectRatio  attributes.

 top

    The reference point of the marker is placed at the top edge of the
    shape.

 center

    The reference point of the marker is placed at the vertical center
    of the shape.

 bottom

    The reference point of the marker is placed at the bottom edge of
    the shape.

symbol

For  <symbol> ,  refY defines the y coordinate of the symbol, which is
defined by the cumulative effect of the   y  attribute and any
transformations on the  <symbol> and its host  <use> element.

Unlike other positioning attributes,  refY is interpreted as being in
the coordinate system of the symbol contents, after application of the
  viewBox  and   preserveAspectRatio  attributes. If the attribute is
not specified, no vertical adjustment is made, and the top side of the
symbol's rectangular viewport region (regardless of the  viewBox
coordinate) is positioned at the y coordinate.

Note: For backwards compatibility, the behavior when  refY is not
specified on a  <symbol> element is different from when it is specified
with a value of  0 , and therefore different from the behavior when an
equivalent attribute is not specified on a  <marker> element.

  --------------- --------------------------------------
  Value            <length> |  top |  center |  bottom
  Default value   None
  Animatable      Yes
  --------------- --------------------------------------

 <length-percentage>

    Lengths are interpreted as being in the coordinate system of the
    marker contents, after application of the   viewBox  and
      preserveAspectRatio  attributes.

    Percentage values are interpreted as being a percentage of the
      viewBox  height.

 <number>

    Numbers are interpreted as being in the coordinate system of the
    marker contents, after application of the   viewBox  and
      preserveAspectRatio  attributes.

 top

    The reference point of the marker is placed at the top edge of the
    shape.

 center

    The reference point of the marker is placed at the vertical center
    of the shape.

 bottom

    The reference point of the marker is placed at the bottom edge of
    the shape.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # MarkerElementRefYAttribute

  Scalable Vector Graphics (SVG) 2
  # SymbolElementRefYAttribute
  -----------------------------------------------------------------------

See also

-     refX 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# repeatCount #

The  repeatCount attribute indicates the number of times an animation
will take place.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <set>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 220 150" xmlns="http://www.w3.org/2000/svg">
      <rect x="0" y="0" width="100" height="100">
        <animate
          attributeType="XML"
          attributeName="y"
          from="0"
          to="50"
          dur="1s"
          repeatCount="5" />
      </rect>
      <rect x="120" y="0" width="100" height="100">
        <animate
          attributeType="XML"
          attributeName="y"
          from="0"
          to="50"
          dur="1s"
          repeatCount="indefinite" />
      </rect>
    </svg>

Usage notes

  --------------- -------------------------
  Value            <number> |  indefinite
  Default value   None
  Animatable      No
  --------------- -------------------------

 <number>

    This value specifies the number of iterations. It can include
    partial iterations expressed as fraction values. A fractional value
    describes a portion of the simple duration. Values must be greater
    than  0 .

 indefinite

    This value indicates that the animation will be repeated
    indefinitely (i.e. until the document ends).

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # RepeatCountAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# repeatDur #

The  repeatDur attribute specifies the total duration for repeating an
animation.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <set>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 220 150" xmlns="http://www.w3.org/2000/svg">
      <rect x="0" y="0" width="100" height="100">
        <animate
          attributeType="XML"
          attributeName="y"
          from="0"
          to="50"
          dur="1s"
          repeatDur="5s" />
      </rect>
      <rect x="120" y="0" width="100" height="100">
        <animate
          attributeType="XML"
          attributeName="y"
          from="0"
          to="50"
          dur="1s"
          repeatDur="indefinite" />
      </rect>
    </svg>

Usage notes

  ---------------- --------------------------------
  Value              <clock-value>  |  indefinite
  Default values   None
  Animatable       No
  ---------------- --------------------------------

 <clock-value>

    This value specifies the duration in presentation time to repeat the
    animation.

 indefinite

    This value indicates that the animation will be repeated
    indefinitely (i.e. until the document ends).

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # RepeatDurAttribute

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# requiredFeatures #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  requiredFeatures attribute takes a list of feature strings, with
the individual strings separated by white space. It determines whether
or not all of the named features are supported by the browser; if all of
them are supported, the attribute evaluates to  true end the element is
rendered; otherwise, the attribute evaluates to  false and the current
element and its children are skipped and thus will not be rendered. This
provides a way to design SVG that gracefully falls back when features
aren't available.

If the attribute is not present, then its implicit evaluated value is
 true . If a null string or empty string value is given to attribute
 requiredFeatures , the attribute is evaluate to  false .

 requiredFeatures is often used in conjunction with the  <switch>
element. If  requiredFeatures is used in other situations, it represents
a simple switch on the given element whether to render the element or
not.

You can use this attribute with the following SVG elements:

-    <a>
-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <circle>
-    <clipPath>
-    <cursor>
-    <defs>
-    <ellipse>
-    <foreignObject>
-    <g>
-    <image>
-    <line>
-    <mask>
-    <path>
-    <pattern>
-    <polygon>
-    <polyline>
-    <rect>
-    <set>
-    <svg>
-    <switch>
-    <text>
-    <textPath>
-    <tref>
-    <tspan>
-    <use>

Example

    html,
    body,
    svg {
      height: 100%;
    }

    text {
      fill: white;
    }

html

    <svg viewBox="0 0 250 45" xmlns="http://www.w3.org/2000/svg">
      <g>
        <rect fill="forestgreen" x="10" y="10" height="25" width="230" />
        <text x="20" y="27">requiredFeatures supported</text>
      </g>
      <g requiredFeatures="">
        <rect fill="crimson" x="10" y="10" height="25" width="230" />
        <text x="20" y="27">requiredFeatures not supported</text>
      </g>
    </svg>

Usage notes

  --------------- ---------------------------------------------------------------
  Value             <list-of-features> 
  Default value    true if not defined,  false if null or empty string as value
  Animatable      No
  --------------- ---------------------------------------------------------------

 <list-of-features>

    This is a list of feature strings, separated using white space.
    Determines whether all of the named features are supported by the
    browser. See Feature strings below for a list of allowed values.

Feature strings

The following are the feature strings for the  requiredFeatures
attribute. These same feature strings apply to the hasFeature method
call that is part of the SVG DOM's support for the  DOMImplementation
interface. In some cases the feature strings map directly to a set of
attributes, properties or elements, in others they represent some
functionality of the browser. Note that the format and naming for
feature strings changed from SVG 1.0 to SVG 1.1. The SVG 1.0 feature
strings are not listed here but can be found in the SVG Specification .
Some browser support SVG 1.0 Feature strings for compatibility reasons.
However, the SVG 1.0 feature strings are considered deprecated.

 http://www.w3.org/TR/SVG11/feature#SVG

    At least one of the following feature is supported:

    -    http://www.w3.org/TR/SVG11/feature#SVG-static
    -    http://www.w3.org/TR/SVG11/feature#SVG-animation
    -    http://www.w3.org/TR/SVG11/feature#SVG-dynamic
    -    http://www.w3.org/TR/SVG11/feature#SVGDOM

 http://www.w3.org/TR/SVG11/feature#SVGDOM

    At least one of the following feature is supported:

    -    http://www.w3.org/TR/SVG11/feature#SVGDOM-static
    -    http://www.w3.org/TR/SVG11/feature#SVGDOM-animation
    -    http://www.w3.org/TR/SVG11/feature#SVGDOM-dynamic

 http://www.w3.org/TR/SVG11/feature#SVG-static

    The browser supports all the following features:

    -    http://www.w3.org/TR/SVG11/feature#CoreAttribute
    -    http://www.w3.org/TR/SVG11/feature#Structure
    -    http://www.w3.org/TR/SVG11/feature#ContainerAttribute
    -    http://www.w3.org/TR/SVG11/feature#ConditionalProcessing
    -    http://www.w3.org/TR/SVG11/feature#Image
    -    http://www.w3.org/TR/SVG11/feature#Style
    -    http://www.w3.org/TR/SVG11/feature#ViewportAttribute
    -    http://www.w3.org/TR/SVG11/feature#Shape
    -    http://www.w3.org/TR/SVG11/feature#Text
    -    http://www.w3.org/TR/SVG11/feature#PaintAttribute
    -    http://www.w3.org/TR/SVG11/feature#OpacityAttribute
    -    http://www.w3.org/TR/SVG11/feature#GraphicsAttribute
    -    http://www.w3.org/TR/SVG11/feature#Marker
    -    http://www.w3.org/TR/SVG11/feature#ColorProfile
    -    http://www.w3.org/TR/SVG11/feature#Gradient
    -    http://www.w3.org/TR/SVG11/feature#Pattern
    -    http://www.w3.org/TR/SVG11/feature#Clip
    -    http://www.w3.org/TR/SVG11/feature#Mask
    -    http://www.w3.org/TR/SVG11/feature#Filter
    -    http://www.w3.org/TR/SVG11/feature#XlinkAttribute
    -    http://www.w3.org/TR/SVG11/feature#Font
    -    http://www.w3.org/TR/SVG11/feature#Extensibility

 http://www.w3.org/TR/SVG11/feature#SVGDOM-static

    The browser supports all DOM interfaces and methods to the language
    features for  http://www.w3.org/TR/SVG11/feature#SVG-static .

 http://www.w3.org/TR/SVG11/feature#SVG-animation

    The browser supports all of the language features from
     http://www.w3.org/TR/SVG11/feature#SVG-static plus the feature
     http://www.w3.org/TR/SVG11/feature#Animation .

 http://www.w3.org/TR/SVG11/feature#SVGDOM-animation

    The browser supports all DOM interfaces and methods corresponding to
    the language features for
     http://www.w3.org/TR/SVG11/feature#SVG-animation .

 http://www.w3.org/TR/SVG11/feature#SVG-dynamic

    The browser supports all of the language features from
     http://www.w3.org/TR/SVG11/feature#SVG-animation plus the following
    features:

    -    http://www.w3.org/TR/SVG11/feature#Hyperlinking
    -    http://www.w3.org/TR/SVG11/feature#Scripting
    -    http://www.w3.org/TR/SVG11/feature#View
    -    http://www.w3.org/TR/SVG11/feature#Cursor
    -    http://www.w3.org/TR/SVG11/feature#GraphicalEventsAttribute
    -    http://www.w3.org/TR/SVG11/feature#DocumentEventsAttribute
    -    http://www.w3.org/TR/SVG11/feature#AnimationEventsAttribute

 http://www.w3.org/TR/SVG11/feature#SVGDOM-dynamic

    The browser supports all DOM interfaces and methods to the language
    features for  http://www.w3.org/TR/SVG11/feature#SVG-dynamic .

 http://www.w3.org/TR/SVG11/feature#CoreAttribute

    The browser supports the   id  ,   xml:base  ,   xml:lang  and
      xml:space  attributes

 http://www.w3.org/TR/SVG11/feature#Structure

    The browser supports  <svg> ,  <g> ,  <defs> ,  <desc> ,  <title> ,
     <metadata> ,  <symbol> and  <use> elements.

 http://www.w3.org/TR/SVG11/feature#BasicStructure

    The browser supports  <svg> ,  <g> ,  <defs> ,  <desc> ,  <title> ,
     <metadata> and  <use> elements.

 http://www.w3.org/TR/SVG11/feature#ContainerAttribute

    The browser supports the   enable-background  attribute

 http://www.w3.org/TR/SVG11/feature#ConditionalProcessing

    The browser supports the  <switch> element, and the
      requiredFeatures  ,   requiredExtensions  ,   systemLanguage 
    attributes

 http://www.w3.org/TR/SVG11/feature#Image

    The browser supports the  <image> element.

 http://www.w3.org/TR/SVG11/feature#Style

    The browser supports the  <style> element.

 http://www.w3.org/TR/SVG11/feature#ViewportAttribute

    The browser supports the   clip  and   overflow  attributes.

 http://www.w3.org/TR/SVG11/feature#Shape

    The browser supports the  <rect> ,  <circle> ,  <line> ,  <polyline>
    ,  <polygon> ,  <ellipse> and  <path> elements.

 http://www.w3.org/TR/SVG11/feature#Text

    The browser supports the  <text> ,  <tspan> ,  <tref> ,  <textPath>
    , and  <glyphRef> elements.

 http://www.w3.org/TR/SVG11/feature#BasicText

    The browser supports the  <text> element

 http://www.w3.org/TR/SVG11/feature#PaintAttribute

    The browser supports the   color  ,   fill  ,   fill-rule  ,
      stroke  ,   stroke-dasharray  ,   stroke-dashoffset  ,
      stroke-linecap  ,   stroke-linejoin  ,   stroke-miterlimit  ,
      stroke-width  ,   color-interpolation  and   color-rendering 
    attributes

 http://www.w3.org/TR/SVG11/feature#BasicPaintAttribute

    The browser supports the   color  ,   fill  ,   fill-rule  ,
      stroke  ,   stroke-dasharray  ,   stroke-dashoffset  ,
      stroke-linecap  ,   stroke-linejoin  ,   stroke-miterlimit  ,
      stroke-width  and   color-rendering  attributes

 http://www.w3.org/TR/SVG11/feature#OpacityAttribute

    The browser supports the   opacity  ,   stroke-opacity  and
      fill-opacity  attributes

 http://www.w3.org/TR/SVG11/feature#GraphicsAttribute

    The browser supports the   display  ,   image-rendering  ,
      pointer-events  ,   shape-rendering  ,   text-rendering  and
      visibility  attributes

 http://www.w3.org/TR/SVG11/feature#BasicGraphicsAttribute

    The browser supports the   display  and   visibility  attributes

 http://www.w3.org/TR/SVG11/feature#Marker

    The browser supports the  <marker> element

 http://www.w3.org/TR/SVG11/feature#Gradient

    The browser supports the  <linearGradient> ,  <radialGradient> and
     <stop> elements

 http://www.w3.org/TR/SVG11/feature#Pattern

    The browser supports the  <pattern> element

 http://www.w3.org/TR/SVG11/feature#Clip

    The browser supports the  <clipPath> element and the   clip-path  ,
      clip-rule  attributes

 http://www.w3.org/TR/SVG11/feature#BasicClip

    The browser supports the  <clipPath> element and the   clip-path 
    attribute

 http://www.w3.org/TR/SVG11/feature#Mask

    The browser supports the  <mask> element

 http://www.w3.org/TR/SVG11/feature#Filter

    The browser supports the  <filter> ,  <feBlend> ,  <feColorMatrix> ,
     <feComponentTransfer> ,  <feComposite> ,  <feConvolveMatrix> ,
     <feDiffuseLighting> ,  <feDisplacementMap> ,  <feFlood> ,
     <feGaussianBlur> ,  <feImage> ,  <feMerge> ,  <feMergeNode> ,
     <feMorphology> ,  <feOffset> ,  <feSpecularLighting> ,  <feTile> ,
     <feDistantLight> ,  <fePointLight> ,  <feSpotLight> ,  <feFuncR> ,
     <feFuncG> ,  <feFuncB> and  <feFuncA> elements

 http://www.w3.org/TR/SVG11/feature#BasicFilter

    The browser supports the  <filter> ,  <feBlend> ,  <feColorMatrix> ,
     <feComponentTransfer> ,  <feComposite> ,  <feFlood> ,
     <feGaussianBlur> ,  <feImage> ,  <feMerge> ,  <feMergeNode> ,
     <feOffset> ,  <feTile> ,  <feFuncR> ,  <feFuncG> ,  <feFuncB> and
     <feFuncA> elements

 http://www.w3.org/TR/SVG11/feature#DocumentEventsAttribute

    The browser supports the   onunload  ,   onabort  ,   onerror  ,
      onresize  ,   onscroll  and   onzoom  attributes

 http://www.w3.org/TR/SVG11/feature#GraphicalEventsAttribute

    The browser supports the   onfocusin  ,   onfocusout  ,
      onactivate  ,   onclick  ,   onmousedown  ,   onmouseup  ,
      onmouseover  ,   onmousemove  ,   onmouseout  and   onload 
    attributes

 http://www.w3.org/TR/SVG11/feature#AnimationEventsAttribute

    The browser supports the   onbegin  ,   onend  ,   onrepeat  and
      onload  attributes

 http://www.w3.org/TR/SVG11/feature#Cursor

    The browser supports the  <cursor> element

 http://www.w3.org/TR/SVG11/feature#Hyperlinking

    The browser supports the  <a> element

 http://www.w3.org/TR/SVG11/feature#XlinkAttribute

    The browser supports the   xlink:type  ,   xlink:href  ,
      xlink:role  ,   xlink:arcrole  ,   xlink:title  ,   xlink:show 
    and   xlink:actuate  attributes

 http://www.w3.org/TR/SVG11/feature#View

    The browser supports the  <view> element

 http://www.w3.org/TR/SVG11/feature#Script

    The browser supports the  <script> element

 http://www.w3.org/TR/SVG11/feature#Animation

    The browser supports the  <animate> ,  <set> ,  <animateMotion> ,
     <animateTransform> , and  <mpath> elements

 http://www.w3.org/TR/SVG11/feature#Font

    The browser supports the  <font> ,  <font-face> ,  <glyph> ,
     <missing-glyph> ,  <hkern> ,  <vkern> ,  <font-face-src> ,
     <font-face-uri> ,  <font-face-format> and  <font-face-name>
    elements

 http://www.w3.org/TR/SVG11/feature#BasicFont

    The browser supports the  <font> ,  <font-face> ,  <glyph> ,
     <missing-glyph> ,  <hkern> ,  <font-face-src> and  <font-face-name>
    elements

 http://www.w3.org/TR/SVG11/feature#Extensibility

    The browser supports the  <foreignObject> element

Testing feature support

SVG

html

    <svg width="450" height="1170" xmlns="http://www.w3.org/2000/svg">
      <!-- Testing : http://www.w3.org/TR/SVG11/feature#SVG -->
      <rect class="ko" x="10" y="10" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="10"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#SVG" />
      <text x="20" y="27">http://www.w3.org/TR/SVG11/feature#SVG</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#SVGDOM -->
      <rect class="ko" x="10" y="35" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="35"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#SVGDOM" />
      <text x="20" y="52">http://www.w3.org/TR/SVG11/feature#SVGDOM</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#SVG-static -->
      <rect class="ko" x="10" y="60" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="60"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#SVG-static" />
      <text x="20" y="77">http://www.w3.org/TR/SVG11/feature#SVG-static</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#SVGDOM-static -->
      <rect class="ko" x="10" y="85" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="85"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#SVGDOM-static" />
      <text x="20" y="102">http://www.w3.org/TR/SVG11/feature#SVGDOM-static</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#SVG-animation -->
      <rect class="ko" x="10" y="110" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="110"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#SVG-animation" />
      <text x="20" y="127">http://www.w3.org/TR/SVG11/feature#SVG-animation</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#SVGDOM-animation -->
      <rect class="ko" x="10" y="135" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="135"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#SVGDOM-animation" />
      <text x="20" y="152">
        http://www.w3.org/TR/SVG11/feature#SVGDOM-animation
      </text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#SVG-dynamic -->
      <rect class="ko" x="10" y="160" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="160"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#SVG-dynamic" />
      <text x="20" y="177">http://www.w3.org/TR/SVG11/feature#SVG-dynamic</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#SVGDOM-dynamic -->
      <rect class="ko" x="10" y="185" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="185"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#SVGDOM-dynamic" />
      <text x="20" y="202">http://www.w3.org/TR/SVG11/feature#SVGDOM-dynamic</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#CoreAttribute -->
      <rect class="ko" x="10" y="210" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="210"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#CoreAttribute" />
      <text x="20" y="227">http://www.w3.org/TR/SVG11/feature#CoreAttribute</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Structure -->
      <rect class="ko" x="10" y="235" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="235"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Structure" />
      <text x="20" y="252">http://www.w3.org/TR/SVG11/feature#Structure</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#BasicStructure -->
      <rect class="ko" x="10" y="260" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="260"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#BasicStructure" />
      <text x="20" y="277">http://www.w3.org/TR/SVG11/feature#BasicStructure</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#ContainerAttribute -->
      <rect class="ko" x="10" y="285" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="285"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#ContainerAttribute" />
      <text x="20" y="302">
        http://www.w3.org/TR/SVG11/feature#ContainerAttribute
      </text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#ConditionalProcessing -->
      <rect class="ko" x="10" y="310" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="310"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#ConditionalProcessing" />
      <text x="20" y="327">
        http://www.w3.org/TR/SVG11/feature#ConditionalProcessing
      </text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Image -->
      <rect class="ko" x="10" y="335" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="335"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Image" />
      <text x="20" y="352">http://www.w3.org/TR/SVG11/feature#Image</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Style -->
      <rect class="ko" x="10" y="360" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="360"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Style" />
      <text x="20" y="377">http://www.w3.org/TR/SVG11/feature#Style</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#ViewportAttribute -->
      <rect class="ko" x="10" y="385" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="385"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#ViewportAttribute" />
      <text x="20" y="402">
        http://www.w3.org/TR/SVG11/feature#ViewportAttribute
      </text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Shape -->
      <rect class="ko" x="10" y="410" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="410"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Shape" />
      <text x="20" y="427">http://www.w3.org/TR/SVG11/feature#Shape</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Text -->
      <rect class="ko" x="10" y="435" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="435"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Text" />
      <text x="20" y="452">http://www.w3.org/TR/SVG11/feature#Text</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#BasicText -->
      <rect class="ko" x="10" y="460" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="460"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#BasicText" />
      <text x="20" y="477">http://www.w3.org/TR/SVG11/feature#BasicText</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#PaintAttribute -->
      <rect class="ko" x="10" y="485" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="485"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#PaintAttribute" />
      <text x="20" y="502">http://www.w3.org/TR/SVG11/feature#PaintAttribute</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#BasicPaintAttribute -->
      <rect class="ko" x="10" y="510" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="510"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#BasicPaintAttribute" />
      <text x="20" y="527">
        http://www.w3.org/TR/SVG11/feature#BasicPaintAttribute
      </text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#OpacityAttribute -->
      <rect class="ko" x="10" y="535" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="535"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#OpacityAttribute" />
      <text x="20" y="552">
        http://www.w3.org/TR/SVG11/feature#OpacityAttribute
      </text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#GraphicsAttribute -->
      <rect class="ko" x="10" y="560" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="560"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#GraphicsAttribute" />
      <text x="20" y="577">
        http://www.w3.org/TR/SVG11/feature#GraphicsAttribute
      </text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#BasicGraphicsAttribute -->
      <rect class="ko" x="10" y="585" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="585"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#BasicGraphicsAttribute" />
      <text x="20" y="602">
        http://www.w3.org/TR/SVG11/feature#BasicGraphicsAttribute
      </text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Marker -->
      <rect class="ko" x="10" y="610" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="610"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Marker" />
      <text x="20" y="627">http://www.w3.org/TR/SVG11/feature#Marker</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#ColorProfile -->
      <rect class="ko" x="10" y="635" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="635"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#ColorProfile" />
      <text x="20" y="652">http://www.w3.org/TR/SVG11/feature#ColorProfile</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Gradient -->
      <rect class="ko" x="10" y="660" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="660"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Gradient" />
      <text x="20" y="677">http://www.w3.org/TR/SVG11/feature#Gradient</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Pattern -->
      <rect class="ko" x="10" y="685" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="685"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Pattern" />
      <text x="20" y="702">http://www.w3.org/TR/SVG11/feature#Pattern</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Clip -->
      <rect class="ko" x="10" y="710" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="710"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Clip" />
      <text x="20" y="727">http://www.w3.org/TR/SVG11/feature#Clip</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#BasicClip -->
      <rect class="ko" x="10" y="735" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="735"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#BasicClip" />
      <text x="20" y="752">http://www.w3.org/TR/SVG11/feature#BasicClip</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Mask -->
      <rect class="ko" x="10" y="760" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="760"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Mask" />
      <text x="20" y="777">http://www.w3.org/TR/SVG11/feature#Mask</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Filter -->
      <rect class="ko" x="10" y="785" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="785"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Filter" />
      <text x="20" y="802">http://www.w3.org/TR/SVG11/feature#Filter</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#BasicFilter -->
      <rect class="ko" x="10" y="810" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="810"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#BasicFilter" />
      <text x="20" y="827">http://www.w3.org/TR/SVG11/feature#BasicFilter</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#DocumentEventsAttribute -->
      <rect class="ko" x="10" y="835" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="835"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#DocumentEventsAttribute" />
      <text x="20" y="852">
        http://www.w3.org/TR/SVG11/feature#DocumentEventsAttribute
      </text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#GraphicalEventsAttribute -->
      <rect class="ko" x="10" y="860" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="860"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#GraphicalEventsAttribute" />
      <text x="20" y="877">
        http://www.w3.org/TR/SVG11/feature#GraphicalEventsAttribute
      </text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#AnimationEventsAttribute -->
      <rect class="ko" x="10" y="885" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="885"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#AnimationEventsAttribute" />
      <text x="20" y="902">
        http://www.w3.org/TR/SVG11/feature#AnimationEventsAttribute
      </text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Cursor -->
      <rect class="ko" x="10" y="910" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="910"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Cursor" />
      <text x="20" y="927">http://www.w3.org/TR/SVG11/feature#Cursor</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Hyperlinking -->
      <rect class="ko" x="10" y="935" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="935"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Hyperlinking" />
      <text x="20" y="952">http://www.w3.org/TR/SVG11/feature#Hyperlinking</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#XlinkAttribute -->
      <rect class="ko" x="10" y="960" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="960"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#XlinkAttribute" />
      <text x="20" y="977">http://www.w3.org/TR/SVG11/feature#XlinkAttribute</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#View -->
      <rect class="ko" x="10" y="1010" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="1010"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#View" />
      <text x="20" y="1027">http://www.w3.org/TR/SVG11/feature#View</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Script -->
      <rect class="ko" x="10" y="1035" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="1035"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Script" />
      <text x="20" y="1052">http://www.w3.org/TR/SVG11/feature#Script</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Animation -->
      <rect class="ko" x="10" y="1060" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="1060"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Animation" />
      <text x="20" y="1077">http://www.w3.org/TR/SVG11/feature#Animation</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Font -->
      <rect class="ko" x="10" y="1085" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="1085"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Font" />
      <text x="20" y="1102">http://www.w3.org/TR/SVG11/feature#Font</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#BasicFont -->
      <rect class="ko" x="10" y="1110" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="1110"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#BasicFont" />
      <text x="20" y="1127">http://www.w3.org/TR/SVG11/feature#BasicFont</text>

      <!-- Testing : http://www.w3.org/TR/SVG11/feature#Extensibility -->
      <rect class="ko" x="10" y="1135" height="25" width="430" />
      <rect
        class="ok"
        x="10"
        y="1135"
        height="25"
        width="430"
        requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" />
      <text x="20" y="1152">http://www.w3.org/TR/SVG11/feature#Extensibility</text>
    </svg>

CSS

css

    .ko {
      fill: #900;
    }

    .ok {
      fill: #060;
    }

    rect {
      stroke: #000;
      stroke-width: 2px;
    }

    text {
      fill: #fff;
      font: 12px sans-serif;
    }

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # RequiredFeaturesAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# restart #

The  restart attribute specifies whether or not an animation can
restart.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <set>

Example

    html,
    body,
    svg {
      height: 100%;
    }

    a {
      fill: blue;
      text-decoration: underline;
      cursor: pointer;
    }

html

    <svg viewBox="0 0 220 200" xmlns="http://www.w3.org/2000/svg">
      <rect y="30" width="100" height="100">
        <animate
          attributeType="XML"
          attributeName="y"
          from="30"
          to="100"
          dur="5s"
          repeatCount="1"
          restart="always" />
      </rect>
      <rect x="120" y="30" width="100" height="100">
        <animate
          attributeType="XML"
          attributeName="y"
          from="30"
          to="100"
          dur="5s"
          repeatCount="1"
          restart="whenNotActive" />
      </rect>
      <a id="restart"><text y="20">Restart animation</text></a>
    </svg>

js

    document.getElementById("restart").addEventListener("click", (evt) => {
      document.querySelectorAll("animate").forEach((element) => {
        element.beginElement();
      });
    });

Usage notes

  --------------- -----------------------------------
  Value            always |  whenNotActive |  never
  Default value    always
  Animatable      No
  --------------- -----------------------------------

 always

    This value indicates that the animation can be restarted at any
    time.

 whenNotActive

    This value indicates that the animation can only be restarted when
    it is not active (i.e. after the active end). Attempts to restart
    the animation during its active duration are ignored.

 never

    This value indicates that the animation cannot be restarted.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # RestartAttribute

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 27, 2023 by MDN contributors .
# result #

The  result attribute defines the assigned name for this filter
primitive. If supplied, then graphics that result from processing this
filter primitive can be referenced by an   in  attribute on a subsequent
filter primitive within the same  <filter> element. If no value is
provided, the output will only be available for re-use as the implicit
input into the next filter primitive if that filter primitive provides
no value for its  in attribute.

You can use this attribute with the following SVG elements:

-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feDropShadow>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 220 220" xmlns="http://www.w3.org/2000/svg">
      <filter id="displacementFilter">
        <feTurbulence
          type="turbulence"
          baseFrequency="0.05"
          numOctaves="2"
          result="turbulence" />
        <feDisplacementMap
          in2="turbulence"
          in="SourceGraphic"
          scale="50"
          xChannelSelector="R"
          yChannelSelector="G" />
      </filter>

      <circle cx="100" cy="100" r="100" style="filter: url(#displacementFilter)" />
    </svg>

Usage notes

  --------------- -------------------------------
  Value            <filter-primitive-reference>
  Default value   None
  Animatable      Yes
  --------------- -------------------------------

 <filter-primitive-reference>

    This value is a  <custom-ident> and defines the name for the filter
    primitive. It is only meaningful within a given  <filter> element
    and thus has only local scope. It is legal for the same
     <filter-primitive-reference> to appear multiple times within the
    same  <filter> element. When referenced, this value will use the
    closest preceding filter primitive with the given result.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-filter-primitive-result

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 3, 2023 by MDN contributors .
# r #

The  r attribute defines the radius of a circle.

You can use this attribute with the following SVG elements:

-    <circle>
-    <radialGradient>

When the value is set as a percentage, it refers to the normalized
diagonal of the current SVG viewport.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 300 200" xmlns="http://www.w3.org/2000/svg">
      <radialGradient r="0" id="myGradient000">
        <stop offset="0" stop-color="white" />
        <stop offset="100%" stop-color="black" />
      </radialGradient>
      <radialGradient r="50%" id="myGradient050">
        <stop offset="0" stop-color="white" />
        <stop offset="100%" stop-color="black" />
      </radialGradient>
      <radialGradient r="100%" id="myGradient100">
        <stop offset="0" stop-color="white" />
        <stop offset="100%" stop-color="black" />
      </radialGradient>

      <circle cx="50" cy="50" r="0" />
      <circle cx="150" cy="50" r="25" />
      <circle cx="250" cy="50" r="50" />

      <rect x="20" y="120" width="60" height="60" fill="url(#myGradient000)" />
      <rect x="120" y="120" width="60" height="60" fill="url(#myGradient050)" />
      <rect x="220" y="120" width="60" height="60" fill="url(#myGradient100)" />
    </svg>

circle

For  <circle> ,  r defines the radius of the circle and therefor its
size. With a value lower or equal to zero the circle won't be drawn at
all.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0
  Animatable      Yes
  --------------- -------------------------

Note: Starting with SVG2,  r is a Geometry Property meaning this
attribute can also be used as a CSS property for circles.

radialGradient

For  <radialGradient> ,  r defines the radius of the end circle for the
radial gradient.

The gradient will be drawn such that the 100% gradient stop is mapped to
the perimeter of this end circle. A value of lower or equal to zero will
cause the area to be painted as a single color using the color and
opacity of the last gradient  <stop> .

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    50%
  Animatable      Yes
  --------------- -------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # R

  Scalable Vector Graphics (SVG) 2
  # RadialGradientElementRAttribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Feb 2, 2024 by MDN contributors .
# rotate #

The  rotate attribute specifies how the animated element rotates as it
travels along a path specified in an  <animateMotion> element.

You can use this attribute with the following SVG elements:

-    <animateMotion>

Usage notes

  --------------- -----------------------------------
  Value            auto |  auto-reverse |  <number>
  Default value    0
  Animatable      No
  --------------- -----------------------------------

The  auto and  auto-reverse values allow the animated element's rotation
to change dynamically as it travels along the path. If the value of
 rotate is  auto , the element turns to align its right-hand side in the
current direction of motion. If the value is  auto-reverse , it turns
its left-hand side in the current direction of motion.

Setting  rotate 's value to a number specifies a constant rotation, in
degrees, that does not change with the animation. The default value of
 0 keeps the animated element in its original orientation.

Examples

SVG

html

    <svg
      width="400"
      height="120"
      viewBox="0 0 480 120"
      xmlns="http://www.w3.org/2000/svg">
      <!-- Draw the outline of the motion path in grey -->
      <path
        d="M10,110 A120,120 -45 0,1 110 10 A120,120 -45 0,1 10,110"
        stroke="lightgrey"
        stroke-width="2"
        fill="none"
        id="theMotionPath" />

      <!-- Red arrow which will not rotate -->
      <path fill="red" d="M-5,-5 L10,0 -5,5 0,0 Z">
        <!-- Define the motion path animation -->
        <animateMotion dur="6s" repeatCount="indefinite" rotate="0">
          <mpath href="#theMotionPath" />
        </animateMotion>
      </path>

      <g transform="translate(100, 0)">
        <use href="#theMotionPath" />
        <!-- Green arrow which will rotate along the motion path -->
        <path fill="green" d="M-5,-5 L10,0 -5,5 0,0 Z">
          <!-- Define the motion path animation -->
          <animateMotion dur="6s" repeatCount="indefinite" rotate="auto">
            <mpath href="#theMotionPath" />
          </animateMotion>
        </path>
      </g>

      <g transform="translate(200, 0)">
        <use href="#theMotionPath" />
        <!-- Blue arrow which will rotate backwards along the motion path -->
        <path fill="blue" d="M-5,-5 L10,0 -5,5 0,0 Z">
          <!-- Define the motion path animation -->
          <animateMotion dur="6s" repeatCount="indefinite" rotate="auto-reverse">
            <mpath href="#theMotionPath" />
          </animateMotion>
        </path>
      </g>

      <g transform="translate(300, 0)">
        <use href="#theMotionPath" />
        <!-- Purple arrow which will have a static rotation of 210 degrees -->
        <path fill="purple" d="M-5,-5 L10,0 -5,5 0,0 Z">
          <!-- Define the motion path animation -->
          <animateMotion dur="6s" repeatCount="indefinite" rotate="210">
            <mpath href="#theMotionPath" />
          </animateMotion>
        </path>
      </g>
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # RotateAttribute

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 22, 2023 by MDN contributors .
# rx #

The  rx attribute defines a radius on the x-axis.

You can use this attribute with the following SVG elements:

-    <ellipse>
-    <rect>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 300 200" xmlns="http://www.w3.org/2000/svg">
      <ellipse cx="50" cy="50" rx="0" ry="25" />
      <ellipse cx="150" cy="50" rx="25" ry="25" />
      <ellipse cx="250" cy="50" rx="50" ry="25" />

      <rect x="20" y="120" width="60" height="60" rx="0" ry="15" />
      <rect x="120" y="120" width="60" height="60" rx="15" ry="15" />
      <rect x="220" y="120" width="60" height="60" rx="150" ry="15" />
    </svg>

ellipse

For  <ellipse> ,  rx defines the x-radius of the shape. With a value
lower or equal to zero the ellipse won't be drawn at all.

  --------------- ---------------------------------
  Value           <length> | <percentage> |  auto
  Default value    auto
  Animatable      Yes
  --------------- ---------------------------------

Note: Starting with SVG2,  rx is a Geometry Property meaning this
attribute can also be used as a CSS property for ellipses.

rect

For  <rect> ,  rx defines the x-axis radius of the ellipse used to round
off the corners of the rectangle.

The way the value of the  rx attribute is interpreted depend on both the
  ry  attribute and the width of the rectangle:

-   If a properly specified value is provided for  rx but not for   ry 
    (or the opposite), then the browser will consider the missing value
    equal to the defined one.
-   If neither  rx nor   ry  has a properly specified value, then the
    browser will draw a rectangle with square corners.
-   If  rx is greater than half of the width of the rectangle, then the
    browser will consider the value for  rx as half of the width of the
    rectangle.

  --------------- ---------------------------------
  Value           <length> | <percentage> |  auto
  Default value    auto
  Animatable      Yes
  --------------- ---------------------------------

Note: Starting with SVG2,  rx is a Geometry Property meaning this
attribute can also be used as a CSS property for rects.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # RX

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# ry #

The  ry attribute defines a radius on the y-axis.

You can use this attribute with the following SVG elements:

-    <ellipse>
-    <rect>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 300 200" xmlns="http://www.w3.org/2000/svg">
      <ellipse cx="50" cy="50" ry="0" rx="25" />
      <ellipse cx="150" cy="50" ry="25" rx="25" />
      <ellipse cx="250" cy="50" ry="50" rx="25" />

      <rect x="20" y="120" width="60" height="60" ry="0" rx="15" />
      <rect x="120" y="120" width="60" height="60" ry="15" rx="15" />
      <rect x="220" y="120" width="60" height="60" ry="150" rx="15" />
    </svg>

ellipse

For  <ellipse> ,  ry defines the y-radius of the shape. With a value
lower or equal to zero the ellipse won't be drawn at all.

  --------------- ---------------------------------
  Value           <length> | <percentage> |  auto
  Default value    auto
  Animatable      Yes
  --------------- ---------------------------------

Note: Starting with SVG2,  ry is a Geometry Property meaning this
attribute can also be used as a CSS property for ellipses.

rect

For  <rect> ,  ry defines the y-axis radius of the ellipse used to round
off the corners of the rectangle.

The way the value of the  ry attribute is interpreted depend on both the
  rx  attribute and the width of the rectangle:

-   If a properly specified value is provided for  ry but not for   rx 
    (or the opposite), then the browser will consider the missing value
    equal to the defined one.
-   If neither  ry nor   rx  has a properly specified value, then the
    browser will draw a rectangle with square corners.
-   If  ry is greater than half of the width of the rectangle, then the
    browser will consider the value for  ry as half of the width of the
    rectangle.

  --------------- ---------------------------------
  Value           <length> | <percentage> |  auto
  Default value    auto
  Animatable      Yes
  --------------- ---------------------------------

Note: Starting with SVG2,  ry is a Geometry Property meaning this
attribute can also be used as a CSS property for rects.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # RY

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# scale #

The  scale attribute defines the displacement scale factor to be used on
a  <feDisplacementMap> filter primitive. The amount is expressed in the
coordinate system established by the   primitiveUnits  attribute on the
 <filter> element.

You can use this attribute with the following SVG elements:

-    <feDisplacementMap>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 480 220" xmlns="http://www.w3.org/2000/svg">
      <filter id="displacementFilter" x="-20%" y="-20%" width="140%" height="140%">
        <feTurbulence
          type="turbulence"
          baseFrequency="0.05"
          numOctaves="2"
          result="turbulence" />
        <feDisplacementMap in2="turbulence" in="SourceGraphic" scale="5" />
      </filter>
      <filter id="displacementFilter2" x="-20%" y="-20%" width="140%" height="140%">
        <feTurbulence
          type="turbulence"
          baseFrequency="0.05"
          numOctaves="2"
          result="turbulence" />
        <feDisplacementMap in2="turbulence" in="SourceGraphic" scale="50" />
      </filter>

      <circle cx="100" cy="100" r="80" style="filter: url(#displacementFilter);""/>
      <circle cx="100" cy="100" r="80" style="filter: url(#displacementFilter2);
      transform: translateX(240px);""/>
    </svg>

Usage notes

  --------------- -----------
  Value            <number>
  Default value   None
  Animatable      Yes
  --------------- -----------

 <number>

    This value defines the scale factor for the displacement.

    When the value of this attribute is  0 , this operation has no
    effect on the source image.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fedisplacementmap-scale

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# seed #

The  seed attribute represents the starting number for the pseudo random
number generator of the  <feTurbulence> filter primitive.

You can use this attribute with the following SVG elements:

-    <feTurbulence>

Example

Example 1

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="noise1" x="0" y="0" width="100%" height="100%">
        <feTurbulence baseFrequency="0.025" seed="0" />
      </filter>
      <filter id="noise2" x="0" y="0" width="100%" height="100%">
        <feTurbulence baseFrequency="0.025" seed="100" />
      </filter>

      <rect x="0" y="0" width="200" height="200" style="filter:url(#noise1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter:url(#noise2); transform: translateX(220px);" />
    </svg>

Example 2

html

    <svg
      width="200"
      height="200"
      viewBox="0 0 220 220"
      xmlns="http://www.w3.org/2000/svg">
      <filter id="displacementFilter">
        <feTurbulence baseFrequency="0.05" seed="1000" result="turbulence" />
        <feDisplacementMap
          in2="turbulence"
          in="SourceGraphic"
          scale="50"
          xChannelSelector="R"
          yChannelSelector="G" />
      </filter>

      <circle cx="100" cy="100" r="100" style="filter: url(#displacementFilter)" />
    </svg>

Usage notes

  --------------- -----------
  Value            <number>
  Default value    0
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-feturbulence-seed

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# shape-rendering #

The  shape-rendering attribute provides hints to the renderer about what
tradeoffs to make when rendering shapes like paths, circles, or
rectangles.

Note: As a presentation attribute,  shape-rendering can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <circle>
-    <ellipse>
-    <line>
-    <path>
-    <polygon>
-    <polyline>
-    <rect>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <circle cx="100" cy="100" r="100" shape-rendering="geometricPrecision" />
      <circle cx="320" cy="100" r="100" shape-rendering="crispEdges" />
    </svg>

Usage notes

  --------------- ------------------------------------------------------------
  Value            auto |  optimizeSpeed |  crispEdges |  geometricPrecision
  Default value    auto
  Animatable      discrete
  --------------- ------------------------------------------------------------

 auto

    This value indicates that the user agent shall make appropriate
    tradeoffs to balance speed, crisp edges and geometric precision, but
    with geometric precision given more importance than speed and crisp
    edges.

 optimizeSpeed

    This value indicates that the user agent shall emphasize rendering
    speed over geometric precision and crisp edges. This option will
    sometimes cause the user agent to turn off shape anti-aliasing.

 crispEdges

    This value indicates that the user agent shall attempt to emphasize
    the contrast between clean edges of artwork over rendering speed and
    geometric precision. To achieve crisp edges, the user agent might
    turn off anti-aliasing for all lines and curves or possibly just for
    straight lines which are close to vertical or horizontal. Also, the
    user agent might adjust line positions and line widths to align
    edges with device pixels.

 geometricPrecision

    Indicates that the user agent shall emphasize geometric precision
    over speed and crisp edges.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # ShapeRendering

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# side #

Experimental: This is an experimental technology
Check the Browser compatibility table carefully before using this in
production.

The  side attribute determines the side of a path the text is placed on
(relative to the path direction).

You can use this attribute with the following SVG elements:

-    <textPath>

Example

    html,
    body,
    svg {
      height: 100%;
    }

    text {
      font:
        25px Arial,
        Helvetica,
        sans-serif;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <text>
        <textPath href="#circle1" side="left">Text left from the path</textPath>
      </text>
      <text>
        <textPath href="#circle2" side="right">Text right from the path</textPath>
      </text>

      <circle
        id="circle1"
        cx="100"
        cy="100"
        r="70"
        fill="transparent"
        stroke="silver" />
      <circle
        id="circle2"
        cx="320"
        cy="100"
        r="70"
        fill="transparent"
        stroke="silver" />
    </svg>

Usage notes

  --------------- ----------------
  Value            left |  right
  Default value    left
  Animatable      Yes
  --------------- ----------------

 left

    This value places the text on the left side of the path (relative to
    the path direction).

 right

    This value places the text on the right side of the path (relative
    to the path direction). This effectively reverses the path
    direction.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # TextPathElementSideAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 7, 2023 by MDN contributors .
# slope #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  slope attribute indicates the vertical stroke angle of a font.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- -------------
  Value             <number> 
  Default value    0
  Animatable      No
  --------------- -------------

 <number>

    This value indicates the vertical stroke angle of the font.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementSlopeAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# spacing #

The  spacing attribute indicates how the user agent should determine the
spacing between typographic characters that are to be rendered along a
path.

You can use this attribute with the following SVG elements:

-    <textPath>

Usage notes

  --------------- ----------------
  Value            auto |  exact
  Default value    exact
  Animatable      Yes
  --------------- ----------------

 auto

    This value indicates that the user agent should use text-on-a-path
    layout algorithms to adjust the spacing between typographic
    characters in order to achieve visually appealing results.

 exact

    This value indicates that the typographic characters should be
    rendered exactly according to the spacing rules as specified by the
    layout rules for text-on-a-path.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # TextPathElementSpacingAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# specularConstant #

The  specularConstant attribute controls the ratio of reflection of the
specular lighting. It represents the k _(s) value in the Phong lighting
model . The bigger the value the stronger the reflection.

You can use this attribute with the following SVG elements:

-    <feSpecularLighting>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="specularLighting1" x="0" y="0" width="100%" height="100%">
        <feSpecularLighting in="SourceGraphic" specularConstant="1.2">
          <fePointLight x="60" y="60" z="20" />
        </feSpecularLighting>
      </filter>
      <filter id="specularLighting2" x="0" y="0" width="100%" height="100%">
        <feSpecularLighting in="SourceGraphic" specularConstant="0.8">
          <fePointLight x="60" y="60" z="20" />
        </feSpecularLighting>
      </filter>

      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#specularLighting1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#specularLighting2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- -----------
  Value            <number>
  Default value    1
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fespecularlighting-specularconstant

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Description of Phong reflection model on Wikipedia

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# specularExponent #

The  specularExponent attribute controls the focus for the light source.
The bigger the value the brighter the light.

You can use this attribute with the following SVG elements:

-    <feSpecularLighting>
-    <feSpotLight>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="diffuseLighting1" x="0" y="0" width="100%" height="100%">
        <feSpecularLighting in="SourceGraphic" specularExponent="1">
          <fePointLight x="60" y="60" z="20" />
        </feSpecularLighting>
      </filter>
      <filter id="diffuseLighting2" x="0" y="0" width="100%" height="100%">
        <feSpecularLighting in="SourceGraphic" specularExponent="5">
          <fePointLight x="60" y="60" z="20" />
        </feSpecularLighting>
      </filter>

      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#diffuseLighting1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#diffuseLighting2); transform: translateX(220px);" />
    </svg>

feSpecularLighting

For  <feSpecularLighting> ,  specularExponent defines the exponent value
for the specular term.

  --------------- -----------
  Value            <number>
  Default value    1
  Animatable      Yes
  --------------- -----------

feSpotLight

For  <feSpotLight> ,  specularExponent defines the exponent value
controlling the focus for the light source.

  --------------- -----------
  Value            <number>
  Default value    1
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fespecularlighting-specularexponent

  Filter Effects Module Level 1
  # element-attrdef-fespotlight-specularexponent
  -----------------------------------------------------------------------

See also

-   Description of Phong reflection model on Wikipedia

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 3, 2023 by MDN contributors .
# spreadMethod #

The  spreadMethod attribute determines how a shape is filled beyond the
defined edges of a gradient.

You can use this attribute with the following SVG elements:

-    <linearGradient>
-    <radialGradient>

Context notes

  --------------- ---------------------------
  Value            pad |  reflect |  repeat
  Initial value    pad
  Animatable      Yes
  --------------- ---------------------------

 pad

    This value indicates that the final color of the gradient fills the
    shape beyond the gradient's edges.

 reflect

    This value indicates that the gradient repeats in reverse beyond its
    edges.

 repeat

    This value specifies that the gradient repeats in the original order
    beyond its edges.

Defining a gradient's edges

By default, a gradient reaches to the edges of the shape being filled.
To see the effects of this attribute, you will need to set the size of
the gradient smaller than the shape.

In the case of a linear gradient, the edges may be defined as a
rectangle by the  x1 ,  x2 ,  y1 and  y2 attributes. In the case of a
radial gradient, the edges may be defined as outer and inner circles by
the  cx ,  cy and  r (outer) and  fx ,  fy and  fr (inner) attributes.

Examples of spreadMethod with linear gradients

SVG

html

    <svg width="220" height="150" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <linearGradient id="PadGradient" x1="33%" x2="67%">
          <stop offset="0%" stop-color="fuchsia" />
          <stop offset="100%" stop-color="orange" />
        </linearGradient>
        <linearGradient
          id="ReflectGradient"
          spreadMethod="reflect"
          x1="33%"
          x2="67%">
          <stop offset="0%" stop-color="fuchsia" />
          <stop offset="100%" stop-color="orange" />
        </linearGradient>
        <linearGradient id="RepeatGradient" spreadMethod="repeat" x1="33%" x2="67%">
          <stop offset="0%" stop-color="fuchsia" />
          <stop offset="100%" stop-color="orange" />
        </linearGradient>
      </defs>

      <rect fill="url(#PadGradient)" x="10" y="0" width="200" height="40" />
      <rect fill="url(#ReflectGradient)" x="10" y="50" width="200" height="40" />
      <rect fill="url(#RepeatGradient)" x="10" y="100" width="200" height="40" />
    </svg>

Result

Notice that the middle third of each gradient is the same. The outer
thirds show the difference between the three spread methods.

Examples of spreadMethod with radial gradients

SVG

html

    <svg width="340" height="120" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <radialGradient
          id="RadialPadGradient"
          cx="75%"
          cy="25%"
          r="33%"
          fx="64%"
          fy="18%"
          fr="17%">
          <stop offset="0%" stop-color="fuchsia" />
          <stop offset="100%" stop-color="orange" />
        </radialGradient>
        <radialGradient
          id="RadialReflectGradient"
          spreadMethod="reflect"
          cx="75%"
          cy="25%"
          r="33%"
          fx="64%"
          fy="18%"
          fr="17%">
          <stop offset="0%" stop-color="fuchsia" />
          <stop offset="100%" stop-color="orange" />
        </radialGradient>
        <radialGradient
          id="RadialRepeatGradient"
          spreadMethod="repeat"
          cx="75%"
          cy="25%"
          r="33%"
          fx="64%"
          fy="18%"
          fr="17%">
          <stop offset="0%" stop-color="fuchsia" />
          <stop offset="100%" stop-color="orange" />
        </radialGradient>
      </defs>

      <rect fill="url(#RadialPadGradient)" x="10" y="10" width="100" height="100" />
      <rect
        fill="url(#RadialReflectGradient)"
        x="120"
        y="10"
        width="100"
        height="100" />
      <rect
        fill="url(#RadialRepeatGradient)"
        x="230"
        y="10"
        width="100"
        height="100" />
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # LinearGradientElementSpreadMethodAttribute

  Scalable Vector Graphics (SVG) 2
  # RadialGradientElementSpreadMethodAttribute
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# startOffset #

The  startOffset attribute defines an offset from the start of the path
for the initial current text position along the path after converting
the path to the  <textPath> element's coordinate system.

You can use this attribute with the following SVG elements:

-    <textPath>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 220 100" xmlns="http://www.w3.org/2000/svg">
      <path
        id="path1"
        fill="none"
        stroke="red"
        d="M10,90 Q90,90 90,45 Q90,10 50,10 Q10,10 10,40 Q10,70 45,70 Q70,70 75,50" />
      <path
        id="path2"
        fill="none"
        stroke="red"
        d="M130,90 Q210,90 210,45 Q210,10 170,10 Q130,10 130,40 Q130,70 165,70 Q190,70 195,50" />

      <text>
        <textPath href="#path1" startOffset="0">
          Quick brown fox jumps over the lazy dog.
        </textPath>
      </text>

      <text>
        <textPath href="#path2" startOffset="40">
          Quick brown fox jumps over the lazy dog.
        </textPath>
      </text>
    </svg>

Usage notes

  --------------- ----------------------------------
  Value            <length-percentage> |  <number>
  Default value    0
  Animatable      Yes
  --------------- ----------------------------------

 <length-percentage>

    A length represents a distance along the path measured in the
    current user coordinate system for the  <textPath> element.

    If a percentage is given, then the start offset represents a
    percentage distance along the entire path. Thus,  0% indicates the
    start point of the path and  100% indicates the end point of the
    path.

 <number>

    This value indicates a distance along the path measured in the
    current user coordinate system for the  <textPath> element.

Note: Negative values and values larger than the path length (e.g.  150%
) are allowed.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # TextPathElementStartOffsetAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# stdDeviation #

The  stdDeviation attribute defines the standard deviation for the blur
operation.

You can use this attribute with the following SVG elements:

-    <feGaussianBlur>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 480 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="gaussianBlur1">
        <feGaussianBlur stdDeviation="1" />
      </filter>
      <filter id="gaussianBlur2">
        <feGaussianBlur stdDeviation="5" />
      </filter>
      <filter id="gaussianBlur3" x="-30%" y="-30%" width="160%" height="160%">
        <feGaussianBlur stdDeviation="10" />
      </filter>

      <circle cx="100" cy="100" r="50" style="filter: url(#gaussianBlur1);" />
      <circle
        cx="100"
        cy="100"
        r="50"
        style="filter: url(#gaussianBlur2); transform: translateX(140px);" />
      <circle
        cx="100"
        cy="100"
        r="50"
        style="filter: url(#gaussianBlur3); transform: translateX(280px);" />
    </svg>

Usage notes

  --------------- -----------------------------
  Value             <number-optional-number> 
  Default value    0
  Animatable      Yes
  --------------- -----------------------------

 <number-optional-number>

    If two numbers are provided, the first number represents a standard
    deviation value along the x-axis. The second value represents a
    standard deviation along the y-axis. If one number is provided, then
    that value is used for both X and Y.

    A negative value is forbidden. A value of zero disables the effect
    of the given filter primitive (i.e., the result is the filter input
    image). If  stdDeviation is 0 in only one of X or Y, then the effect
    is that the blur is only applied in the direction that has a
    non-zero value.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fegaussianblur-stddeviation

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# stemh #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  stemh attribute indicates the horizontal stem width of the font.

The stem width refers to the dominant stem of the font. There may be two
or more designed widths. For example, the main vertical stems of Roman
characters will differ from the thin stems on serifed "M" and "N", plus
there may be different widths for uppercase and lowercase characters in
the same font. Also, either by design or by error, all stems may have
slightly different widths.

If this attribute is used, the   units-per-em  must also be used.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- -------------
  Value             <number> 
  Default value   None
  Animatable      No
  --------------- -------------

 <number>

    This value indicates the horizontal stem width of the font.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementStemhAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     stemv 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# stemv #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  stemv attribute indicates the vertical stem width of the font.

The vertical stem width is the width of vertical (or near-vertical)
stems of glyphs . This information is often tied to hinting, and may not
be directly accessible in some font formats. The measurement is meant
for the dominant vertical stem in the font because there might be
different groupings of vertical stems (e.g., one main one, and one
lighter weight one as for an uppercase "M" or "N").

If this attribute is used, the   units-per-em  must also be used.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- -------------
  Value             <number> 
  Default value   None
  Animatable      No
  --------------- -------------

 <number>

    This value indicates the vertical stem width of the font.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementStemvAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     stemh 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# stitchTiles #

The  stitchTiles attribute defines how the Perlin Noise tiles behave at
the border.

You can use this attribute with the following SVG elements:

-    <feTurbulence>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="noise1" x="0" y="0" width="100%" height="100%">
        <feTurbulence baseFrequency="0.025" stitchTiles="noStitch" />
      </filter>
      <filter id="noise2" x="0" y="0" width="100%" height="100%">
        <feTurbulence baseFrequency="0.025" stitchTiles="stitch" />
      </filter>

      <rect x="0" y="0" width="100" height="100" style="filter: url(#noise1);" />
      <rect
        x="0"
        y="0"
        width="100"
        height="100"
        style="filter: url(#noise1); transform: translate(100px, 0);" />
      <rect
        x="0"
        y="0"
        width="100"
        height="100"
        style="filter: url(#noise1); transform: translate(0, 100px);" />
      <rect
        x="0"
        y="0"
        width="100"
        height="100"
        style="filter: url(#noise1); transform: translate(100px, 100px);" />

      <rect
        x="0"
        y="0"
        width="100"
        height="100"
        style="filter: url(#noise2); transform: translate(220px, 0);" />
      <rect
        x="0"
        y="0"
        width="100"
        height="100"
        style="filter: url(#noise2); transform: translate(320px, 0);" />
      <rect
        x="0"
        y="0"
        width="100"
        height="100"
        style="filter: url(#noise2); transform: translate(220px, 100px);" />
      <rect
        x="0"
        y="0"
        width="100"
        height="100"
        style="filter: url(#noise2); transform: translate(320px, 100px);" />
    </svg>

Usage notes

  --------------- ---------------------
  Value            noStitch |  stitch
  Default value    noStitch
  Animatable      Yes
  --------------- ---------------------

 noStitch

    This value indicates that no attempt is made to achieve smooth
    transitions at the border of tiles which contain a turbulence
    function. Sometimes the result will show clear discontinuities at
    the tile borders.

 stitch

    This value indicates that the user agent will automatically adjust
    the x and y values of the base frequency such that the
     <feTurbulence> node's width and height (i.e., the width and height
    of the current subregion) contain an integral number of the tile
    width and height for the first octave.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-feturbulence-stitchtiles

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# stop-color #

The  stop-color attribute indicates what color to use at a gradient
stop.

Note: With respect to gradients, SVG treats the  transparent keyword
differently than CSS. SVG does not calculate gradients in pre-multiplied
space, so  transparent really means transparent black. So, specifying a
 stop-color with the value  transparent is equivalent to specifying a
 stop-color with the value  black and a   stop-opacity  with the value
 0 .

Note: As a presentation attribute,  stop-color can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <stop>

Usage notes

  --------------- ----------------------------------------
  Value            currentcolor |  <color>   <icccolor> 
  Default value    black
  Animatable      Yes
  --------------- ----------------------------------------

 currentcolor

    This keyword denotes the current fill color and can be specified in
    the same manner as within a  <paint> specification for the   fill 
    and   stroke  attributes.

 <color>

    This value indicates a color value.

 <icccolor>

    This value refers to an ICC color profile.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # StopColorProperty

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     stop-opacity 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# stop-opacity #

The  stop-opacity attribute defines the opacity of a given color
gradient stop.

The opacity value used for the gradient calculation is the product of
the value of  stop-opacity and the opacity of the value of the
  stop-color  attribute. For  stop-color values that don't include
explicit opacity information, the opacity is treated as  1 .

Note: As a presentation attribute,  stop-opacity can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <stop>

Usage notes

  --------------- --------------------
  Value             <opacity-value> 
  Default value    1
  Animatable      Yes
  --------------- --------------------

 <opacity-value>

    This value is either a  <number> between  0 and  1 or a
     <percentage> value specifying the opacity of the color gradient
    stop.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # StopOpacityProperty

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     stop-color 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# strikethrough-position #

The  strikethrough-position attribute represents the ideal vertical
position of the strikethrough. The strikethrough position is expressed
in the font's coordinate system.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage context

  -------------------- -----------------------
  Categories           None
  Value                <number>
  Animatable           No
  Normative document   SVG 1.1 (2nd Edition)
  -------------------- -----------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 22, 2023 by MDN contributors .
# strikethrough-thickness #

The  strikethrough-thickness attribute represents the ideal thickness of
the strikethrough. The strikethrough thickness is expressed in the
font's coordinate system.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage context

  -------------------- -----------------------
  Categories           None
  Value                <number>
  Animatable           No
  Normative document   SVG 1.1 (2nd Edition)
  -------------------- -----------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 22, 2023 by MDN contributors .
# string #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  string attribute is a hint to the user agent, and specifies a list
of formats that the font referenced by the parent  <font-face-uri>
element supports.

You can use this attribute with the following SVG elements:

-    <font-face-format>

Usage notes

  --------------- ---------------
  Value             <anything> 
  Default value   None
  Animatable      No
  --------------- ---------------

 <anything>

    This value specifies a list of formats that are supported by the
    font referenced by the parent  <font-face-uri> element.

    The available types are:  "woff" ,  "woff2" ,  "truetype" ,
     "opentype" ,  "embedded-opentype" , and  "svg" . See the  src
    descriptor of the  @font-face at-rule for more information.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceFormatElementStringAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# stroke-dasharray #

The  stroke-dasharray attribute is a presentation attribute defining the
pattern of dashes and gaps used to paint the outline of the shape;

Note: As a presentation attribute,  stroke-dasharray can be used as a
CSS property.

You can use this attribute with the following SVG elements:

-    <circle>
-    <ellipse>
-    <path>
-    <line>
-    <polygon>
-    <polyline>
-    <rect>
-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 30 12" xmlns="http://www.w3.org/2000/svg">
      <style>
        line {
          stroke: black;
        }
      </style>
      <!-- No dashes nor gaps -->
      <line x1="0" y1="1" x2="30" y2="1" />

      <!-- Dashes and gaps of the same size -->
      <line x1="0" y1="3" x2="30" y2="3" stroke-dasharray="4" />

      <!-- Dashes and gaps of different sizes -->
      <line x1="0" y1="5" x2="30" y2="5" stroke-dasharray="4 1" />

      <!-- Dashes and gaps of various sizes with an odd number of values -->
      <line x1="0" y1="7" x2="30" y2="7" stroke-dasharray="4 1 2" />

      <!-- Dashes and gaps of various sizes with an even number of values -->
      <line x1="0" y1="9" x2="30" y2="9" stroke-dasharray="4 1 2 3" />

      <!-- Dashes starting with a gap -->
      <line x1="0" y1="11" x2="30" y2="11" stroke-dasharray="0 4 0" />
    </svg>

Usage notes

  --------------- ----------------------
  Value            none |  <dasharray>
  Default value    none
  Animatable      Yes
  --------------- ----------------------

<dasharray>

    A list of comma and/or white space separated  <length> s and
     <percentage> s that specify the lengths of alternating dashes and
    gaps.

    If an odd number of values is provided, then the list of values is
    repeated to yield an even number of values. Thus,  5,3,2 is
    equivalent to  5,3,2,5,3,2 .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # StrokeDashing

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 14, 2023 by MDN contributors .
# stroke-dashoffset #

The  stroke-dashoffset attribute is a presentation attribute defining an
offset on the rendering of the associated dash array.

Note: As a presentation attribute  stroke-dashoffset can be used as a
CSS property.

You can use this attribute with the following SVG elements:

-    <circle>
-    <ellipse>
-    <path>
-    <line>
-    <polygon>
-    <polyline>
-    <rect>
-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="-3 0 33 10" xmlns="http://www.w3.org/2000/svg">
      <!-- No dash array -->
      <line x1="0" y1="1" x2="30" y2="1" stroke="black" />

      <!-- No dash offset -->
      <line x1="0" y1="3" x2="30" y2="3" stroke="black" stroke-dasharray="3 1" />

      <!--
      The start of the dash array computation
      is pulled by 3 user units
      -->
      <line
        x1="0"
        y1="5"
        x2="30"
        y2="5"
        stroke="black"
        stroke-dasharray="3 1"
        stroke-dashoffset="3" />

      <!--
      The start of the dash array computation
      is pushed by 3 user units
      -->
      <line
        x1="0"
        y1="7"
        x2="30"
        y2="7"
        stroke="black"
        stroke-dasharray="3 1"
        stroke-dashoffset="-3" />

      <!--
      The start of the dash array computation
      is pulled by 1 user units which ends up
      in the same rendering as the previous example
      -->
      <line
        x1="0"
        y1="9"
        x2="30"
        y2="9"
        stroke="black"
        stroke-dasharray="3 1"
        stroke-dashoffset="1" />

      <!--
      the following red lines highlight the
      offset of the dash array for each line
      -->
      <path d="M0,5 h-3 M0,7 h3 M0,9 h-1" stroke="rgb(255 0 0 / 50%)" />
    </svg>

Usage notes

  --------------- -------------------------
  Value           <percentage> | <length>
  Default value    0
  Animatable      Yes
  --------------- -------------------------

The offset is usually expressed in user units resolved against the
  pathLength  but if a <percentage> is used, the value is resolved as a
percentage of the current viewport.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # StrokeDashoffsetProperty

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 15, 2024 by MDN contributors .
# stroke #

The  stroke attribute is a presentation attribute defining the color (
or any SVG paint servers like gradients or patterns ) used to paint the
outline of the shape;

Note: As a presentation attribute  stroke can be used as a CSS property.

You can use this attribute with the following SVG elements:

-    <circle>
-    <ellipse>
-    <line>
-    <path>
-    <polygon>
-    <polyline>
-    <rect>
-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 20 10" xmlns="http://www.w3.org/2000/svg">
      <!-- Simple color stroke -->
      <circle cx="5" cy="5" r="4" fill="none" stroke="green" />

      <!-- Stroke a circle with a gradient -->
      <defs>
        <linearGradient id="myGradient">
          <stop offset="0%" stop-color="green" />
          <stop offset="100%" stop-color="white" />
        </linearGradient>
      </defs>

      <circle cx="15" cy="5" r="4" fill="none" stroke="url(#myGradient)" />
    </svg>

Usage notes

  --------------- ---------
  Value           <paint>
  Default value    none
  Animatable      Yes
  --------------- ---------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # SpecifyingStrokePaint

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# stroke-linecap #

The  stroke-linecap attribute is a presentation attribute defining the
shape to be used at the end of open subpaths when they are stroked.

Note: As a presentation attribute  stroke-linecap can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <path>
-    <polyline>
-    <line>
-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 6 6" xmlns="http://www.w3.org/2000/svg">
      <!-- Effect of the (default) "butt" value -->
      <line x1="1" y1="1" x2="5" y2="1" stroke="black" stroke-linecap="butt" />

      <!-- Effect of the "round" value -->
      <line x1="1" y1="3" x2="5" y2="3" stroke="black" stroke-linecap="round" />

      <!-- Effect of the "square" value -->
      <line x1="1" y1="5" x2="5" y2="5" stroke="black" stroke-linecap="square" />

      <!--
      the following pink lines highlight the
      position of the path for each stroke
      -->
      <path d="M1,1 h4 M1,3 h4 M1,5 h4" stroke="pink" stroke-width="0.025" />
    </svg>

Usage notes

  --------------- --------------------------
  Value            butt |  round |  square
  Default value    butt
  Animatable      discrete
  --------------- --------------------------

butt

The  butt value indicates that the stroke for each subpath does not
extend beyond its two endpoints. On a zero length subpath, the path will
not be rendered at all.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 6 4" xmlns="http://www.w3.org/2000/svg">
      <!-- Effect of the "butt" value -->
      <path d="M1,1 h4" stroke="black" stroke-linecap="butt" />

      <!-- Effect of the "butt" value on a zero length path -->
      <path d="M3,3 h0" stroke="black" stroke-linecap="butt" />

      <!--
      the following pink lines highlight the
      position of the path for each stroke
      -->
      <path d="M1,1 h4" stroke="pink" stroke-width="0.025" />
      <circle cx="1" cy="1" r="0.05" fill="pink" />
      <circle cx="5" cy="1" r="0.05" fill="pink" />
      <circle cx="3" cy="3" r="0.05" fill="pink" />
    </svg>

round

The  round value indicates that at the end of each subpath the stroke
will be extended by a half circle with a diameter equal to the stroke
width. On a zero length subpath, the stroke consists of a full circle
centered at the subpath's point.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 6 4" xmlns="http://www.w3.org/2000/svg">
      <!-- Effect of the "round" value -->
      <path d="M1,1 h4" stroke="black" stroke-linecap="round" />

      <!-- Effect of the "round" value on a zero length path -->
      <path d="M3,3 h0" stroke="black" stroke-linecap="round" />

      <!--
      the following pink lines highlight the
      position of the path for each stroke
      -->
      <path d="M1,1 h4" stroke="pink" stroke-width="0.025" />
      <circle cx="1" cy="1" r="0.05" fill="pink" />
      <circle cx="5" cy="1" r="0.05" fill="pink" />
      <circle cx="3" cy="3" r="0.05" fill="pink" />
    </svg>

square

The  square value indicates that at the end of each subpath the stroke
will be extended by a rectangle with a width equal to half the width of
the stroke and a height equal to the width of the stroke. On a zero
length subpath, the stroke consists of a square with its width equal to
the stroke width, centered at the subpath's point.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 6 4" xmlns="http://www.w3.org/2000/svg">
      <!-- Effect of the "square" value -->
      <path d="M1,1 h4" stroke="black" stroke-linecap="square" />

      <!-- Effect of the "square" value on a zero length path -->
      <path d="M3,3 h0" stroke="black" stroke-linecap="square" />

      <!--
      the following pink lines highlight the
      position of the path for each stroke
      -->
      <path d="M1,1 h4" stroke="pink" stroke-width="0.025" />
      <circle cx="1" cy="1" r="0.05" fill="pink" />
      <circle cx="5" cy="1" r="0.05" fill="pink" />
      <circle cx="3" cy="3" r="0.05" fill="pink" />
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # LineCaps

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# stroke-linejoin #

The  stroke-linejoin attribute is a presentation attribute defining the
shape to be used at the corners of paths when they are stroked.

Note: As a presentation attribute  stroke-linejoin can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <path>
-    <polygon>
-    <polyline>
-    <rect>
-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 18 12" xmlns="http://www.w3.org/2000/svg">
      <!--
      Upper left path:
      Effect of the "miter" value
      -->
      <path
        d="M1,5 a2,2 0,0,0 2,-3 a3,3 0 0 1 2,3.5"
        stroke="black"
        fill="none"
        stroke-linejoin="miter" />

      <!--
      Center path:
      Effect of the "round" value
      -->
      <path
        d="M7,5 a2,2 0,0,0 2,-3 a3,3 0 0 1 2,3.5"
        stroke="black"
        fill="none"
        stroke-linejoin="round" />

      <!--
      Upper right path:
      Effect of the "bevel" value
      -->
      <path
        d="M13,5 a2,2 0,0,0 2,-3 a3,3 0 0 1 2,3.5"
        stroke="black"
        fill="none"
        stroke-linejoin="bevel" />

      <!--
      Bottom left path:
      Effect of the "miter-clip" value
      with fallback to "miter" if not supported.
      -->
      <path
        d="M3,11 a2,2 0,0,0 2,-3 a3,3 0 0 1 2,3.5"
        stroke="black"
        fill="none"
        stroke-linejoin="miter-clip" />

      <!--
      Bottom right path:
      Effect of the "arcs" value
      with fallback to "miter" if not supported.
      -->
      <path
        d="M9,11 a2,2 0,0,0 2,-3 a3,3 0 0 1 2,3.5"
        stroke="black"
        fill="none"
        stroke-linejoin="arcs" />

      <!--
      the following pink lines highlight the
      position of the path for each stroke
      -->
      <g id="highlight">
        <path
          d="M1,5 a2,2 0,0,0 2,-3 a3,3 0 0 1 2,3.5"
          stroke="pink"
          fill="none"
          stroke-width="0.025" />
        <circle cx="1" cy="5" r="0.05" fill="pink" />
        <circle cx="3" cy="2" r="0.05" fill="pink" />
        <circle cx="5" cy="5.5" r="0.05" fill="pink" />
      </g>
      <use href="#highlight" x="6" />
      <use href="#highlight" x="12" />
      <use href="#highlight" x="2" y="6" />
      <use href="#highlight" x="8" y="6" />
    </svg>

Usage context

  --------------- ------------------------------------------------
  Value            arcs |  bevel |  miter |  miter-clip |  round
  Default value    miter
  Animatable      discrete
  --------------- ------------------------------------------------

arcs

Note: The  arcs value as been introduced in SVG2 and it isn't widely
supported yet, see Browser compatibility below for details.

The  arcs value indicates that an arcs corner is to be used to join path
segments. The arcs shape is formed by extending the outer edges of the
stroke at the join point with arcs that have the same curvature as the
outer edges at the join point.

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 6 6" xmlns="http://www.w3.org/2000/svg">
      <!-- Effect of the "arcs" value -->
      <path
        d="M1,5 a2,2 0,0,0 2,-3 a3,3 0 0 1 2,3"
        stroke="black"
        fill="none"
        stroke-linejoin="arcs" />

      <!--
      the following pink lines highlight the
      position of the path for each stroke
      -->
      <g id="p">
        <path
          d="M1,5 a2,2 0,0,0 2,-3 a3,3 0 0 1 2,3"
          stroke="pink"
          fill="none"
          stroke-width="0.025" />
        <circle cx="1" cy="5" r="0.05" fill="pink" />
        <circle cx="3" cy="2" r="0.05" fill="pink" />
        <circle cx="5" cy="5" r="0.05" fill="pink" />
      </g>
    </svg>

bevel

The  bevel value indicates that a bevelled corner is to be used to join
path segments.

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 6 6" xmlns="http://www.w3.org/2000/svg">
      <!-- Effect of the "bevel" value -->
      <path
        d="M1,5 l2,-3 l2,3"
        stroke="black"
        fill="none"
        stroke-linejoin="bevel" />

      <!--
      the following pink lines highlight the
      position of the path for each stroke
      -->
      <g id="p">
        <path d="M1,5 l2,-3 l2,3" stroke="pink" fill="none" stroke-width="0.025" />
        <circle cx="1" cy="5" r="0.05" fill="pink" />
        <circle cx="3" cy="2" r="0.05" fill="pink" />
        <circle cx="5" cy="5" r="0.05" fill="pink" />
      </g>
    </svg>

miter

The  miter value indicates that a sharp corner is to be used to join
path segments. The corner is formed by extending the outer edges of the
stroke at the tangents of the path segments until they intersect.

Note: If the   stroke-miterlimit  is exceeded, the line join falls back
to  bevel .

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 -1 10 7" xmlns="http://www.w3.org/2000/svg">
      <!-- Effect of the "miter" value -->
      <path
        d="M1,5 l2,-3 l2,3"
        stroke="black"
        fill="none"
        stroke-linejoin="miter" />

      <!-- Effect of the "miter" value on a sharp angle
           where de default miter limit is exceeded -->
      <path
        d="M7,5 l0.75,-3 l0.75,3"
        stroke="black"
        fill="none"
        stroke-linejoin="miter" />

      <!-- the following red dotted line show where
           the miter value falls back to the bevel value -->
      <path
        d="M0,0 h10"
        stroke="red"
        stroke-dasharray="0.05"
        stroke-width="0.025" />

      <!-- the following pink lines highlight the position of the path for each stroke -->
      <g>
        <path d="M1,5 l2,-3 l2,3" stroke="pink" fill="none" stroke-width="0.025" />
        <circle cx="1" cy="5" r="0.05" fill="pink" />
        <circle cx="3" cy="2" r="0.05" fill="pink" />
        <circle cx="5" cy="5" r="0.05" fill="pink" />

        <path
          d="M7,5 l0.75,-3 l0.75,3"
          stroke="pink"
          fill="none"
          stroke-width="0.025" />
        <circle cx="7" cy="5" r="0.05" fill="pink" />
        <circle cx="7.75" cy="2" r="0.05" fill="pink" />
        <circle cx="8.5" cy="5" r="0.05" fill="pink" />
      </g>
    </svg>

miter-clip

Note: the  miter-clip value as been introduced in SVG2 and it isn't
widely supported yet, see Browser compatibility below for details.

The  miter-clip value indicates that a sharp corner is to be used to
join path segments. The corner is formed by extending the outer edges of
the stroke at the tangents of the path segments until they intersect.

If the   stroke-miterlimit  is exceeded, the miter is clipped at a
distance equal to half the   stroke-miterlimit  value multiplied by the
stroke width from the intersection of the path segments. This provides a
better rendering than  miter on very sharp join or in case of an
animation.

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 -1 10 7" xmlns="http://www.w3.org/2000/svg">
      <!-- Effect of the "miter-clip" value -->
      <path
        d="M1,5 l2,-3 l2,3"
        stroke="black"
        fill="none"
        stroke-linejoin="miter-clip" />

      <!-- Effect of the "miter-clip" value on a sharp angle
           where de default miter limit is exceeded -->
      <path
        d="M7,5 l0.75,-3 l0.75,3"
        stroke="black"
        fill="none"
        stroke-linejoin="miter-clip" />

      <!-- the following red dotted line show where the clip should happen -->
      <path
        d="M0,0 h10"
        stroke="red"
        stroke-dasharray="0.05"
        stroke-width="0.025" />

      <!-- the following pink lines highlight the position of the path for each stroke -->
      <g>
        <path d="M1,5 l2,-3 l2,3" stroke="pink" fill="none" stroke-width="0.025" />
        <circle cx="1" cy="5" r="0.05" fill="pink" />
        <circle cx="3" cy="2" r="0.05" fill="pink" />
        <circle cx="5" cy="5" r="0.05" fill="pink" />

        <path
          d="M7,5 l0.75,-3 l0.75,3"
          stroke="pink"
          fill="none"
          stroke-width="0.025" />
        <circle cx="7" cy="5" r="0.05" fill="pink" />
        <circle cx="7.75" cy="2" r="0.05" fill="pink" />
        <circle cx="8.5" cy="5" r="0.05" fill="pink" />
      </g>
    </svg>

round

The  round value indicates that a round corner is to be used to join
path segments.

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 6 6" xmlns="http://www.w3.org/2000/svg">
      <!-- Effect of the "round" value -->
      <path
        d="M1,5 l2,-3 l2,3"
        stroke="black"
        fill="none"
        stroke-linejoin="round" />

      <!--
      the following pink lines highlight the
      position of the path for each stroke
      -->
      <g id="p">
        <path d="M1,5 l2,-3 l2,3" stroke="pink" fill="none" stroke-width="0.025" />
        <circle cx="1" cy="5" r="0.05" fill="pink" />
        <circle cx="3" cy="2" r="0.05" fill="pink" />
        <circle cx="5" cy="5" r="0.05" fill="pink" />
      </g>
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # LineJoin

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# stroke-miterlimit #

The  stroke-miterlimit attribute is a presentation attribute defining a
limit on the ratio of the miter length to the   stroke-width  used to
draw a miter join. When the limit is exceeded, the join is converted
from a miter to a bevel.

Note: As a presentation attribute  stroke-miterlimit can be used as a
CSS property.

You can use this attribute with the following SVG elements:

-    <path>
-    <polygon>
-    <polyline>
-    <rect>
-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 38 30" xmlns="http://www.w3.org/2000/svg">
      <!-- Impact of the default miter limit -->
      <path
        stroke="black"
        fill="none"
        stroke-linejoin="miter"
        id="p1"
        d="M1,9 l7   ,-3 l7   ,3
           m2,0 l3.5 ,-3 l3.5 ,3
           m2,0 l2   ,-3 l2   ,3
           m2,0 l0.75,-3 l0.75,3
           m2,0 l0.5 ,-3 l0.5 ,3" />

      <!-- Impact of the smallest miter limit (1) -->
      <path
        stroke="black"
        fill="none"
        stroke-linejoin="miter"
        stroke-miterlimit="1"
        id="p2"
        d="M1,19 l7   ,-3 l7   ,3
           m2, 0 l3.5 ,-3 l3.5 ,3
           m2, 0 l2   ,-3 l2   ,3
           m2, 0 l0.75,-3 l0.75,3
           m2, 0 l0.5 ,-3 l0.5 ,3" />

      <!-- Impact of a large miter limit (8) -->
      <path
        stroke="black"
        fill="none"
        stroke-linejoin="miter"
        stroke-miterlimit="8"
        id="p3"
        d="M1,29 l7   ,-3 l7   ,3
           m2, 0 l3.5 ,-3 l3.5 ,3
           m2, 0 l2   ,-3 l2   ,3
           m2, 0 l0.75,-3 l0.75,3
           m2, 0 l0.5 ,-3 l0.5 ,3" />

      <!-- the following pink lines highlight the position of the path for each stroke -->
      <path
        stroke="pink"
        fill="none"
        stroke-width="0.05"
        d="M1, 9 l7,-3 l7,3 m2,0 l3.5,-3 l3.5,3 m2,0 l2,-3 l2,3 m2,0 l0.75,-3 l0.75,3 m2,0 l0.5,-3 l0.5,3
          M1,19 l7,-3 l7,3 m2,0 l3.5,-3 l3.5,3 m2,0 l2,-3 l2,3 m2,0 l0.75,-3 l0.75,3 m2,0 l0.5,-3 l0.5,3
          M1,29 l7,-3 l7,3 m2,0 l3.5,-3 l3.5,3 m2,0 l2,-3 l2,3 m2,0 l0.75,-3 l0.75,3 m2,0 l0.5,-3 l0.5,3" />
    </svg>

When two line segments meet at a sharp angle and  miter joins have been
specified for   stroke-linejoin  , it is possible for the miter to
extend far beyond the thickness of the line stroking the path. The
 stroke-miterlimit ratio is used to define when the limit is exceeded,
if so the join is converted from a miter to a bevel.

The ratio of miter length (distance between the outer tip and the inner
corner of the miter) to   stroke-width  is directly related to the angle
(theta) between the segments in user space by the formula:

${stroke-miterlimit} = \frac{miterLength}{stroke-width} = \frac{1}{\sin\left( \frac{\theta}{2} \right)}$

For example, a miter limit of 1.414 converts miters to bevels for theta
less than 90 degrees, a limit of 4.0 converts them for theta less than
approximately 29 degrees, and a limit of 10.0 converts them for theta
less than approximately 11.5 degrees.

Usage context

  --------------- ----------
  Value           <number>
  Default value   4
  Animatable      Yes
  --------------- ----------

The value of  stroke-miterlimit must be greater than or equal to 1.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # StrokeMiterlimitProperty

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# stroke-opacity #

The  stroke-opacity attribute is a presentation attribute defining the
opacity of the paint server ( color , gradient , pattern , etc.) applied
to the stroke of a shape.

Note: As a presentation attribute  stroke-opacity can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <circle>
-    <ellipse>
-    <path>
-    <line>
-    <polygon>
-    <polyline>
-    <rect>
-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 40 10" xmlns="http://www.w3.org/2000/svg">
      <!-- Default stroke opacity: 1 -->
      <circle cx="5" cy="5" r="4" stroke="green" />

      <!-- Stroke opacity as a number -->
      <circle cx="15" cy="5" r="4" stroke="green" stroke-opacity="0.7" />

      <!-- Stroke opacity as a percentage -->
      <circle cx="25" cy="5" r="4" stroke="green" stroke-opacity="50%" />

      <!-- Stroke opacity as a CSS property -->
      <circle cx="35" cy="5" r="4" stroke="green" style="stroke-opacity: .3;" />
    </svg>

Usage notes

  --------------- -----------------------
  Value            [0-1] | <percentage>
  Default value    1
  Animatable      Yes
  --------------- -----------------------

Note: SVG2 introduces percentage values for  stroke-opacity , however,
it is not widely supported yet ( See Browser compatibility below ) as a
consequence, it is best practices to set opacity with a value in the
range  [0-1] .

It's important to know that the stroke partially covers the fill of a
shape, so a stroke with an opacity different than  1 will partially show
the fill underneath. To avoid this effect, it is possible to apply a
global opacity with the   opacity  attribute or to put the stroke behind
the fill with the   paint-order  attribute.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # StrokeOpacity

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# stroke-width #

The  stroke-width attribute is a presentation attribute defining the
width of the stroke to be applied to the shape.

You can use this attribute with the following SVG elements:

-    <circle>
-    <ellipse>
-    <line>
-    <path>
-    <polygon>
-    <polyline>
-    <rect>
-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 30 10" xmlns="http://www.w3.org/2000/svg">
      <!-- Default stroke width: 1 -->
      <circle cx="5" cy="5" r="3" stroke="green" />

      <!-- Stroke width as a number -->
      <circle cx="15" cy="5" r="3" stroke="green" stroke-width="3" />

      <!-- Stroke width as a percentage -->
      <circle cx="25" cy="5" r="3" stroke="green" stroke-width="2%" />
    </svg>

Usage notes

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    1px
  Animatable      Yes
  --------------- -------------------------

Note: A percentage value is always computed as a percentage of the
normalized   viewBox  diagonal length.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # StrokeWidth

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# style #

The  style attribute allows to style an element using CSS declarations.
It functions identically to the  style attribute in HTML .

You can use this attribute with any SVG element.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 60" xmlns="http://www.w3.org/2000/svg">
      <rect
        width="80"
        height="40"
        x="10"
        y="10"
        style="fill: skyblue; stroke: cadetblue; stroke-width: 2;" />
    </svg>

Usage notes

  --------------- ----------
  Value            <style>
  Default value   None
  Animatable      No
  --------------- ----------

 <style>

    The syntax of style data depends on the style sheet language. By
    default, the style sheet language is CSS .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # ElementSpecificStyling

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <style>
-   HTML  style attribute

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 19, 2023 by MDN contributors .
# SVG Styling Attributes #

The SVG styling attributes are all the attributes that can be specified
on any SVG element to apply CSS styling effects.

-    class
-    style

Attributes

  class 

    Assigns a class name or set of class names to an element. It
    functions identically to the  class attribute in HTML. Value : Any
    valid ID string; Animatable : Yes

  style 

    It specifies style information for its element. It functions
    identically to the  style attribute in HTML. Value : Any valid style
    string; Animatable : No

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 22, 2023 by MDN contributors .
# surfaceScale #

The  surfaceScale attribute represents the height of the surface for a
light filter primitive.

You can use this attribute with the following SVG elements:

-    <feDiffuseLighting>
-    <feSpecularLighting>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="diffuseLighting1" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting in="SourceGraphic" surfaceScale="1">
          <fePointLight x="60" y="60" z="20" />
        </feDiffuseLighting>
      </filter>
      <filter id="diffuseLighting2" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting in="SourceGraphic" surfaceScale="15">
          <fePointLight x="60" y="60" z="20" />
        </feDiffuseLighting>
      </filter>

      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#diffuseLighting1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#diffuseLighting2); transform: translateX(220px);" />
    </svg>

feSpecularLighting

For  <feSpecularLighting> ,  surfaceScale defines the height of the
surface.

  --------------- -----------
  Value            <number>
  Default value    1
  Animatable      Yes
  --------------- -----------

feDiffuseLighting

For  <feDiffuseLighting> ,  surfaceScale defines the height of the
surface.

  --------------- -----------
  Value            <number>
  Default value    1
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fediffuselighting-surfacescale

  Filter Effects Module Level 1
  # element-attrdef-fespecularlighting-surfacescale
  -----------------------------------------------------------------------

See also

-   Description of Phong reflection model on Wikipedia

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 3, 2023 by MDN contributors .
# systemLanguage #

The  systemLanguage attribute represents a list of supported language
tags. This list is matched against the language defined in the user
preferences.

You can use this attribute with the following SVG elements:

-    <a>
-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <audio>
-    <canvas>
-    <circle>
-    <clipPath>
-    <cursor>
-    <defs>
-    <ellipse>
-    <foreignObject>
-    <g>
-    <iframe>
-    <image>
-    <line>
-    <mask>
-    <path>
-    <pattern>
-    <polygon>
-    <polyline>
-    <rect>
-    <set>
-    <svg>
-    <switch>
-    <text>
-    <textPath>
-    <tref>
-    <tspan>
-    <unknown>
-    <use>
-    <video>

Usage notes

  --------------- ------------------
  Value            <language-tags>
  Default value   None
  Animatable      No
  --------------- ------------------

 <language-tags>

    The value is a set of comma-separated tokens, each of which must be
    a language tag, as defined in RFC 5646: Tags for Identifying
    Languages (also known as BCP 47) .

 systemLanguage is often used in conjunction with the  <switch> element.
If the attribute is used in other situations, then it represents a
simple switch on the given element whether to render the element or not.

Note: If several alternative language objects are enclosed in a
 <switch> and none of them matches, this may lead to situations where no
content is displayed. It is thus recommended to include a "catch-all"
choice at the end of such a  <switch> which is acceptable in all cases.

The attribute evaluates to "true" if one of the language tags indicated
by user preferences is a case-insensitive match or prefix (followed by a
"-") of one of the language tags given in the value of this parameter.
Otherwise it evaluates to "false".

Note: The prefix matching rule does not imply that if a user understands
a language with a certain tag, that the user will also understand all
languages with the tag as prefix.

If the attribute is not present, then it implicitly evaluates to "true".
If a null string or empty string value is given, the attribute evaluates
to "false".

The prefix rule allows the use of prefix tags if this is the case.

Multiple languages may be listed for content that is intended for
multiple audiences. For example, content that is presented
simultaneously in the original Maori and English versions, would call
for:

html

    <text systemLanguage="mi, en"><!-- content goes here --></text>

However, just because multiple languages are present within the object
on which the  systemLanguage test attribute is placed, this does not
mean that it is intended for multiple linguistic audiences. An example
would be a beginner's language primer, such as "A First Lesson in
Latin," which is clearly intended to be used by an English-literate
audience. In this case, the attribute should only include  en .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # ConditionalProcessingSystemLanguageAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# tabindex #

The  tabindex attribute allows you to control whether an element is
focusable and to define the relative order of the element for the
purposes of sequential focus navigation.

You can use this attribute with any SVG element.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <?xml version="1.0"?>
    <svg viewBox="0 0 260 260" xmlns="http://www.w3.org/2000/svg">
      <circle cx="60" cy="60" r="15" tabindex="0" />
      <circle cx="60" cy="160" r="30" tabindex="0" />
      <circle cx="160" cy="60" r="30" tabindex="0" />
      <circle cx="160" cy="160" r="60" tabindex="0" />
    </svg>

Usage notes

  --------------- ---------------
  Value           valid integer
  Default value   None
  Animatable      No
  --------------- ---------------

valid integer

    Relative order of the element for the purposes of sequential focus
    navigation.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # tabindexattribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   HTML  tabindex

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jun 20, 2023 by MDN contributors .
# tableValues #

The  tableValues attribute defines a list of numbers defining a lookup
table of values for a color component transfer function.

You can use this attribute with the following SVG elements:

-    <feFuncA>
-    <feFuncB>
-    <feFuncG>
-    <feFuncR>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <linearGradient
          id="gradient"
          gradientUnits="userSpaceOnUse"
          x1="0"
          y1="0"
          x2="200"
          y2="0">
          <stop offset="0" stop-color="#ff0000" />
          <stop offset="0.5" stop-color="#00ff00" />
          <stop offset="1" stop-color="#0000ff" />
        </linearGradient>
      </defs>

      <filter id="componentTransfer1" x="0" y="0" width="100%" height="100%">
        <feComponentTransfer>
          <feFuncR type="table" tableValues="0 1" />
          <feFuncG type="table" tableValues="0 1" />
          <feFuncB type="table" tableValues="0 1" />
        </feComponentTransfer>
      </filter>
      <filter id="componentTransfer2" x="0" y="0" width="100%" height="100%">
        <feComponentTransfer>
          <feFuncR type="table" tableValues="1 0" />
          <feFuncG type="table" tableValues="1 0" />
          <feFuncB type="table" tableValues="1 0" />
        </feComponentTransfer>
      </filter>

      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        fill="url(#gradient)"
        style="filter: url(#componentTransfer1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        fill="url(#gradient)"
        style="filter: url(#componentTransfer2); transform: translateX(220px);" />
    </svg>

Usage notes

  --------------- -------------------------------------------
  Value             <list-of-numbers> 
  Default value   Empty list resulting in identity transfer
  Animatable      Yes
  --------------- -------------------------------------------

 <list-of-numbers>

    This value holds a comma- and/or space-separated list of  <number>
    s, which define a lookup table for the color component transfer
    function. Each number can be between  0 and  1 .

    An empty list results in an identity transfer function.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fecomponenttransfer-tablevalues

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 3, 2023 by MDN contributors .
# target #

The  target attribute should be used when there are multiple possible
targets for the ending resource, such as when the parent document is
embedded within an HTML or XHTML document, or is viewed with a tabbed
browser. This attribute specifies the name of the browsing context
(e.g., a browser tab or an (X)HTML iframe or object element) into which
a document is to be opened when the link is activated:

You can use this attribute with the following SVG elements:

-    <a>

Example

    html,
    body,
    svg {
      height: 100%;
    }

    text {
      font:
        20px Arial,
        Helvetica,
        sans-serif;
      fill: blue;
      text-decoration: underline;
    }

html

    <svg viewBox="0 0 300 120" xmlns="http://www.w3.org/2000/svg">
      <a href="https://developer.mozilla.org" target="_self">
        <text x="0" y="20">Open link within iframe</text>
      </a>
      <a href="https://developer.mozilla.org" target="_blank">
        <text x="0" y="60">Open link in new tab or window</text>
      </a>
      <a href="https://developer.mozilla.org" target="_top">
        <text x="0" y="100">Open link in this tab or window</text>
      </a>
    </svg>

Usage notes

  --------------- ---------------------------------------------------
  Value            _self |  _parent |  _top |  _blank |  <XML-Name>
  Default value    _self
  Animatable      Yes
  --------------- ---------------------------------------------------

 _replace  Deprecated 

    The current SVG image is replaced by the linked content in the same
    rectangular area in the same frame as the current SVG image.

    Note: This value was never well implemented, and the distinction
    between  _replace and  _self has been made redundant by changes in
    the HTML definition of browsing contexts. Use  _self to replace the
    current SVG document.

 _self

    The current SVG image is replaced by the linked content in the same
    browsing context as the current SVG image.

 _parent

    The immediate parent browsing context of the SVG image is replaced
    by the linked content, if it exists and can be securely accessed
    from this document.

 _top

    The content of the full active window or tab is replaced by the
    linked content, if it exists and can be securely accessed from this
    document

 _blank

    A new un-named window or tab is requested for the display of the
    linked content, if this document can securely do so. If the user
    agent does not support multiple windows/tabs, the result is the same
    as _top.

 <XML-Name>

    Specifies the name of the browsing context (tab, inline frame,
    object, etc.) for display of the linked content. If a context with
    this name already exists, and can be securely accessed from this
    document, it is re-used, replacing the existing content. If it does
    not exist, it is created (the same as '_blank', except that it now
    has a name). The name must be a valid XML Name [XML11], and should
    not start with an underscore (U+005F LOW LINE character), to meet
    the requirements of a valid browsing context name from HTML.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # AElementTargetAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 7, 2023 by MDN contributors .
# targetX #

The  targetX attribute determines the positioning in horizontal
direction of the convolution matrix relative to a given target pixel in
the input image. The leftmost column of the matrix is column number
zero. The value must be such that:  0 <=  targetX <   order   X .

You can use this attribute with the following SVG elements:

-    <feConvolveMatrix>

Usage notes

  --------------- -------------------------
  Value            <integer>
  Default value    floor(   order  X / 2)
  Animatable      Yes
  --------------- -------------------------

 <integer>

    This value indicates the positioning in horizontal direction of the
    convolution matrix relative to a given target pixel in the input
    image.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-feconvolvematrix-targetx

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     targetY 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# targetY #

The  targetY attribute determines the positioning in vertical direction
of the convolution matrix relative to a given target pixel in the input
image. The topmost row of the matrix is row number zero. The value must
be such that:  0 <=  targetY <   order   Y .

You can use this attribute with the following SVG elements:

-    <feConvolveMatrix>

Usage notes

  --------------- -------------------------
  Value            <integer>
  Default value    floor(   order  Y / 2)
  Animatable      Yes
  --------------- -------------------------

 <integer>

    This value indicates the positioning in vertical direction of the
    convolution matrix relative to a given target pixel in the input
    image.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-feconvolvematrix-targety

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     targetX 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# text-anchor #

The  text-anchor attribute is used to align (start-, middle- or
end-alignment) a string of pre-formatted text or auto-wrapped text where
the wrapping area is determined from the  inline-size property relative
to a given point.

This attribute is not applicable to other types of auto-wrapped text.
For those cases you should use  text-align . For multi-line text, the
alignment takes place for each line.

The  text-anchor attribute is applied to each individual text chunk
within a given  <text> element. Each text chunk has an initial current
text position, which represents the point in the user coordinate system
resulting from (depending on context) application of the   x  and   y 
attributes on the  <text> element, any  x or  y attribute values on a
 <tspan> or  <tref> element assigned explicitly to the first rendered
character in a text chunk, or determination of the initial current text
position for a  <textPath> element.

Note: As a presentation attribute,  text-anchor can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 120 120" xmlns="http://www.w3.org/2000/svg">
      <!-- Materialization of anchors -->
      <path
        d="M60,15 L60,110 M30,40 L90,40 M30,75 L90,75 M30,110 L90,110"
        stroke="grey" />

      <!-- Anchors in action -->
      <text text-anchor="start" x="60" y="40">A</text>
      <text text-anchor="middle" x="60" y="75">A</text>
      <text text-anchor="end" x="60" y="110">A</text>

      <!-- Materialization of anchors -->
      <circle cx="60" cy="40" r="3" fill="red" />
      <circle cx="60" cy="75" r="3" fill="red" />
      <circle cx="60" cy="110" r="3" fill="red" />

      <style>
        <![CDATA[
          text {
            font: bold 36px Verdana, Helvetica, Arial, sans-serif;
          }
          ]]>
      </style>
    </svg>

Usage notes

  --------------- -------------------------
  Default value    start
  Value            start |  middle |  end
  Animatable      discrete
  --------------- -------------------------

 start

    The rendered characters are aligned such that the start of the text
    string is at the initial current text position. For an element with
    a  direction property value of  ltr (typical for most European
    languages), the left side of the text is rendered at the initial
    text position. For an element with a direction property value of
     rtl (typical for Arabic and Hebrew), the right side of the text is
    rendered at the initial text position. For an element with a
    vertical primary text direction (often typical for Asian text), the
    top side of the text is rendered at the initial text position.

 middle

    The rendered characters are aligned such that the middle of the text
    string is at the current text position. (For text on a path,
    conceptually the text string is first laid out in a straight line.
    The midpoint between the start of the text string and the end of the
    text string is determined. Then, the text string is mapped onto the
    path with this midpoint placed at the current text position.)

 end

    The rendered characters are shifted such that the end of the
    resulting rendered text (final current text position before applying
    the  text-anchor property) is at the initial current text position.
    For an element with a  direction property value of  ltr (typical for
    most European languages), the right side of the text is rendered at
    the initial text position. For an element with a  direction property
    value of  rtl (typical for Arabic and Hebrew), the left side of the
    text is rendered at the initial text position. For an element with a
    vertical primary text direction (often typical for Asian text), the
    bottom of the text is rendered at the initial text position.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # TextAnchoringProperties

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# text-decoration #

The  text-decoration attribute defines whether text is decorated with an
underline, overline and/or strike-through. It is a shorthand for the
 text-decoration-line and  text-decoration-style properties.

The fill and stroke of the text decoration are given by the fill and
stroke of the text at the point where the text decoration is declared.

The paint order of the text decoration, i.e. the fill and stroke, is
determined by the value of the   paint-order  attribute at the point
where the text decoration is declared.

Note: As a presentation attribute,  text-decoration can be used as a CSS
property. See the  CSS text-decoration property for more information.

You can use this attribute with the following SVG elements:

-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 250 50" xmlns="http://www.w3.org/2000/svg">
      <text y="20" text-decoration="underline">Underlined text</text>
      <text x="0" y="40" text-decoration="line-through">Struck-through text</text>
    </svg>

Usage notes

  --------------- ---------------------------------------------------------------------------------------------
  Value             <'text-decoration-line'>  ||   <'text-decoration-style'>  ||   <'text-decoration-color'> 
  Default value   See individual properties
  Animatable      Yes
  --------------- ---------------------------------------------------------------------------------------------

For a description of the values, please refer to the CSS
 text-decoration property.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Text Decoration Module Level 3
  # text-decoration-property

  Scalable Vector Graphics (SVG) 2
  # TextDecorationProperties
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS text-decoration

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# textLength #

The  textLength attribute, available on SVG  <text> and  <tspan>
elements, lets you specify the width of the space into which the text
will draw. The user agent will ensure that the text does not extend
farther than that distance, using the method or methods specified by the
  lengthAdjust  attribute. By default, only the spacing between
characters is adjusted, but the glyph size can also be adjusted if you
change  lengthAdjust .

By using  textLength , you can ensure that your SVG text displays at the
same width regardless of conditions including web fonts failing to load
(or not having loaded yet).

You can use this attribute with the following SVG elements:

-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 60" xmlns="http://www.w3.org/2000/svg">
      <text y="20" textLength="6em">Small text length</text>
      <text y="40" textLength="120%">Big text length</text>
    </svg>

Usage notes

  --------------- ----------------------------------
  Value            <length-percentage> |  <number>
  Default value   None
  Animatable      Yes
  --------------- ----------------------------------

 <length-percentage>

    This value specifies the width of the space the text will be
    adjusted to occupy as absolute length or percentage.

 <number>

    A numeric value outlines a length referring to the units of the
    current coordinate system.

Interactive example

Let's create a simple example that presents text you can resize using an
 <input> element of type  "range" .

CSS

css

    .controls {
      font:
        16px "Open Sans",
        "Arial",
        sans-serif;
    }

SVG

Let's start with the SVG. It's pretty basic, with a 1000-by-300 pixel
space mapped into a 10 centimeter by 3 centimeter box.

html

    <svg
      width="10cm"
      height="3cm"
      viewBox="0 0 1000 300"
      xmlns="http://www.w3.org/2000/svg">
      <rect
        x="1"
        y="1"
        width="998"
        height="298"
        fill="none"
        stroke="green"
        stroke-width="2" />

      <text
        id="hello"
        x="10"
        y="150"
        font-family="sans-serif"
        font-size="60"
        fill="green">
        Hello world!
      </text>
    </svg>

First, a  <rect> element is used to create and stroke a rectangle to
contain the text. Then  <text> is used to create the text element
itself, with an   id  of  "hello" .

HTML

The HTML is also simple, with only two displayed elements contained
inside a grouping  <div> :

html

    <div class="controls">
      <input type="range" id="widthSlider" min="80" max="978" />
      <span id="widthDisplay"></span>
    </div>

The  <input> element, of type  "range" , is used to create the slider
control the user will manipulate to change the width of the text. A
 <span> element of ID  "widthDisplay" is provided to display the current
width value.

JavaScript

Finally, let's have a look at the JavaScript code. It starts by stashing
references to the elements it will need to access, using
 Document.getElementById() :

js

    const widthSlider = document.getElementById("widthSlider");
    const widthDisplay = document.getElementById("widthDisplay");
    const textElement = document.getElementById("hello");
    const baseLength = Math.floor(textElement.textLength.baseVal.value);

    widthSlider.value = baseLength;

    widthSlider.addEventListener(
      "input",
      (event) => {
        textElement.textLength.baseVal.newValueSpecifiedUnits(
          SVGLength.SVG_LENGTHTYPE_PX,
          widthSlider.valueAsNumber,
        );
        widthDisplay.innerText = widthSlider.value;
      },
      false,
    );

    widthSlider.dispatchEvent(new Event("input"));

After fetching the element references, an event listener is established
by calling  addEventListener() on the slider control, to receive any
 input events which occur. These events will be sent any time the
slider's value changes, even if the user hasn't stopped moving it, so we
can responsively adjust the text width.

When an  "input" event occurs, we call  newValueSpecifiedUnits() to set
the value of  textLength to the slider's new value, using the  SVGLength
interface's  SVG_LENGTHTYPE_PX unit type to indicate that the value
represents pixels. Note that we have to dive into  textLength to get its
 baseVal property;  textLength is stored as an  SVGLength object, so we
can't treat it like a plain number.

After updating the text width, the contents of the  widthDisplay box are
updated with the new value as well, and we're finished.

Result

Here's what the example looks like. Try dragging the slider around to
get a feel for what it does.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # TextElementTextLengthAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   SVG Tutorial: Texts
-    SVGAnimatedLength and  SVGLength
-    <text>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 8, 2024 by MDN contributors .
# text-rendering #

The  text-rendering attribute provides hints to the renderer about what
tradeoffs to make when rendering text.

Note: As a presentation attribute,  text-rendering can be used as a CSS
property. See the  CSS text-rendering property for more information.

You can use this attribute with the following SVG elements:

-    <text>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 140 40" xmlns="http://www.w3.org/2000/svg">
      <text y="15" text-rendering="geometricPrecision">Geometric precision</text>
      <text y="35" text-rendering="optimizeLegibility">Optimized legibility</text>
    </svg>

Usage notes

  --------------- --------------------------------------------------------------------
  Value            auto |  optimizeSpeed |  optimizeLegibility |  geometricPrecision
  Default value    auto
  Animatable      discrete
  --------------- --------------------------------------------------------------------

 auto

    This value indicates that the user agent shall make appropriate
    tradeoffs to balance speed, legibility and geometric precision, but
    with legibility given more importance than speed and geometric
    precision.

 optimizeSpeed

    This value indicates that the user agent shall emphasize rendering
    speed over legibility and geometric precision. This option will
    sometimes cause some user agents to turn off text anti-aliasing.

 optimizeLegibility

    This value indicates that the user agent shall emphasize legibility
    over rendering speed and geometric precision. The user agent will
    often choose whether to apply anti-aliasing techniques, built-in
    font hinting or both to produce the most legible text.

 geometricPrecision

    This value indicates that the user agent shall emphasize geometric
    precision over legibility and rendering speed. This option will
    usually cause the user agent to suspend the use of hinting so that
    glyph outlines are drawn with comparable geometric precision to the
    rendering of path data.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # TextRendering

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS text-rendering

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# to #

The  to attribute indicates the final value of the attribute that will
be modified during the animation.

The value of the attribute will change between the   from  attribute
value and this value.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <set>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
      <rect x="10" y="10" width="100" height="100">
        <animate
          attributeType="XML"
          attributeName="width"
          fill="freeze"
          from="100"
          to="150"
          dur="3s" />
      </rect>
    </svg>

animate, animateMotion, animateTransform

For  <animate> ,  <animateMotion> , and  <animateTransform> ,  to
specifies the ending value of the animation.

  --------------- ----------
  Value            <value>
  Default value   None
  Animatable      No
  --------------- ----------

The exact value type for this attribute depend on the value of the
attribute that will be animated.

If a list of values is defined via the   values  attribute, the  to
attribute is ignored.

set

For the  <set> element,  to specifies the value for the attribute during
the duration of the element.

  --------------- ----------
  Value            <value>
  Default value   None
  Animatable      No
  --------------- ----------

The exact value type for this attribute depend on the value of the
attribute that will be animated.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # SetElementToAttribute

  SVG Animations Level 2
  # ToAttribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# transform #

The  transform attribute defines a list of transform definitions that
are applied to an element and the element's children.

Note: As of SVG2,  transform is a presentation attribute, meaning it can
be used as a CSS property. However, be aware that there are some
differences in syntax between the CSS property and the attribute. See
the documentation for the CSS property  transform for the specific
syntax to use in that case.

You can use this attribute with any SVG element.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg
      viewBox="-40 0 150 100"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <g
        fill="grey"
        transform="rotate(-10 50 100)
                   translate(-36 45.5)
                   skewX(40)
                   scale(1 0.5)">
        <path
          id="heart"
          d="M 10,30 A 20,20 0,0,1 50,30 A 20,20 0,0,1 90,30 Q 90,60 50,90 Q 10,60 10,30 z" />
      </g>

      <use href="#heart" fill="none" stroke="red" />
    </svg>

In SVG 1.1, only these 16 elements were allowed to use it:  <a> ,
 <circle> ,  <clipPath> ,  <defs> ,  <ellipse> ,  <foreignObject> ,  <g>
,  <image> ,  <line> ,  <path> ,  <polygon> ,  <polyline> ,  <rect> ,
 <switch> ,  <text> , and  <use> .

Also, as a legacy from SVG 1.1,  <linearGradient> and  <radialGradient>
support the  gradientTransform attribute, and  <pattern> supports the
 patternTransform attribute, both of which act exactly like the
 transform attribute.

  --------------- -------------------
  Value            <transform-list>
  Default value   none
  Animatable      Yes
  --------------- -------------------

Transform functions

The following transform functions can be used by the  transform
attribute  <transform-list>

Warning: As per the spec, you should be able to also use CSS transform
functions . However, the compatibility isn't guaranteed.

Matrix

The  matrix(<a> <b> <c> <d> <e> <f>) transform function specifies a
transformation in the form of a transformation matrix of six values.
 matrix(a,b,c,d,e,f) is equivalent to applying the transformation
matrix:

$$\begin{pmatrix}
a & c & e \\
b & d & f \\
0 & 0 & 1 \\
\end{pmatrix}$$
which maps coordinates from a previous coordinate system into a new
coordinate system by the following matrix equalities:
$$\begin{pmatrix}
x_{newCoordSys} \\
y_{newCoordSys} \\
1 \\
\end{pmatrix} = \begin{pmatrix}
a & c & e \\
b & d & f \\
0 & 0 & 1 \\
\end{pmatrix}\begin{pmatrix}
x_{prevCoordSys} \\
y_{prevCoordSys} \\
1 \\
\end{pmatrix} = \begin{pmatrix}
{ax_{prevCoordSys} + cy_{prevCoordSys} + e} \\
{bx_{prevCoordSys} + dy_{prevCoordSys} + f} \\
1 \\
\end{pmatrix}$$

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
      <rect x="10" y="10" width="30" height="20" fill="green" />

      <!--
      In the following example we are applying the matrix:
      [a c e]    [3 -1 30]
      [b d f] => [1  3 40]
      [0 0 1]    [0  0  1]

      which transform the rectangle as such:

      top left corner: oldX=10 oldY=10
      newX = a * oldX + c * oldY + e = 3 * 10 - 1 * 10 + 30 = 50
      newY = b * oldX + d * oldY + f = 1 * 10 + 3 * 10 + 40 = 80

      top right corner: oldX=40 oldY=10
      newX = a * oldX + c * oldY + e = 3 * 40 - 1 * 10 + 30 = 140
      newY = b * oldX + d * oldY + f = 1 * 40 + 3 * 10 + 40 = 110

      bottom left corner: oldX=10 oldY=30
      newX = a * oldX + c * oldY + e = 3 * 10 - 1 * 30 + 30 = 30
      newY = b * oldX + d * oldY + f = 1 * 10 + 3 * 30 + 40 = 140

      bottom right corner: oldX=40 oldY=30
      newX = a * oldX + c * oldY + e = 3 * 40 - 1 * 30 + 30 = 120
      newY = b * oldX + d * oldY + f = 1 * 40 + 3 * 30 + 40 = 170
      -->
      <rect
        x="10"
        y="10"
        width="30"
        height="20"
        fill="red"
        transform="matrix(3 1 -1 3 30 40)" />
    </svg>

Translate

The  translate(<x> [<y>]) transform function moves the object by  x and
 y . If  y is not provided, it is assumed to be  0 .

In other words:

    xnew = xold + <x>
    ynew = yold + <y>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <!-- No translation -->
      <rect x="5" y="5" width="40" height="40" fill="green" />

      <!-- Horizontal translation -->
      <rect
        x="5"
        y="5"
        width="40"
        height="40"
        fill="blue"
        transform="translate(50)" />

      <!-- Vertical translation -->
      <rect
        x="5"
        y="5"
        width="40"
        height="40"
        fill="red"
        transform="translate(0 50)" />

      <!-- Both horizontal and vertical translation -->
      <rect
        x="5"
        y="5"
        width="40"
        height="40"
        fill="yellow"
        transform="translate(50 50)" />
    </svg>

Scale

The  scale(<x> [<y>]) transform function specifies a scale operation by
 x and  y . If  y is not provided, it is assumed to be equal to  x .

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="-50 -50 100 100" xmlns="http://www.w3.org/2000/svg">
      <!-- uniform scale -->
      <circle cx="0" cy="0" r="10" fill="red" transform="scale(4)" />

      <!-- vertical scale -->
      <circle cx="0" cy="0" r="10" fill="yellow" transform="scale(1, 4)" />

      <!-- horizontal scale -->
      <circle cx="0" cy="0" r="10" fill="pink" transform="scale(4, 1)" />

      <!-- No scale -->
      <circle cx="0" cy="0" r="10" fill="black" />
    </svg>

Rotate

The  rotate(<a> [<x> <y>]) transform function specifies a rotation by  a
degrees about a given point. If optional parameters  x and  y are not
supplied, the rotation is about the origin of the current user
coordinate system. If optional parameters  x and  y are supplied, the
rotation is about the point  (x, y) .

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="-12 -2 34 14" xmlns="http://www.w3.org/2000/svg">
      <rect x="0" y="0" width="10" height="10" />

      <!-- rotation is done around the point 0,0 -->
      <rect x="0" y="0" width="10" height="10" fill="red" transform="rotate(100)" />

      <!-- rotation is done around the point 10,10 -->
      <rect
        x="0"
        y="0"
        width="10"
        height="10"
        fill="green"
        transform="rotate(100, 10, 10)" />
    </svg>

SkewX

The  skewX(<a>) transform function specifies a skew transformation along
the x axis by  a degrees.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="-5 -5 10 10" xmlns="http://www.w3.org/2000/svg">
      <rect x="-3" y="-3" width="6" height="6" />

      <rect x="-3" y="-3" width="6" height="6" fill="red" transform="skewX(30)" />
    </svg>

SkewY

The  skewY(<a>) transform function specifies a skew transformation along
the y axis by  a degrees.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="-5 -5 10 10" xmlns="http://www.w3.org/2000/svg">
      <rect x="-3" y="-3" width="6" height="6" />

      <rect x="-3" y="-3" width="6" height="6" fill="red" transform="skewY(30)" />
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Transforms Module Level 1
  # svg-transform

  Scalable Vector Graphics (SVG) 2
  # TransformProperty
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 15, 2024 by MDN contributors .
# transform-origin #

The  transform-origin SVG attribute sets the origin for an item's
transformations.

You can use this attribute with any SVG element.

Note: As a presentation attribute in SVG,  transform-origin corresponds
in syntax and behavior to the  transform-origin property in CSS, and can
be used as CSS property to style SVG. See the CSS transform-origin
property for more information.

Usage notes

  --------------- --------------------------------------------
  Values          Error: could not find syntax for this item
  Default value    0, 0
  Animatable      Yes
  --------------- --------------------------------------------

Note: The default value of  transform-origin is  0 0 for all SVG
elements except for root  <svg> elements and  <svg> elements that are a
direct child of a foreignObject , and whose transform-origin is  50% 50%
, like other CSS elements.

The  transform-origin property may be specified using one, two, or three
values, where each value represents an offset. Offsets that are not
explicitly defined are reset to their corresponding initial values .

If a single  <length> or  <percentage> value is defined, it represents
the horizontal offset.

If two or more values are defined and either no value is a keyword, or
the only used keyword is  center , then the first value represents the
horizontal offset and the second represents the vertical offset.

-   One-value syntax:
    -   The value must be a  <length> , or one of the keywords  left ,
         center ,  right ,  top , and  bottom .
-   Two-value syntax:
    -   One value must be a  <length> , a  <percentage> , or one of the
        keywords  left ,  center , and  right .
    -   The other value must be a  <length> , a  <percentage> , or one
        of the keywords  top ,  center , and  bottom .
-   Three-value syntax:
    -   The first two values are the same as for the two-value syntax.
    -   The third value must be a  <length> . It always represents the Z
        offset.

Example

This example shows the code for one PNG image and three SVG images:

1.  A PNG reference image.
2.  An SVG reference image that uses no transformation.
3.  An SVG image that uses  transform-origin to do a transformation,
    with the expected result being an image identical to the reference
    image.
4.  An SVG image that does not use  transform-origin but does the same
    transformation using just  transform , with the expected result
    being an image identical to the reference image.

The fourth image shows how to do the transformation in browsers that
don't support  transform-origin — because the code for the fourth image
does the same transformation as the third image's  transform-origin
-based code, but by only using  transform , without  transform-origin .

Note: These examples use a modified version of a code snippet in a Stack
Overflow question from Maxim Kulikov , as well as a modified version of
a code snippet in an answer from Michael Mullany that accompanies the
question. Both code snippets are used under the terms of the CC BY-SA
license.)

HTML

html

    <h4>Reference image</h4>

    <div>
      <figure>
        <img src="reference.png" alt="PNG reference image" />
        <figcaption>
          Figure 1. PNG reference image. The images following this should look
          exactly the same as this.
        </figcaption>
      </figure>
    </div>

    <div>
      <figure>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="200"
          height="200"
          viewBox="0 0 200 200">
          <circle cx="100" cy="100" r="100" stroke="none" fill="black" />
          <line
            x1="100"
            y1="0"
            x2="100"
            y2="200"
            stroke="rebeccapurple"
            stroke-width="2" />
          <line
            x1="0"
            y1="100"
            x2="200"
            y2="100"
            stroke="rebeccapurple"
            stroke-width="2" />

          <circle cx="100" cy="100" r="75" stroke="none" fill="blue" />
          <line
            x1="100"
            y1="25"
            x2="100"
            y2="175"
            stroke="rebeccapurple"
            stroke-width="1.5" />
          <line
            x1="25"
            y1="100"
            x2="175"
            y2="100"
            stroke="rebeccapurple"
            stroke-width="1.5" />

          <circle cx="100" cy="100" r="50" stroke="none" fill="red" />
          <line
            x1="100"
            y1="50"
            x2="100"
            y2="150"
            stroke="rebeccapurple"
            stroke-width="1" />
          <line
            x1="50"
            y1="100"
            x2="150"
            y2="100"
            stroke="rebeccapurple"
            stroke-width="1" />

          <circle cx="100" cy="100" r="25" stroke="none" fill="yellow" />
          <line
            x1="100"
            y1="75"
            x2="100"
            y2="125"
            stroke="rebeccapurple"
            stroke-width="0.5" />
          <line
            x1="75"
            y1="100"
            x2="125"
            y2="100"
            stroke="rebeccapurple"
            stroke-width="0.5" />
        </svg>
        <figcaption>
          Figure 2. SVG reference image. The images following this should look
          exactly the same as this.
        </figcaption>
      </figure>
    </div>

    <h4>Transformation with transform-origin</h4>

    <div>
      <figure>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="200"
          height="200"
          viewBox="0 0 200 200">
          <defs>
            <g id="target-g-1">
              <circle cx="100" cy="100" r="100" stroke="none" />
              <line
                x1="100"
                y1="0"
                x2="100"
                y2="200"
                stroke="rebeccapurple"
                stroke-width="2" />
              <line
                x1="0"
                y1="100"
                x2="200"
                y2="100"
                stroke="rebeccapurple"
                stroke-width="2" />
            </g>
          </defs>

          <use href="#target-g-1" fill="black" />
          <use
            href="#target-g-1"
            fill="blue"
            transform="scale(0.75 0.75)"
            transform-origin="100 100" />

          <svg
            xmlns="http://www.w3.org/2000/svg"
            x="0"
            y="0"
            width="200"
            height="200"
            viewBox="0 0 200 200">
            <use
              href="#target-g-1"
              fill="red"
              transform="scale(0.5 0.5)"
              transform-origin="100 100" />
            <use
              href="#target-g-1"
              fill="yellow"
              transform="scale(0.25 0.25)"
              transform-origin="100 100" />
          </svg>
        </svg>

        <figcaption>
          Figure 3. transform-origin used. This image should look exactly the same
          as the reference image in Figure 2.
        </figcaption>
      </figure>
    </div>

    <h4>Transformation without transform-origin</h4>

    <div>
      <figure>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="200"
          height="200"
          viewBox="0 0 200 200">
          <defs>
            <g id="target-g-1">
              <circle cx="100" cy="100" r="100" stroke="none" />
              <line
                x1="100"
                y1="0"
                x2="100"
                y2="200"
                stroke="rebeccapurple"
                stroke-width="2" />
              <line
                x1="0"
                y1="100"
                x2="200"
                y2="100"
                stroke="rebeccapurple"
                stroke-width="2" />
            </g>
          </defs>

          <use href="#target-g-1" fill="black" />
          <use
            href="#target-g-1"
            fill="blue"
            transform="translate(100 100) scale(0.75 0.75) translate(-100 -100)" />

          <svg
            xmlns="http://www.w3.org/2000/svg"
            x="0"
            y="0"
            width="200"
            height="200"
            viewBox="0 0 200 200">
            <use
              href="#target-g-1"
              fill="red"
              transform="translate(100 100) scale(0.5 0.5) translate(-100 -100)" />
            <use
              href="#target-g-1"
              fill="yellow"
              transform="translate(100 100) scale(0.25 0.25) translate(-100 -100)" />
          </svg>
        </svg>

        <figcaption>
          Figure 4. transform-origin not used. This image should look exactly the
          same as the reference image in Figure 2.
        </figcaption>
      </figure>
    </div>

CSS

css

    h4 {
      font-family: sans-serif;
    }

    figure {
      border: thin #c0c0c0 solid;
      display: inline-flex;
      flex-flow: column;
      padding: 5px;
      max-width: 200px;
      margin: auto;
    }

    figcaption {
      margin-top: 5px;
      background-color: #222;
      color: #fff;
      font: smaller sans-serif;
      padding: 3px;
      text-align: center;
    }

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Transforms Module Level 1
  # transform-origin-property

  Scalable Vector Graphics (SVG) 2
  # PresentationAttributes
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 24, 2024 by MDN contributors .
# type #

The  type attribute is a generic attribute and it has different meaning
based on the context in which it's used.

-   For the  <animateTransform> element, it defines the type of
    transformation, whose values change over time.
-   For the  <feColorMatrix> element, it indicates the type of matrix
    operation. The keyword  matrix indicates that a full 5x4 matrix of
    values will be provided. The other keywords represent convenience
    shortcuts to allow commonly used color operations to be performed
    without specifying a complete matrix.
-   For the  <feFuncR> ,  <feFuncG> ,  <feFuncB> , and  <feFuncA>
    elements, it Indicates the type of component transfer function.
-   For the  <feTurbulence> element, it indicates whether the filter
    primitive should perform a noise or turbulence function.
-   For the  <style> and  <script> elements, it defines the content type
    of the element.

You can use this attribute with the following SVG elements:

-    <animateTransform>
-    <feColorMatrix>
-    <feFuncA>
-    <feFuncB>
-    <feFuncG>
-    <feFuncR>
-    <feTurbulence>
-    <script>
-    <style>

Usage context

For the <animateTransform> elements

SVG element:  <animateTransform>

  -------------------- -------------------------------------------------
  Categories           None
  Value                 translate |  scale |  rotate |  skewX |  skewY
  Animatable           No
  Normative document   SVG 1.1 (2nd Edition)
  -------------------- -------------------------------------------------

For the <feColorMatrix> element

SVG element:  <feColorMatrix>

  -------------------- ------------------------------------------------------
  Categories           None
  Value                 matrix |  saturate |  hueRotate |  luminanceToAlpha
  Animatable           Yes
  Normative document   SVG 1.1 (2nd Edition)
  -------------------- ------------------------------------------------------

For the <feFuncR>, <feFuncG>, <feFuncB>, and <feFuncA> elements

SVG elements:  <feFuncR> ,  <feFuncG> ,  <feFuncB> ,  <feFuncA>

  -------------------- ---------------------------------------------------
  Categories           None
  Value                 identity |  table |  discrete |  linear |  gamma
  Animatable           Yes
  Normative document   SVG 1.1 (2nd Edition)
  -------------------- ---------------------------------------------------

For the <feTurbulence> element

SVG element:  <feTurbulence>

  -------------------- -----------------------------
  Categories           None
  Value                 fractalNoise |  turbulence
  Animatable           Yes
  Normative document   SVG 1.1 (2nd Edition)
  -------------------- -----------------------------

For the <style> and <script> elements

SVG elements:  <style> ,  <script>

  ----------------------------------- -----------------------------------
  Categories                          None

  Value                               <content-type>

  Animatable                          No

  Normative document                  SVG 1.1 (2nd Edition) : script
                                      SVG 1.1 (2nd Edition) : style
  ----------------------------------- -----------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# u1 #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  u1 attribute specifies list of Unicode characters (refer to the
description of the   unicode  attribute of the  <glyph> element for a
description of how to express individual Unicode characters) and/or
ranges of Unicode characters, which identify a set of possible first
glyphs in a kerning pair.

If a given Unicode character within the set has multiple corresponding
 <glyph> elements (i.e., there are multiple  <glyph> elements with the
same  unicode attribute value but different   glyph-name  values), then
all such glyphs are included in the set. Comma is the separator
character; thus, to kern a comma, specify the comma as part of a range
of Unicode characters or as a glyph name using the   g1  attribute. The
total set of possible first glyphs in the kerning pair is the union of
glyphs specified by the  u1 and  g1 attributes.

You can use this attribute with the following SVG elements:

-    <hkern>
-    <vkern>

Context notes

  --------------- --------------------------------
  Value           [  <character> |  <urange> ] #
  Default value   None
  Animatable      No
  --------------- --------------------------------

 [ <character> | <urange> ]#

    This value indicates a comma-separated sequence of Unicode
    characters and/or ranges of Unicode characters, which identify a set
    of possible first glyphs in a kerning pair.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # HKernElementU1Attribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# u2 #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  u2 attribute specifies list of Unicode characters (refer to the
description of the   unicode  attribute of the  <glyph> element for a
description of how to express individual Unicode characters) and/or
ranges of Unicode characters, which identify a set of possible second
glyphs in a kerning pair.

If a given Unicode character within the set has multiple corresponding
 <glyph> elements (i.e., there are multiple  <glyph> elements with the
same  unicode attribute value but different   glyph-name  values), then
all such glyphs are included in the set. Comma is the separator
character; thus, to kern a comma, specify the comma as part of a range
of Unicode characters or as a glyph name using the   g2  attribute. The
total set of possible second glyphs in the kerning pair is the union of
glyphs specified by the  u2 and  g2 attributes.

You can use this attribute with the following SVG elements:

-    <hkern>
-    <vkern>

Context notes

  --------------- --------------------------------
  Value           [  <character> |  <urange> ] #
  Default value   None
  Animatable      No
  --------------- --------------------------------

 [ <character> | <urange> ]#

    This value indicates a comma-separated sequence of Unicode
    characters and/or ranges of Unicode characters, which identify a set
    of possible second glyphs in a kerning pair.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # HKernElementU2Attribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# underline-position #

The  underline-position attribute represents the ideal vertical position
of the underline. The underline position is expressed in the font's
coordinate system.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage context

  -------------------- -----------------------
  Categories           None
  Value                <number>
  Animatable           No
  Normative document   SVG 1.1 (2nd Edition)
  -------------------- -----------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 22, 2023 by MDN contributors .
# underline-thickness #

The  underline-thickness attribute represents the ideal thickness of the
underline. The underline thickness is expressed in the font's coordinate
system.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage context

  -------------------- -----------------------
  Categories           None
  Value                <number>
  Animatable           No
  Normative document   SVG 1.1 (2nd Edition)
  -------------------- -----------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 22, 2023 by MDN contributors .
# unicode-bidi #

The  unicode-bidi attribute specifies how the accumulation of the
background image is managed.

Note: As a presentation attribute,  unicode-bidi can be used as a CSS
property. See the CSS  unicode-bidi property for more information.

You can use this attribute with the following SVG elements:

-    <textPath>
-    <text>
-    <tref>
-    <tspan>

Context notes

  --------------- --------------------------------------------
  Value           Error: could not find syntax for this item
  Default value    normal
  Animatable      No
  --------------- --------------------------------------------

For a description of the values, please refer to the CSS  unicode-bidi
property.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Writing Modes Level 4
  # unicode-bidi

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# unicode #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  unicode attribute specifies one or more Unicode characters
indicating the sequence of Unicode characters which corresponds to a
glyph .

If a character is provided, then this glyph corresponds to the given
Unicode character. If multiple characters are provided, then this glyph
corresponds to the given sequence of Unicode characters. One use of a
sequence of characters is ligatures. For example, if  unicode="ffl" ,
then the given glyph will be used to render the sequence of characters
"f", "f", and "l".

It is often useful to refer to characters using XML character references
expressed in hexadecimal notation or decimal notation. For example,
 unicode="ffl" could be expressed as XML character references in
hexadecimal notation as  unicode="&#x66;&#x66;&#x6c;" or in decimal
notation as  unicode="&#102;&#102;&#108;" .

The  unicode attribute contributes to the process for deciding which
glyph(s) are used to represent which character(s).

You can use this attribute with the following SVG elements:

-    <glyph>

Context notes

  --------------- -----------
  Value            <string>
  Default value   None
  Animatable      No
  --------------- -----------

 <string>

    This value specifies one or more Unicode characters corresponding to
    a glyph.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # GlyphElementUnicodeAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# unicode-range #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  unicode-range attribute defines the range of ISO 10646 characters
possibly covered by the glyphs in a font.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- ---------------
  Value            <urange>  # 
  Default value   None
  Animatable      No
  --------------- ---------------

 <urange>#

    This value is a comma-separated list of ISO 10646 characters
    possibly covered by the glyphs in the font.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementUnicodeRangeAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   ISO 10646 - Universal Coded Character Set (UCS)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# units-per-em #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  units-per-em attribute specifies the number of coordinate units on
the "em square", an abstract square whose height is the intended
distance between lines of type in the same type size. This is the size
of the design grid on which glyphs are laid out.

Note: This value is almost always necessary as nearly every other
attribute requires the definition of a design grid.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- -------------
  Value             <number> 
  Default value    1000
  Animatable      No
  --------------- -------------

 <number>

    This value indicates the number of coordinate units on the em
    square.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementUnitsPerEmAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# v-alphabetic #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  v-alphabetic attribute defines indicates the alignment coordinate
for glyphs to achieve alphabetic baseline alignment. The value is an
offset in the font coordinate system relative to the glyph-specific
  vert-origin-x  attribute.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- -----------
  Value            <number>
  Default value   None
  Animatable      No
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementVertAlphabeticAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     alphabetic 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# values #

The  values attribute has different meanings, depending upon the context
where it's used, either it defines a sequence of values used over the
course of an animation, or it's a list of numbers for a color matrix,
which is interpreted differently depending on the type of color change
to be performed.

You can use this attribute with the following SVG elements:

-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <feColorMatrix>

animate, animateMotion, animateTransform

For  <animate> ,  <animateMotion> , and  <animateTransform> ,  values is
a list of values defining the sequence of values over the course of the
animation. If this attribute is specified, any   from  ,   to  , and
  by  attribute values set on the element are ignored.

  --------------- ---------------------
  Value             <list-of-values> 
  Default value   None
  Animatable      No
  --------------- ---------------------

 <list-of-values>

    The value holds a semicolon-separated list of one or more values.
    The type of the values is defined by the   href  and
      attributeName  attributes.

feColorMatrix

For the  <feColorMatrix> element,  values is a list of numbers
interpreted differently depending on the value of the   type  attribute.

  ----------------------------------- -----------------------------------
  Value                                 <list-of-numbers> 

  Default value                       If  type="matrix" , identity
                                      matrix,
                                      if  type="saturate" ,  1 ,
                                      resulting in identity matrix,
                                      if  type="hueRotate" ,  0 ,
                                      resulting in identity matrix

  Animatable                          Yes
  ----------------------------------- -----------------------------------

 <list-of-numbers>

    The value is a list of numbers, which is interpreted differently
    depending on the value of the  type attribute:

    -   For  type="matrix" ,  values is a list of 20 matrix values (a00
        a01 a02 a03 a04 a10 a11 … a34), separated by whitespace and/or a
        comma.
    -   For  type="saturate" ,  values is a single real number value (0
        to 1).
    -   For  type="hueRotate" ,  values is a single one real number
        value (degrees).
    -   For  type="luminanceToAlpha" ,  values is not applicable.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fecolormatrix-values

  SVG Animations Level 2
  # ValuesAttribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# vector-effect #

The  vector-effect property specifies the vector effect to use when
drawing an object. Vector effects are applied before any of the other
compositing operations, i.e. filters, masks and clips.

Note: As a presentation attribute,  vector-effect can be used as a CSS
property.

You can use this attribute with the following SVG elements:

-    <circle>
-    <ellipse>
-    <foreignObject>
-    <image>
-    <line>
-    <path>
-    <polygon>
-    <polyline>
-    <rect>
-    <text>
-    <textPath>
-    <tspan>
-    <use>

Usage notes

  --------------- -----------------------------------------------------------------------------------
  Value            none |  non-scaling-stroke |  non-scaling-size |  non-rotation |  fixed-position
  Default value    none
  Animatable      discrete
  --------------- -----------------------------------------------------------------------------------

 none

    This value specifies that no vector effect shall be applied, i.e.
    the default rendering behavior is used which is to first fill the
    geometry of a shape with a specified paint, then stroke the outline
    with a specified paint.

 non-scaling-stroke

    This value modifies the way an object is stroked. Normally stroking
    involves calculating stroke outline of the shape's path in current
    user coordinate system and filling that outline with the stroke
    paint (color or gradient). The resulting visual effect of this value
    is that the stroke width is not dependent on the transformations of
    the element (including non-uniform scaling and shear
    transformations) and zoom level.

 non-scaling-size

    This value specifies a special user coordinate system used by the
    element and its descendants. The scale of that user coordinate
    system does not change in spite of any transformation changes from a
    host coordinate space. However, it does not specify the suppression
    of rotation and skew. Also, it does not specify the origin of the
    user coordinate system. Since this value suppresses scaling of the
    user coordinate system, it also has the characteristics of
     non-scaling-stroke .

 non-rotation

    This value specifies a special user coordinate system used by the
    element and its descendants. The rotation and skew of that user
    coordinate system is suppressed in spite of any transformation
    changes from a host coordinate space. However, it does not specify
    the suppression of scaling. Also, it does not specify the origin of
    user coordinate system.

 fixed-position

    This value specifies a special user coordinate system used by the
    element and its descendants. The position of user coordinate system
    is fixed in spite of any transformation changes from a host
    coordinate space. However, it does not specify the suppression of
    rotation, skew and scaling. When this vector effect and the
      transform  property are defined at the same time, that property is
    consumed for this effect.

Example

Example: vector-effect="non-scaling-stroke"

html

    <svg viewBox="0 0 500 240">
      <!-- normal -->
      <path
        d="M10,20 L40,100 L39,200 z"
        stroke="black"
        stroke-width="2px"
        fill="none"></path>

      <!-- scaled -->
      <path
        transform="translate(100,0) scale(4,1)"
        d="M10,20 L40,100 L39,200 z"
        stroke="black"
        stroke-width="2px"
        fill="none"></path>

      <!-- fixed-->
      <path
        vector-effect="non-scaling-stroke"
        transform="translate(300, 0) scale(4, 1)"
        d="M10,20 L40,100 L39,200 z"
        stroke="black"
        stroke-width="2px"
        fill="none"></path>
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # VectorEffects

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# version #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  version attribute is used to indicate what specification a SVG
document conforms to. It is only allowed on the root  <svg> element. It
is purely advisory and has no influence on rendering or processing.

While it is specified to accept any number, the only two valid choices
are currently  1.0 and  1.1 .

You can use this attribute with the following SVG elements:

-    <svg>

html

    <svg version="1.1" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <rect x="10" y="10" width="80" height="80" />
    </svg>

Usage notes

  --------------- -------------
  Value             <number> 
  Default value   None
  Animatable      No
  --------------- -------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # SVGElementVersionAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# vert-adv-y #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  vert-adv-y attribute indicates the vertical advance after rendering
a glyph in vertical orientation.

You can use this attribute with the following SVG elements:

-    <font>
-    <glyph>
-    <missing-glyph>

font

For  <font> elements,  vert-adv-y specifies the default vertical advance
for a glyph in vertical orientation.

  --------------- ----------------------------
  Value             <number> 
  Default value   1 em as of   units-per-em 
  Animatable      No
  --------------- ----------------------------

 <number>

    This value indicates the default vertical advance of the glyph in
    vertical direction

glyph, missing-glyph

For  <glyph> and  <missing-glyph> elements,  vert-adv-y specifies the
vertical advance for a glyph in vertical orientation.

  --------------- ------------------------------
  Value             <number> 
  Default value    <font> 's  vert-adv-y value
  Animatable      No
  --------------- ------------------------------

 <number>

    This value indicates the vertical advance of the glyph in vertical
    direction

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # GlyphElementVertAdvYAttribute

  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontElementVertAdvYAttribute
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     horiz-adv-x 
-     units-per-em 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# vert-origin-x #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  vert-origin-x attribute indicates the x-coordinate in the font
coordinate system of the origin of a glyph to be used when drawing
vertically oriented text.

You can use this attribute with the following SVG elements:

-    <font>

Usage notes

  --------------- ------------------------------
  Value             <number> 
  Default value   Half of   horiz-adv-x  value
  Animatable      No
  --------------- ------------------------------

 <number>

    This value indicates the x-coordinate of the origin of a glyph for
    vertically oriented text.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontElementVertOriginXAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     horiz-origin-x 
-     horiz-origin-y 
-     vert-origin-y 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# vert-origin-y #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  vert-origin-y attribute indicates the y-coordinate in the font
coordinate system of the origin of a glyph to be used when drawing
vertically oriented text.

You can use this attribute with the following SVG elements:

-    <font>

Usage notes

  --------------- -----------------
  Value             <number> 
  Default value     ascent  value
  Animatable      No
  --------------- -----------------

 <number>

    This value indicates the y-coordinate of the origin of a glyph for
    vertically oriented text.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontElementVertOriginYAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     horiz-origin-x 
-     horiz-origin-y 
-     vert-origin-x 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# v-hanging #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  v-hanging attribute indicates the alignment coordinate for glyphs
to achieve hanging baseline alignment. The value is an offset in the
font coordinate system relative to the glyph-specific   vert-origin-x 
attribute.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- -------------
  Value             <number> 
  Default value   None
  Animatable      No
  --------------- -------------

 <number>

    This value indicates the alignment coordinate for the glyphs to
    achieve hanging baseline alignment.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementVertHangingAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     hanging 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 9, 2023 by MDN contributors .
# v-ideographic #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  v-ideographic attribute indicates the alignment coordinate for
glyphs to achieve ideographic baseline alignment for vertically oriented
glyph layouts. The value is an offset in the font coordinate system
relative to the glyph-specific   vert-origin-x  attribute.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- -------------
  Value             <number> 
  Default value   None
  Animatable      No
  --------------- -------------

 <number>

    This value indicates the alignment coordinate for the glyphs.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementVertIdeographicAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 9, 2023 by MDN contributors .
# viewBox #

The  viewBox attribute defines the position and dimension, in user
space, of an SVG viewport.

The value of the  viewBox attribute is a list of four numbers:  min-x ,
 min-y ,  width and  height . The numbers  min-x and  min-y represent
the top left coordinates of the viewport. The numbers  width and  height
represent its dimensions. These numbers, which are separated by
whitespace and/or a comma, specify a rectangle in user space which is
mapped to the bounds of the viewport established for the associated SVG
element (not the browser viewport ).

You can use this attribute with the following SVG elements:

-    <marker>
-    <pattern>
-    <svg>
-    <symbol>
-    <view>

Example

    html,
    body,
    svg {
      height: 100%;
      vertical-align: top;
    }
    svg:not(:root) {
      display: inline-block;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <!--
      with relative unit such as percentage, the visual size
      of the square looks unchanged regardless of the viewBox
      -->
      <rect x="0" y="0" width="100%" height="100%" />

      <!--
      with a large viewBox the circle looks small
      as it is using user units for the r attribute:
      4 resolved against 100 as set in the viewBox
      -->
      <circle cx="50%" cy="50%" r="4" fill="white" />
    </svg>

    <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
      <!--
      with relative unit such as percentage, the visual size
      of the square looks unchanged regardless of the viewBox
      -->
      <rect x="0" y="0" width="100%" height="100%" />

      <!--
      with a small viewBox the circle looks large
      as it is using user units for the r attribute:
      4 resolved against 10 as set in the viewBox
      -->
      <circle cx="50%" cy="50%" r="4" fill="white" />
    </svg>

    <svg viewBox="-5 -5 10 10" xmlns="http://www.w3.org/2000/svg">
      <!--
      The point of coordinate 0,0 is now in the center of the viewport,
      and 100% is still resolve to a width or height of 10 user units so
      the rectangle looks shifted to the bottom/right corner of the viewport
      -->
      <rect x="0" y="0" width="100%" height="100%" />

      <!--
      With the point of coordinate 0,0 in the center of the viewport the
      value 50% is resolve to 5 which means the center of the circle is
      in the bottom/right corner of the viewport.
      -->
      <circle cx="50%" cy="50%" r="4" fill="white" />
    </svg>

The exact effect of this attribute is influenced by the
  preserveAspectRatio  attribute.

Note: Values for  width or  height lower or equal to  0 disable
rendering of the element.

marker

For  <marker> ,  viewBox defines the position and dimension for the
content of the  <marker> element.

  --------------- ----------------------------------------------
  Value           <number> ,? <number> ,? <number> ,? <number>
  Default value   none
  Animatable      Yes
  --------------- ----------------------------------------------

pattern

For  <pattern> ,  viewBox defines the position and dimension for the
content of the pattern tile.

  --------------- ----------------------------------------------
  Value           <number> ,? <number> ,? <number> ,? <number>
  Default value   none
  Animatable      Yes
  --------------- ----------------------------------------------

svg

For  <svg> ,  viewBox defines the position and dimension for the content
of the  <svg> element.

  --------------- ----------------------------------------------
  Value           <number> ,? <number> ,? <number> ,? <number>
  Default value   none
  Animatable      Yes
  --------------- ----------------------------------------------

symbol

For  <symbol> ,  viewBox defines the position and dimension for the
content of the  <symbol> element.

  --------------- ----------------------------------------------
  Value           <number> ,? <number> ,? <number> ,? <number>
  Default value   none
  Animatable      Yes
  --------------- ----------------------------------------------

view

For  <view> ,  viewBox defines the position and dimension for the
content of the  <view> element.

  --------------- ----------------------------------------------
  Value           <number> ,? <number> ,? <number> ,? <number>
  Default value   none
  Animatable      Yes
  --------------- ----------------------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # ViewBoxAttribute

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Sep 1, 2023 by MDN contributors .
# visibility #

The  visibility attribute lets you control the visibility of graphical
elements. With a value of  hidden or  collapse the current graphics
element is invisible.

Note: If the  visibility attribute is set to  hidden on a text element,
then the text is invisible but still takes up space in text layout
calculations.

Depending on the value of attribute   pointer-events  , graphics
elements which have their  visibility attribute set to  hidden still
might receive events.

Note: As a presentation attribute,  visibility can be used as a CSS
property. See the  CSS visibility property for more information.

You can use this attribute with the following SVG elements:

-    <a>
-    <audio>
-    <canvas>
-    <circle>
-    <ellipse>
-    <foreignObject>
-    <iframe>
-    <image>
-    <line>
-    <path>
-    <polygon>
-    <polyline>
-    <rect>
-    <text>
-    <textPath>
-    <tref>
-    <tspan>
-    <video>

Example

Example 1

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 220 120" xmlns="http://www.w3.org/2000/svg">
      <rect
        x="10"
        y="10"
        width="200"
        height="100"
        stroke="black"
        stroke-width="5"
        fill="transparent" />
      <g stroke="seagreen" stroke-width="5" fill="skyblue">
        <rect x="20" y="20" width="80" height="80" visibility="visible" />
        <rect x="120" y="20" width="80" height="80" visibility="hidden" />
      </g>
    </svg>

Example 2

The following example toggles the CSS  visibility of the SVG image path.

HTML

html

    <button id="nav-toggle-button">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        class="button-icon">
        <path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z" />
        <path
          d="M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"
          class="invisible" />
        <path d="M0 0h24v24H0z" fill="none" />
      </svg>
      <span> click me </span>
    </button>

CSS

css

    svg {
      display: inline !important;
    }
    span {
      vertical-align: 50%;
    }
    button {
      line-height: 1em;
    }
    .invisible {
      visibility: hidden;
    }

JavaScript

js

    const button = document.querySelector("button");
    button.addEventListener("click", (evt) => {
      button
        .querySelector("svg > path:nth-of-type(1)")
        .classList.toggle("invisible");
      button
        .querySelector("svg > path:nth-of-type(2)")
        .classList.toggle("invisible");
    });

Result

Usage notes

  --------------- --------------------------------
  Value            visible |  hidden |  collapse
  Default value    visible
  Animatable      Yes
  --------------- --------------------------------

 visible

    This value indicates that the element will be painted.

 hidden

    This value indicates that the element will not be painted. Though it
    is still part of the rendering tree, i.e. it may receive pointer
    events depending on the   pointer-events  attribute, may receive
    focus depending on the   tabindex  attribute, contributes to
    bounding box calculations and clipping paths, and does affect text
    layout.

 collapse

    This value is equal to  hidden .

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # VisibilityControl

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     display  attribute
-    CSS visibility

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# v-mathematical #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  v-mathematical attribute indicates the alignment coordinate for
glyphs to achieve mathematical baseline alignment for vertically
oriented glyph layouts. The value is an offset in the font coordinate
system relative to the glyph-specific   vert-origin-x  attribute.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- -------------
  Value             <number> 
  Default value   None
  Animatable      No
  --------------- -------------

 <number>

    This value indicates the alignment coordinate for the glyphs.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementVertMathematicalAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# width #

The  width attribute defines the horizontal length of an element in the
user coordinate system.

You can use this attribute with the following SVG elements:

-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feDropShadow>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>
-    <filter>
-    <foreignObject>
-    <image>
-    <mask>
-    <pattern>
-    <rect>
-    <svg>
-    <use>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 300" xmlns="http://www.w3.org/2000/svg">
      <!-- With a width of 0 or less, nothing will be rendered -->
      <rect x="0" y="0" width="0" height="90" />
      <rect x="0" y="100" width="60" height="90" />
      <rect x="0" y="200" width="100%" height="90" />
    </svg>

feBlend

For  <feBlend> ,  width defines the horizontal length for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feColorMatrix

For  <feColorMatrix> ,  width defines the horizontal length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feComponentTransfer

For  <feComponentTransfer> ,  width defines the horizontal length for
the rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feComposite

For  <feComposite> ,  width defines the horizontal length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feConvolveMatrix

For  <feConvolveMatrix> ,  width defines the horizontal length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feDiffuseLighting

For  <feDiffuseLighting> ,  width defines the horizontal length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feDisplacementMap

For  <feDisplacementMap> ,  width defines the horizontal length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feDropShadow

For  <feDropShadow> ,  width defines the horizontal length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feFlood

For  <feFlood> ,  width defines the horizontal length for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feGaussianBlur

For  <feGaussianBlur> ,  width defines the horizontal length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feImage

For  <feImage> ,  width defines the horizontal length for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feMerge

For  <feMerge> ,  width defines the horizontal length for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feMorphology

For  <feMorphology> ,  width defines the horizontal length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feOffset

For  <feOffset> ,  width defines the horizontal length for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feSpecularLighting

For  <feSpecularLighting> ,  width defines the horizontal length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feTile

For  <feTile> ,  width defines the horizontal length for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

feTurbulence

For  <feTurbulence> ,  width defines the horizontal length for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    100%
  Animatable      Yes
  --------------- -------------------------

filter

For  <filter> ,  width defines the horizontal length for the rendering
area of the filter.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    120%
  Animatable      Yes
  --------------- -------------------------

foreignObject

For  <foreignObject> ,  width defines the horizontal length for the
rendering area for the referenced document.

  --------------- ---------------------------------
  Value            auto | <length> | <percentage>
  Default value    auto (treated as  0 )
  Animatable      Yes
  --------------- ---------------------------------

Note: Starting with SVG2,  width is a Geometry Property meaning this
attribute can also be used as a CSS property for  <foreignObject> .

image

For  <image> ,  width defines the horizontal length for the image.

  --------------- -----------------------------------------------------
  Value            auto | <length> | <percentage>
  Default value    auto (treated as the intrinsic width of the image)
  Animatable      Yes
  --------------- -----------------------------------------------------

Note: Starting with SVG2,  width is a Geometry Property meaning this
attribute can also be used as a CSS property for images.

mask

For  <mask> ,  width defines the horizontal length of its area of
effect. The exact effect of this attribute is influenced by the
  maskUnits  attribute.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    120%
  Animatable      Yes
  --------------- -------------------------

pattern

For  <pattern> ,  width defines the horizontal length of the tile
pattern. The exact effect of this attribute is influenced by the
  patternUnits  and   patternTransform  attributes.

  --------------- ----------
  Value           <length>
  Default value    0
  Animatable      Yes
  --------------- ----------

rect

For  <rect> ,  width defines the horizontal length for the rectangle.

  --------------- ---------------------------------
  Value            auto | <length> | <percentage>
  Default value    auto (treated as  0 )
  Animatable      Yes
  --------------- ---------------------------------

Note: Starting with SVG2,  width is a Geometry Property meaning this
attribute can also be used as a CSS property for rectangles.

svg

For  <svg> ,  width defines the horizontal length for the rendering area
of the SVG viewport.

Note: In an HTML document if both the   viewBox  and  width attributes
are omitted, the svg element will be rendered with a width of  300px

  --------------- ---------------------------------
  Value            auto | <length> | <percentage>
  Default value    auto (treated as  100% )
  Animatable      Yes
  --------------- ---------------------------------

Note: Starting with SVG2,  width is a Geometry Property meaning this
attribute can also be used as a CSS property for  <svg> .

use

For  <use> ,  width defines the horizontal length for the referenced
element.

  --------------- ---------------------------------
  Value            auto | <length> | <percentage>
  Default value    auto (treated as  0 )
  Animatable      Yes
  --------------- ---------------------------------

Note:  width has no effect on  use elements, unless the element
referenced has a viewBox - i.e. they only have an effect when  use
refers to a  svg or  symbol element.

Note: Starting with SVG2,  width is a Geometry Property meaning this
attribute can also be used as a CSS property for used elements.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-filter-width

  Filter Effects Module Level 1
  # element-attrdef-filter-primitive-width

  CSS Masking Module Level 1
  # element-attrdef-mask-width

  Scalable Vector Graphics (SVG) 2
  # Sizing

  Scalable Vector Graphics (SVG) 2
  # PatternElementWidthAttribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 3, 2023 by MDN contributors .
# widths #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  widths attribute indicates a list of range values, each followed by
one or more glyph widths.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- -------------
  Value             <number> 
  Default value   None
  Animatable      No
  --------------- -------------

 <number>

    This value is a comma-separated list of UCS range values as defined
    in ISO 10646 , each followed by one or more glyph widths.

    If this attribute is used, the   units-per-em  attribute must also
    be used.

    If the range is omitted, a range of U+0-7FFFFFFF is assumed which
    covers all characters and their glyphs. If not enough glyph widths
    are given, the last in the list is replicated to cover that range.
    If too many widths are provided, the extras are ignored.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementWidthsAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   ISO 10646

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# word-spacing #

The  word-spacing attribute specifies spacing behavior between words.

If a  <length> is provided without a unit identifier (e.g. an
unqualified number such as 128), the browser processes the <length> as a
width value in the current user coordinate system.

If a <length> is provided with one of the unit identifiers (e.g. .25em
or 1%), then the browser converts the <length> into a corresponding
value in the current user coordinate system.

Note: As a presentation attribute,  word-spacing can be used as a CSS
property. See the  CSS word-spacing property for more information.

You can use this attribute with the following SVG elements:

-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 250 50" xmlns="http://www.w3.org/2000/svg">
      <text y="20" word-spacing="2">Bigger spacing between words</text>
      <text x="0" y="40" word-spacing="-0.5">Smaller spacing between words</text>
    </svg>

Usage notes

  ---------------- ---------------------
  Value             normal |  <length>
  Animatable       Yes
  Default values    normal
  ---------------- ---------------------

For a description of the values, please refer to the CSS  letter-spacing
property.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Text Module Level 3
  # word-spacing-property

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS word-spacing

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# writing-mode #

The  writing-mode attribute specifies whether the initial
inline-progression-direction for a  <text> element shall be
left-to-right, right-to-left, or top-to-bottom. The  writing-mode
attribute applies only to  <text> elements; the attribute is ignored for
 <tspan> ,  <tref> , and  <textPath> sub-elements. (Note that the
inline-progression-direction can change within a  <text> element due to
the Unicode bidirectional algorithm and properties   direction  and
  unicode-bidi  .)

Note: As a presentation attribute,  writing-mode can be used as a CSS
property. See the CSS  writing-mode property for more information.

You can use this attribute with the following SVG elements:

-    <text>
-    <textPath>
-    <tref>
-    <tspan>

Usage notes

  --------------- ----------------------------------------------
  Default value    horizontal-tb
  Value            horizontal-tb |  vertical-rl |  vertical-lr
  Animatable      Yes
  --------------- ----------------------------------------------

 horizontal-tb

    This value defines a top-to-bottom block flow direction. Both the
    writing mode and the typographic mode are horizontal.

 vertical-rl

    This value defines a right-to-left block flow direction. Both the
    writing mode and the typographic mode are vertical.

 vertical-lr

    This value defines a left-to-right block flow direction. Both the
    writing mode and the typographic mode are vertical.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Writing Modes Level 4
  # block-flow

  Scalable Vector Graphics (SVG) 2
  # WritingModeProperty
  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    CSS writing-mode

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# x1 #

The  x1 attribute is used to specify the first x-coordinate for drawing
an SVG element that requires more than one coordinate. Elements that
only need one coordinate use the   x  attribute instead.

You can use this attribute with the following SVG elements:

-    <line>
-    <linearGradient>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
      <line x1="1" x2="5" y1="1" y2="9" stroke="red" />
      <line x1="5" x2="5" y1="1" y2="9" stroke="green" />
      <line x1="9" x2="5" y1="1" y2="9" stroke="blue" />
    </svg>

line

For  <line> ,  x1 defines the x coordinate of the starting point of the
line.

  --------------- ------------------------------------
  Value           <length> | <percentage> | <number>
  Default value    0
  Animatable      Yes
  --------------- ------------------------------------

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
      <line x1="1" x2="5" y1="1" y2="9" stroke="red" />
      <line x1="5" x2="5" y1="1" y2="9" stroke="green" />
      <line x1="9" x2="5" y1="1" y2="9" stroke="blue" />
    </svg>

linearGradient

For  <linearGradient> ,  x1 defines the x coordinate of the starting
point of the gradient vector used to map the gradient stop values. The
exact behavior of this attribute is influenced by the   gradientUnits 
attributes

  --------------- ------------------------------------
  Value           <length> | <percentage> | <number>
  Default value    0%
  Animatable      Yes
  --------------- ------------------------------------

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 20 10" xmlns="http://www.w3.org/2000/svg">
      <!--
      By default the gradient vector start at the left
      bounding limit of the shape it is applied to
      -->
      <linearGradient x1="0%" id="g0">
        <stop offset="0" stop-color="black" />
        <stop offset="100%" stop-color="red" />
      </linearGradient>

      <rect x="1" y="1" width="8" height="8" fill="url(#g0)" />

      <!--
      Here the gradient vector start at 80% of the left
      bounding limit of the shape it is applied to
      -->
      <linearGradient x1="80%" id="g1">
        <stop offset="0" stop-color="black" />
        <stop offset="100%" stop-color="red" />
      </linearGradient>

      <rect x="11" y="1" width="8" height="8" fill="url(#g1)" />
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # LineElementX1Attribute

  Scalable Vector Graphics (SVG) 2
  # LinearGradientElementX1Attribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# x2 #

The  x2 attribute is used to specify the second x-coordinate for drawing
an SVG element that requires more than one coordinate. Elements that
only need one coordinate use the   x  attribute instead.

You can use this attribute with the following SVG elements:

-    <line>
-    <linearGradient>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
      <line x1="5" x2="1" y1="1" y2="9" stroke="red" />
      <line x1="5" x2="5" y1="1" y2="9" stroke="green" />
      <line x1="5" x2="9" y1="1" y2="9" stroke="blue" />
    </svg>

line

For  <line> ,  x2 defines the x coordinate of the ending point of the
line.

  --------------- ------------------------------------
  Value           <length> | <percentage> | <number>
  Default value    0
  Animatable      Yes
  --------------- ------------------------------------

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
      <line x1="5" x2="1" y1="1" y2="9" stroke="red" />
      <line x1="5" x2="5" y1="1" y2="9" stroke="green" />
      <line x1="5" x2="9" y1="1" y2="9" stroke="blue" />
    </svg>

linearGradient

For  <linearGradient> ,  x2 defines the x coordinate of the ending point
of the gradient vector used to map the gradient stop values. The exact
behavior of this attribute is influenced by the   gradientUnits 
attributes

  --------------- ------------------------------------
  Value           <length> | <percentage> | <number>
  Default value    100%
  Animatable      Yes
  --------------- ------------------------------------

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 20 10" xmlns="http://www.w3.org/2000/svg">
      <!--
      By default the gradient vector end at the right
      bounding limit of the shape it is applied to
      -->
      <linearGradient x2="100%" id="g0">
        <stop offset="0" stop-color="black" />
        <stop offset="100%" stop-color="red" />
      </linearGradient>

      <rect x="1" y="1" width="8" height="8" fill="url(#g0)" />

      <!--
      Here the gradient vector start at 20% of the left
      bounding limit of the shape it is applied to
      -->
      <linearGradient x2="20%" id="g1">
        <stop offset="0" stop-color="black" />
        <stop offset="100%" stop-color="red" />
      </linearGradient>

      <rect x="11" y="1" width="8" height="8" fill="url(#g1)" />
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # LineElementX2Attribute

  Scalable Vector Graphics (SVG) 2
  # LinearGradientElementX2Attribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# xChannelSelector #

The  xChannelSelector attribute indicates which color channel from
  in2  to use to displace the pixels in   in  along the x-axis.

You can use this attribute with the following SVG elements:

-    <feDisplacementMap>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 440 160" xmlns="http://www.w3.org/2000/svg">
      <filter id="displacementFilter">
        <feImage
          href="mdn.svg"
          x="0"
          y="0"
          width="100%"
          height="100%"
          result="abc" />
        <feDisplacementMap
          in2="abc"
          in="SourceGraphic"
          scale="30"
          xChannelSelector="R" />
      </filter>
      <filter id="displacementFilter2">
        <feImage
          href="mdn.svg"
          x="0"
          y="0"
          width="100%"
          height="100%"
          result="abc" />
        <feDisplacementMap
          in2="abc"
          in="SourceGraphic"
          scale="30"
          xChannelSelector="B" />
      </filter>

      <text x="10" y="60" font-size="50" filter="url(#displacementFilter)">
        Some displaced text
      </text>
      <text x="10" y="120" font-size="50" filter="url(#displacementFilter2)">
        Some displaced text
      </text>
    </svg>

Usage notes

  --------------- -------------------
  Value            R |  G |  B |  A
  Default value    A
  Animatable      Yes
  --------------- -------------------

 R

    This keyword specifies that the red color channel of the input image
    defined in   in2  will be used to displace the pixels of the input
    image defined in   in  along the x-axis.

 G

    This keyword specifies that the green color channel of the input
    image defined in   in2  will be used to displace the pixels of the
    input image defined in   in  along the x-axis.

 B

    This keyword specifies that the blue color channel of the input
    image defined in   in2  will be used to displace the pixels of the
    input image defined in   in  along the x-axis.

 A

    This keyword specifies that the alpha channel of the input image
    defined in   in2  will be used to displace the pixels of the input
    image defined in   in  along the x-axis.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fedisplacementmap-xchannelselector

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# x-height #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  x-height attribute indicates the height of lowercase glyphs in the
font within the font coordinate system.

You can use this attribute with the following SVG elements:

-    <font-face>

Usage notes

  --------------- -------------
  Value             <number> 
  Default value   None
  Animatable      No
  --------------- -------------

 <number>

    This value indicates the height of lowercase glyphs.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElementXHeightAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     cap-height 
-     accent-height 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# x #

The  x attribute defines an x-axis coordinate in the user coordinate
system.

You can use this attribute with the following SVG elements:

-    <cursor>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feDropShadow>
-    <feFlood>
-    <feFuncA>
-    <feFuncB>
-    <feFuncG>
-    <feFuncR>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMergeNode>
-    <feMorphology>
-    <feOffset>
-    <fePointLight>
-    <feSpecularLighting>
-    <feSpotLight>
-    <feTile>
-    <feTurbulence>
-    <filter>
-    <foreignObject>
-    <glyphRef>
-    <image>
-    <mask>
-    <pattern>
-    <rect>
-    <svg>
-    <symbol>
-    <text>
-    <tref>
-    <tspan>
-    <use>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 300 100" xmlns="http://www.w3.org/2000/svg">
      <rect x="20" y="20" width="60" height="60" />
      <rect x="120" y="20" width="60" height="60" />
      <rect x="220" y="20" width="60" height="60" />
    </svg>

feBlend

For  <feBlend> ,  x defines the minimum x coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feColorMatrix

For  <feColorMatrix> ,  x defines the minimum x coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feComponentTransfer

For  <feComponentTransfer> ,  x defines the minimum x coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feComposite

For  <feComposite> ,  x defines the minimum x coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feConvolveMatrix

For  <feConvolveMatrix> ,  x defines the minimum x coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feDiffuseLighting

For  <feDiffuseLighting> ,  x defines the minimum x coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feDisplacementMap

For  <feDisplacementMap> ,  x defines the minimum x coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feDropShadow

For  <feDropShadow> ,  x defines the minimum x coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feFlood

For  <feFlood> ,  x defines the minimum x coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feFuncA

For  <feFuncA> ,  x defines the minimum x coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feFuncB

For  <feFuncB> ,  x defines the minimum x coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feFuncG

For  <feFuncG> ,  x defines the minimum x coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feFuncR

For  <feFuncR> ,  x defines the minimum x coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feGaussianBlur

For  <feGaussianBlur> ,  x defines the minimum x coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feImage

For  <feImage> ,  x defines the minimum x coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feMerge

For  <feMerge> ,  x defines the minimum x coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feMergeNode

For  <feMergeNode> ,  x defines the minimum x coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feMorphology

For  <feMorphology> ,  x defines the minimum x coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feOffset

For  <feOffset> ,  x defines the minimum x coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

fePointLight

For  <fePointLight> ,  x defines the x location for the light source in
the coordinate system defined by the   primitiveUnits  attribute on the
 <filter> element.

  --------------- ----------
  Value           <number>
  Default value    0
  Animatable      Yes
  --------------- ----------

feSpecularLighting

For  <feSpecularLighting> ,  x defines the minimum x coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feSpotLight

For  <feSpotLight> ,  x defines the x location for the light source in
the coordinate system defined by the   primitiveUnits  attribute on the
 <filter> element.

  --------------- ----------
  Value           <number>
  Default value    0
  Animatable      Yes
  --------------- ----------

feTile

For  <feTile> ,  x defines the minimum x coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feTurbulence

For  <feTurbulence> ,  x defines the minimum x coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

filter

For  <filter> ,  x defines the x coordinate of the upper left corner for
the rendering area of the filter.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    -10%
  Animatable      Yes
  --------------- -------------------------

foreignObject

For  <foreignObject> ,  x defines the x coordinate of the upper left
corner of its viewport.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0
  Animatable      Yes
  --------------- -------------------------

Note: Starting with SVG2,  x is a Geometry Property meaning this
attribute can also be used as a CSS property for  <foreignObject> .

glyphRef

Warning: As of SVG2  <glyphRef> is deprecated and shouldn't be used.

For  <glyphRef> ,  x defines the x-axis coordinate of the glyph.

  --------------- --------------------------------------------------------------------------------------------------------------------------
  Value           <number>
  Default value    0 for the first glyphRef, and the end x coordinate of the previous  <glyphRef> for all subsequent sibling  <glyphRef> .
  Animatable      Yes
  --------------- --------------------------------------------------------------------------------------------------------------------------

image

For  <image> ,  x defines the x coordinate of the upper left corner of
the image.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0
  Animatable      Yes
  --------------- -------------------------

Note: Starting with SVG2,  x is a Geometry Property meaning this
attribute can also be used as a CSS property for images.

mask

For  <mask> ,  x defines the x coordinate of the upper left corner of
its area of effect. The exact effect of this attribute is influenced by
the   maskUnits  attribute.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    -10%
  Animatable      Yes
  --------------- -------------------------

pattern

For  <pattern> ,  x defines the x coordinate of the upper left corner of
the tile pattern. The exact effect of this attribute is influenced by
the   patternUnits  and   patternTransform  attributes.

  --------------- ----------
  Value           <length>
  Default value    0
  Animatable      Yes
  --------------- ----------

rect

For  <rect> ,  x defines the x coordinate of the upper left corner of
the shape.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0
  Animatable      Yes
  --------------- -------------------------

Note: Starting with SVG2,  x is a Geometry Property meaning this
attribute can also be used as a CSS property for rectangles.

svg

For  <svg> ,  x defines the x coordinate of the upper left corner of its
viewport.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0
  Animatable      Yes
  --------------- -------------------------

Note: Starting with SVG2,  x is a Geometry Property meaning this
attribute can also be used as a CSS property for  <svg> .

text

For  <text> , if it contains a single value,  x defines the x coordinate
where the content text position must be placed. The content text
position is usually a point on the baseline of the first line of text.
The exact content text position is influenced by other properties, such
as   text-anchor  or  direction .

If it contains multiple values,  x defines the x coordinate of each
individual glyph from the text. If there are fewer values than glyphs,
the remaining glyphs are placed in line with the last positioned glyph.
If there are more values than glyphs, the extra values are ignored.

  --------------- -------------------------------------
  Value           List of ( <length> | <percentage> )
  Default value    0
  Animatable      Yes
  --------------- -------------------------------------

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 100" xmlns="http://www.w3.org/2000/svg">
      <!-- horizontal line to materialized the text base line -->
      <line x1="0" y1="40%" x2="100%" y2="40%" />
      <line x1="0" y1="90%" x2="100%" y2="90%" />

      <!-- vertical line to materialized the x positioning -->
      <line x1="25%" y1="0" x2="25%" y2="100%" />
      <line x1="50%" y1="0" x2="50%" y2="100%" />
      <line x1="75%" y1="0" x2="75%" y2="100%" />

      <!-- x with a single value -->
      <text y="40%" x="50%">SVG</text>

      <!-- x with multiple values -->
      <text y="90%" x="25%, 50%, 75%">SVG</text>
    </svg>

css

    text {
      font: 40px sans-serif;
    }

    line {
      fill: none;
      stroke: red;
      stroke-width: 0.5px;
      stroke-dasharray: 2px;
    }

tref

Warning: As of SVG2  <tref> is deprecated and shouldn't be used.

For  <tref> , if it contains a single value,  x defines the x coordinate
where the content text position must be placed. The content text
position is usually a point on the baseline of the first line of text.
The exact content text position is influenced by other properties, such
as   text-anchor  or  direction .

If it contains multiple values,  x defines the x coordinate of each
individual glyph from the text. If there are fewer values than glyphs,
the remaining glyphs are placed in line with the last positioned glyph.
If there are more values than glyphs, the extra values are ignored.

  --------------- -------------------------------------
  Value           List of ( <length> | <percentage> )
  Default value    0
  Animatable      Yes
  --------------- -------------------------------------

tspan

For  <tspan> , if it contains a single value,  x defines the x
coordinate where the content text position must be placed. The content
text position is usually a point on the baseline of the first line of
text. The exact content text position is influenced by other properties,
such as   text-anchor  or  direction .

If it contains multiple values,  x defines the x coordinate of each
individual glyph from the text. If there are fewer values than glyphs,
the remaining glyphs are placed in line with the last positioned glyph.
If there are more values than glyphs, the extra values are ignored.

  --------------- -------------------------------------
  Value           List of ( <length> | <percentage> )
  Default value   none
  Animatable      Yes
  --------------- -------------------------------------

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 100" xmlns="http://www.w3.org/2000/svg">
      <!-- horizontal line to materialized the text base line -->
      <line x1="0" y1="40%" x2="100%" y2="40%" />
      <line x1="0" y1="90%" x2="100%" y2="90%" />

      <!-- vertical line to materialized the x positioning -->
      <line x1="25%" y1="0" x2="25%" y2="100%" />
      <line x1="50%" y1="0" x2="50%" y2="100%" />
      <line x1="75%" y1="0" x2="75%" y2="100%" />

      <text>
        <!-- x with a single value -->
        <tspan y="40%" x="50%">SVG</tspan>

        <!-- x with multiple values -->
        <tspan y="90%" x="25%, 50%, 75%">SVG</tspan>
      </text>
    </svg>

css

    text {
      font: 40px sans-serif;
    }

    line {
      fill: none;
      stroke: red;
      stroke-width: 0.5px;
      stroke-dasharray: 2px;
    }

use

For  <use> ,  x defines the x coordinate of the upper left corner of the
referenced element.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0
  Animatable      Yes
  --------------- -------------------------

Note: Starting with SVG2,  x is a Geometry Property meaning this
attribute can also be used as a CSS property for used elements.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-filter-x

  Filter Effects Module Level 1
  # element-attrdef-fespotlight-x

  Filter Effects Module Level 1
  # element-attrdef-fepointlight-x

  Filter Effects Module Level 1
  # element-attrdef-filter-primitive-x

  CSS Masking Module Level 1
  # element-attrdef-mask-x

  Scalable Vector Graphics (SVG) 2
  # X

  Scalable Vector Graphics (SVG) 2
  # PatternElementXAttribute

  Scalable Vector Graphics (SVG) 2
  # TextElementXAttribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# xlink:arcrole #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  xlink:arcrole attribute specifies a contextual role for the element
and corresponds to the RDF Primer notion of a property.

This contextual role can differ from the meaning of the resource when
taken outside the context of this particular arc. For example, a
resource might generically represent a "person," but in the context of a
particular arc it might have the role of "mother" and in the context of
a different arc it might have the role of "daughter."

You can use this attribute with the following SVG elements:

-    <a>
-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <cursor>
-    <feImage>
-    <filter>
-    <font-face-uri>
-    <glyphRef>
-    <image>
-    <linearGradient>
-    <mpath>
-    <pattern>
-    <radialGradient>
-    <script>
-    <set>
-    <textPath>
-    <tref>
-    <use>

Usage notes

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      No
  --------------- ----------

 <iri>

    This value specifies an IRI reference that identifies some resource
    that describes the intended property.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # XLinkArcRoleAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Definition of the  xlink:arcrole attribute in the XLink
    specification

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# xlink:href #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  xlink:href attribute defines a reference to a resource as a
reference IRI . The exact meaning of that link depends on the context of
each element using it.

Note: SVG 2 removed the need for the  xlink namespace, so instead of
 xlink:href you should use   href  . If you need to support earlier
browser versions, the deprecated  xlink:href attribute can be used as a
fallback in addition to the  href attribute, e.g.
 <use href="some-id" xlink:href="some-id" x="5" y="5" /> .

You can use this attribute with the following SVG elements:

-    <a>
-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <cursor>
-    <feImage>
-    <filter>
-    <font-face-uri>
-    <glyphRef>
-    <image>
-    <linearGradient>
-    <mpath>
-    <pattern>
-    <radialGradient>
-    <script>
-    <set>
-    <textPath>
-    <tref>
-    <use>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 160 40" xmlns="http://www.w3.org/2000/svg">
      <a xlink:href="https://developer.mozilla.org/">
        <text x="10" y="25">MDN Web Docs</text>
      </a>
    </svg>

a

For  <a> ,  xlink:href defines the location of the referenced object.

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      Yes
  --------------- ----------

animate, animateMotion, animateTransform, set

For  <animate> ,  <animateMotion> ,  <animateTransform> , and  <set> ,
 xlink:href defines the reference to the element which is the target of
this animation and which therefore will be modified over time.

The target element must be part of the current SVG document fragment.

The value must point to exactly one target element which is capable of
being the target of the given animation.

If the  xlink:href attribute is not provided, the target element will be
the immediate parent element of the current animation element.

Refer to the descriptions of the individual animation elements for any
restrictions on what types of elements can be targets of particular
types of animations.

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      No
  --------------- ----------

cursor

For  <cursor> ,  xlink:href defines the reference to the file or element
which provides the image of the cursor.

  --------------- --------------
  Value             <funciri> 
  Default value   None
  Animatable      Yes
  --------------- --------------

feImage

For  <feImage> ,  xlink:href defines the reference to the image source.

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      Yes
  --------------- ----------

filter

For  <filter> ,  xlink:href defines the reference to another  <filter>
element within the current SVG document fragment. Any attributes which
are defined on the referenced  <filter> element which are not defined on
this element are inherited by this element. If this element has no
defined filter nodes, and the referenced element has defined filter
nodes (possibly due to its own  xlink:href attribute), then this element
inherits the filter nodes defined from the referenced  <filter> element.
Inheritance can be indirect to an arbitrary level; thus, if the
referenced  <filter> element inherits attributes or its filter node
specification due to its own  xlink:href attribute, then the current
element can inherit those attributes or filter node specifications.

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      Yes
  --------------- ----------

font-face-uri

For  <font-face-uri> ,  xlink:href defines the location of the
referenced font.

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      No
  --------------- ----------

glyphRef

For  <glyphRef> ,  xlink:href defines to a  <glyph> element in an SVG
document fragment. The referenced  <glyph> is rendered as an alternate
glyph.

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      No
  --------------- ----------

image

For  <image> ,  xlink:href defines the location of the referenced image.

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      Yes
  --------------- ----------

linearGradient

For  <linearGradient> ,  xlink:href defines the reference to a different
 <linearGradient> or  <radialGradient> element within the current SVG
document fragment. Any  <linearGradient> attributes which are defined on
the referenced element which are not defined on this element are
inherited by this element. If this element has no defined gradient
stops, and the referenced element does (possibly due to its own
 xlink:href attribute), then this element inherits the gradient stop
from the referenced element. Inheritance can be indirect to an arbitrary
level; thus, if the referenced element inherits attribute or gradient
stops due to its own  xlink:href attribute, then the current element can
inherit those attributes or gradient stops.

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      Yes
  --------------- ----------

mpath

For  <mpath> ,  xlink:href defines the reference to the  <path> element
which defines the motion path.

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      No
  --------------- ----------

pattern

For  <pattern> ,  xlink:href defines the reference to a different
 <pattern> element within the current SVG document fragment. Any
attributes which are defined on the referenced element which are not
defined on this element are inherited by this element. If this element
has no children, and the referenced element does (possibly due to its
own  xlink:href attribute), then this element inherits the children from
the referenced element. Inheritance can be indirect to an arbitrary
level; thus, if the referenced element inherits attributes or children
due to its own  xlink:href attribute, then the current element can
inherit those attributes or children.

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      Yes
  --------------- ----------

radialGradient

For  <radialGradient> ,  xlink:href defines the to a different
 <linearGradient> or  <radialGradient> element within the current SVG
document fragment. Any  <radialGradient> attributes which are defined on
the referenced element which are not defined on this element are
inherited by this element. If this element has no defined gradient
stops, and the referenced element does (possibly due to its own
 xlink:href attribute), then this element inherits the gradient stop
from the referenced element. Inheritance can be indirect to an arbitrary
level; thus, if the referenced element inherits attribute or gradient
stops due to its own  xlink:href attribute, then the current element can
inherit those attributes or gradient stops.

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      Yes
  --------------- ----------

script

For  <script> ,  xlink:href defines a reference to an external resource
containing the script code.

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      No
  --------------- ----------

textPath

For  <textPath> ,  xlink:href defines a reference to the  <path> element
onto which the glyphs will be rendered.

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      Yes
  --------------- ----------

use

For  <use> ,  xlink:href defines the location of the referenced object.

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      Yes
  --------------- ----------

tref

For  <tref> ,  xlink:href defines a reference to an element whose
character data content shall be used as character data for this  <tref>
element.

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      Yes
  --------------- ----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # XLinkHrefAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-     href 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# xlink:show #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  xlink:show attribute indicates how a linked resource should be
opened and is meant for XLink -aware processors. In case of a conflict,
the   target  attribute has priority, since it can express a wider range
of values.

You can use this attribute with the following SVG elements:

-    <a>

Usage notes

  --------------- -------------------------------------------
  Value            new |  replace |  embed |  other |  none
  Default value    replace
  Animatable      No
  --------------- -------------------------------------------

 new

    This value specifies that the referenced resource is opened in a new
    window or tab. This is similar to the effect achieved by an HTML
     <a> element with target set to  _blank .

 replace

    This value specifies that the referenced resource is opened in the
    same window or tab. This is similar to the effect achieved by an
    HTML  <a> element with target set to  _self .

 embed

    This value specifies that instead of linking to the resource it will
    be loaded and shown within the document. This is similar to the
    effect achieved by an HTML  <img> element.

 other

    This value indicates that other markup present in the link, i.e. the
      target  attribute, determines its behavior.

 none

    This value specifies that there is no indication for how to refer to
    the linked resource.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # XLinkShowAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Definition of the  xlink:show attribute in the XLink specification

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# xlink:title #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  xlink:title attribute is used to describe the meaning of a link or
resource in a human-readable fashion.

The use of this information is highly dependent on the type of
processing being done. It may be used, for example, to make titles
available to applications used by visually impaired users, or to create
a table of links, or to present help text that appears when a user lets
a mouse pointer hover over a starting resource.

Note: New content should use a  <title> child element rather than a
 xlink:title attribute.

You can use this attribute with the following SVG elements:

-    <a>
-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <cursor>
-    <feImage>
-    <filter>
-    <font-face-uri>
-    <glyphRef>
-    <image>
-    <linearGradient>
-    <mpath>
-    <pattern>
-    <radialGradient>
-    <script>
-    <set>
-    <textPath>
-    <tref>
-    <use>

Usage context

  --------------- ---------------
  Value             <anything> 
  Default value   None
  Animatable      No
  --------------- ---------------

 <anything>

    This value specifies the title used to describe the meaning of the
    link or resource.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # XLinkTitleAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# xlink:type #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  xlink:type attribute identifies the type of XLink being used. In
SVG, only simple links are available.

You can use this attribute with the following SVG elements:

-    <a>
-    <animate>
-    <animateMotion>
-    <animateTransform>
-    <cursor>
-    <feImage>
-    <filter>
-    <font-face-uri>
-    <glyphRef>
-    <image>
-    <linearGradient>
-    <mpath>
-    <pattern>
-    <radialGradient>
-    <script>
-    <set>
-    <textPath>
-    <tref>
-    <use>

Usage notes

  --------------- ---------
  Value            simple
  Default value    simple
  Animatable      No
  --------------- ---------

 simple

    This value specifies that the referred resource is a simple link.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # XLinkTypeAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Definition of the  xlink:type attribute in the XLink specification

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# xml:base #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  xml:base attribute specifies a base IRI other than the base IRI of
the document or external entity.

You can use this attribute with any SVG element.

Usage notes

  --------------- ----------
  Value             <iri> 
  Default value   None
  Animatable      No
  --------------- ----------

 <iri>

    This value specifies the base IRI of the element.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # XMLBaseAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   XML Base specification

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# xml:lang #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  xml:lang attribute specifies the primary language used in contents
and attributes containing text content of particular elements.

It is a universal attribute allowed in all XML dialects to mark up the
natural human language that an element contains.

There is also a   lang  attribute (without namespace). If both of them
are defined, the one with namespace is used and the one without is
ignored.

You can use this attribute with any SVG element.

Example

html

    <svg viewBox="0 0 200 100" xmlns="http://www.w3.org/2000/svg">
      <text xml:lang="en-US">This is some English text</text>
    </svg>

Usage notes

  --------------- -----------------
  Value            <language-tag>
  Default value   None
  Animatable      No
  --------------- -----------------

 <language-tag>

    This value specifies the language used for the element. The syntax
    of this value is defined in RFC 5646: Tags for Identifying Languages
    (also known as BCP 47) .

    The most common syntax is a value formed by a lowercase
    two-character part for the language and an uppercase two-character
    part for the region or country, separated by a minus sign, e.g.
     en-US for US English or  de-AT for Austrian German.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # LangSpaceAttrs

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   XML specification of  xml:lang
-   RFC 5646: Tags for Identifying Languages (also known as BCP 47)

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# xml:space #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

SVG supports the built-in XML  xml:space attribute to handle whitespace
characters inside elements. Child elements inside an element may also
have an  xml:space attribute that overrides the parent's one.

Note: Instead of using the  xml:space attribute, use the  white-space
CSS property.

This attribute influences how browsers parse text content and therefore
changes the way the DOM is built. Therefore, changing this attribute's
value through the DOM API may have no effect.

You can use this attribute with any SVG element.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 160 50" xmlns="http://www.w3.org/2000/svg">
      <text y="20" xml:space="default">    Default    spacing</text>
      <text y="40" xml:space="preserve">    Preserved    spacing</text>
    </svg>

Usage notes

  --------------- ----------------------
  Value            default |  preserve
  Default value    default
  Animatable      No
  --------------- ----------------------

 default

    With this value set, whitespace characters will be processed in this
    order:

    1.  All newline characters are removed.
    2.  All tab characters are converted into space characters.
    3.  All leading and trailing space characters are removed.
    4.  All contiguous space characters are collapsed into a single
        space character.

 preserve

    This value tells the user agent to convert all newline and tab
    characters into spaces. Then, it draws all space characters
    (including leading, trailing and multiple consecutive space
    characters).

    For example, the string "a   b" (three spaces between "a" and "b")
    separates "a" and "b" more than "a b" (one space between "a" and
    "b").

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # WhitespaceProcessingXMLSpaceAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 10, 2023 by MDN contributors .
# y1 #

The  y1 attribute is used to specify the first y-coordinate for drawing
an SVG element that requires more than one coordinate. Elements that
only need one coordinate use the   y  attribute instead.

You can use this attribute with the following SVG elements:

-    <line>
-    <linearGradient>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
      <line x1="1" x2="9" y1="1" y2="5" stroke="red" />
      <line x1="1" x2="9" y1="5" y2="5" stroke="green" />
      <line x1="1" x2="9" y1="9" y2="5" stroke="blue" />
    </svg>

line

For  <line> ,  y1 defines the y coordinate of the starting point of the
line.

  --------------- ------------------------------------
  Value           <length> | <percentage> | <number>
  Default value    0
  Animatable      Yes
  --------------- ------------------------------------

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
      <line x1="1" x2="9" y1="1" y2="5" stroke="red" />
      <line x1="1" x2="9" y1="5" y2="5" stroke="green" />
      <line x1="1" x2="9" y1="9" y2="5" stroke="blue" />
    </svg>

linearGradient

For  <linearGradient> ,  y1 defines the y coordinate of the starting
point of the gradient vector used to map the gradient stop values. The
exact behavior of this attribute is influenced by the   gradientUnits 
attributes

  --------------- ------------------------------------
  Value           <length> | <percentage> | <number>
  Default value    0%
  Animatable      Yes
  --------------- ------------------------------------

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 20 10" xmlns="http://www.w3.org/2000/svg">
      <!--
      By default the gradient vector start at the top left
      corner of the bounding box of the shape it is applied to.
      -->
      <linearGradient y1="0%" id="g0">
        <stop offset="5%" stop-color="black" />
        <stop offset="50%" stop-color="red" />
        <stop offset="95%" stop-color="black" />
      </linearGradient>

      <rect x="1" y="1" width="8" height="8" fill="url(#g0)" />

      <!--
      Here the gradient vector start at the bottom left
      corner of the bounding box of the shape it is applied to.
      -->
      <linearGradient y1="100%" id="g1">
        <stop offset="5%" stop-color="black" />
        <stop offset="50%" stop-color="red" />
        <stop offset="95%" stop-color="black" />
      </linearGradient>

      <rect x="11" y="1" width="8" height="8" fill="url(#g1)" />
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # LineElementY1Attribute

  Scalable Vector Graphics (SVG) 2
  # LinearGradientElementY1Attribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# y2 #

The  y2 attribute is used to specify the second y-coordinate for drawing
an SVG element that requires more than one coordinate. Elements that
only need one coordinate use the   y  attribute instead.

You can use this attribute with the following SVG elements:

-    <line>
-    <linearGradient>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
      <line x1="1" x2="9" y1="5" y2="1" stroke="red" />
      <line x1="1" x2="9" y1="5" y2="5" stroke="green" />
      <line x1="1" x2="9" y1="5" y2="9" stroke="blue" />
    </svg>

line

For  <line> ,  y2 defines the y coordinate of the ending point of the
line.

  --------------- ------------------------------------
  Value           <length> | <percentage> | <number>
  Default value    0
  Animatable      Yes
  --------------- ------------------------------------

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
      <line x1="1" x2="9" y1="5" y2="1" stroke="red" />
      <line x1="1" x2="9" y1="5" y2="5" stroke="green" />
      <line x1="1" x2="9" y1="5" y2="9" stroke="blue" />
    </svg>

linearGradient

For  <linearGradient> ,  y2 defines the y coordinate of the ending point
of the gradient vector used to map the gradient stop values. The exact
behavior of this attribute is influenced by the   gradientUnits 
attributes

  --------------- ------------------------------------
  Value           <length> | <percentage> | <number>
  Default value    0%
  Animatable      Yes
  --------------- ------------------------------------

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 20 10" xmlns="http://www.w3.org/2000/svg">
      <!--
      By default the gradient vector end at the top right
      corner of the bounding box of the shape it is applied to.
      -->
      <linearGradient y2="0%" id="g0">
        <stop offset="5%" stop-color="black" />
        <stop offset="50%" stop-color="red" />
        <stop offset="95%" stop-color="black" />
      </linearGradient>

      <rect x="1" y="1" width="8" height="8" fill="url(#g0)" />

      <!--
      Here the gradient vector end at the bottom right
      corner of the bounding box of the shape it is applied to.
      -->
      <linearGradient y2="100%" id="g1">
        <stop offset="5%" stop-color="black" />
        <stop offset="50%" stop-color="red" />
        <stop offset="95%" stop-color="black" />
      </linearGradient>

      <rect x="11" y="1" width="8" height="8" fill="url(#g1)" />
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # LineElementY2Attribute

  Scalable Vector Graphics (SVG) 2
  # LinearGradientElementY2Attribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# yChannelSelector #

The  yChannelSelector attribute indicates which color channel from
  in2  to use to displace the pixels in   in  along the y-axis.

You can use this attribute with the following SVG elements:

-    <feDisplacementMap>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 440 160" xmlns="http://www.w3.org/2000/svg">
      <filter id="displacementFilter">
        <feImage
          href="mdn.svg"
          x="0"
          y="0"
          width="100%"
          height="100%"
          result="abc" />
        <feDisplacementMap
          in2="abc"
          in="SourceGraphic"
          scale="30"
          yChannelSelector="R" />
      </filter>
      <filter id="displacementFilter2">
        <feImage
          href="mdn.svg"
          x="0"
          y="0"
          width="100%"
          height="100%"
          result="abc" />
        <feDisplacementMap
          in2="abc"
          in="SourceGraphic"
          scale="30"
          yChannelSelector="B" />
      </filter>

      <text x="10" y="60" font-size="50" filter="url(#displacementFilter)">
        Some displaced text
      </text>
      <text x="10" y="120" font-size="50" filter="url(#displacementFilter2)">
        Some displaced text
      </text>
    </svg>

Usage notes

  --------------- -------------------
  Value            R |  G |  B |  A
  Default value    A
  Animatable      Yes
  --------------- -------------------

 R

    This keyword specifies that the red color channel of the input image
    defined in   in2  will be used to displace the pixels of the input
    image defined in   in  along the y-axis.

 G

    This keyword specifies that the green color channel of the input
    image defined in   in2  will be used to displace the pixels of the
    input image defined in   in  along the y-axis.

 B

    This keyword specifies that the blue color channel of the input
    image defined in   in2  will be used to displace the pixels of the
    input image defined in   in  along the y-axis.

 A

    This keyword specifies that the alpha channel of the input image
    defined in   in2  will be used to displace the pixels of the input
    image defined in   in  along the y-axis.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fedisplacementmap-ychannelselector

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# y #

The  y attribute defines a y-axis coordinate in the user coordinate
system.

You can use this attribute with the following SVG elements:

-    <cursor>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feDropShadow>
-    <feFlood>
-    <feFuncA>
-    <feFuncB>
-    <feFuncG>
-    <feFuncR>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMergeNode>
-    <feMorphology>
-    <feOffset>
-    <fePointLight>
-    <feSpecularLighting>
-    <feSpotLight>
-    <feTile>
-    <feTurbulence>
-    <filter>
-    <foreignObject>
-    <glyphRef>
-    <image>
-    <mask>
-    <pattern>
-    <rect>
-    <svg>
-    <symbol>
-    <text>
-    <tref>
-    <tspan>
-    <use>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 300" xmlns="http://www.w3.org/2000/svg">
      <rect y="20" x="20" width="60" height="60" />
      <rect y="120" x="20" width="60" height="60" />
      <rect y="220" x="20" width="60" height="60" />
    </svg>

feBlend

For  <feBlend> ,  y defines the minimum y coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feColorMatrix

For  <feColorMatrix> ,  y defines the minimum y coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feComponentTransfer

For  <feComponentTransfer> ,  y defines the minimum y coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feComposite

For  <feComposite> ,  y defines the minimum y coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feConvolveMatrix

For  <feConvolveMatrix> ,  y defines the minimum y coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feDiffuseLighting

For  <feDiffuseLighting> ,  y defines the minimum y coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feDisplacementMap

For  <feDisplacementMap> ,  y defines the minimum y coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feDropShadow

For  <feDropShadow> ,  y defines the minimum y coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feFlood

For  <feFlood> ,  y defines the minimum y coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feFuncA

For  <feFuncA> ,  y defines the minimum y coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feFuncB

For  <feFuncB> ,  y defines the minimum y coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feFuncG

For  <feFuncG> ,  y defines the minimum y coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feFuncR

For  <feFuncR> ,  y defines the minimum y coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feGaussianBlur

For  <feGaussianBlur> ,  y defines the minimum y coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feImage

For  <feImage> ,  y defines the minimum y coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feMerge

For  <feMerge> ,  y defines the minimum y coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feMergeNode

For  <feMergeNode> ,  y defines the minimum y coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feMorphology

For  <feMorphology> ,  y defines the minimum y coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feOffset

For  <feOffset> ,  y defines the minimum y coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

fePointLight

For  <fePointLight> ,  y defines the y location for the light source in
the coordinate system defined by the   primitiveUnits  attribute on the
 <filter> element.

  --------------- ----------
  Value           <number>
  Default value    0
  Animatable      Yes
  --------------- ----------

feSpecularLighting

For  <feSpecularLighting> ,  y defines the minimum y coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feSpotLight

For  <feSpotLight> ,  y defines the y location for the light source in
the coordinate system defined by the   primitiveUnits  attribute on the
 <filter> element.

  --------------- ----------
  Value           <number>
  Default value    0
  Animatable      Yes
  --------------- ----------

feTile

For  <feTile> ,  y defines the minimum y coordinate for the rendering
area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

feTurbulence

For  <feTurbulence> ,  y defines the minimum y coordinate for the
rendering area of the primitive.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0%
  Animatable      Yes
  --------------- -------------------------

filter

For  <filter> ,  y defines the y coordinate of the upper left corner for
the rendering area of the filter.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    -10%
  Animatable      Yes
  --------------- -------------------------

foreignObject

For  <foreignObject> ,  y defines the y coordinate of the upper left
corner of its viewport.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0
  Animatable      Yes
  --------------- -------------------------

Note: Starting with SVG2,  y is a Geometry Property meaning this
attribute can also be used as a CSS property for  <foreignObject> .

glyphRef

Warning: As of SVG2  <glyphRef> is deprecated and shouldn't be used.

For  <glyphRef> ,  y defines the y-axis coordinate of the glyph.

  --------------- ----------
  Value           <number>
  Default value   none
  Animatable      Yes
  --------------- ----------

image

For  <image> ,  y defines the y coordinate of the upper left corner of
the image.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0
  Animatable      Yes
  --------------- -------------------------

Note: Starting with SVG2,  y is a Geometry Property meaning this
attribute can also be used as a CSS property for images.

mask

For  <mask> ,  y defines the y coordinate of the upper left corner of
its area of effect. The exact effect of this attribute is influenced by
the   maskUnits  attribute.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    -10%
  Animatable      Yes
  --------------- -------------------------

pattern

For  <pattern> ,  y defines the y coordinate of the upper left corner of
the tile pattern. The exact effect of this attribute is influenced by
the   patternUnits  and   patternTransform  attributes.

  --------------- ----------
  Value           <length>
  Default value    0
  Animatable      Yes
  --------------- ----------

rect

For  <rect> ,  y defines the y coordinate of the upper left corner of
the shape.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0
  Animatable      Yes
  --------------- -------------------------

Note: Starting with SVG2,  y is a Geometry Property meaning this
attribute can also be used as a CSS property for rectangles.

svg

For  <svg> ,  y defines the y coordinate of the upper left corner of its
viewport.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0
  Animatable      Yes
  --------------- -------------------------

Note: Starting with SVG2,  y is a Geometry Property meaning this
attribute can also be used as a CSS property for  <svg> .

text

For  <text> , if it contains a single value,  y defines the y coordinate
where the content text position must be placed. The content text
position is usually a point on the baseline of the first line of text.
The exact content text position is influenced by other properties, such
as   text-anchor  or  direction .

If it contains multiple values,  y defines the y coordinate of each
individual glyph from the text. If there are fewer values than glyphs,
the remaining glyphs are placed in line with the last positioned glyph.
If there are more values than glyphs, the extra values are ignored.

  --------------- -------------------------------------
  Value           List of ( <length> | <percentage> )
  Default value    0
  Animatable      Yes
  --------------- -------------------------------------

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 100" xmlns="http://www.w3.org/2000/svg">
      <!-- horizontal line to materialized the text base line -->
      <line x1="0" y1="40%" x2="100%" y2="40%" />
      <line x1="0" y1="60%" x2="100%" y2="60%" />
      <line x1="0" y1="80%" x2="100%" y2="80%" />

      <!-- vertical line to materialized the x positioning -->
      <line x1="5%" y1="0" x2="5%" y2="100%" />
      <line x1="55%" y1="0" x2="55%" y2="100%" />

      <!-- y with a single value -->
      <text y="40%" x="5%">SVG</text>

      <!-- y with multiple values -->
      <text y="40%,60%,80%" x="55%">SVG</text>
    </svg>

css

    text {
      font: 40px sans-serif;
    }

    line {
      fill: none;
      stroke: red;
      stroke-width: 0.5px;
      stroke-dasharray: 2px;
    }

tref

Warning: As of SVG2  <tref> is deprecated and shouldn't be used.

For  <tref> , if it contains a single value,  y defines the y coordinate
where the content text position must be placed. The content text
position is usually a point on the baseline of the first line of text.
The exact content text position is influenced by other properties, such
as   text-anchor  or  direction .

If it contains multiple values,  y defines the y coordinate of each
individual glyph from the text. If there are fewer values than glyphs,
the remaining glyphs are placed in line with the last positioned glyph.
If there are more values than glyphs, the extra values are ignored.

  --------------- -------------------------------------
  Value           List of ( <length> | <percentage> )
  Default value    0
  Animatable      Yes
  --------------- -------------------------------------

tspan

For  <tspan> , if it contains a single value,  y defines the y
coordinate where the content text position must be placed. The content
text position is usually a point on the baseline of the first line of
text. The exact content text position is influenced by other properties,
such as   text-anchor  or  direction .

If it contains multiple values,  y defines the y coordinate of each
individual glyph from the text. If there are fewer values than glyphs,
the remaining glyphs are placed in line with the last positioned glyph.
If there are more values than glyphs, the extra values are ignored.

  --------------- -------------------------------------
  Value           List of ( <length> | <percentage> )
  Default value   none
  Animatable      Yes
  --------------- -------------------------------------

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 100" xmlns="http://www.w3.org/2000/svg">
      <!-- horizontal line to materialized the text base line -->
      <line x1="0" y1="40%" x2="100%" y2="40%" />
      <line x1="0" y1="60%" x2="100%" y2="60%" />
      <line x1="0" y1="80%" x2="100%" y2="80%" />

      <!-- vertical line to materialized the x positioning -->
      <line x1="5%" y1="0" x2="5%" y2="100%" />
      <line x1="55%" y1="0" x2="55%" y2="100%" />

      <text>
        <!-- y with a single value -->
        <tspan y="40%" x="5%">SVG</tspan>

        <!-- y with multiple values -->
        <tspan y="40%,60%,80%" x="55%">SVG</tspan>
      </text>
    </svg>

css

    text {
      font: 40px sans-serif;
    }

    line {
      fill: none;
      stroke: red;
      stroke-width: 0.5px;
      stroke-dasharray: 2px;
    }

use

For  <use> ,  y defines the y coordinate of the upper left corner of the
referenced element.

  --------------- -------------------------
  Value           <length> | <percentage>
  Default value    0
  Animatable      Yes
  --------------- -------------------------

Note: Starting with SVG2,  y is a Geometry Property meaning this
attribute can also be used as a CSS property for used elements.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-filter-y

  Filter Effects Module Level 1
  # element-attrdef-fespotlight-y

  Filter Effects Module Level 1
  # element-attrdef-fepointlight-y

  Filter Effects Module Level 1
  # element-attrdef-filter-primitive-y

  CSS Masking Module Level 1
  # element-attrdef-mask-y

  Scalable Vector Graphics (SVG) 2
  # Y

  Scalable Vector Graphics (SVG) 2
  # PatternElementYAttribute

  Scalable Vector Graphics (SVG) 2
  # TextElementYAttribute
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# z #

The  z attribute defines the location along the z-axis for a light
source in the coordinate system established by the   primitiveUnits 
attribute on the  <filter> element, assuming that, in the initial
coordinate system, the positive z-axis comes out towards the person
viewing the content and assuming that one unit along the z-axis equals
one unit in x and y.

You can use this attribute with the following SVG elements:

-    <fePointLight>
-    <feSpotLight>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 420 200" xmlns="http://www.w3.org/2000/svg">
      <filter id="diffuseLighting1" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting in="SourceGraphic">
          <fePointLight x="60" y="60" z="10" />
        </feDiffuseLighting>
      </filter>
      <filter id="diffuseLighting2" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting in="SourceGraphic">
          <fePointLight x="60" y="60" z="50" />
        </feDiffuseLighting>
      </filter>

      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#diffuseLighting1);" />
      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#diffuseLighting2); transform: translateX(220px);" />
    </svg>

fePointLight

For  <fePointLight> ,  z defines the location along the z-axis for the
light source in the coordinate system established by the
  primitiveUnits  attribute on the  <filter> element.

  --------------- -----------
  Value            <number>
  Default value    1
  Animatable      Yes
  --------------- -----------

feSpotLight

For  <feSpotLight> ,  z defines the location along the z-axis for the
light source in the coordinate system established by the
  primitiveUnits  attribute on the  <filter> element.

  --------------- -----------
  Value            <number>
  Default value    1
  Animatable      Yes
  --------------- -----------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # element-attrdef-fepointlight-z

  Filter Effects Module Level 1
  # element-attrdef-fespotlight-z
  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# zoomAndPan #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  zoomAndPan attribute specifies whether the SVG document can be
magnified and panned.

Magnification in this context means the effect of a supplemental scale
and translate transformation on the outermost SVG document fragment.

Panning represents a translation (i.e., a shift) transformation on an
SVG document fragment in response to a user interface action.

You can use this attribute with the following SVG elements:

-    <svg>
-    <view>

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg
      viewBox="0 0 200 200"
      xmlns="http://www.w3.org/2000/svg"
      zoomAndPan="disable">
      <filter id="diffuseLighting" x="0" y="0" width="100%" height="100%">
        <feDiffuseLighting in="SourceGraphic" zoomAndPan="1">
          <fePointLight x="60" y="60" z="20" />
        </feDiffuseLighting>
      </filter>

      <rect
        x="0"
        y="0"
        width="200"
        height="200"
        style="filter: url(#diffuseLighting);" />
    </svg>

Usage notes

  --------------- ---------------------
  Value            disable |  magnify
  Default value    magnify
  Animatable      No
  --------------- ---------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # ZoomAndPanAttribute

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# Content type #

SVG makes use of a number of data types. This article lists these types
along with their syntax and descriptions of what they're used for.

Angle

<angle>

    Angles are specified in one of two ways. When used in the value of a
    property in a stylesheet, an <angle> is defined as follows:

        angle ::= number (~"deg" | ~"grad" | ~"rad")?

    where  deg indicates degrees,  grad indicates grads and  rad
    indicates radians.

    For properties defined in CSS2, an angle unit identifier must be
    provided. For angle values in SVG-specific properties and their
    corresponding presentation attributes, the angle unit identifier is
    optional. If not provided, the angle value is assumed to be in
    degrees. In presentation attributes for all properties, whether
    defined in SVG1.1 or in CSS2, the angle identifier, if specified,
    must be in lower case.

    When angles are used in an SVG attribute, <angle> is instead defined
    as follows:

        angle ::= number ("deg" | "grad" | "rad")?

    The unit identifiers in such <angle> values must be in lower case.

    In the SVG DOM, <angle> values are represented using  SVGAngle or
     SVGAnimatedAngle objects.

Anything

<anything>

    The basic type <anything> is a sequence of zero or more characters.
    Specifically:

        anything ::= Char*

    where Char is the production for a character, as defined in XML 1.0,
    section 2.2.

Clock-value

<clock-value>

    Clock values have the same syntax as in SMIL Animation
    specification. The grammar for clock values is repeated here:

        Clock-val         ::= Full-clock-val | Partial-clock-val
                              | Timecount-val
        Full-clock-val    ::= Hours ":" Minutes ":" Seconds ("." Fraction)?
        Partial-clock-val ::= Minutes ":" Seconds ("." Fraction)?
        Timecount-val     ::= Timecount ("." Fraction)? (Metric)?
        Metric            ::= "h" | "min" | "s" | "ms"
        Hours             ::= DIGIT+; any positive number
        Minutes           ::= 2DIGIT; range from 00 to 59
        Seconds           ::= 2DIGIT; range from 00 to 59
        Fraction          ::= DIGIT+
        Timecount         ::= DIGIT+
        2DIGIT            ::= DIGIT DIGIT
        DIGIT             ::= [0-9]

    For  Timecount values, the default metric suffix is "  s " (for
    seconds). No embedded white space is allowed in clock values,
    although leading and trailing white space characters will be
    ignored.

    The following are examples of legal clock values:

    -   Full clock values:
        -    02:30:03 = 2 hours, 30 minutes and 3 seconds
        -    50:00:10.25 = 50 hours, 10 seconds and 250 milliseconds
    -   Partial clock value:
        -    02:33 = 2 minutes and 33 seconds
        -    00:10.5 = 10.5 seconds = 10 seconds and 500 milliseconds
    -   Timecount values:
        -    3.2h = 3.2 hours = 3 hours and 12 minutes
        -    45min = 45 minutes
        -    30s = 30 seconds
        -    5ms = 5 milliseconds
        -    12.467 = 12 seconds and 467 milliseconds
    -   Fractional values are just (base 10) floating point definitions
        of seconds. Thus:
        -    00.5s = 500 milliseconds
        -    00:00.005 = 5 milliseconds

Color

<color>

    The basic type <color> is a CSS2 compatible specification for a
    color in the sRGB color space. <color> applies to SVG's use of the
      color  attribute and is a component of the definitions of
    attributes   fill  ,   stroke  ,   stop-color  ,   flood-color  ,
    and   lighting-color  , which also offer optional ICC-based color
    specifications.

    SVG supports all of the syntax alternatives for <color> defined in
    CSS2 syntax and basic data types , and (depend on the
    implementation) in the future CSS Color Module Level 3 .

    A <color> is either a keyword or a numerical RGB specification.

    In addition to these color keywords, users may specify keywords that
    correspond to the colors used by objects in the user's environment.
    The normative definition of these keywords is found in User
    preferences for colors (CSS2, section 18.2).

    The format of an RGB value in hexadecimal notation is a "  # "
    immediately followed by either three or six hexadecimal characters.
    The three-digit RGB notation (  #rgb ) is converted into six-digit
    form (  #rrggbb ) by replicating digits, not by adding zeros. For
    example,  #fb0 expands to  #ffbb00 . This ensures that white (
     #ffffff ) can be specified with the short notation (  #fff ) and
    removes any dependencies on the color depth of the display. The
    format of an RGB value in the functional notation is an RGB
    start-function, followed by a comma-separated list of three
    numerical values (either three integer values or three percentage
    values) followed by "  ) ". An RGB start-function is the
    case-insensitive string "  rgb( ", for example "  RGB( " or "  rGb(
    ". For compatibility, the all-lowercase form "  rgb( " is preferred.
    The integer value  255 corresponds to  100% , and to  F or  FF in
    the hexadecimal notation:  rgb(255 255 255) =  rgb(100% 100% 100%) =
     #FFF . White space characters are allowed around the numerical
    values. All RGB colors are specified in the sRGB color space. Using
    sRGB provides an unambiguous and objectively measurable definition
    of the color, which can be related to international standards.

        color    ::= "#" hexdigit hexdigit hexdigit (hexdigit hexdigit hexdigit)?
                      | "rgb("integer integer integer")"
                      | "rgb("integer "%" integer "%" integer "%)"
                      | color-keyword
        hexdigit ::= [0-9A-Fa-f]

    where  color-keyword matches (case insensitively) one of the color
    keywords listed in CSS Color Module Level 3 , or one of the system
    color keywords listed in User preferences for colors (CSS2, section
    18.2).

    The corresponding SVG DOM interface definitions for <color> are
    defined the one defined by CSS. SVG's extension to color, including
    the ability to specify ICC-based colors, are represented using DOM
    interface  SVGColor .

Coordinate

<coordinate>

    A <coordinate> is a length in the user coordinate system that is the
    given distance from the origin of the user coordinate system along
    the relevant axis (the x-axis for X coordinates, the y-axis for Y
    coordinates). Its syntax is the same as that for <length> .

    Within the SVG DOM, a <coordinate> is represented as an  SVGLength
    or an  SVGAnimatedLength .

Frequency

<frequency>

    Frequency values are used with aural properties. As defined in CSS2,
    a frequency value is a <number> immediately followed by a frequency
    unit identifier. The frequency unit identifiers are:

    -    Hz : Hertz
    -    kHz : kilo Hertz

    Frequency values may not be negative.

FuncIRI

<FuncIRI>

    Functional notation for a reference. The syntax for this reference
    is the same as the  CSS URI .

Integer

<integer>

    An <integer> is specified as an optional sign character (  + or  - )
    followed by one or more digits  0 to  9 :

        integer ::= [+-]? [0-9]+

    If the sign character is not present, the number is non-negative.

    Unless stated otherwise for a particular attribute or property, the
    range for an <integer> encompasses (at a minimum)  -2147483648 to
     2147483647 .

    Within the SVG DOM, an <integer> is represented as a  number or an
     SVGAnimatedInteger .

IRI

<IRI>

    An I nternationalized R esource I dentifier.

    On the Internet, resources are identified using IRIs
    (Internationalized Resource Identifiers). For example, an SVG file
    called  someDrawing.svg located at  http://example.com might have
    the following IRI :

        http://example.com/someDrawing.svg

    An IRI can also address a particular element within an XML document
    by including an IRI fragment identifier as part of the IRI . An IRI
    which includes an IRI fragment identifier consists of an optional
    base IRI , followed by a "  # " character, followed by the IRI
    fragment identifier. For example, the following IRI can be used to
    specify the element whose ID is "  Lamppost " within file
     someDrawing.svg :

        http://example.com/someDrawing.svg#Lamppost

    IRIs are used in the   href  attribute. Some attributes allow both
    IRIs and text strings as content. To disambiguate a text string from
    a relative IRI, the functional notation <FuncIRI> is used. This is
    an IRI delimited with a functional notation. Note: For historical
    reasons, the delimiters are "  url( " and "  ) ", for compatibility
    with the CSS specifications. The FuncIRI form is used in
    presentation attributes .

    SVG makes extensive use of IRI references, both absolute and
    relative, to other objects. For example, to fill a rectangle with a
    linear gradient, you first define a  <linearGradient> element and
    give it an ID, as in:

    html

        <linearGradient xml:id="MyGradient">...</linearGradient>

    You then reference the linear gradient as the value of the   fill 
    attribute for the rectangle, as in the following example:

    html

        <rect fill="url(#MyGradient)" />

    SVG supports two types of IRI references:

    -   local IRI references , where the IRI reference does not contain
        an <absoluteIRI> or <relativeIRI> and thus only contains a
        fragment identifier (i.e.,  #<elementID> or
         #xpointer(id<elementID>) ).
    -   non-local IRI references , where the IRI reference does contain
        an <absoluteIRI> or <relativeIRI>. For the full specification of
        IRI references in SVG, see SVG 1.1 (2nd Edition): IRI references
        .

Length

<length>

    A length is a distance measurement, given as a number along with a
    unit. The SVG2 specification aligns with CSS  <length> data types
    and units for the attribute syntax and values. A length unit
    identifier must be provided and the values of the length unit
    identifiers are case-insensitive. The syntax follows the CSS
     <length> syntax:

        length ::= <number> (<absolute-length> | <relative-length>)?

    For SVG-specific properties defined in SVG1.1 and their
    corresponding presentation attributes, the unit identifiers in
    values are optional. If not provided, the length value represents a
    distance in the current user coordinate system. Length identifiers
    must be in lower case when used in presentation attributes for all
    properties whether they are defined in SVG or in CSS. This case
    sensitivity is relaxed in SVG2 to align with CSS.

    Note that the non-property <length> definition also allows a
    percentage (  % ) unit identifier. The meaning of a percentage
    length value depends on the attribute for which the percentage
    length value has been specified. Two common cases are:

    -   when a percentage length value represents a percentage of the
        viewport width or height
    -   when a percentage length value represents a percentage of the
        bounding box width or height on a given object.

    In the SVG DOM, <length> values are represented using  SVGLength or
     SVGAnimatedLength objects.

List-of-Ts

<list-of-Ts>

    (Where T is some type.) A list consists of a separated sequence of
    values. Unless explicitly described differently, lists within SVG's
    XML attributes can be either comma-separated (with optional white
    space before or after the comma), or white space-separated.

    White space in lists is defined as one or more of the following
    consecutive characters: "space" (  U+0020 ), "tab" (  U+0009 ),
    "line feed" (  U+000A ), "carriage return" (  U+000D ), and
    "form-feed" (  U+000C ).

    The following is a template for an EBNF grammar describing the
    <list-of-Ts> syntax:

        list-of-Ts ::= T
                        | T, list-of-Ts

    Within the SVG DOM, values of a <list-of-Ts> type are represented by
    an interface specific for the particular type T . For example, a
    <list-of-lengths> is represented in the SVG DOM using an
     SVGLengthList or  SVGAnimatedLengthList object.

Name

<name>

    A name, which is a string where a few characters of syntactic
    significance are disallowed.

        name  ::= [^,()#x20#x9#xD#xA] /* any char except ",", "(", ")" or wsp */

Number

<number>

    Real numbers are specified in one of two ways. When used in a
    stylesheet, a <number> is defined as follows:

        number ::= integer
                    | [+-]? [0-9]* "." [0-9]+

    This syntax is the same as the definition in CSS (CSS2, section
    4.3.1).

    When used in an SVG attribute, a <number> is defined differently, to
    allow numbers with large magnitudes to be specified more concisely:

        number ::= integer ([Ee] integer)?
                    | [+-]? [0-9]* "." [0-9]+ ([Ee] integer)?

    Within the SVG DOM, a <number> is represented as a float,  SVGNumber
    or a  SVGAnimatedNumber .

Number-optional-number

<number-optional-number>

    A pair of <number>s, where the second <number> is optional.

        number-optional-number ::= number
                                    | number, number

    In the SVG DOM, a <number-optional-number> is represented using a
    pair of  SVGAnimatedInteger or  SVGAnimatedNumber objects.

Opacity value

<opacity-value>

    The opacity of the color or the content the current object is filled
    with, as a <number> . Any values outside the range  0.0 (fully
    transparent) to  1.0 (fully opaque) will be clamped to this range.

Paint

<paint>

    The values for properties   fill  and   stroke  define the type of
    paint to use when filling or stroking a given graphics element. The
    available options and syntax for <paint> are:

        paint ::= none | <color> | <url> [none | <color>]? | context-fill | context-stroke

    The  context-fill and  context-stroke values allow for inheriting
    values in marker and use elements.

    Within the SVG DOM, <paint> values are represented using  SVGPaint
    objects.

Percentage

<percentage>

    Percentages are specified as a number followed by a "  % "
    character:

        percentage ::= number "%"

    Note that the definition of <number> depends on whether the
    percentage is specified in a stylesheet or in an attribute that is
    not also a presentation attribute.

    Percentage values are always relative to another value (for example,
    a length). Each attribute or property that allows percentages also
    defines the reference distance measurement to which the percentage
    refers.

    Within the SVG DOM, a <percentage> is represented using an
     SVGNumber or  SVGAnimatedNumber object.

Time

<time>

    A time value is a <number> immediately followed by a time unit
    identifier. The time unit identifiers are:

    -    ms : milliseconds
    -    s : seconds

Transform-list

<transform-list>

    A <transform-list> is used to specify a list of coordinate system
    transformations. A detailed description of the possible values for a
    <transform-list> is given in the   transform  attribute definition.

    Within the SVG DOM, a <transform-list> value is represented using an
     SVGTransformList or  SVGAnimatedTransformList object.

URL

URL

    A U niform R esource L ocator.

    A URL is a sequence of Unicode characters, building an address to an
    internal or external resource.

    Before SVG 2, the more limited IRI content type was used instead,
    because the URL specification was not standardized before.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 24, 2024 by MDN contributors .
# <a> #

The <a> SVG element creates a hyperlink to other web pages, files,
locations in the same page, email addresses, or any other URL. It is
very similar to HTML's  <a> element.

SVG's  <a> element is a container, which means you can create a link
around text (like in HTML) but also around any shape.

Example

    @namespace svg url(http://www.w3.org/2000/svg);
    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <!-- A link around a shape -->
      <a href="/docs/Web/SVG/Element/circle">
        <circle cx="50" cy="40" r="35" />
      </a>

      <!-- A link around a text -->
      <a href="/docs/Web/SVG/Element/text">
        <text x="50" y="90" text-anchor="middle">&lt;circle&gt;</text>
      </a>
    </svg>

css

    /* As SVG does not provide a default visual style for links,
       it's considered best practice to add some */

    @namespace svg url(http://www.w3.org/2000/svg);
    /* Necessary to select only SVG <a> elements, and not also HTML's.
       See warning below */

    svg|a:link,
    svg|a:visited {
      cursor: pointer;
    }

    svg|a text,
    text svg|a {
      fill: blue; /* Even for text, SVG uses fill over color */
      text-decoration: underline;
    }

    svg|a:hover,
    svg|a:active {
      outline: dotted 1px blue;
    }

Warning: Since this element shares its tag name with HTML's  <a> element
, selecting  a with CSS or  querySelector may apply to the wrong kind of
element. Try the  @namespace rule to distinguish the two.

Attributes

 download

    Instructs browsers to download a URL instead of navigating to it, so
    the user will be prompted to save it as a local file. Value type :
    <string> ; Default value : none ; Animatable : no

  href 

    The URL or URL fragment the hyperlink points to. Value type : <URL>
    ; Default value : none ; Animatable : yes

 hreflang

    The human language of the URL or URL fragment that the hyperlink
    points to. Value type : <string> ; Default value : none ; Animatable
    : yes

 ping  Experimental 

    A space-separated list of URLs to which, when the hyperlink is
    followed,  POST requests with the body  PING will be sent by the
    browser (in the background). Typically used for tracking. For a more
    widely-supported feature addressing the same use cases, see
     Navigator.sendBeacon() . Value type : <list-of-URLs> ; Default
    value : none ; Animatable : no

 referrerpolicy

    Which referrer to send when fetching the URL . Value type :
     no-referrer |  no-referrer-when-downgrade |  same-origin |  origin
    |  strict-origin |  origin-when-cross-origin |
     strict-origin-when-cross-origin |  unsafe-url ; Default value :
    none ; Animatable : no

 rel

    The relationship of the target object to the link object. Value type
    : <list-of-Link-Types> ; Default value : none ; Animatable : yes

  target 

    Where to display the linked URL . Value type :  _self |  _parent |
     _top |  _blank | <name> ; Default value :  _self ; Animatable : yes

 type

    A MIME type for the linked URL. Value type : <string> ; Default
    value : none ; Animatable : yes

  xlink:href   Deprecated 

    The URL or URL fragment that the hyperlink points to. May be
    required for backwards compatibility for older browsers. Value type
    : <URL> ; Default value : none ; Animatable : yes

Global attributes

Core Attributes

    Most notably:   id  ,   lang  ,   tabindex 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Event Attributes

    Global event attributes , Document element event attributes ,
    Graphical event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

XLink Attributes

    Most notably:   xlink:title 

ARIA Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Container element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
                                      Shape elements
                                      Structural elements
                                      Gradient elements
                                       <a> ,  <clipPath> ,
                                       <color-profile> ,  <cursor> ,
                                       <filter> ,  <font> ,  <font-face>
                                      ,  <foreignObject> ,  <image> ,
                                       <marker> ,  <mask> ,  <pattern> ,
                                       <script> ,  <style> ,  <switch> ,
                                       <text> ,  <view>
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # Links

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 13, 2023 by MDN contributors .
# <animate> #

The SVG  <animate> element provides a way to animate an attribute of an
element over time.

Example

    html,
    body,
    svg {
      height: 100%;
      margin: 0;
      padding: 0;
    }

html

    <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
      <rect width="10" height="10">
        <animate
          attributeName="rx"
          values="0;5;0"
          dur="10s"
          repeatCount="indefinite" />
      </rect>
    </svg>

Attributes

Animation Attributes

Animation timing attributes
      begin  ,   dur  ,   end  ,   min  ,   max  ,   restart  ,
      repeatCount  ,   repeatDur  ,   fill 

Animation value attributes
      calcMode  ,   values  ,   keyTimes  ,   keySplines  ,   from  ,
      to  ,   by 

Other Animation attributes

    Most notably:   attributeName  ,   additive  ,   accumulate 

Animation event attributes

    Most notably:   onbegin  ,   onend  ,   onrepeat 

Global attributes

Core Attributes

    Most notably:   id 

Styling Attributes
      class  ,   style 

Event Attributes

    Global event attributes , Document element event attributes

Usage notes

This element implements the  SVGAnimateElement interface.

Accessibility concerns

Blinking and flashing animation can be problematic for people with
cognitive concerns such as Attention Deficit Hyperactivity Disorder
(ADHD). Additionally, certain kinds of motion can be a trigger for
Vestibular disorders, epilepsy, and migraine and Scotopic sensitivity.

Consider providing a mechanism for pausing or disabling animation, as
well as using the Reduced Motion Media Query or equivalent User Agent
client hint  Sec-CH-Prefers-Reduced-Motion to create a complimentary
experience for users who have expressed a preference for no animated
experiences.

-   Designing Safer Web Animation For Motion Sensitivity · An A List
    Apart Article
-   An Introduction to the Reduced Motion Media Query | CSS-Tricks
-   Responsive Design for Motion | WebKit
-   MDN Understanding WCAG, Guideline 2.2 explanations
-   Understanding Success Criterion 2.2.2 | W3C Understanding WCAG 2.0

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # AnimateElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <animateMotion> #

The SVG  <animateMotion> element provides a way to define how an element
moves along a motion path.

Note: To reuse an existing path, it will be necessary to use an  <mpath>
element inside the  <animateMotion> element instead of the   path 
attribute.

Example

    html,
    body,
    svg {
      height: 100%;
      margin: 0;
      padding: 0;
      display: block;
    }

html

    <svg viewBox="0 0 200 100" xmlns="http://www.w3.org/2000/svg">
      <path
        fill="none"
        stroke="lightgrey"
        d="M20,50 C20,-50 180,150 180,50 C180-50 20,150 20,50 z" />

      <circle r="5" fill="red">
        <animateMotion
          dur="10s"
          repeatCount="indefinite"
          path="M20,50 C20,-50 180,150 180,50 C180-50 20,150 20,50 z" />
      </circle>
    </svg>

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Animation element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Descriptive elements
                                       <mpath>
  ----------------------------------- -----------------------------------

Attributes

  keyPoints 

    This attribute indicate, in the range [0,1], how far is the object
    along the path for each   keyTimes  associated values. Value type :
    <number> *; Default value : none; Animatable : no

  path 

    This attribute defines the path of the motion, using the same syntax
    as the   d  attribute. Value type : <string> ; Default value : none;
    Animatable : no

  rotate 

    This attribute defines a rotation applied to the element animated
    along a path, usually to make it pointing in the direction of the
    animation. Value type : <number> |  auto |  auto-reverse ; Default
    value :  0 ; Animatable : no

Note: For  <animateMotion> , the default value for the   calcMode 
attribute is  paced .

Animation Attributes

Animation timing attributes
      begin  ,   dur  ,   end  ,   min  ,   max  ,   restart  ,
      repeatCount  ,   repeatDur  ,   fill 

Animation value attributes
      calcMode  ,   values  ,   keyTimes  ,   keySplines  ,   from  ,
      to  ,   by 

Other Animation attributes

    Most notably:   attributeName  ,   additive  ,   accumulate 

Animation event attributes

    Most notably:   onbegin  ,   onend  ,   onrepeat 

Global attributes

Core Attributes

    Most notably:   id 

Styling Attributes
      class  ,   style 

Event Attributes

    Global event attributes , Document element event attributes

Usage notes

This element implements the  SVGAnimateMotionElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # AnimateMotionElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <mpath>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <animateTransform> #

The  animateTransform element animates a transformation attribute on its
target element, thereby allowing animations to control translation,
scaling, rotation, and/or skewing.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Animation element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Descriptive elements
  ----------------------------------- -----------------------------------

Example

html

    <svg
      width="120"
      height="120"
      viewBox="0 0 120 120"
      xmlns="http://www.w3.org/2000/svg">
      <polygon points="60,30 90,90 30,90">
        <animateTransform
          attributeName="transform"
          attributeType="XML"
          type="rotate"
          from="0 60 70"
          to="360 60 70"
          dur="10s"
          repeatCount="indefinite" />
      </polygon>
    </svg>

Attributes

Global attributes

-   Conditional processing attributes
-   Core attributes
-   Animation event attributes
-   Xlink attributes
-   Animation attribute target attributes
-   Animation timing attributes
-   Animation value attributes
-   Animation addition attributes

Specific attributes

-     by 
-     from 
-     to 
-     type 

DOM Interface

This element implements the  SVGAnimateTransformElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # AnimateTransformElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <circle> #

The  <circle> SVG element is an SVG basic shape , used to draw circles
based on a center point and a radius.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <circle cx="50" cy="50" r="50" />
    </svg>

Attributes

  cx 

    The x-axis coordinate of the center of the circle. Value type :
    <length> | <percentage> ; Default value :  0 ; Animatable : yes

  cy 

    The y-axis coordinate of the center of the circle. Value type :
    <length> | <percentage> ; Default value :  0 ; Animatable : yes

  r 

    The radius of the circle. A value lower or equal to zero disables
    rendering of the circle. Value type : <length> | <percentage> ;
    Default value :  0 ; Animatable : yes

  pathLength 

    The total length for the circle's circumference, in user units.
    Value type : <number> ; Default value : none ; Animatable : yes

Note: Starting with SVG2,  cx ,  cy , and  r are Geometry Properties ,
meaning those attributes can also be used as CSS properties for that
element.

Global attributes

Core Attributes

    Most notably:   id  ,   tabindex 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Event Attributes

    Global event attributes , Graphical event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

ARIA Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Basic shape element, Graphics
                                      element, Shape element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # CircleElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Other SVG basic shapes:  <ellipse> ,  <line> ,  <polygon> ,
     <polyline> ,  <rect>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <clipPath> #

The  <clipPath> SVG element defines a clipping path, to be used by the
  clip-path  property.

A clipping path restricts the region to which paint can be applied.
Conceptually, parts of the drawing that lie outside of the region
bounded by the clipping path are not drawn.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100">
      <clipPath id="myClip">
        <!--
          Everything outside the circle will be
          clipped and therefore invisible.
        -->
        <circle cx="40" cy="35" r="35" />
      </clipPath>

      <!-- The original black heart, for reference -->
      <path
        id="heart"
        d="M10,30 A20,20,0,0,1,50,30 A20,20,0,0,1,90,30 Q90,60,50,90 Q10,60,10,30 Z" />

      <!--
        Only the portion of the red heart
        inside the clip circle is visible.
      -->
      <use clip-path="url(#myClip)" href="#heart" fill="red" />
    </svg>

css

    /* With a touch of CSS for browsers who *
     * implemented the r Geometry Property. */

    @keyframes openYourHeart {
      from {
        r: 0;
      }
      to {
        r: 60px;
      }
    }

    #myClip circle {
      animation: openYourHeart 15s infinite;
    }

A clipping path is conceptually equivalent to a custom viewport for the
referencing element. Thus, it affects the rendering of an element, but
not the element's inherent geometry . The bounding box of a clipped
element (meaning, an element which references a  <clipPath> element via
a   clip-path  property, or a child of the referencing element) must
remain the same as if it were not clipped.

By default,  pointer-events are not dispatched on clipped regions. For
example, a circle with a radius of  10 which is clipped to a circle with
a radius of  5 will not receive "click" events outside the smaller
radius.

Attributes

  clipPathUnits 

    Defines the coordinate system for the contents of the  <clipPath>
    element. Value type :  userSpaceOnUse |  objectBoundingBox ; Default
    value :  userSpaceOnUse ; Animatable : yes

Global attributes

Core Attributes

    Most notably:   id 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,   display  ,
      fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   shape-rendering  ,   stroke  ,   stroke-dasharray  ,
      stroke-dashoffset  ,   stroke-linecap  ,   stroke-linejoin  ,
      stroke-miterlimit  ,   stroke-opacity  ,   stroke-width  ,
      transform  ,   vector-effect  ,   visibility 

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          None

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
                                      Shape elements
                                       <text> ,  <use>
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Masking Module Level 1
  # ClipPathElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Related

-   Other clipping and masking SVG elements:  <mask>
-   Some CSS properties:  clip-path ,  pointer-events

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <cursor> #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

Note: The CSS  cursor property should be used instead of this element.

The  <cursor> SVG element can be used to define a platform-independent
custom cursor. A recommended approach for defining a
platform-independent custom cursor is to create a PNG image and define a
 cursor element that references the PNG image and identifies the exact
position within the image which is the pointer position (i.e., the hot
spot).

The PNG format is recommended because it supports the ability to define
a transparency mask via an alpha channel. If a different image format is
used, this format should support the definition of a transparency mask
(two options: provide an explicit alpha channel or use a particular
pixel color to indicate transparency). If the transparency mask can be
determined, the mask defines the shape of the cursor; otherwise, the
cursor is an opaque rectangle. Typically, the other pixel information
(e.g., the R, G and B channels) defines the colors for those parts of
the cursor which are not masked out. Note that cursors usually contain
at least two colors so that the cursor can be visible over most
backgrounds.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          None

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Descriptive elements
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Conditional processing attributes
-   Core attributes
-   Xlink attributes

Specific attributes

-     x  Deprecated
-     y  Deprecated
-     xlink:href  Deprecated

DOM Interface

This element implements the  SVGCursorElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # CursorElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# <defs> #

The  <defs> element is used to store graphical objects that will be used
at a later time. Objects created inside a  <defs> element are not
rendered directly. To display them you have to reference them (with a
 <use> element for example).

Graphical objects can be referenced from anywhere, however, defining
these objects inside of a  <defs> element promotes understandability of
the SVG content and is beneficial to the overall accessibility of the
document.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
      <!-- Some graphical objects to use -->
      <defs>
        <circle id="myCircle" cx="0" cy="0" r="5" />

        <linearGradient id="myGradient" gradientTransform="rotate(90)">
          <stop offset="20%" stop-color="gold" />
          <stop offset="90%" stop-color="red" />
        </linearGradient>
      </defs>

      <!-- using my graphical objects -->
      <use x="5" y="5" href="#myCircle" fill="url('#myGradient')" />
    </svg>

Attributes

Global attributes

Core Attributes

    Most notably:   id    lang 

Styling Attributes
      class  ,   style 

Event Attributes

    Global event attributes , Document element event attributes ,
    Graphical event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Container element, Structural
                                      element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
                                      Shape elements
                                      Structural elements
                                      Gradient elements
                                       <a> ,  <clipPath> ,
                                       <color-profile> ,  <cursor> ,
                                       <filter> ,  <font> ,  <font-face>
                                      ,  <foreignObject> ,  <image> ,
                                       <marker> ,  <mask> ,  <pattern> ,
                                       <script> ,  <style> ,  <switch> ,
                                       <text> ,  <view>
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # Head

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <desc> #

The  <desc> element provides an accessible, long-text description of any
SVG container element or graphics element .

Text in a  <desc> element is not rendered as part of the graphic. If the
element can be described by visible text, it is possible to reference
that text with the  aria-describedby attribute. If  aria-describedby is
used, it will take precedence over  <desc> .

The hidden text of a  <desc> element can also be concatenated with the
visible text of other elements using multiple IDs in an
 aria-describedby value. In that case, the  <desc> element must provide
an ID for reference.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
      <circle cx="5" cy="5" r="4">
        <desc>
          I'm a circle and that description is here to demonstrate how I can be
          described, but is it really necessary to describe a simple circle like me?
        </desc>
      </circle>
    </svg>

Attributes

This element only includes global attributes

Global attributes

Core Attributes

    Most notably:   id 

Styling Attributes
      class  ,   style 

Event Attributes

    Global event attributes , Document element event attributes

Usage notes

  ------------------- --------------------------------
  Categories          Descriptive element
  Permitted content   Any elements or character data
  ------------------- --------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # DescriptionAndTitleElements

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <title>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <ellipse> #

The  <ellipse> element is an SVG basic shape, used to create ellipses
based on a center coordinate, and both their x and y radius.

Note: Ellipses are unable to specify the exact orientation of the
ellipse (if, for example, you wanted to draw an ellipse tilted at a 45
degree angle), but it can be rotated by using the   transform 
attribute.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 100" xmlns="http://www.w3.org/2000/svg">
      <ellipse cx="100" cy="50" rx="100" ry="50" />
    </svg>

Attributes

  cx 

    The x position of the center of the ellipse. Value type : <length> |
    <percentage> ; Default value :  0 ; Animatable : yes

  cy 

    The y position of the center of the ellipse. Value type : <length> |
    <percentage> ; Default value :  0 ; Animatable : yes

  rx 

    The radius of the ellipse on the x axis. Value type :  auto |
    <length> | <percentage> ; Default value :  auto ; Animatable : yes

  ry 

    The radius of the ellipse on the y axis. Value type :  auto |
    <length> | <percentage> ; Default value :  auto ; Animatable : yes

  pathLength 

    This attribute lets specify the total length for the path, in user
    units. Value type : <number> ; Default value : none ; Animatable :
    yes

Note: Starting with SVG2  cx ,  cy ,  rx and  ry are Geometry Properties
, meaning those attributes can also be used as CSS properties for that
element.

Global attributes

Core Attributes

    Most notably:   id  ,   tabindex 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Event Attributes

    Global event attributes , Graphical event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

ARIA Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Basic shape element, Graphics
                                      element, Shape element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # EllipseElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Other SVG basic shapes:  <circle> ,  <line> ,  <polygon> ,
     <polyline> ,  <rect>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <feBlend> #

The  <feBlend> SVG filter primitive composes two objects together ruled
by a certain blending mode. This is similar to what is known from image
editing software when blending two layers. The mode is defined by the
  mode  attribute.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Filter primitive element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   Filter primitive attributes
-     class 
-     style 

Specific attributes

-     in 
-     in2 
-     mode 

DOM Interface

This element implements the  SVGFEBlendElement interface.

Example

SVG

html

    <svg
      width="200"
      height="200"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <defs>
        <filter id="spotlight">
          <feFlood
            result="floodFill"
            x="0"
            y="0"
            width="100%"
            height="100%"
            flood-color="green"
            flood-opacity="1" />
          <feBlend in="SourceGraphic" in2="floodFill" mode="multiply" />
        </filter>
      </defs>

      <image
        href="mdn_logo_only_color.png"
        x="10%"
        y="10%"
        width="80%"
        height="80%"
        style="filter:url(#spotlight);" />
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feBlendElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 24, 2023 by MDN contributors .
# <feColorMatrix> #

The  <feColorMatrix> SVG filter element changes colors based on a
transformation matrix. Every pixel's color value  [R,G,B,A] is matrix
multiplied by a 5 by 5 color matrix to create new color  [R',G',B',A'] .

Note: The prime symbol  ' is used in mathematics indicate the result of
a transformation.

    | R' |     | r1 r2 r3 r4 r5 |   | R |
    | G' |     | g1 g2 g3 g4 g5 |   | G |
    | B' |  =  | b1 b2 b3 b4 b5 | * | B |
    | A' |     | a1 a2 a3 a4 a5 |   | A |
    | 1  |     | 0  0  0  0  1  |   | 1 |

In simplified terms, below is how each color channel in the new pixel is
calculated. The last row is ignored because its values are constant.

    R' = r1*R + r2*G + r3*B + r4*A + r5
    G' = g1*R + g2*G + g3*B + g4*A + g5
    B' = b1*R + b2*G + b3*B + b4*A + b5
    A' = a1*R + a2*G + a3*B + a4*A + a5

Take the amount of red in the new pixel, or  R' :

It is the sum of:

-    r1 times the old pixel's red  R ,
-    r2 times the old pixel's green  G ,
-    r3 times of the old pixel's blue  B ,
-    r4 times the old pixel's alpha  A ,
-   plus a shift  r5 .

These specified amounts can be any real number, though the final R' will
be clamped between 0 and 1. The same goes for G' , B' , and A' .

    R'      =      r1 * R      +        r2 * G      +       r3 * B      +       r4 * A       +       r5
    New red = [ r1 * old red ] + [ r2 * old green ] + [ r3 * old Blue ] + [ r4 * old Alpha ] + [ shift of r5 ]

If, say, we want to make a completely black image redder, we can make
the  r5 a positive real number x , boosting the redness on every pixel
of the new image by x .

An identity matrix looks like this:

         R G B A W
    R' | 1 0 0 0 0 |
    G' | 0 1 0 0 0 |
    B' | 0 0 1 0 0 |
    A' | 0 0 0 1 0 |

In it, every new value is exactly 1 times its old value, with nothing
else added. It is recommended to start manipulating the matrix from
here.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Filter primitive element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   Filter primitive attributes , including the  x ,  y ,  width ,
     height , and  result attributes.
-     class 
-     style 

Specific attributes

-     in  : Values include  SourceGraphic ,  SourceAlpha ,
     BackgroundImage ,  BackgroundAlpha ,  FillPaint ,  StrokePaint , or
    a reference to another filter primitive.
-     type  : Values include  matrix ,  saturate ,  hueRotate , and
     luminanceToAlpha .
-     values  : The value for the matrix type set in the  type
    attribute.

DOM Interface

This element implements the  SVGFEColorMatrixElement interface.

Example

SVG

html

    <svg
      width="100%"
      height="100%"
      viewBox="0 0 150 500"
      preserveAspectRatio="xMidYMid meet"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <!-- ref -->
      <defs>
        <g id="circles">
          <circle cx="30" cy="30" r="20" fill="blue" fill-opacity="0.5" />
          <circle cx="20" cy="50" r="20" fill="green" fill-opacity="0.5" />
          <circle cx="40" cy="50" r="20" fill="red" fill-opacity="0.5" />
        </g>
      </defs>
      <use href="#circles" />
      <text x="70" y="50">Reference</text>

      <!-- identity matrix -->
      <filter id="colorMeTheSame">
        <feColorMatrix
          in="SourceGraphic"
          type="matrix"
          values="1 0 0 0 0
                  0 1 0 0 0
                  0 0 1 0 0
                  0 0 0 1 0" />
      </filter>
      <use
        href="#circles"
        transform="translate(0 70)"
        filter="url(#colorMeTheSame)" />
      <text x="70" y="120">Identity matrix</text>

      <!-- Combine RGB into green matrix -->
      <filter id="colorMeGreen">
        <feColorMatrix
          in="SourceGraphic"
          type="matrix"
          values="0 0 0 0 0
                  1 1 1 1 0
                  0 0 0 0 0
                  0 0 0 1 0" />
      </filter>
      <use
        href="#circles"
        transform="translate(0 140)"
        filter="url(#colorMeGreen)" />
      <text x="70" y="190">rgbToGreen</text>

      <!-- saturate -->
      <filter id="colorMeSaturate">
        <feColorMatrix in="SourceGraphic" type="saturate" values="0.2" />
      </filter>
      <use
        href="#circles"
        transform="translate(0 210)"
        filter="url(#colorMeSaturate)" />
      <text x="70" y="260">saturate</text>

      <!-- hueRotate -->
      <filter id="colorMeHueRotate">
        <feColorMatrix in="SourceGraphic" type="hueRotate" values="180" />
      </filter>
      <use
        href="#circles"
        transform="translate(0 280)"
        filter="url(#colorMeHueRotate)" />
      <text x="70" y="330">hueRotate</text>

      <!-- luminanceToAlpha -->
      <filter id="colorMeLTA">
        <feColorMatrix in="SourceGraphic" type="luminanceToAlpha" />
      </filter>
      <use href="#circles" transform="translate(0 350)" filter="url(#colorMeLTA)" />
      <text x="70" y="400">luminanceToAlpha</text>
    </svg>

Result

[]

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feColorMatrixElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feBlend>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 24, 2023 by MDN contributors .
# <feComponentTransfer> #

The  <feComponentTransfer> SVG filter primitive performs
color-component-wise remapping of data for each pixel. It allows
operations like brightness adjustment, contrast adjustment, color
balance or thresholding.

The calculations are performed on non-premultiplied color values. The
colors are modified by changing each channel (R, G, B, and A) to the
result of what the children  <feFuncR> ,  <feFuncB> ,  <feFuncG> , and
 <feFuncA> return. If more than one of the same element is provided, the
last one specified is used, and if no element is supplied to modify one
of the channels, the effect is the same is if an identity transformation
had been given for that channel.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Filter primitive element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <feFuncA> ,  <feFuncR> ,
                                       <feFuncB> ,  <feFuncG>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   Filter primitive attributes
-     class 
-     style 

Specific attributes

-     in 

DOM Interface

This element implements the  SVGFEComponentTransferElement interface.

Example

SVG

html

    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 600 300">
      <defs>
        <linearGradient
          id="rainbow"
          gradientUnits="userSpaceOnUse"
          x1="0"
          y1="0"
          x2="100%"
          y2="0">
          <stop offset="0" stop-color="#ff0000"></stop>
          <stop offset="0.2" stop-color="#ffff00"></stop>
          <stop offset="0.4" stop-color="#00ff00"></stop>
          <stop offset="0.6" stop-color="#00ffff"></stop>
          <stop offset="0.8" stop-color="#0000ff"></stop>
          <stop offset="1" stop-color="#800080"></stop>
        </linearGradient>
        <filter id="identity" x="0" y="0" width="100%" height="100%">
          <feComponentTransfer>
            <feFuncR type="identity"></feFuncR>
            <feFuncG type="identity"></feFuncG>
            <feFuncB type="identity"></feFuncB>
            <feFuncA type="identity"></feFuncA>
          </feComponentTransfer>
        </filter>
        <filter id="table" x="0" y="0" width="100%" height="100%">
          <feComponentTransfer>
            <feFuncR type="table" tableValues="0 0 1 1"></feFuncR>
            <feFuncG type="table" tableValues="1 1 0 0"></feFuncG>
            <feFuncB type="table" tableValues="0 1 1 0"></feFuncB>
          </feComponentTransfer>
        </filter>
        <filter id="discrete" x="0" y="0" width="100%" height="100%">
          <feComponentTransfer>
            <feFuncR type="discrete" tableValues="0 0 1 1"></feFuncR>
            <feFuncG type="discrete" tableValues="1 1 0 0"></feFuncG>
            <feFuncB type="discrete" tableValues="0 1 1 0"></feFuncB>
          </feComponentTransfer>
        </filter>
        <filter id="linear" x="0" y="0" width="100%" height="100%">
          <feComponentTransfer>
            <feFuncR type="linear" slope="0.5" intercept="0"></feFuncR>
            <feFuncG type="linear" slope="0.5" intercept="0.25"></feFuncG>
            <feFuncB type="linear" slope="0.5" intercept="0.5"></feFuncB>
          </feComponentTransfer>
        </filter>
        <filter id="gamma" x="0" y="0" width="100%" height="100%">
          <feComponentTransfer>
            <feFuncR type="gamma" amplitude="4" exponent="7" offset="0"></feFuncR>
            <feFuncG type="gamma" amplitude="4" exponent="4" offset="0"></feFuncG>
            <feFuncB type="gamma" amplitude="4" exponent="1" offset="0"></feFuncB>
          </feComponentTransfer>
        </filter>
      </defs>
      <g font-weight="bold">
        <text x="0" y="20">Default</text>
        <rect x="0" y="30" width="100%" height="20"></rect>
        <text x="0" y="70">Identity</text>
        <rect
          x="0"
          y="80"
          width="100%"
          height="20"
          style="filter:url(#identity)"></rect>
        <text x="0" y="120">Table lookup</text>
        <rect
          x="0"
          y="130"
          width="100%"
          height="20"
          style="filter:url(#table)"></rect>
        <text x="0" y="170">Discrete table lookup</text>
        <rect
          x="0"
          y="180"
          width="100%"
          height="20"
          style="filter:url(#discrete)"></rect>
        <text x="0" y="220">Linear function</text>
        <rect
          x="0"
          y="230"
          width="100%"
          height="20"
          style="filter:url(#linear)"></rect>
        <text x="0" y="270">Gamma function</text>
        <rect
          x="0"
          y="280"
          width="100%"
          height="20"
          style="filter:url(#gamma)"></rect>
      </g>
    </svg>

CSS

css

    rect {
      fill: url(#rainbow);
    }

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feComponentTransferElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <feBlend>
-    <feColorMatrix>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feFlood>
-    <feFuncA>
-    <feFuncB>
-    <feFuncG>
-    <feFuncR>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <feComposite> #

The  <feComposite> SVG filter primitive performs the combination of two
input images pixel-wise in image space using one of the Porter-Duff
compositing operations:  over ,  in ,  atop ,  out ,  xor ,  lighter ,
or  arithmetic .

The table below shows each of these operations using an image of the MDN
logo composited with a red circle:

[]

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Filter primitive element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   Filter primitive attributes
-     class 
-     style 

Specific attributes

-     in  : First input for the given filter primitive.
-     in2  : Second input for the given filter primitive (works the same
    as the  in attribute).
-     operator  :  over |  in |  out |  atop |  xor |  lighter |
     arithmetic
-     k1  ,   k2  ,   k3  ,   k4  : Values used for calculating the
    result pixel in  arithmetic   operator  filter primitives.

DOM Interface

This element implements the  SVGFECompositeElement interface.

Example

This example defines filters for each of the supported operations (
 over ,  atop ,  lighter , etc.), which composite an input
 SourceGraphic with an image of the MDN logo. The filters are each
applied to a circle element, which is then used as the  SourceGraphic .

Note:  BackgroundImage cannot be used as a compositing source on modern
browsers, so we can't define a filter that composites using whatever
pixels happen to be under the filter as one of the sources. The approach
taken here is a workaround because we can't use  BackgroundImage .

SVG

html

    <svg
      style="width:800px; height:400px; display: inline;"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <defs>
        <filter id="imageOver">
          <feImage href="mdn_logo_only_color.png" x="10px" y="10px" width="160px" />
          <feComposite in2="SourceGraphic" operator="over" />
        </filter>
        <filter id="imageIn">
          <feImage href="mdn_logo_only_color.png" x="10px" y="10px" width="160px" />
          <feComposite in2="SourceGraphic" operator="in" />
        </filter>
        <filter id="imageOut">
          <feImage href="mdn_logo_only_color.png" x="10px" y="10px" width="160px" />
          <feComposite in2="SourceGraphic" operator="out" />
        </filter>
        <filter id="imageAtop">
          <feImage href="mdn_logo_only_color.png" x="10px" y="10px" width="160px" />
          <feComposite in2="SourceGraphic" operator="atop" />
        </filter>
        <filter id="imageXor">
          <feImage href="mdn_logo_only_color.png" x="10px" y="10px" width="160px" />
          <feComposite in2="SourceGraphic" operator="xor" />
        </filter>
        <filter id="imageArithmetic">
          <feImage href="mdn_logo_only_color.png" x="10px" y="10px" width="160px" />
          <feComposite
            in2="SourceGraphic"
            operator="arithmetic"
            k1="0.1"
            k2="0.2"
            k3="0.3"
            k4="0.4" />
        </filter>
        <filter id="imageLighter">
          <feImage href="mdn_logo_only_color.png" x="10px" y="10px" width="160px" />
          <feComposite in2="SourceGraphic" operator="lighter" />
        </filter>
      </defs>
      <g transform="translate(0,25)">
        <circle
          cx="90px"
          cy="80px"
          r="70px"
          fill="#c00"
          style="filter:url(#imageOver)" />
        <text x="80" y="-5">over</text>
      </g>
      <g transform="translate(200,25)">
        <circle
          cx="90px"
          cy="80px"
          r="70px"
          fill="#c00"
          style="filter:url(#imageIn)" />
        <text x="80" y="-5">in</text>
      </g>
      <g transform="translate(400,25)">
        <circle
          cx="90px"
          cy="80px"
          r="70px"
          fill="#c00"
          style="filter:url(#imageOut)" />
        <text x="80" y="-5">out</text>
      </g>
      <g transform="translate(600,25)">
        <circle
          cx="90px"
          cy="80px"
          r="70px"
          fill="#c00"
          style="filter:url(#imageAtop)" />
        <text x="80" y="-5">atop</text>
      </g>
      <g transform="translate(0,240)">
        <circle
          cx="90px"
          cy="80px"
          r="70px"
          fill="#c00"
          style="filter:url(#imageXor)" />
        <text x="80" y="-5">xor</text>
      </g>
      <g transform="translate(200,240)">
        <circle
          cx="90px"
          cy="80px"
          r="70px"
          fill="#c00"
          style="filter:url(#imageArithmetic)" />
        <text x="70" y="-5">arithmetic</text>
      </g>
      <g transform="translate(400,240)">
        <circle
          cx="90px"
          cy="80px"
          r="70px"
          fill="#c00"
          style="filter:url(#imageLighter)" />
        <text x="80" y="-5">lighter</text>
      </g>
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feCompositeElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# <feConvolveMatrix> #

The  <feConvolveMatrix> SVG filter primitive applies a matrix
convolution filter effect. A convolution combines pixels in the input
image with neighboring pixels to produce a resulting image. A wide
variety of imaging operations can be achieved through convolutions,
including blurring, edge detection, sharpening, embossing and beveling.

A matrix convolution is based on an n-by-m matrix (the convolution
kernel) which describes how a given pixel value in the input image is
combined with its neighboring pixel values to produce a resulting pixel
value. Each result pixel is determined by applying the kernel matrix to
the corresponding source pixel and its neighboring pixels. The basic
convolution formula which is applied to each color value for a given
pixel is:

COLOR _(X,Y) = ( SUM _(I=0 to [ orderY -1]) { SUM _(J=0 to [ orderX -1])
{ SOURCE _(X- targetX +J, Y- targetY +I) * kernelMatrix
_(orderX -J-1, orderY -I-1) } } ) / divisor + bias * ALPHA _(X,Y)

where "orderX" and "orderY" represent the X and Y values for the 'order'
attribute, "targetX" represents the value of the 'targetX' attribute,
"targetY" represents the value of the 'targetY' attribute,
"kernelMatrix" represents the value of the 'kernelMatrix' attribute,
"divisor" represents the value of the 'divisor' attribute, and "bias"
represents the value of the 'bias' attribute.

Note in the above formulas that the values in the kernel matrix are
applied such that the kernel matrix is rotated 180 degrees relative to
the source and destination images in order to match convolution theory
as described in many computer graphics textbooks.

To illustrate, suppose you have an input image which is 5 pixels by 5
pixels, whose color values for one of the color channels are as follows:

    0    20  40 235 235
    100 120 140 235 235
    200 220 240 235 235
    225 225 255 255 255
    225 225 255 255 255

and you define a 3-by-3 convolution kernel as follows:

    1 2 3
    4 5 6
    7 8 9

Let's focus on the color value at the second row and second column of
the image (source pixel value is 120). Assuming the simplest case (where
the input image's pixel grid aligns perfectly with the kernel's pixel
grid) and assuming default values for attributes 'divisor' , 'targetX'
and 'targetY' , then resulting color value will be:

    (9*0   + 8*20  + 7*40 +
     6*100 + 5*120 + 4*140 +
     3*200 + 2*220 + 1*240) / (9+8+7+6+5+4+3+2+1)

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Filter primitive element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   Filter primitive attributes
-     class 
-     style 

Specific attributes

-     in 
-     order 
-     kernelMatrix 
-     divisor 
-     bias 
-     targetX 
-     targetY 
-     edgeMode 
-     kernelUnitLength 
-     preserveAlpha 

DOM Interface

This element implements the  SVGFEConvolveMatrixElement interface.

Example

SVG

html

    <svg
      width="200"
      height="200"
      viewBox="0 0 200 200"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <defs>
        <filter id="emboss">
          <feConvolveMatrix
            kernelMatrix="3 0 0
                          0 0 0
                          0 0 -3" />
        </filter>
      </defs>

      <image
        href="mdn.svg"
        x="0"
        y="0"
        height="200"
        width="200"
        style="filter:url(#emboss);" />
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feConvolveMatrixElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 24, 2023 by MDN contributors .
# <feDiffuseLighting> #

The  <feDiffuseLighting> SVG filter primitive lights an image using the
alpha channel as a bump map. The resulting image, which is an RGBA
opaque image, depends on the light color, light position and surface
geometry of the input bump map.

The light map produced by this filter primitive can be combined with a
texture image using the multiply term of the  arithmetic operator of the
 <feComposite> filter primitive. Multiple light sources can be simulated
by adding several of these light maps together before applying it to the
texture image.

Usage context

  ------------------- -----------------------------------------------------------------------------------------
  Categories          Filter primitive element
  Permitted content   Any number of descriptive elements and exactly one light source element , in any order.
  ------------------- -----------------------------------------------------------------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   Filter primitive attributes
-     class 
-     style 

Specific attributes

-     in 
-     surfaceScale 
-     diffuseConstant 
-     kernelUnitLength 

DOM Interface

This element implements the  SVGFEDiffuseLightingElement interface.

Example

The following example show the effect of the  <feDiffuseLighting>
element on a circle with each light source available. Each time, the
light comes from the upper left corner.

html

    <svg width="440" height="140" xmlns="http://www.w3.org/2000/svg">
      <!-- No light is applied -->
      <text text-anchor="middle" x="60" y="22">No Light</text>
      <circle cx="60" cy="80" r="50" fill="green" />

      <!-- the light source is a fePointLight element -->
      <text text-anchor="middle" x="170" y="22">fePointLight</text>
      <filter id="lightMe1">
        <feDiffuseLighting in="SourceGraphic" result="light" lighting-color="white">
          <fePointLight x="150" y="60" z="20" />
        </feDiffuseLighting>

        <feComposite
          in="SourceGraphic"
          in2="light"
          operator="arithmetic"
          k1="1"
          k2="0"
          k3="0"
          k4="0" />
      </filter>

      <circle cx="170" cy="80" r="50" fill="green" filter="url(#lightMe1)" />

      <!-- the light source is a feDistantLight element -->
      <text text-anchor="middle" x="280" y="22">feDistantLight</text>
      <filter id="lightMe2">
        <feDiffuseLighting in="SourceGraphic" result="light" lighting-color="white">
          <feDistantLight azimuth="240" elevation="20" />
        </feDiffuseLighting>

        <feComposite
          in="SourceGraphic"
          in2="light"
          operator="arithmetic"
          k1="1"
          k2="0"
          k3="0"
          k4="0" />
      </filter>

      <circle cx="280" cy="80" r="50" fill="green" filter="url(#lightMe2)" />

      <!-- the light source is a feSpotLight source -->
      <text text-anchor="middle" x="390" y="22">feSpotLight</text>
      <filter id="lightMe3">
        <feDiffuseLighting in="SourceGraphic" result="light" lighting-color="white">
          <feSpotLight
            x="360"
            y="5"
            z="30"
            limitingConeAngle="20"
            pointsAtX="390"
            pointsAtY="80"
            pointsAtZ="0" />
        </feDiffuseLighting>

        <feComposite
          in="SourceGraphic"
          in2="light"
          operator="arithmetic"
          k1="1"
          k2="0"
          k3="0"
          k4="0" />
      </filter>

      <circle cx="390" cy="80" r="50" fill="green" filter="url(#lightMe3)" />
    </svg>

Expected rendering:

[Expected rendering for the example]

Live rendering:

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feDiffuseLightingElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDisplacementMap>
-    <feDistantLight>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <fePointLight>
-    <feSpecularLighting>
-    <feSpotLight>
-    <feTile>
-    <feTurbulence>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <feDisplacementMap> #

The  <feDisplacementMap> SVG filter primitive uses the pixel values from
the image from   in2  to spatially displace the image from   in  .

The formula for the transformation looks like this:

 P'(x,y) ← P(x + scale * (XC(x,y) - 0.5), y + scale * (YC(x,y) - 0.5))

where  P(x,y) is the input image,   in  , and  P'(x,y) is the
destination.  XC(x,y) and  YC(x,y) are the component values of the
channel designated by   xChannelSelector  and   yChannelSelector  .

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Filter primitive element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   Filter primitive attributes
-     class 
-     style 

Specific attributes

-     in 
-     in2 
-     scale 
-     xChannelSelector 
-     yChannelSelector 

DOM Interface

This element implements the  SVGFEDisplacementMapElement interface.

Example

html

    <svg
      width="200"
      height="200"
      viewBox="0 0 220 220"
      xmlns="http://www.w3.org/2000/svg">
      <filter id="displacementFilter">
        <feTurbulence
          type="turbulence"
          baseFrequency="0.05"
          numOctaves="2"
          result="turbulence" />
        <feDisplacementMap
          in2="turbulence"
          in="SourceGraphic"
          scale="50"
          xChannelSelector="R"
          yChannelSelector="G" />
      </filter>

      <circle cx="100" cy="100" r="100" style="filter: url(#displacementFilter)" />
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feDisplacementMapElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <feDistantLight> #

The  <feDistantLight> filter primitive defines a distant light source
that can be used within a lighting filter primitive:
 <feDiffuseLighting> or  <feSpecularLighting> .

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Light source element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes

Specific attributes

-     azimuth 
-     elevation 

DOM Interface

This element implements the  SVGFEDistantLightElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feDistantLightElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feDiffuseLighting>
-    <feSpecularLighting>
-    <fePointLight>
-    <feSpotLight>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <feDropShadow> #

The SVG  <feDropShadow> filter primitive creates a drop shadow of the
input image. It can only be used inside a  <filter> element.

Note: The drop shadow color and opacity can be changed by using the
  flood-color  and   flood-opacity  presentation attributes.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 30 10" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <filter id="shadow">
          <feDropShadow dx="0.2" dy="0.4" stdDeviation="0.2" />
        </filter>
        <filter id="shadow2">
          <feDropShadow dx="0" dy="0" stdDeviation="0.5" flood-color="cyan" />
        </filter>
        <filter id="shadow3">
          <feDropShadow
            dx="-0.8"
            dy="-0.8"
            stdDeviation="0"
            flood-color="pink"
            flood-opacity="0.5" />
        </filter>
      </defs>

      <circle cx="5" cy="50%" r="4" style="fill:pink; filter:url(#shadow);" />

      <circle cx="15" cy="50%" r="4" style="fill:pink; filter:url(#shadow2);" />

      <circle cx="25" cy="50%" r="4" style="fill:pink; filter:url(#shadow3);" />
    </svg>

Attributes

  dx 

    This attribute defines the x offset of the drop shadow. Value type :
    <number> ; Default value :  2 ; Animatable : yes

  dy 

    This attribute defines the y offset of the drop shadow. Value type :
    <number> ; Default value :  2 ; Animatable : yes

  stdDeviation 

    This attribute defines the standard deviation for the blur operation
    in the drop shadow. Value type : <number> ; Default value :  2 ;
    Animatable : yes

Global attributes

Core Attributes

    Most notably:   id 

Styling Attributes
      class  ,   style 

Filter primitive attributes
      height  ,   in  ,   result  ,   x  ,   y  ,   width 

Presentation Attributes

    Most notably:   flood-color  ,   flood-opacity 

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Filter primitive element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <script> ,  <set>
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feDropShadowElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <feFlood> #

The  <feFlood> SVG filter primitive fills the filter subregion with the
color and opacity defined by   flood-color  and   flood-opacity  .

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Filter primitive element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   Filter primitive attributes
-     class 
-     style 

Specific attributes

-     flood-color 
-     flood-opacity 

DOM Interface

This element implements the  SVGFEFloodElement interface.

Example

HTML

html

    <svg xmlns="http://www.w3.org/2000/svg" width="200" height="200">
      <defs>
        <filter id="floodFilter" filterUnits="userSpaceOnUse">
          <feFlood
            x="50"
            y="50"
            width="100"
            height="100"
            flood-color="green"
            flood-opacity="0.5" />
        </filter>
      </defs>

      <use style="filter: url(#floodFilter);" />
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feFloodElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 22, 2023 by MDN contributors .
# <feFuncA> #

The  <feFuncA> SVG filter primitive defines the transfer function for
the alpha component of the input graphic of its parent
 <feComponentTransfer> element.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          None

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Transfer function attributes

Specific attributes

None.

DOM Interface

This element implements the  SVGFEFuncAElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feFuncAElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feComponentTransfer>
-    <feFuncR>
-    <feFuncB>
-    <feFuncG>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <feFuncB> #

The  <feFuncB> SVG filter primitive defines the transfer function for
the blue component of the input graphic of its parent
 <feComponentTransfer> element.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          None

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Transfer function attributes

Specific attributes

None.

DOM Interface

This element implements the  SVGFEFuncBElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feFuncBElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feComponentTransfer>
-    <feFuncA>
-    <feFuncR>
-    <feFuncG>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <feFuncG> #

The  <feFuncG> SVG filter primitive defines the transfer function for
the green component of the input graphic of its parent
 <feComponentTransfer> element.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          None

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Transfer function attributes

Specific attributes

None.

DOM Interface

This element implements the  SVGFEFuncGElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feFuncGElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feComponentTransfer>
-    <feFuncA>
-    <feFuncR>
-    <feFuncB>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <feFuncR> #

The  <feFuncR> SVG filter primitive defines the transfer function for
the red component of the input graphic of its parent
 <feComponentTransfer> element.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          None

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Transfer function attributes

Specific attributes

None.

DOM Interface

This element implements the  SVGFEFuncRElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feFuncRElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feComponentTransfer>
-    <feFuncA>
-    <feFuncB>
-    <feFuncG>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <feGaussianBlur> #

The  <feGaussianBlur> SVG filter primitive blurs the input image by the
amount specified in   stdDeviation  , which defines the bell-curve.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Filter primitive element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   Filter primitive attributes
-     class 
-     style 

Specific attributes

-     in 
-     stdDeviation 
-     edgeMode 

DOM Interface

This element implements the  SVGFEGaussianBlurElement interface.

Example

Simple example

SVG

html

    <svg
      width="230"
      height="120"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <filter id="blurMe">
        <feGaussianBlur in="SourceGraphic" stdDeviation="5" />
      </filter>

      <circle cx="60" cy="60" r="50" fill="green" />

      <circle cx="170" cy="60" r="50" fill="green" filter="url(#blurMe)" />
    </svg>

Result

[]

Drop shadow example

SVG

html

    <svg
      width="120"
      height="120"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <filter id="dropShadow">
        <feGaussianBlur in="SourceAlpha" stdDeviation="3" />
        <feOffset dx="2" dy="4" />
        <feMerge>
          <feMergeNode />
          <feMergeNode in="SourceGraphic" />
        </feMerge>
      </filter>

      <circle cx="60" cy="60" r="50" fill="green" filter="url(#dropShadow)" />
    </svg>

Result

[]

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feGaussianBlurElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feFlood>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <feImage> #

The  <feImage> SVG filter primitive fetches image data from an external
source and provides the pixel data as output (meaning if the external
source is an SVG image, it is rasterized.)

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Filter primitive element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <animateTransform> ,
                                       <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   Filter primitive attributes
-   XLink attributes
-     class 
-     style 

Specific attributes

-     crossorigin 
-     preserveAspectRatio 
-     xlink:href  Deprecated

DOM Interface

This element implements the  SVGFEImageElement interface.

Example

SVG

html

    <svg
      viewBox="0 0 200 200"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      width="200"
      height="200">
      <defs>
        <filter id="image">
          <feImage href="mdn_logo_only_color.png" />
        </filter>
      </defs>

      <rect x="10%" y="10%" width="80%" height="80%" style="filter:url(#image);" />
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feImageElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <animateTransform>
-    <set>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feFlood>
-    <feGaussianBlur>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# <feMerge> #

The  <feMerge> SVG element allows filter effects to be applied
concurrently instead of sequentially. This is achieved by other filters
storing their output via the   result  attribute and then accessing it
in a  <feMergeNode> child.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Filter primitive element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <feMergeNode>
  ----------------------------------- -----------------------------------

Example

SVG

html

    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
      <filter id="feOffset" x="-40" y="-20" width="100" height="200">
        <feOffset in="SourceGraphic" dx="60" dy="60" />
        <feGaussianBlur stdDeviation="5" result="blur2" />
        <feMerge>
          <feMergeNode in="blur2" />
          <feMergeNode in="SourceGraphic" />
        </feMerge>
      </filter>

      <rect
        x="40"
        y="40"
        width="100"
        height="100"
        style="stroke: #000000; fill: green; filter: url(#feOffset);" />
    </svg>

Result

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   Filter primitive attributes
-     class 
-     style 

Specific attributes

None.

DOM Interface

This element implements the  SVGFEMergeElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feMergeElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMergeNode>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <feMergeNode> #

The  feMergeNode takes the result of another filter to be processed by
its parent  <feMerge> .

Usage context

  ----------------------------------- -----------------------------------
  Categories                          None

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Example

html

    <svg
      width="200"
      height="200"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <filter id="feOffset" x="-40" y="-20" width="100" height="200">
        <feOffset in="SourceGraphic" dx="60" dy="60" />
        <feGaussianBlur in="SourceGraphic" stdDeviation="5" result="blur2" />
        <feMerge>
          <feMergeNode in="blur2" />
          <feMergeNode in="SourceGraphic" />
        </feMerge>
      </filter>

      <rect
        x="40"
        y="40"
        width="100"
        height="100"
        style="stroke: #000000; fill: green; filter: url(#feOffset);" />
      <rect
        x="40"
        y="40"
        width="100"
        height="100"
        style="stroke: #000000; fill: green;" />
    </svg>

Result

Attributes

Global attributes

-   Core attributes

Specific attributes

-     in 

DOM Interface

This element implements the  SVGFEMergeNodeElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feMergeNodeElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feMerge>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 8, 2023 by MDN contributors .
# <feMorphology> #

The  <feMorphology> SVG filter primitive is used to erode or dilate the
input image. Its usefulness lies especially in fattening or thinning
effects.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Filter primitive element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   Filter primitive attributes
-     class 
-     style 

Specific attributes

-     in 
-     operator 
-     radius 

DOM Interface

This element implements the  SVGFEMorphologyElement interface.

Examples

Filtering SVG content

SVG

html

    <svg xmlns="http://www.w3.org/2000/svg" width="300" height="180">
      <filter id="erode">
        <feMorphology operator="erode" radius="1" />
      </filter>
      <filter id="dilate">
        <feMorphology operator="dilate" radius="2" />
      </filter>
      <text y="1em">Normal text</text>
      <text id="thin" y="2em">Thinned text</text>
      <text id="thick" y="3em">Fattened text</text>
    </svg>

CSS

css

    text {
      font-family: Arial, Helvetica, sans-serif;
      font-size: 3em;
    }

    #thin {
      filter: url(#erode);
    }

    #thick {
      filter: url(#dilate);
    }

Filtering HTML content

SVG

html

    <svg xmlns="http://www.w3.org/2000/svg" width="0" height="0">
      <filter id="erode">
        <feMorphology operator="erode" radius="1" />
      </filter>
      <filter id="dilate">
        <feMorphology operator="dilate" radius="2" />
      </filter>
    </svg>

    <p>Normal text</p>
    <p id="thin">Thinned text</p>
    <p id="thick">Fattened text</p>

CSS

css

    p {
      margin: 0;
      font-family: Arial, Helvetica, sans-serif;
      font-size: 3em;
    }

    #thin {
      filter: url(#erode);
    }

    #thick {
      filter: url(#dilate);
    }

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feMorphologyElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <feOffset> #

The  <feOffset> SVG filter primitive allows to offset the input image.
The input image as a whole is offset by the values specified in the
  dx  and   dy  attributes.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Filter primitive element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   Filter primitive attributes
-     class 
-     style 

Specific attributes

-     in 
-     dx 
-     dy 

DOM Interface

This element implements the  SVGFEOffsetElement interface.

Example

SVG

html

    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <filter id="offset" width="180" height="180">
          <feOffset in="SourceGraphic" dx="60" dy="60" />
        </filter>
      </defs>

      <rect x="0" y="0" width="100" height="100" stroke="black" fill="green" />
      <rect
        x="0"
        y="0"
        width="100"
        height="100"
        stroke="black"
        fill="green"
        filter="url(#offset)" />
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feOffsetElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <fePointLight> #

The  <fePointLight> filter primitive defines a light source which allows
to create a point light effect. It that can be used within a lighting
filter primitive:  <feDiffuseLighting> or  <feSpecularLighting> .

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Light source element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes

Specific attributes

-     x 
-     y 
-     z 

DOM Interface

This element implements the  SVGFEPointLightElement interface.

Example

SVG

html

    <svg
      width="200"
      height="200"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <defs>
        <filter id="spotlight">
          <feSpecularLighting
            result="spotlight"
            specularConstant="1.5"
            specularExponent="80"
            lighting-color="#FFF">
            <fePointLight x="50" y="50" z="220" />
          </feSpecularLighting>
          <feComposite
            in="SourceGraphic"
            in2="spotlight"
            operator="arithmetic"
            k1="0"
            k2="1"
            k3="1"
            k4="0" />
        </filter>
      </defs>

      <image
        href="mdn_logo_only_color.png"
        x="10%"
        y="10%"
        width="80%"
        height="80%"
        style="filter:url(#spotlight);" />
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # fePointLightElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feDiffuseLighting>
-    <feSpecularLighting>
-    <feDistantLight>
-    <feSpotLight>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# <feSpecularLighting> #

The  <feSpecularLighting> SVG filter primitive lights a source graphic
using the alpha channel as a bump map. The resulting image is an RGBA
image based on the light color. The lighting calculation follows the
standard specular component of the Phong lighting model . The resulting
image depends on the light color, light position and surface geometry of
the input bump map. The result of the lighting calculation is added. The
filter primitive assumes that the viewer is at infinity in the z
direction.

This filter primitive produces an image which contains the specular
reflection part of the lighting calculation. Such a map is intended to
be combined with a texture using the  add term of the arithmetic
 <feComposite> method. Multiple light sources can be simulated by adding
several of these light maps before applying it to the texture image.

Usage context

  ------------------- ---------------------------------------------------------------------------------------------
  Categories          Filter primitive element
  Permitted content   Exactly one light source element first and any number of descriptive elements in any order.
  ------------------- ---------------------------------------------------------------------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   Filter primitive attributes
-     class 
-     style 

Specific attributes

-     in 
-     surfaceScale 
-     specularConstant 
-     specularExponent 
-     kernelUnitLength 

DOM Interface

This element implements the  SVGFESpecularLightingElement interface.

Example

html

    <svg
      height="200"
      width="200"
      viewBox="0 0 220 220"
      xmlns="http://www.w3.org/2000/svg">
      <filter id="filter">
        <feSpecularLighting
          result="specOut"
          specularExponent="20"
          lighting-color="#bbbbbb">
          <fePointLight x="50" y="75" z="200" />
        </feSpecularLighting>
        <feComposite
          in="SourceGraphic"
          in2="specOut"
          operator="arithmetic"
          k1="0"
          k2="1"
          k3="1"
          k4="0" />
      </filter>
      <circle cx="110" cy="110" r="100" style="filter:url(#filter)" />
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feSpecularLightingElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feDistantLight>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <fePointLight>
-    <feSpotLight>
-    <feTile>
-    <feTurbulence>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <feSpotLight> #

The  <feSpotLight> SVG filter primitive defines a light source that can
be used to create a spotlight effect. It is used within a lighting
filter primitive:  <feDiffuseLighting> or  <feSpecularLighting> .

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Light source element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes

Specific attributes

-     x 
-     y 
-     z 
-     pointsAtX 
-     pointsAtY 
-     pointsAtZ 
-     specularExponent 
-     limitingConeAngle 

DOM Interface

This element implements the  SVGFESpotLightElement interface.

Example

HTML

html

    <svg
      width="200"
      height="200"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <defs>
        <filter id="spotlight">
          <feSpecularLighting
            result="spotlight"
            specularConstant="1.5"
            specularExponent="4"
            lighting-color="#FFF">
            <feSpotLight x="600" y="600" z="400" limitingConeAngle="5.5" />
          </feSpecularLighting>
          <feComposite
            in="SourceGraphic"
            in2="spotlight"
            operator="out"
            k1="0"
            k2="1"
            k3="1"
            k4="0" />
        </filter>
      </defs>

      <image
        href="mdn_logo_only_color.png"
        x="10%"
        y="10%"
        width="80%"
        height="80%"
        style="filter:url(#spotlight);" />
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feSpotLightElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feDiffuseLighting>
-    <feSpecularLighting>
-    <feDistantLight>
-    <fePointLight>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# <feTile> #

The  <feTile> SVG filter primitive allows to fill a target rectangle
with a repeated, tiled pattern of an input image. The effect is similar
to the one of a  <pattern> .

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Filter primitive element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   Filter primitive attributes
-     class 
-     style 

Specific attributes

-     in 

DOM Interface

This element implements the  SVGFETileElement interface.

Example

SVG

html

    <svg
      width="200"
      height="200"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <title>
        Tiling an MDN logo with the Mozilla mascot's head that is on the logo
      </title>
      <defs>
        <!-- Define the region of the filter to be the bounding box of the
             MDN logo being filtered. These parameters will create an output
             that covers the same region as the image. -->
        <filter id="tile" x="0" y="0" width="100%" height="100%">
          <!-- Create a tile from the central portion of the image from
               (50,50) to (150,150). This area is essentially the Mozilla
               mascot's head. -->
          <feTile in="SourceGraphic" x="50" y="50" width="100" height="100" />

          <!-- Without specifying a region, feTile defaults to the region
               of the filter. Without specifying an "in" parameter, the default
               is the result of the previous primitive. So this second feTile
               will tile the entire filter region with the mascot's head. -->
          <feTile />
        </filter>
      </defs>

      <!-- Use the MDN logo as input to the filter -->
      <image
        href="mdn_logo_only_color.png"
        x="10%"
        y="10%"
        width="80%"
        height="80%"
        style="filter:url(#tile);" />
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feTileElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTurbulence>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# <feTurbulence> #

The  <feTurbulence> SVG filter primitive creates an image using the
Perlin turbulence function . It allows the synthesis of artificial
textures like clouds or marble. The resulting image will fill the entire
filter primitive subregion.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Filter primitive element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   Filter primitive attributes
-     class 
-     style 

Specific attributes

-     baseFrequency 
-     numOctaves 
-     seed 
-     stitchTiles 
-     type 

DOM Interface

This element implements the  SVGFETurbulenceElement interface.

Example

html

    <svg
      width="200"
      height="200"
      viewBox="0 0 220 220"
      xmlns="http://www.w3.org/2000/svg">
      <filter id="displacementFilter">
        <feTurbulence
          type="turbulence"
          baseFrequency="0.05"
          numOctaves="2"
          result="turbulence" />
        <feDisplacementMap
          in2="turbulence"
          in="SourceGraphic"
          scale="50"
          xChannelSelector="R"
          yChannelSelector="G" />
      </filter>

      <circle cx="100" cy="100" r="100" style="filter: url(#displacementFilter)" />
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # feTurbulenceElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <filter>
-    <animate>
-    <set>
-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <filter> #

The  <filter> SVG element defines a custom filter effect by grouping
atomic filter primitives. It is never rendered itself, but must be used
by the   filter  attribute on SVG elements, or the  filter CSS property
for SVG/HTML elements.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          None

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Descriptive elements
                                      Filter primitive elements
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   XLink attributes
-     class 
-     style 

Specific attributes

-     x 
-     y 
-     width 
-     height 
-     filterUnits 
-     primitiveUnits 
-     xlink:href  Deprecated

DOM Interface

This element implements the  SVGFilterElement interface.

Example

SVG

html

    <svg width="230" height="120" xmlns="http://www.w3.org/2000/svg">
      <filter id="blurMe">
        <feGaussianBlur stdDeviation="5" />
      </filter>

      <circle cx="60" cy="60" r="50" fill="green" />

      <circle cx="170" cy="60" r="50" fill="green" filter="url(#blurMe)" />
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Filter Effects Module Level 1
  # FilterElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feDropShadow>
-    <feFlood>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMorphology>
-    <feOffset>
-    <feSpecularLighting>
-    <feTile>
-    <feTurbulence>
-   SVG tutorial: Filter effects

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 19, 2023 by MDN contributors .
# <font-face-format> #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  <font-face-format> SVG element describes the type of font
referenced by its parent  <font-face-uri> .

Usage context

  ------------------- --------------
  Categories          Font element
  Permitted content   Empty
  ------------------- --------------

Attributes

Global attributes

-   Core attributes

Specific attributes

  string  Deprecated

DOM Interface

This element implements the  SVGFontFaceFormatElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceFormatElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <font-face-uri>
-   SVG tutorial: SVG fonts

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <font-face> #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  <font-face> SVG element corresponds to the CSS  @font-face rule. It
defines a font's outer properties.

Usage context

  ------------------- ------------------------------------------------------------------------------------------
  Categories          Font element
  Permitted content   Any number of descriptive elements » and at most one  <font-face> element, in any order.
  ------------------- ------------------------------------------------------------------------------------------

Attributes

Global attributes

-   Core attributes

Specific attributes

-     font-family  Deprecated
-     font-style  Deprecated
-     font-variant  Deprecated
-     font-weight  Deprecated
-     font-stretch  Deprecated
-     font-size  Deprecated
-     unicode-range  Deprecated
-     units-per-em  Deprecated
-     panose-1  Deprecated
-     stemv  Deprecated
-     stemh  Deprecated
-     slope  Deprecated
-     cap-height  Deprecated
-     x-height  Deprecated
-     accent-height  Deprecated
-     ascent  Deprecated
-     descent  Deprecated
-     widths  Deprecated
-     bbox  Deprecated
-     ideographic  Deprecated
-     alphabetic  Deprecated
-     mathematical  Deprecated
-     hanging  Deprecated
-     v-ideographic  Deprecated
-     v-alphabetic  Deprecated
-     v-mathematical  Deprecated
-     v-hanging  Deprecated
-     underline-position  Deprecated
-     underline-thickness  Deprecated
-     strikethrough-position  Deprecated
-     strikethrough-thickness  Deprecated
-     overline-position  Deprecated
-     overline-thickness  Deprecated

DOM Interface

This element implements the  SVGFontFaceElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <font>
-    <font-face-src>
-   SVG tutorial: SVG fonts

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <font-face-name> #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  <font-face-name> element points to a locally installed copy of this
font, identified by its name.

Usage context

  ------------------- -------
  Categories          None
  Permitted content   Empty
  ------------------- -------

Attributes

Global attributes

-   Core attributes

Specific attributes

-     name  Deprecated

DOM Interface

This element implements the  SVGFontFaceNameElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceNameElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <font-face-src>
-   SVG tutorial: SVG fonts

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <font-face-src> #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  <font-face-src> SVG element corresponds to the  src descriptor in
CSS  @font-face rules. It serves as container for  <font-face-name> ,
pointing to locally installed copies of this font, and  <font-face-uri>
, utilizing remotely defined fonts.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Font element

  Permitted content                   One or more of the following
                                      elements, in any order:
                                       <font-face-name> ,
                                       <font-face-uri>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes

Specific attributes

None.

DOM Interface

This element implements the  SVGFontFaceSrcElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceSrcElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <font-face>
-    <font-face-name>
-    <font-face-uri>
-   SVG tutorial: SVG fonts

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <font-face-uri> #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  <font-face-uri> SVG element points to a remote definition of the
current font.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Font element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <font-face-format>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   XLink attributes

Specific attributes

-     xlink:href  Deprecated

DOM Interface

This element implements the  SVGFontFaceUriElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontFaceURIElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <font-face-src>
-   SVG tutorial: SVG fonts

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# <font> #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  <font> SVG element defines a font to be used for text layout.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Font element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Descriptive elements
                                       <font-face> ,  <glyph> ,  <hkern>
                                      ,  <missing-glyph> ,  <vkern>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-     class 
-     style 

Specific attributes

-     horiz-origin-x  Deprecated
-     horiz-origin-y  Deprecated
-     horiz-adv-x  Deprecated
-     vert-origin-x  Deprecated
-     vert-origin-y  Deprecated
-     vert-adv-y  Deprecated

DOM Interface

This element implements the  SVGFontElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # FontElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <font-face>
-    <glyph>
-    <text>
-   SVG tutorial: SVG fonts

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <foreignObject> #

The  <foreignObject> SVG element includes elements from a different XML
namespace. In the context of a browser, it is most likely (X)HTML.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
      <style>
        div {
          color: white;
          font: 18px serif;
          height: 100%;
          overflow: auto;
        }
      </style>

      <polygon points="5,5 195,10 185,185 10,195" />

      <!-- Common use case: embed HTML text into SVG -->
      <foreignObject x="20" y="20" width="160" height="160">
        <!--
          In the context of SVG embedded in an HTML document, the XHTML
          namespace could be omitted, but it is mandatory in the
          context of an SVG document
        -->
        <div xmlns="http://www.w3.org/1999/xhtml">
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed mollis mollis
          mi ut ultricies. Nullam magna ipsum, porta vel dui convallis, rutrum
          imperdiet eros. Aliquam erat volutpat.
        </div>
      </foreignObject>
    </svg>

Attributes

  height 

    The height of the foreignObject. Value type : <length> |
    <percentage> ; Default value :  auto ; Animatable : yes

  width 

    The width of the foreignObject. Value type : <length> | <percentage>
    ; Default value :  auto ; Animatable : yes

  x 

    The x coordinate of the foreignObject. Value type : <length> |
    <percentage> ; Default value :  0 ; Animatable : yes

  y 

    The y coordinate of the foreignObject. Value type : <length> |
    <percentage> ; Default value :  0 ; Animatable : yes

Note: Starting with SVG2,  x ,  y ,  width , and  height are Geometry
Properties , meaning those attributes can also be used as CSS properties
for that element.

Global attributes

Core Attributes

    Most notably:   id  ,   tabindex 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Event Attributes

    Global event attributes , Graphical event attributes , Document
    event attributes , Document element event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

Aria Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

Usage notes

  ------------------- --------------------------------
  Categories          None
  Permitted content   Any elements or character data
  ------------------- --------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # ForeignObjectElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <g> #

The  <g> SVG element is a container used to group other SVG elements.

Transformations applied to the  <g> element are performed on its child
elements, and its attributes are inherited by its children. It can also
group multiple elements to be referenced later with the  <use> element.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <!-- Using g to inherit presentation attributes -->
      <g fill="white" stroke="green" stroke-width="5">
        <circle cx="40" cy="40" r="25" />
        <circle cx="60" cy="60" r="25" />
      </g>
    </svg>

Attributes

This element only includes global attributes

Global attributes

Core Attributes

    Most notably:   id  ,   tabindex 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Event Attributes

    Global event attributes , Graphical event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

Aria Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Container element, Structural
                                      element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
                                      Shape elements
                                      Structural elements
                                      Gradient elements
                                       <a> ,  <clipPath> ,
                                       <color-profile> ,  <cursor> ,
                                       <filter> ,  <font> ,  <font-face>
                                      ,  <foreignObject> ,  <image> ,
                                       <marker> ,  <mask> ,  <pattern> ,
                                       <script> ,  <style> ,  <switch> ,
                                       <text> ,  <view>
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # GElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <glyph> #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

A  <glyph> defines a single glyph in an SVG font.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Text content element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
                                      Shape elements
                                      Structural elements
                                      Gradient elements
                                       <a> ,  <clipPath> ,
                                       <color-profile> ,  <cursor> ,
                                       <filter> ,  <font> ,  <font-face>
                                      ,  <foreignObject> ,  <image> ,
                                       <marker> ,  <mask> ,  <pattern> ,
                                       <script> ,  <style> ,  <switch> ,
                                       <text> ,  <view>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-     class 
-     style 

Specific attributes

-     d  Deprecated
-     horiz-adv-x  Deprecated
-     vert-origin-x  Deprecated
-     vert-origin-y  Deprecated
-     vert-adv-y  Deprecated
-     unicode  Deprecated
-     glyph-name  Deprecated
-     orientation  Deprecated
-     arabic-form  Deprecated
-     lang  Deprecated

DOM Interface

This element implements the  SVGGlyphElement interface.

Example

SVG

html

    <svg
      width="400px"
      height="300px"
      version="1.1"
      xmlns="http://www.w3.org/2000/svg">
      <!-- Example copied from https://www.w3.org/TR/SVG/fonts.html#GlyphElement -->
      <defs>
        <font id="Font1" horiz-adv-x="1000">
          <font-face
            font-family="Super Sans"
            font-weight="bold"
            font-style="normal"
            units-per-em="1000"
            cap-height="600"
            x-height="400"
            ascent="700"
            descent="300"
            alphabetic="0"
            mathematical="350"
            ideographic="400"
            hanging="500">
            <font-face-src>
              <font-face-name name="Super Sans Bold" />
            </font-face-src>
          </font-face>

          <missing-glyph><path d="M0,0h200v200h-200z" /></missing-glyph>
          <glyph unicode="!" horiz-adv-x="80" d="M0,0h200v200h-200z"></glyph>
          <glyph unicode="@" d="M0,50l100,300l400,100z"></glyph>
        </font>
      </defs>
      <text
        x="100"
        y="100"
        style="font-family: 'Super Sans', Helvetica, sans-serif;
                 font-weight: bold; font-style: normal">
        Text using embedded font!
      </text>
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # GlyphElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <font>
-    <missing-glyph>
-   SVG tutorial: SVG fonts

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <glyphRef> #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  glyphRef element provides a single possible glyph to the
referencing  <altGlyph> substitution.

Usage context

  ------------------- ----------------------
  Categories          Text content element
  Permitted content   Empty
  ------------------- ----------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-   XLink attributes
-     class 
-     style 

Specific attributes

-     x  Deprecated
-     y  Deprecated
-     dx  Deprecated
-     dy  Deprecated
-     glyphRef  Deprecated
-     format  Deprecated
-     xlink:href  Deprecated

DOM Interface

This element implements the  SVGGlyphRefElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # GlyphRefElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# <hkern> #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  <hkern> SVG element allows to fine-tweak the horizontal distance
between two glyphs. This process is known as kerning .

Usage context

  ------------------- --------------
  Categories          Font element
  Permitted content   Empty
  ------------------- --------------

Attributes

Global attributes

-   Core attributes

Specific attributes

-     u1  Deprecated
-     g1  Deprecated
-     u2  Deprecated
-     g2  Deprecated
-     k  Deprecated

DOM Interface

This element implements the  SVGHKernElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # HKernElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <font>
-    <glyph>
-    <vkern>
-   SVG tutorial: SVG fonts

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# SVG element reference #

SVG drawings and images are created using a wide array of elements which
are dedicated to the construction, drawing, and layout of vector images
and diagrams. Here you'll find reference documentation for each of the
SVG elements.

SVG elements A to Z

A

-    <a>
-    <animate>
-    <animateMotion>
-    <animateTransform>

C

-    <circle>
-    <clipPath>

D

-    <defs>
-    <desc>

E

-    <ellipse>

F

-    <feBlend>
-    <feColorMatrix>
-    <feComponentTransfer>
-    <feComposite>
-    <feConvolveMatrix>
-    <feDiffuseLighting>
-    <feDisplacementMap>
-    <feDistantLight>
-    <feDropShadow>
-    <feFlood>
-    <feFuncA>
-    <feFuncB>
-    <feFuncG>
-    <feFuncR>
-    <feGaussianBlur>
-    <feImage>
-    <feMerge>
-    <feMergeNode>
-    <feMorphology>
-    <feOffset>
-    <fePointLight>
-    <feSpecularLighting>
-    <feSpotLight>
-    <feTile>
-    <feTurbulence>
-    <filter>
-    <foreignObject>

G

-    <g>

H

-    <hatch>
-    <hatchpath>

I

-    <image>

L

-    <line>
-    <linearGradient>

M

-    <marker>
-    <mask>
-    <metadata>
-    <mpath>

P

-    <path>
-    <pattern>
-    <polygon>
-    <polyline>

R

-    <radialGradient>
-    <rect>

S

-    <script>
-    <set>
-    <stop>
-    <style>
-    <svg>
-    <switch>
-    <symbol>

T

-    <text>
-    <textPath>
-    <title>
-    <tspan>

U

-    <use>

V

-    <view>

Note: The SVG 2 spec requires that any unknown elements be treated as
 <g> for the purpose of rendering.

SVG elements by category

Animation elements

 <animate> ,  <animateMotion> ,  <animateTransform> ,  <mpath> ,  <set>

Basic shapes

 <circle> ,  <ellipse> ,  <line> ,  <polygon> ,  <polyline> ,  <rect>

Container elements

 <a> ,  <defs> ,  <g> ,  <marker> ,  <mask> ,  <missing-glyph> ,
 <pattern> ,  <svg> ,  <switch> ,  <symbol>

Descriptive elements

 <desc> ,  <metadata> ,  <title>

Filter primitive elements

 <feBlend> ,  <feColorMatrix> ,  <feComponentTransfer> ,  <feComposite>
,  <feConvolveMatrix> ,  <feDiffuseLighting> ,  <feDisplacementMap> ,
 <feDropShadow> ,  <feFlood> ,  <feFuncA> ,  <feFuncB> ,  <feFuncG> ,
 <feFuncR> ,  <feGaussianBlur> ,  <feImage> ,  <feMerge> ,
 <feMergeNode> ,  <feMorphology> ,  <feOffset> ,  <feSpecularLighting> ,
 <feTile> ,  <feTurbulence>

Font elements

 <font> ,  <font-face> ,  <font-face-format> ,  <font-face-name> ,
 <font-face-src> ,  <font-face-uri> ,  <hkern> ,  <vkern>

Gradient elements

 <linearGradient> ,  <radialGradient> ,  <stop>

Graphics elements

 <circle> ,  <ellipse> ,  <image> ,  <line> ,  <path> ,  <polygon> ,
 <polyline> ,  <rect> ,  <text> ,  <use>

Graphics referencing elements

 <use>

Light source elements

 <feDistantLight> ,  <fePointLight> ,  <feSpotLight>

Never-rendered elements

 <clipPath> ,  <defs> ,  <hatch> ,  <linearGradient> ,  <marker> ,
 <mask> ,  <metadata> ,  <pattern> ,  <radialGradient> ,  <script> ,
 <style> ,  <symbol> ,  <title>

Paint server elements

 <hatch> ,  <linearGradient> ,  <pattern> ,  <radialGradient> ,
 <solidcolor>

Renderable elements

 <a> ,  <circle> ,  <ellipse> ,  <foreignObject> ,  <g> ,  <image> ,
 <line> ,  <path> ,  <polygon> ,  <polyline> ,  <rect> ,  <svg> ,
 <switch> ,  <symbol> ,  <text> ,  <textPath> ,  <tspan> ,  <use>

Note: The SVG 2 spec requires that any unknown elements be treated as
 <g> for the purpose of rendering.

Shape elements

 <circle> ,  <ellipse> ,  <line> ,  <path> ,  <polygon> ,  <polyline> ,
 <rect>

Structural elements

 <defs> ,  <g> ,  <svg> ,  <symbol> ,  <use>

Text content elements

 <glyph> ,  <glyphRef> ,  <textPath> ,  <text> ,  <tref> ,  <tspan>

Text content child elements

 <textPath> ,  <tref> ,  <tspan>

Uncategorized elements

 <clipPath> ,  <cursor> ,  <filter> ,  <foreignObject> ,  <hatchpath> ,
 <script> ,  <style> ,  <view>

Obsolete and deprecated elements

Warning: These are old SVG elements which are deprecated and should not
be used. You should never use them in new projects, and should replace
them in old projects as soon as you can. They are listed here for
informational purposes only.

C

 <cursor>

F

 <font> ,  <font-face> ,  <font-face-format> ,  <font-face-name> ,
 <font-face-src> ,  <font-face-uri>

G

 <glyph> ,  <glyphRef>

H

 <hkern>

M

 <missing-glyph>

T

 <tref>

V

 <vkern>

See also

-   SVG attribute reference
-   SVG Tutorial
-   SVG interface reference

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# <image> #

The  <image> SVG element includes images inside SVG documents. It can
display raster image files or other SVG files.

The only image formats SVG software must support are JPEG , PNG , and
other SVG files. Animated GIF behavior is undefined.

SVG files displayed with  <image> are treated as an image : external
resources aren't loaded,  :visited styles aren't applied , and they
cannot be interactive. To include dynamic SVG elements, try  <use> with
an external URL. To include SVG files and run scripts inside them, try
 <object> inside of  <foreignObject> .

Note: The HTML spec defines  <image> as a synonym for  <img> while
parsing HTML. This specific element and its behavior only apply inside
SVG documents or inline SVGs.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Graphics element, Graphics
                                      referencing element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Conditional processing attributes
-   Core attributes
-   Graphical event attributes
-   Presentation attributes
-   Xlink attributes
-     class 
-     style 
-     transform 

Specific attributes

-     x  : Positions the image horizontally from the origin.
-     y  : Positions the image vertically from the origin.
-     width  : The width the image renders at. Unlike HTML's  <img> ,
    this attribute is required.
-     height  : The height the image renders at. Unlike HTML's  <img> ,
    this attribute is required.
-     href  and   xlink:href  Deprecated : Points at a URL for the image
    file.
-     preserveAspectRatio  : Controls how the image is scaled.
-     crossorigin  : Defines the value of the credentials flag for CORS
    requests.
-     decoding  : Provides a hint to the browser as to whether it should
    perform image decoding synchronously or asynchronously.

DOM Interface

 <image> implements the  SVGImageElement interface.

Example

Basic rendering of a PNG image in SVG:

SVG

html

    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
      <image href="mdn_logo_only_color.png" height="200" width="200" />
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # ImageElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# <linearGradient> #

The  <linearGradient> element lets authors define linear gradients to
apply to other SVG elements.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg
      viewBox="0 0 10 10"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <defs>
        <linearGradient id="myGradient" gradientTransform="rotate(90)">
          <stop offset="5%" stop-color="gold" />
          <stop offset="95%" stop-color="red" />
        </linearGradient>
      </defs>

      <!-- using my linear gradient -->
      <circle cx="5" cy="5" r="4" fill="url('#myGradient')" />
    </svg>

Attributes

  gradientUnits 

    This attribute defines the coordinate system for attributes  x1 ,
     x2 ,  y1 ,  y2 Value type :  userSpaceOnUse |  objectBoundingBox ;
    Default value :  objectBoundingBox ; Animatable : yes

  gradientTransform 

    This attribute provides additional transformation to the gradient
    coordinate system. Value type : <transform-list> ; Default value :
    identity transform ; Animatable : yes

  href 

    This attribute defines a reference to another  <linearGradient>
    element that will be used as a template. Value type : <URL> ;
    Default value : none; Animatable : yes

  spreadMethod 

    This attribute indicates how the gradient behaves if it starts or
    ends inside the bounds of the shape containing the gradient. Value
    type :  pad |  reflect |  repeat ; Default value :  pad ; Animatable
    : yes

  x1 

    This attribute defines the x coordinate of the starting point of the
    vector gradient along which the linear gradient is drawn. Value type
    :  <length-percentage> |  <number> ; Default value :  0% ;
    Animatable : yes

  x2 

    This attribute defines the x coordinate of the ending point of the
    vector gradient along which the linear gradient is drawn. Value type
    :  <length-percentage> |  <number> ; Default value :  100% ;
    Animatable : yes

  xlink:href   Deprecated 

    An <IRI> reference to another  <linearGradient> element that will be
    used as a template. Value type : <IRI> ; Default value : none;
    Animatable : yes

  y1 

    This attribute defines the y coordinate of the starting point of the
    vector gradient along which the linear gradient is drawn. Value type
    :  <length-percentage> |  <number> ; Default value :  0% ;
    Animatable : yes

  y2 

    This attribute defines the y coordinate of the ending point of the
    vector gradient along which the linear gradient is drawn. Value type
    :  <length-percentage> |  <number> ; Default value :  0% ;
    Animatable : yes

Global attributes

Core Attributes

    Most notably:   id 

Styling Attributes
      class  ,   style 

Event Attributes

    Global event attributes , Document element event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

XLink Attributes
      xlink:href  Deprecated ,   xlink:title 

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Gradient element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Descriptive elements
                                       <animate> ,  <animateTransform> ,
                                       <set> ,  <stop>
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # LinearGradients

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# <line> #

The  <line> element is an SVG basic shape used to create a line
connecting two points.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <line x1="0" y1="80" x2="100" y2="20" stroke="black" />

      <!-- If you do not specify the stroke
           color the line will not be visible -->
    </svg>

Attributes

  x1 

    Defines the x-axis coordinate of the line starting point. Value type
    : <length> | <percentage> | <number> ; Default value :  0 ;
    Animatable : yes

  x2 

    Defines the x-axis coordinate of the line ending point. Value type :
    <length> | <percentage> | <number> ; Default value :  0 ; Animatable
    : yes

  y1 

    Defines the y-axis coordinate of the line starting point. Value type
    : <length> | <percentage> | <number> ; Default value :  0 ;
    Animatable : yes

  y2 

    Defines the y-axis coordinate of the line ending point. Value type :
    <length> | <percentage> | <number> ; Default value :  0 ; Animatable
    : yes

  pathLength 

    Defines the total path length in user units. Value type : <number> ;
    Default value : none ; Animatable : yes

Global attributes

Core Attributes

    Most notably:   id  ,   tabindex 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Event Attributes

    Global event attributes , Graphical event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

ARIA Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Basic shape element, Graphics
                                      element, Shape element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # LineElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Other SVG basic shapes:  <circle> ,  <ellipse> ,  <polygon> ,
     <polyline> ,  <rect>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <marker> #

The  <marker> element defines a graphic used for drawing arrowheads or
polymarkers on a given  <path> ,  <line> ,  <polyline> or  <polygon>
element.

Markers can be attached to shapes using the   marker-start  ,
  marker-mid  , and   marker-end  properties.

Examples

Drawing arrowheads

The following example shows how to draw an arrowhead on a line and on a
curved path. For the curved path, an arrowhead is drawn at each point
with a   marker-mid  marker.

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 300 100" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <!-- A marker to be used as an arrowhead -->
        <marker
          id="arrow"
          viewBox="0 0 10 10"
          refX="5"
          refY="5"
          markerWidth="6"
          markerHeight="6"
          orient="auto-start-reverse">
          <path d="M 0 0 L 10 5 L 0 10 z" />
        </marker>
      </defs>

      <!-- A line with a marker -->
      <line
        x1="10"
        y1="10"
        x2="90"
        y2="90"
        stroke="black"
        marker-end="url(#arrow)" />

      <!-- A curved path with markers -->
      <path
        d="M 110 10
           C 120 20, 130 20, 140 10
           C 150 0, 160 0, 170 10
           C 180 20, 190 20, 200 10"
        stroke="black"
        fill="none"
        marker-start="url(#arrow)"
        marker-mid="url(#arrow)"
        marker-end="url(#arrow)" />
    </svg>

Drawing polymarkers

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <!-- Arrowhead marker definition -->
        <marker
          id="arrow"
          viewBox="0 0 10 10"
          refX="5"
          refY="5"
          markerWidth="6"
          markerHeight="6"
          orient="auto-start-reverse">
          <path d="M 0 0 L 10 5 L 0 10 z" />
        </marker>

        <!-- Dot marker definition -->
        <marker
          id="dot"
          viewBox="0 0 10 10"
          refX="5"
          refY="5"
          markerWidth="5"
          markerHeight="5">
          <circle cx="5" cy="5" r="5" fill="red" />
        </marker>
      </defs>

      <!-- Coordinate axes with an arrowhead in both directions -->
      <polyline
        points="10,10 10,90 90,90"
        fill="none"
        stroke="black"
        marker-start="url(#arrow)"
        marker-end="url(#arrow)" />

      <!-- Data line with polymarkers -->
      <polyline
        points="15,80 29,50 43,60 57,30 71,40 85,15"
        fill="none"
        stroke="grey"
        marker-start="url(#dot)"
        marker-mid="url(#dot)"
        marker-end="url(#dot)" />
    </svg>

Using context fill and stroke

The following example shows how to use the  context-fill and
 context-stroke values to make a marker use the same fill and stroke as
the shape it is attached to.

html

    <svg viewBox="0 0 50 50" xmlns="http://www.w3.org/2000/svg">
      <marker
        id="circle"
        markerWidth="6"
        markerHeight="6"
        refX="3"
        refY="3"
        markerUnits="strokeWidth">
        <circle cx="3" cy="3" r="2" stroke="context-stroke" fill="context-fill" />
      </marker>

      <style>
        path {
          marker: url(#circle);
        }
      </style>

      <path d="M 10,10 30,10 h 10" stroke="black" />
      <path d="M 10,20 30,20 h 10" stroke="blue" fill="red" />
      <path d="M 10,30 30,30 h 10" stroke="red" fill="none" />
      <path d="M 10,40 30,40 h 10" stroke="gray" fill="blue" stroke-width="1.5" />
    </svg>

    html,
    body,
    svg {
      height: 100%;
    }

Attributes

  markerHeight 

    This attribute defines the height of the marker viewport. Value type
    : <length> ; Default value :  3 ; Animatable : yes

  markerUnits 

    This attribute defines the coordinate system for the attributes
     markerWidth ,  markerHeight and the contents of the  <marker> .
    Value type :  userSpaceOnUse |  strokeWidth ; Default value :
     strokeWidth ; Animatable : yes

  markerWidth 

    This attribute defines the width of the marker viewport. Value type
    : <length> ; Default value :  3 ; Animatable : yes

  orient 

    This attribute defines the orientation of the marker relative to the
    shape it is attached to. Value type :  auto |  auto-start-reverse |
    <angle> ; Default value :  0 ; Animatable : yes

  preserveAspectRatio 

    This attribute defines how the svg fragment must be deformed if it
    is embedded in a container with a different aspect ratio. Value type
    : (  none |  xMinYMin |  xMidYMin |  xMaxYMin |  xMinYMid |
     xMidYMid |  xMaxYMid |  xMinYMax |  xMidYMax |  xMaxYMax ) (  meet
    |  slice )? ; Default value :  xMidYMid meet ; Animatable : yes

  refX 

    This attribute defines the x coordinate for the reference point of
    the marker. Value type :  left |  center |  right | <coordinate> ;
    Default value :  0 ; Animatable : yes

  refY 

    This attribute defines the y coordinate for the reference point of
    the marker. Value type :  top |  center |  bottom | <coordinate> ;
    Default value :  0 ; Animatable : yes

  viewBox 

    This attribute defines the bound of the SVG viewport for the current
    SVG fragment. Value type : <list-of-numbers> ; Default value : none;
    Animatable : yes

Global attributes

Core Attributes

    Most notably:   id  ,   tabindex 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

ARIA Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Container element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
                                      Shape elements
                                      Structural elements
                                      Gradient elements
                                       <a> ,  <clipPath> ,
                                       <color-profile> ,  <cursor> ,
                                       <filter> ,  <font> ,  <font-face>
                                      ,  <foreignObject> ,  <image> ,
                                       <marker> ,  <mask> ,  <pattern> ,
                                       <script> ,  <style> ,  <switch> ,
                                       <text> ,  <view>
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # MarkerElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Related marker properties:   marker-start  ,   marker-mid  , and
      marker-end 

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <mask> #

The  <mask> element defines an alpha mask for compositing the current
object into the background. A mask is used/referenced using the   mask 
property.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="-10 -10 120 120">
      <rect x="-10" y="-10" width="120" height="120" fill="blue" />
      <mask id="myMask">
        <!-- Everything under a white pixel will be visible -->
        <rect x="0" y="0" width="100" height="100" fill="white" />

        <!-- Everything under a black pixel will be invisible -->
        <path
          d="M10,35 A20,20,0,0,1,50,35 A20,20,0,0,1,90,35 Q90,65,50,95 Q10,65,10,35 Z"
          fill="black" />
      </mask>

      <polygon points="-10,110 110,110 110,-10" fill="orange" />

      <!-- with this mask applied, we "punch" a heart shape hole into the circle -->
      <circle cx="50" cy="50" r="50" fill="purple" mask="url(#myMask)" />
    </svg>

Attributes

  height 

    This attribute defines the height of the masking area. Value type :
    <length> ; Default value :  120% ; Animatable : yes

  maskContentUnits 

    This attribute defines the coordinate system for the contents of the
     <mask> . Value type :  userSpaceOnUse |  objectBoundingBox ;
    Default value :  userSpaceOnUse ; Animatable : yes

  maskUnits 

    This attribute defines the coordinate system for attributes   x  ,
      y  ,   width  and   height  on the  <mask> . Value type :
     userSpaceOnUse |  objectBoundingBox ; Default value :
     objectBoundingBox ; Animatable : yes

  x 

    This attribute defines the x-axis coordinate of the top-left corner
    of the masking area. Value type : <coordinate> ; Default value :
     -10% ; Animatable : yes

  y 

    This attribute defines the y-axis coordinate of the top-left corner
    of the masking area. Value type : <coordinate> ; Default value :
     -10% ; Animatable : yes

  width 

    This attribute defines the width of the masking area. Value type :
    <length> ; Default value :  120% ; Animatable : yes

Global attributes

Core Attributes

    Most notably:   id 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,   display  ,
      fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   shape-rendering  ,   stroke  ,   stroke-dasharray  ,
      stroke-dashoffset  ,   stroke-linecap  ,   stroke-linejoin  ,
      stroke-miterlimit  ,   stroke-opacity  ,   stroke-width  ,
      transform  ,   vector-effect  ,   visibility 

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Container element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
                                      Shape elements
                                      Structural elements
                                      Gradient elements
                                       <a> ,  <clipPath> ,
                                       <color-profile> ,  <cursor> ,
                                       <filter> ,  <font> ,  <font-face>
                                      ,  <foreignObject> ,  <image> ,
                                       <marker> ,  <mask> ,  <pattern> ,
                                       <script> ,  <style> ,  <switch> ,
                                       <text> ,  <view>
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Masking Module Level 1
  # MaskElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Other clipping and masking SVG elements:  <clipPath>
-   Clipping and masking CSS properties:  mask ,  mask-image ,
     mask-mode ,  mask-repeat ,  mask-position ,  mask-clip ,
     mask-origin ,  mask-composite ,  mask-size ,  pointer-events

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 28, 2023 by MDN contributors .
# <metadata> #

The  <metadata> SVG element adds metadata to SVG content. Metadata is
structured information about data. The contents of  <metadata> should be
elements from other XML namespaces such as RDF , FOAF , etc.

Usage context

  ------------------- --------------------------------
  Categories          Descriptive element
  Permitted content   Any elements or character data
  ------------------- --------------------------------

Attributes

Global attributes

-   Core attributes
-   Global event attributes

Specific attributes

None.

DOM Interface

This element implements the  SVGMetadataElement interface.

Example

html

    <svg
      width="400"
      viewBox="0 0 400 300"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <metadata>
        <rdf:RDF
          xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
          xmlns:connect="http://www.w3.org/1999/08/29-svg-connections-in-RDF#">
          <rdf:Description about="#CableA">
            <connect:ends rdf:resource="#socket1" />
            <connect:ends rdf:resource="#ComputerA" />
          </rdf:Description>
          <rdf:Description about="#CableB">
            <connect:ends rdf:resource="#socket2" />
            <connect:ends rdf:resource="#ComputerB" />
          </rdf:Description>
          <rdf:Description about="#CableN">
            <connect:ends rdf:resource="#socket5" />
            <connect:ends>Everything</connect:ends>
          </rdf:Description>
          <rdf:Description about="#Hub">
            <connect:ends rdf:resource="#socket1" />
            <connect:ends rdf:resource="#socket2" />
            <connect:ends rdf:resource="#socket3" />
            <connect:ends rdf:resource="#socket4" />
            <connect:ends rdf:resource="#socket5" />
          </rdf:Description>
        </rdf:RDF>
      </metadata>
      <title>Network</title>
      <desc>An example of a computer network based on a hub.</desc>

      <style>
        svg {
          /* Default styles to be inherited */
          fill: white;
          stroke: black;
        }
        text {
          fill: black;
          stroke: none;
        }
        path {
          fill: none;
        }
      </style>

      <!-- Define symbols used in the SVG -->
      <defs>
        <!-- hubPlug symbol. Used by hub symbol -->
        <symbol id="hubPlug">
          <desc>A 10BaseT/100baseTX socket</desc>
          <path d="M0,10 h5 v-9 h12 v9 h5 v16 h-22 z" />
        </symbol>

        <!-- hub symbol -->
        <symbol id="hub">
          <desc>A typical 10BaseT/100BaseTX network hub</desc>
          <text x="0" y="15">Hub</text>
          <g transform="translate(0 20)">
            <rect width="253" height="84" />
            <rect width="229" height="44" x="12" y="10" />
            <circle fill="red" cx="227" cy="71" r="7" />
            <!-- five groups each using the defined socket -->
            <g id="sock1et" transform="translate(25 20)">
              <title>Socket 1</title>
              <use href="#hubPlug" />
            </g>
            <g id="socket2" transform="translate(70 20)">
              <title>Socket 2</title>
              <use href="#hubPlug" />
            </g>
            <g id="socket3" transform="translate(115 20)">
              <title>Socket 3</title>
              <use href="#hubPlug" />
            </g>
            <g id="socket4" transform="translate(160 20)">
              <title>Socket 4</title>
              <use href="#hubPlug" />
            </g>
            <g id="socket5" transform="translate(205 20)">
              <title>Socket 5</title>
              <use href="#hubPlug" />
            </g>
          </g>
        </symbol>

        <!-- computer symbol -->
        <symbol id="computer">
          <desc>A common desktop PC</desc>
          <g id="monitorStand" transform="translate(40 121)">
            <title>Monitor stand</title>
            <desc>
              One of those cool swivelling monitor stands that sit under the monitor
            </desc>
            <path d="m0,0 S 10 10 40 12" />
            <path d="m80,0 S 70 10 40 12" />
            <path d="m0,20 L 10 10 S 40 12 70 10 L 80 20z" />
          </g>
          <g id="monitor">
            <title>Monitor</title>
            <desc>A very fancy monitor</desc>
            <rect width="160" height="120" />
            <rect fill="lightgrey" width="138" height="95" x="11" y="12" />
          </g>
          <g id="processor" transform="translate(0 142)">
            <title>The computer</title>
            <desc>A desktop computer - broad flat box style</desc>
            <rect width="160" height="60" />
            <g id="discDrive" transform="translate(70 8)">
              <title>disc drive</title>
              <desc>A built-in disc drive</desc>
              <rect width="58" height="3" x="12" y="8" />
              <rect width="8" height="2" x="12" y="15" />
            </g>
            <circle cx="135" cy="40" r="5" />
          </g>
        </symbol>
      </defs>

      <text x="0" y="15">Network</text>

      <!-- Use the hub symbol. -->
      <g id="Hub" transform="translate(80 45)">
        <title>Hub</title>
        <use href="#hub" transform="scale(0.75)" />
      </g>

      <!-- Use the computer symbol. -->
      <g id="ComputerA" transform="translate(20 170)">
        <title>Computer A</title>
        <use href="#computer" transform="scale(0.5)" />
      </g>

      <!-- Use the same computer symbol. -->
      <g id="ComputerB" transform="translate(300 170)">
        <title>Computer B</title>
        <use href="#computer" transform="scale(0.5)" />
      </g>

      <!-- Draw Cable A. -->
      <g id="CableA" transform="translate(107 88)">
        <title>Cable A</title>
        <desc>10BaseT twisted pair cable</desc>
        <path d="M0,0c100,140 50,140 -8,160" />
      </g>

      <!-- Draw Cable B. -->
      <g id="CableB" transform="translate(142 88)">
        <title>Cable B</title>
        <desc>10BaseT twisted pair cable</desc>
        <path d="M0,0c100,180 110,160 159,160" />
      </g>

      <!-- Draw Cable N. -->
      <g id="CableN" transform="translate(242 88)">
        <title>Cable N</title>
        <desc>10BaseT twisted pair cable</desc>
        <path d="M0,0c0,-70 20,-50 60,-50" />
      </g>
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # MetadataElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# <missing-glyph> #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  <missing-glyph> SVG element's content is rendered, if for a given
character the font doesn't define an appropriate  <glyph> .

Usage context

  ----------------------------------- -----------------------------------
  Categories                          None

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
                                      Shape elements
                                      Structural elements
                                      Gradient elements
                                       <a> ,  <clipPath> ,
                                       <color-profile> ,  <cursor> ,
                                       <filter> ,  <font> ,  <font-face>
                                      ,  <foreignObject> ,  <image> ,
                                       <marker> ,  <mask> ,  <pattern> ,
                                       <script> ,  <style> ,  <switch> ,
                                       <text> ,  <view>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Presentation attributes
-     class 
-     style 

Specific attributes

-     d  Deprecated
-     horiz-adv-x  Deprecated
-     vert-origin-x  Deprecated
-     vert-origin-y  Deprecated
-     vert-adv-y  Deprecated

DOM Interface

This element implements the  SVGMissingGlyphElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # MissingGlyphElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <font>
-    <glyph>
-   SVG tutorial: SVG fonts

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <mpath> #

The  <mpath> sub-element for the  <animateMotion> element provides the
ability to reference an external  <path> element as the definition of a
motion path.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Animation element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Descriptive elements
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Core attributes
-   Xlink attributes

Specific attributes

-     xlink:href  Deprecated

DOM Interface

This element implements the  SVGMPathElement interface.

Example

SVG

html

    <svg
      width="100%"
      height="100%"
      viewBox="0 0 500 300"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <rect
        x="1"
        y="1"
        width="498"
        height="298"
        fill="none"
        stroke="blue"
        stroke-width="2" />

      <!-- Draw the outline of the motion path in blue, along
              with three small circles at the start, middle and end. -->
      <path
        id="path1"
        d="M100,250 C 100,50 400,50 400,250"
        fill="none"
        stroke="blue"
        stroke-width="7.06" />
      <circle cx="100" cy="250" r="17.64" fill="blue" />
      <circle cx="250" cy="100" r="17.64" fill="blue" />
      <circle cx="400" cy="250" r="17.64" fill="blue" />

      <!-- Here is a triangle which will be moved about the motion path.
           It is defined with an upright orientation with the base of
           the triangle centered horizontally just above the origin. -->
      <path
        d="M-25,-12.5 L25,-12.5 L 0,-87.5 z"
        fill="yellow"
        stroke="red"
        stroke-width="7.06">
        <!-- Define the motion path animation -->
        <animateMotion dur="6s" repeatCount="indefinite" rotate="auto">
          <mpath href="#path1" />
        </animateMotion>
      </path>
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # MPathElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <animateMotion>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jul 28, 2023 by MDN contributors .
# <path> #

The  <path> SVG element is the generic element to define a shape. All
the basic shapes can be created with a path element.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M 10,30
               A 20,20 0,0,1 50,30
               A 20,20 0,0,1 90,30
               Q 90,60 50,90
               Q 10,60 10,30 z" />
    </svg>

Attributes

  d 

    This attribute defines the shape of the path. Value type : <string>
    ; Default value :  '' ; Animatable : yes

  pathLength 

    This attribute lets authors specify the total length for the path,
    in user units. Value type : <number> ; Default value : none ;
    Animatable : yes

Global attributes

Core Attributes

    Most notably:   id  ,   tabindex 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Event Attributes

    Global event attributes , Graphical event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

ARIA Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Graphics element, Shape element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # PathElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   SVG basic shapes:  <circle> ,  <ellipse> ,  <line> ,  <polygon> ,
     <polyline> ,  <rect>
-   The MDN SVG "Getting Started" tutorial: Path

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 10, 2023 by MDN contributors .
# <pattern> #

The  <pattern> element defines a graphics object which can be redrawn at
repeated x- and y-coordinate intervals ("tiled") to cover an area.

The  <pattern> is referenced by the   fill  and/or   stroke  attributes
on other graphics elements to fill or stroke those elements with the
referenced pattern.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 230 100" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <pattern id="star" viewBox="0,0,10,10" width="10%" height="10%">
          <polygon points="0,0 2,5 0,10 5,8 10,10 8,5 10,0 5,2" />
        </pattern>
      </defs>

      <circle cx="50" cy="50" r="50" fill="url(#star)" />
      <circle
        cx="180"
        cy="50"
        r="40"
        fill="none"
        stroke-width="20"
        stroke="url(#star)" />
    </svg>

Attributes

  height 

    This attribute determines the height of the pattern tile. Value type
    : <length> | <percentage> ; Default value :  0 ; Animatable : yes

  href 

    This attribute reference a template pattern that provides default
    values for the  <pattern> attributes. Value type : <URL> ; Default
    value : none ; Animatable : yes

  patternContentUnits 

    This attribute defines the coordinate system for the contents of the
     <pattern> . Value type :  userSpaceOnUse |  objectBoundingBox ;
    Default value :  userSpaceOnUse ; Animatable : yes

    Note: This attribute has no effect if a  viewBox attribute is
    specified on the  <pattern> element.

  patternTransform 

    This attribute contains the definition of an optional additional
    transformation from the pattern coordinate system onto the target
    coordinate system. Value type : <transform-list> ; Default value :
    none ; Animatable : yes

  patternUnits 

    This attribute defines the coordinate system for attributes  x ,  y
    ,  width , and  height . Value type :  userSpaceOnUse |
     objectBoundingBox ; Default value :  objectBoundingBox ; Animatable
    : yes

  preserveAspectRatio 

    This attribute defines how the SVG fragment must be deformed if it
    is embedded in a container with a different aspect ratio. Value type
    : (  none |  xMinYMin |  xMidYMin |  xMaxYMin |  xMinYMid |
     xMidYMid |  xMaxYMid |  xMinYMax |  xMidYMax |  xMaxYMax ) (  meet
    |  slice )? ; Default value :  xMidYMid meet ; Animatable : yes

  viewBox 

    This attribute defines the bound of the SVG viewport for the pattern
    fragment. Value type : <list-of-numbers> ; Default value : none;
    Animatable : yes

  width 

    This attribute determines the width of the pattern tile. Value type
    : <length> | <percentage> ; Default value :  0 ; Animatable : yes

  x 

    This attribute determines the x coordinate shift of the pattern
    tile. Value type : <length> | <percentage> ; Default value :  0 ;
    Animatable : yes

  xlink:href   Deprecated 

    This attribute references a template pattern that provides default
    values for the  <pattern> attributes. Value type : <URL> ; Default
    value : none ; Animatable : yes

    Note: For browsers implementing  href , if both  href and
     xlink:href are set,  xlink:href will be ignored and only  href will
    be used.

  y 

    This attribute determines the y coordinate shift of the pattern
    tile. Value type : <length> | <percentage> ; Default value :  0 ;
    Animatable : yes

Global attributes

Core Attributes

    Most notably:   id  ,   tabindex 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

XLink Attributes

    Most notably:   xlink:title 

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Container element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
                                      Shape elements
                                      Structural elements
                                      Gradient elements
                                       <a> ,  <clipPath> ,
                                       <color-profile> ,  <cursor> ,
                                       <filter> ,  <font> ,  <font-face>
                                      ,  <foreignObject> ,  <image> ,
                                       <marker> ,  <mask> ,  <pattern> ,
                                       <script> ,  <style> ,  <switch> ,
                                       <text> ,  <view>
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # Patterns

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <polygon> #

The  <polygon> element defines a closed shape consisting of a set of
connected straight line segments. The last point is connected to the
first point.

For open shapes, see the  <polyline> element.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 100" xmlns="http://www.w3.org/2000/svg">
      <!-- Example of a polygon with the default fill -->
      <polygon points="0,100 50,25 50,75 100,0" />

      <!-- Example of the same polygon shape with stroke and no fill -->
      <polygon points="100,100 150,25 150,75 200,0" fill="none" stroke="black" />
    </svg>

Attributes

  points 

    This attribute defines the list of points (pairs of  x,y absolute
    coordinates) required to draw the polygon. Value type : <number> + ;
    Default value :  "" ; Animatable : yes

  pathLength 

    This attribute lets specify the total length for the path, in user
    units. Value type : <number> ; Default value : none ; Animatable :
    yes

Global attributes

Core Attributes

    Most notably:   id  ,   tabindex 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Event Attributes

    Global event attributes , Graphical event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

ARIA Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Basic shape element, Graphics
                                      element, Shape element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # PolygonElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Other SVG basic shapes:
    -    <circle>
    -    <ellipse>
    -    <line>
    -    <polyline>
    -    <rect>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <polyline> #

The  <polyline> SVG element is an SVG basic shape that creates straight
lines connecting several points. Typically a  polyline is used to create
open shapes as the last point doesn't have to be connected to the first
point. For closed shapes see the  <polygon> element.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 200 100" xmlns="http://www.w3.org/2000/svg">
      <!-- Example of a polyline with the default fill -->
      <polyline points="0,100 50,25 50,75 100,0" />

      <!-- Example of the same polyline shape with stroke and no fill -->
      <polyline points="100,100 150,25 150,75 200,0" fill="none" stroke="black" />
    </svg>

Attributes

  points 

    This attribute defines the list of points (pairs of x,y absolute
    coordinates) required to draw the polyline Value type : <number> + ;
    Default value :  "" ; Animatable : yes

  pathLength 

    This attribute lets specify the total length for the path, in user
    units. Value type : <number> ; Default value : none ; Animatable :
    yes

Global attributes

Core Attributes

    Most notably:   id  ,   tabindex 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Event Attributes

    Global event attributes , Graphical event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

ARIA Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Basic shape element, Graphics
                                      element, Shape element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # PolylineElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Other SVG basic shapes:  <circle> ,  <ellipse> ,  <line> ,
     <polygon> ,  <rect>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <radialGradient> #

The  <radialGradient> element lets authors define radial gradients that
can be applied to fill or stroke of graphical elements.

Note: Don't be confused with CSS  radial-gradient() as CSS gradients can
only apply to HTML elements where SVG gradient can only apply to SVG
elements.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg
      viewBox="0 0 10 10"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <defs>
        <radialGradient id="myGradient">
          <stop offset="10%" stop-color="gold" />
          <stop offset="95%" stop-color="red" />
        </radialGradient>
      </defs>

      <!-- using my radial gradient -->
      <circle cx="5" cy="5" r="4" fill="url('#myGradient')" />
    </svg>

Attributes

  cx 

    This attribute defines the x coordinate of the end circle of the
    radial gradient. Value type : <length> ; Default value :  50% ;
    Animatable : yes

  cy 

    This attribute defines the y coordinate of the end circle of the
    radial gradient. Value type : <length> ; Default value :  50% ;
    Animatable : yes

  fr 

    This attribute defines the radius of the start circle of the radial
    gradient. The gradient will be drawn such that the 0%  <stop> is
    mapped to the perimeter of the start circle. Value type : <length> ;
    Default value :  0% ; Animatable : yes

  fx 

    This attribute defines the x coordinate of the start circle of the
    radial gradient. Value type : <length> ; Default value : Same as  cx
    ; Animatable : yes

  fy 

    This attribute defines the y coordinate of the start circle of the
    radial gradient. Value type : <length> ; Default value : Same as  cy
    ; Animatable : yes

  gradientUnits 

    This attribute defines the coordinate system for attributes  cx ,
     cy ,  r ,  fx ,  fy ,  fr Value type :  userSpaceOnUse |
     objectBoundingBox ; Default value :  objectBoundingBox ; Animatable
    : yes

  gradientTransform 

    This attribute provides additional transformation to the gradient
    coordinate system. Value type : <transform-list> ; Default value :
    identity transform ; Animatable : yes

  href 

    This attribute defines a reference to another  <radialGradient>
    element that will be used as a template. Value type : <URL> ;
    Default value : none; Animatable : yes

  r 

    This attribute defines the radius of the end circle of the radial
    gradient. The gradient will be drawn such that the 100%  <stop> is
    mapped to the perimeter of the end circle. Value type : <length> ;
    Default value :  50% ; Animatable : yes

  spreadMethod 

    This attribute indicates how the gradient behaves if it starts or
    ends inside the bounds of the shape containing the gradient. Value
    type :  pad |  reflect |  repeat ; Default value :  pad ; Animatable
    : yes

  xlink:href   Deprecated 

    An <IRI> reference to another  <radialGradient> element that will be
    used as a template. Value type : <IRI> ; Default value : none;
    Animatable : yes

Global attributes

Core Attributes

    Most notably:   id 

Styling Attributes
      class  ,   style 

Event Attributes

    Global event attributes , Document element event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

XLink Attributes
      xlink:href  Deprecated ,   xlink:title 

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Gradient element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Descriptive elements
                                       <animate> ,  <animateTransform> ,
                                       <set> ,  <stop>
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # RadialGradients

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# <rect> #

The  <rect> element is a basic SVG shape that draws rectangles, defined
by their position, width, and height. The rectangles may have their
corners rounded.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 220 100" xmlns="http://www.w3.org/2000/svg">
      <!-- Simple rectangle -->
      <rect width="100" height="100" />

      <!-- Rounded corner rectangle -->
      <rect x="120" width="100" height="100" rx="15" />
    </svg>

Attributes

  x 

    The x coordinate of the rect. Value type : <length> | <percentage> ;
    Default value :  0 ; Animatable : yes

  y 

    The y coordinate of the rect. Value type : <length> | <percentage> ;
    Default value :  0 ; Animatable : yes

  width 

    The width of the rect. Value type :  auto | <length> | <percentage>
    ; Default value :  auto ; Animatable : yes

  height 

    The height of the rect. Value type :  auto | <length> | <percentage>
    ; Default value :  auto ; Animatable : yes

  rx 

    The horizontal corner radius of the rect. Defaults to  ry if it is
    specified. Value type :  auto | <length> | <percentage> ; Default
    value :  auto ; Animatable : yes

  ry 

    The vertical corner radius of the rect. Defaults to  rx if it is
    specified. Value type :  auto | <length> | <percentage> ; Default
    value :  auto ; Animatable : yes

  pathLength 

    The total length of the rectangle's perimeter, in user units. Value
    type : <number> ; Default value : none ; Animatable : yes

Note: Starting with SVG2,  x ,  y ,  width ,  height ,  rx and  ry are
Geometry Properties , meaning those attributes can also be used as CSS
properties for that element.

Global attributes

Core Attributes

    Most notably:   id  ,   tabindex 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Event Attributes

    Global event attributes , Graphical event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

Aria Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Basic shape element, Graphics
                                      element, Shape element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # RectElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   Other basic SVG shapes:  <circle> ,  <ellipse> ,  <line> ,
     <polygon> ,  <polyline>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <script> #

The SVG  script element allows to add scripts to an SVG document.

Note: While SVG's  script element is equivalent to the HTML  <script>
element, it has some discrepancies, like it uses the   href  attribute
instead of  src and it doesn't support ECMAScript modules so far (See
browser compatibility below for details)

Example

html

    Click the circle to change colors.
    <svg
      viewBox="0 0 10 10"
      height="120px"
      width="120px"
      xmlns="http://www.w3.org/2000/svg">
      <circle cx="5" cy="5" r="4" />

      <script>
        // <![CDATA[
        function getColor() {
          const R = Math.round(Math.random() * 255)
            .toString(16)
            .padStart(2, "0");

          const G = Math.round(Math.random() * 255)
            .toString(16)
            .padStart(2, "0");

          const B = Math.round(Math.random() * 255)
            .toString(16)
            .padStart(2, "0");

          return `#${R}${G}${B}`;
        }

        document.querySelector("circle").addEventListener("click", (e) => {
          e.target.style.fill = getColor();
        });
        // ]]>
      </script>
    </svg>

Attributes

 crossorigin

    This attribute defines CORS settings as define for the HTML
     <script> element. Value type : <string> ; Default value :  ? ;
    Animatable : yes

  href 

    The URL to the script to load. Value type : <URL> ; Default value :
    none ; Animatable : no

  type 

    This attribute defines type of the script language to use. Value
    type : <string> ; Default value :  application/ecmascript ;
    Animatable : no

  xlink:href   Deprecated 

    The URL to the script to load. Value type : <URL> ; Default value :
    none ; Animatable : no

Global attributes

Core Attributes

    Most notably:   id 

Styling Attributes
      class  ,   style 

Event Attributes

    Global event attributes , Document element event attributes

Usage notes

  ------------------- --------------------------------
  Categories          None
  Permitted content   Any elements or character data
  ------------------- --------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # ScriptElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    script element in HTML

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 9, 2023 by MDN contributors .
# <set> #

The SVG  <set> element provides a simple means of just setting the value
of an attribute for a specified duration.

It supports all attribute types, including those that cannot reasonably
be interpolated, such as string and boolean values. For attributes that
can be reasonably be interpolated, the  <animate> is usually preferred.

Note: The  <set> element is non-additive. The   additive  and
  accumulate  attributes are not allowed, and will be ignored if
specified.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
      <style>
        rect {
          cursor: pointer;
        }
        .round {
          rx: 5px;
          fill: green;
        }
      </style>

      <rect id="me" width="10" height="10">
        <set attributeName="class" to="round" begin="me.click" dur="2s" />
      </rect>
    </svg>

Attributes

  to 

    This attribute defines the value to be applied to the target
    attribute for the duration of the animation. The value must match
    the requirements of the target attribute. Value type : <anything> ;
    Default value : none; Animatable : no

Animation Attributes

Animation timing attributes
      begin  ,   dur  ,   end  ,   min  ,   max  ,   restart  ,
      repeatCount  ,   repeatDur  ,   fill 

Other Animation attributes

    Most notably:   attributeName 

Animation event attributes

    Most notably:   onbegin  ,   onend  ,   onrepeat 

Global attributes

Core Attributes

    Most notably:   id 

Styling Attributes
      class  ,   style 

Event Attributes

    Global event attributes , Document element event attributes

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Animation element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Descriptive elements
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  SVG Animations Level 2
  # SetElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <animate>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <stop> #

The SVG  <stop> element defines a color and its position to use on a
gradient. This element is always a child of a  <linearGradient> or
 <radialGradient> element.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg
      viewBox="0 0 10 10"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <defs>
        <linearGradient id="myGradient" gradientTransform="rotate(90)">
          <stop offset="5%" stop-color="gold" />
          <stop offset="95%" stop-color="red" />
        </linearGradient>
      </defs>

      <!-- using my linear gradient -->
      <circle cx="5" cy="5" r="4" fill="url('#myGradient')" />
    </svg>

Attributes

  offset 

    This attribute defines where the gradient stop is placed along the
    gradient vector. Value type : <number> | <percentage> ; Default
    value :  0 ; Animatable : yes

  stop-color 

    This attribute defines the color of the gradient stop. It can be
    used as a CSS property. Value type :  currentcolor | <color> |
    <icccolor> ; Default value :  black ; Animatable : yes

  stop-opacity 

    This attribute defines the opacity of the gradient stop. It can be
    used as a CSS property. Value type : <opacity> ; Default value :  1
    ; Animatable : yes

Global attributes

Core Attributes

    Most notably:   id 

Styling Attributes
      class  ,   style 

Event Attributes

    Global event attributes , Document element event attributes

Presentation Attributes

    Most notably:   color  ,   display  ,   stop-color  ,
      stop-opacity  ,   visibility 

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Gradient element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # GradientStops

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <style> #

The SVG  <style> element allows style sheets to be embedded directly
within SVG content.

Note: SVG's  style element has the same attributes as the corresponding
element in HTML (see HTML's  <style> element).

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
      <style>
        circle {
          fill: gold;
          stroke: maroon;
          stroke-width: 2px;
        }
      </style>

      <circle cx="5" cy="5" r="4" />
    </svg>

Attributes

  type 

    This attribute defines type of the style sheet language to use as a
    media type string. Value type : <string> ; Default value :  text/css
    ; Animatable : no

  media 

    This attribute defines to which  media the style applies. Value type
    :  <string> ; Default value :  all ; Animatable : no

  title 

    This attribute the title of the style sheet which can be used to
    switch between alternate style sheets . Value type :  <string> ;
    Default value : none ; Animatable : no

Global attributes

Core Attributes

    Most notably:   id 

Styling Attributes
      class  ,   style 

Event Attributes

    Global event attributes , Document element event attributes

Usage notes

  ------------------- --------------------------------
  Categories          None
  Permitted content   Any elements or character data
  ------------------- --------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # StyleElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-   <style> element in HTML

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <svg> #

The  svg element is a container that defines a new coordinate system and
viewport . It is used as the outermost element of SVG documents, but it
can also be used to embed an SVG fragment inside an SVG or HTML
document.

Note: The  xmlns attribute is only required on the outermost  svg
element of SVG documents , or inside HTML documents with XML
serialization. It is unnecessary for inner  svg elements or inside HTML
documents with HTML serialization.

Examples

Nested  svg element

This example shows that nested  svg elements do not need the  xmlns
attribute.

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg
      viewBox="0 0 300 100"
      xmlns="http://www.w3.org/2000/svg"
      stroke="red"
      fill="grey">
      <circle cx="50" cy="50" r="40" />
      <circle cx="150" cy="50" r="4" />

      <svg viewBox="0 0 10 10" x="200" width="100">
        <circle cx="5" cy="5" r="4" />
      </svg>
    </svg>

Using dynamic viewport units

In this example, the  height and  width attributes on the  svg element
are set using the dynamic viewport value  60vmin , equivalent to 60% of
the viewport's width or height, whichever is smaller.

    <div class="resizer">
      <iframe
        class="resized"
        srcdoc="

html

    <svg viewbox='0 0 400 400' xmlns='http://www.w3.org/2000/svg' height='60vmin' width='60vmin'>
      <rect x='0' y='0' width='50%' height='50%' fill='tomato' opacity='0.75' />
      <rect x='25%' y='25%' width='50%' height='50%' fill='slategrey' opacity='0.75' />
      <rect x='50%' y='50%' width='50%' height='50%' fill='olive' opacity='0.75' />
      <rect x='0' y='0' width='100%' height='100%' stroke='cadetblue' stroke-width='0.5%' fill='none' />
    </svg>

      "></iframe>
    </div>

    .resizer {
      display: flex;
      margin: 1rem;
      padding: 0;
      resize: both;
      overflow: hidden;
      border: 5px dotted red;
      height: 400px;
    }
    .resizer > .resized {
      flex-grow: 1;
      margin: 0;
      padding: 0;
      border: 0;
    }

To change the iframe's dimensions try resizing the dotted red border
from bottom right corner.

Attributes

  baseProfile   Deprecated 

    The minimum SVG language profile that the document requires. Value
    type : <string> ; Default value : none; Animatable : no

  height 

    The displayed height of the rectangular viewport. (Not the height of
    its coordinate system.) Value type : <length> | <percentage> ;
    Default value :  auto ; Animatable : yes

  preserveAspectRatio 

    How the  svg fragment must be deformed if it is displayed with a
    different aspect ratio. Value type : (  none |  xMinYMin |  xMidYMin
    |  xMaxYMin |  xMinYMid |  xMidYMid |  xMaxYMid |  xMinYMax |
     xMidYMax |  xMaxYMax ) (  meet |  slice )? ; Default value :
     xMidYMid meet ; Animatable : yes

  version   Deprecated 

    Which version of SVG is used for the inner content of the element.
    Value type : <number> ; Default value : none; Animatable : no

  viewBox 

    The SVG viewport coordinates for the current SVG fragment. Value
    type : <list-of-numbers> ; Default value : none; Animatable : yes

  width 

    The displayed width of the rectangular viewport. (Not the width of
    its coordinate system.) Value type : <length> | <percentage> ;
    Default value :  auto ; Animatable : yes

  x 

    The displayed x coordinate of the svg container. No effect on
    outermost  svg elements. Value type : <length> | <percentage> ;
    Default value :  0 ; Animatable : yes

  y 

    The displayed y coordinate of the svg container. No effect on
    outermost  svg elements. Value type : <length> | <percentage> ;
    Default value :  0 ; Animatable : yes

Note: Starting with SVG2,  x ,  y ,  width , and  height are Geometry
Properties , meaning these attributes can also be used as CSS
properties.

Global attributes

Core Attributes

    Most notably:   id  ,   tabindex 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Event Attributes

    Global event attributes , Graphical event attributes , Document
    event attributes , Document element event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

Aria Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Container element, Structural
                                      element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
                                      Shape elements
                                      Structural elements
                                      Gradient elements
                                       <a> ,  <clipPath> ,
                                       <color-profile> ,  <cursor> ,
                                       <filter> ,  <font> ,  <font-face>
                                      ,  <foreignObject> ,  <image> ,
                                       <marker> ,  <mask> ,  <pattern> ,
                                       <script> ,  <style> ,  <switch> ,
                                       <text> ,  <view>
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # NewDocument

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 19, 2023 by MDN contributors .
# <switch> #

The  <switch> SVG element evaluates any   requiredFeatures  ,
  requiredExtensions  and   systemLanguage  attributes on its direct
child elements in order, and then renders the first child where these
attributes evaluate to true.

Other direct children will be bypassed and therefore not rendered. If a
child element is a container element, like  <g> , then its subtree is
also processed/rendered or bypassed/not rendered.

Note: The  display and  visibility properties have no effect on
 <switch> element processing. In particular, setting  display:none on a
child has no effect on the true/false testing for  <switch> processing.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Container element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
                                      Shape elements
                                       <a> ,  <foreignObject> ,  <g> ,
                                       <image> ,  <svg> ,  <switch> ,
                                       <text> ,  <use>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Conditional processing attributes
-   Core attributes
-   Graphical event attributes
-   Presentation attributes
-     class 
-     style 
-     transform 

DOM Interface

This element implements the  SVGSwitchElement interface.

SVG <switch> example

This example demonstrates showing different text content depending on
the browser's language settings. The  switch element will display the
first of its child elements whose  systemLanguage attribute matches the
user's language, or the fallback element with no  systemLanguage
attribute if none of them match.

HTML

html

    <svg viewBox="0 -20 100 50">
      <switch>
        <text systemLanguage="ar">مرحبا</text>
        <text systemLanguage="de,nl">Hallo!</text>
        <text systemLanguage="en-us">Howdy!</text>
        <text systemLanguage="en-gb">Wotcha!</text>
        <text systemLanguage="en-au">G'day!</text>
        <text systemLanguage="en">Hello!</text>
        <text systemLanguage="es">Hola!</text>
        <text systemLanguage="fr">Bonjour!</text>
        <text systemLanguage="ja">こんにちは</text>
        <text systemLanguage="ru">Привет!</text>
        <text>☺</text>
      </switch>
    </svg>

Result

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # SwitchElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 22, 2023 by MDN contributors .
# <symbol> #

The  <symbol> element is used to define graphical template objects which
can be instantiated by a  <use> element.

The use of  <symbol> elements for graphics that are used multiple times
in the same document adds structure and semantics. Documents that are
rich in structure may be rendered graphically, as speech, or as Braille,
and thus promote accessibility.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 80 20" xmlns="http://www.w3.org/2000/svg">
      <!-- Our symbol in its own coordinate system -->
      <symbol id="myDot" width="10" height="10" viewBox="0 0 2 2">
        <circle cx="1" cy="1" r="1" />
      </symbol>

      <!-- A grid to materialize our symbol positioning -->
      <path
        d="M0,10 h80 M10,0 v20 M25,0 v20 M40,0 v20 M55,0 v20 M70,0 v20"
        fill="none"
        stroke="pink" />

      <!-- All instances of our symbol -->
      <use href="#myDot" x="5" y="5" style="opacity:1.0" />
      <use href="#myDot" x="20" y="5" style="opacity:0.8" />
      <use href="#myDot" x="35" y="5" style="opacity:0.6" />
      <use href="#myDot" x="50" y="5" style="opacity:0.4" />
      <use href="#myDot" x="65" y="5" style="opacity:0.2" />
    </svg>

Attributes

  height 

    This attribute determines the height of the symbol. Value type :
    <length> | <percentage> ; Default value :  auto ; Animatable : yes

  preserveAspectRatio 

    This attribute defines how the svg fragment must be deformed if it
    is embedded in a container with a different aspect ratio. Value type
    : (  none |  xMinYMin |  xMidYMin |  xMaxYMin |  xMinYMid |
     xMidYMid |  xMaxYMid |  xMinYMax |  xMidYMax |  xMaxYMax ) (  meet
    |  slice )? ; Default value :  xMidYMid meet ; Animatable : yes

  refX 

    This attribute determines the x coordinate of the reference point of
    the symbol. Value type : <length> | <percentage> |  left |  center |
     right ; Default value : None; Animatable : yes

  refY 

    This attribute determines the y coordinate of the reference point of
    the symbol. Value type : <length> | <percentage> |  top |  center |
     bottom ; Default value : None; Animatable : yes

  viewBox 

    This attribute defines the bound of the SVG viewport for the current
    symbol. Value type : <list-of-numbers> ; Default value : none;
    Animatable : yes

  width 

    This attribute determines the width of the symbol. Value type :
    <length> | <percentage> ; Default value :  auto ; Animatable : yes

  x 

    This attribute determines the x coordinate of the symbol. Value type
    : <length> | <percentage> ; Default value :  0 ; Animatable : yes

  y 

    This attribute determines the y coordinate of the symbol. Value type
    : <length> | <percentage> ; Default value :  0 ; Animatable : yes

Global attributes

Core Attributes

    Most notably:   id 

Styling Attributes
      class  ,   style 

Event Attributes

    Global event attributes , Document element event attributes ,
    Graphical event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

Aria Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Container element, Structural
                                      element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
                                      Shape elements
                                      Structural elements
                                      Gradient elements
                                       <a> ,  <clipPath> ,
                                       <color-profile> ,  <cursor> ,
                                       <filter> ,  <font> ,  <font-face>
                                      ,  <foreignObject> ,  <image> ,
                                       <marker> ,  <mask> ,  <pattern> ,
                                       <script> ,  <style> ,  <switch> ,
                                       <text> ,  <view>
  ----------------------------------- -----------------------------------

Note: A  <symbol> element itself is not meant to be rendered. Only
instances of a  <symbol> element (i.e., a reference to a  <symbol> by a
 <use> element) are rendered. That means that some browsers could refuse
to directly display a  <symbol> element even if the CSS  display
property tells otherwise.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # SymbolElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <text> #

The SVG  <text> element draws a graphics element consisting of text.
It's possible to apply a gradient, pattern, clipping path, mask, or
filter to  <text> , like any other SVG graphics element.

If text is included in SVG not inside of a  <text> element, it is not
rendered. This is different than being hidden by default, as setting the
  display  property won't show the text.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 240 80" xmlns="http://www.w3.org/2000/svg">
      <style>
        .small {
          font: italic 13px sans-serif;
        }
        .heavy {
          font: bold 30px sans-serif;
        }

        /* Note that the color of the text is set with the    *
         * fill property, the color property is for HTML only */
        .Rrrrr {
          font: italic 40px serif;
          fill: red;
        }
      </style>

      <text x="20" y="35" class="small">My</text>
      <text x="40" y="35" class="heavy">cat</text>
      <text x="55" y="55" class="small">is</text>
      <text x="65" y="55" class="Rrrrr">Grumpy!</text>
    </svg>

Attributes

  x 

    The x coordinate of the starting point of the text baseline. Value
    type : <length> | <percentage> ; Default value :  0 ; Animatable :
    yes

  y 

    The y coordinate of the starting point of the text baseline. Value
    type : <length> | <percentage> ; Default value :  0 ; Animatable :
    yes

  dx 

    Shifts the text position horizontally from a previous text element.
    Value type : <length> | <percentage> ; Default value : none ;
    Animatable : yes

  dy 

    Shifts the text position vertically from a previous text element.
    Value type : <length> | <percentage> ; Default value : none ;
    Animatable : yes

  rotate 

    Rotates orientation of each individual glyph. Can rotate glyphs
    individually. Value type : <list-of-number> ; Default value : none;
    Animatable : yes

  lengthAdjust 

    How the text is stretched or compressed to fit the width defined by
    the  textLength attribute. Value type :  spacing |  spacingAndGlyphs
    ; Default value :  spacing ; Animatable : yes

  textLength 

    A width that the text should be scaled to fit. Value type : <length>
    | <percentage> ; Default value : none ; Animatable : yes

Global attributes

Core Attributes

    Most notably:   id  ,   tabindex 

Styling Attributes
      class  ,   style  ,   font-family  ,   font-size  ,
      font-size-adjust  ,   font-stretch  ,   font-style  ,
      font-variant  ,   font-weight 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Event Attributes

    Global event attributes , Graphical event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   dominant-baseline  ,   fill  ,   fill-opacity  ,   fill-rule  ,
      filter  ,   mask  ,   opacity  ,   pointer-events  ,
      shape-rendering  ,   stroke  ,   stroke-dasharray  ,
      stroke-dashoffset  ,   stroke-linecap  ,   stroke-linejoin  ,
      stroke-miterlimit  ,   stroke-opacity  ,   stroke-width  ,
      text-anchor  ,   transform  ,   vector-effect  ,   visibility 

Aria Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Graphics element, Text content
                                      element

  Permitted content                   Character data and any number of
                                      the following elements, in any
                                      order:
                                      Animation elements
                                      Descriptive elements
                                      Text content child elements
                                       <a>
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # TextElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Related

-   Other SVG text related elements:  <tspan> ,  <tref>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 21, 2023 by MDN contributors .
# <textPath> #

To render text along the shape of a  <path> , enclose the text in a
 <textPath> element that has an   href  attribute with a reference to
the  <path> element.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <!-- to hide the path, it is usually wrapped in a <defs> element -->
      <!-- <defs> -->
      <path
        id="MyPath"
        fill="none"
        stroke="red"
        d="M10,90 Q90,90 90,45 Q90,10 50,10 Q10,10 10,40 Q10,70 45,70 Q70,70 75,50" />
      <!-- </defs> -->

      <text>
        <textPath href="#MyPath">Quick brown fox jumps over the lazy dog.</textPath>
      </text>
    </svg>

Attributes

  href 

    The URL to the path or basic shape on which to render the text. If
    the  path attribute is set,  href has no effect. Value type : <URL>
    ; Default value : none; Animatable : yes

  lengthAdjust 

    Where length adjustment should be applied to the text: the space
    between glyphs, or both the space and the glyphs themselves. Value
    type :  spacing |  spacingAndGlyphs ; Default value :  spacing ;
    Animatable : yes

  method 

    Which method to render individual glyphs along the path. Value type
    :  align |  stretch ; Default value :  align ; Animatable : yes

  path   Experimental 

    The path on which the text should be rendered. Value type :
    <path_data> ; Default value : none; Animatable : yes

  side   Experimental 

    Which side of the path the text should be rendered. Value type :
     left |  right ; Default value :  left ; Animatable : yes

  spacing 

    How space between glyphs should be handled. Value type :  auto |
     exact ; Default value :  exact ; Animatable : yes

  startOffset 

    How far the beginning of the text should be offset from the
    beginning of the path. Value type : <length> | <percentage> |
    <number> ; Default value :  0 ; Animatable : yes

  textLength 

    The width of the space into which the text will render. Value type :
    <length> | <percentage> | <number> ; Default value : auto ;
    Animatable : yes

Global attributes

Core Attributes

    Most notably:   id  ,   tabindex 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Event Attributes

    Global event attributes , Graphical event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

ARIA Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

XLink Attributes
      xlink:title 

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Text content element, Text content
                                      child element

  Permitted content                   Character data and any number of
                                      the following elements, in any
                                      order:
                                      Descriptive elements
                                       <a> ,  <animate> ,  <set> ,
                                       <tref> ,  <tspan>
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # TextPathElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 1, 2023 by MDN contributors .
# <title> — the SVG accessible name element #

The  <title> element provides an accessible, short-text description of
any SVG container element or graphics element .

Text in a  <title> element is not rendered as part of the graphic, but
browsers usually display it as a tooltip. If an element can be described
by visible text, it is recommended to reference that text with an
 aria-labelledby attribute rather than using the  <title> element.

Note: For backward compatibility with SVG 1.1,  <title> elements should
be the first child element of their parent.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 20 10" xmlns="http://www.w3.org/2000/svg">
      <circle cx="5" cy="5" r="4">
        <title>I'm a circle</title>
      </circle>

      <rect x="11" y="1" width="8" height="8">
        <title>I'm a square</title>
      </rect>
    </svg>

Attributes

This element only includes global attributes

Global attributes

Core Attributes

    Most notably:   id 

Styling Attributes
      class  ,   style 

Event Attributes

    Global event attributes , Document element event attributes

Usage notes

  ------------------- --------------------------------
  Categories          Descriptive element
  Permitted content   Any elements or character data
  ------------------- --------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # TitleElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <desc>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <tref> #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The textual content for a  <text> SVG element can be either character
data directly embedded within the  <text> element or the character data
content of a referenced element, where the referencing is specified with
a  <tref> element.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          Text content element, Text content
                                      child element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Descriptive elements
                                       <animate> ,  <set>
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Conditional processing attributes
-   Core attributes
-   Graphical event attributes
-   Presentation attributes
-   Xlink attributes
-     class 
-     style 

Specific attributes

-     xlink:href  Deprecated

DOM Interface

This element implements the  SVGTRefElement interface.

Example

xml

    <svg width="100%" height="100%" viewBox="0 0 1000 300"
         xmlns="http://www.w3.org/2000/svg"
         xmlns:xlink="http://www.w3.org/1999/xlink">
      <defs>
        <text id="ReferencedText">
          Referenced character data
        </text>
      </defs>

      <text x="100" y="100" font-size="45" >
        Inline character data
      </text>

      <text x="100" y="200" font-size="45" fill="red" >
        <tref xlink:href="#ReferencedText"/>
      </text>

      <!-- Show outline of canvas using 'rect' element -->
      <rect x="1" y="1" width="998" height="298"
            fill="none" stroke-width="2" />
    </svg>

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # TRefElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <text>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Nov 18, 2023 by MDN contributors .
# <tspan> #

The SVG  <tspan> element defines a subtext within a  <text> element or
another  <tspan> element. It allows for adjustment of the style and/or
position of that subtext as needed.

Example

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 240 40" xmlns="http://www.w3.org/2000/svg">
      <style>
        text {
          font: italic 12px serif;
        }
        tspan {
          font: bold 10px sans-serif;
          fill: red;
        }
      </style>

      <text x="10" y="30" class="small">
        You are
        <tspan>not</tspan>
        a banana!
      </text>
    </svg>

Attributes

  x 

    The x coordinate of the starting point of the text baseline. Value
    type : <length> | <percentage> ; Default value: none; Animatable :
    yes

  y 

    The y coordinate of the starting point of the text baseline. Value
    type : <length> | <percentage> ; Default value: none; Animatable :
    yes

  dx 

    Shifts the text position horizontally from a previous text element.
    Value type : <length> | <percentage> ; Default value : none ;
    Animatable : yes

  dy 

    Shifts the text position vertically from a previous text element.
    Value type : <length> | <percentage> ; Default value: none;
    Animatable : yes

  rotate 

    Rotates orientation of each individual glyph. Can rotate glyphs
    individually. Value type : <list-of-number> ; Default value : none;
    Animatable : yes

  lengthAdjust 

    How the text is stretched or compressed to fit the width defined by
    the  textLength attribute. Value type :  spacing |  spacingAndGlyphs
    ; Default value :  spacing ; Animatable : yes

  textLength 

    A width that the text should be scaled to fit. Value type : <length>
    | <percentage> ; Default value : none ; Animatable : yes

Global attributes

Core Attributes

    Most notably:   id  ,   tabindex 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Event Attributes

    Global event attributes , Graphical event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   dominant-baseline  ,   fill  ,   fill-opacity  ,   fill-rule  ,
      filter  ,   mask  ,   opacity  ,   pointer-events  ,
      shape-rendering  ,   stroke  ,   stroke-dasharray  ,
      stroke-dashoffset  ,   stroke-linecap  ,   stroke-linejoin  ,
      stroke-miterlimit  ,   stroke-opacity  ,   stroke-width  ,
      text-anchor  ,   vector-effect  ,   visibility 

Aria Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

Usage notes

  ----------------------------------- -----------------------------------
  Categories                          Text content element, Text content
                                      child element

  Permitted content                   Character data and any number of
                                      the following elements, in any
                                      order:
                                      Descriptive elements
                                       <a> ,  <animate> ,  <set> ,
                                       <tref> ,  <tspan>
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # TextElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# <use> #

The  <use> element takes nodes from within the SVG document, and
duplicates them somewhere else. The effect is the same as if the nodes
were deeply cloned into a non-exposed DOM, then pasted where the  use
element is, much like cloned template elements .

Example

The following example shows how to use the  use element to draw a circle
with a different fill and stroke color. In the last circle,
 stroke="red" will be ignored because stroke was already set on
 myCircle .

    html,
    body,
    svg {
      height: 100%;
    }

html

    <svg viewBox="0 0 30 10" xmlns="http://www.w3.org/2000/svg">
      <circle id="myCircle" cx="5" cy="5" r="4" stroke="blue" />
      <use href="#myCircle" x="10" fill="blue" />
      <use href="#myCircle" x="20" fill="white" stroke="red" />
    </svg>

Attributes

  href 

    The URL to an element/fragment that needs to be duplicated. See
    Usage notes for details on common pitfalls.
    Value type :  <URL> ; Default value : none; Animatable : yes

  xlink:href   Deprecated 

    An  <IRI> reference to an element/fragment that needs to be
    duplicated. If both   href  and   xlink:href  are present, the value
    given by   href  is used.
    Value type :  <IRI> ; Default value : none; Animatable : yes

  x 

    The x coordinate of an additional final offset transformation
    applied to the  <use> element.
    Value type :  <coordinate> ; Default value :  0 ; Animatable : yes

  y 

    The y coordinate of an additional final offset transformation
    applied to the  <use> element.
    Value type :  <coordinate> ; Default value :  0 ; Animatable : yes

  width 

    The width of the use element.
    Value type :  <length> ; Default value :  0 ; Animatable : yes

  height 

    The height of the use element.
    Value type :  <length> ; Default value :  0 ; Animatable : yes

Note:  width , and  height have no effect on  use elements, unless the
element referenced has a viewBox - i.e. they only have an effect when
 use refers to a  svg or  symbol element.

Note: Starting with SVG2,  x ,  y ,  width , and  height are Geometry
Properties , meaning those attributes can also be used as CSS properties
for that element.

Global attributes

Core Attributes

    Most notably:   id  ,   tabindex 

Styling Attributes
      class  ,   style 

Conditional Processing Attributes

    Most notably:   requiredExtensions  ,   systemLanguage 

Event Attributes

    Global event attributes , Graphical event attributes

Presentation Attributes

    Most notably:   clip-path  ,   clip-rule  ,   color  ,
      color-interpolation  ,   color-rendering  ,   cursor  ,   display 
    ,   fill  ,   fill-opacity  ,   fill-rule  ,   filter  ,   mask  ,
      opacity  ,   pointer-events  ,   shape-rendering  ,   stroke  ,
      stroke-dasharray  ,   stroke-dashoffset  ,   stroke-linecap  ,
      stroke-linejoin  ,   stroke-miterlimit  ,   stroke-opacity  ,
      stroke-width  ,   transform  ,   vector-effect  ,   visibility 

ARIA Attributes

     aria-activedescendant ,  aria-atomic ,  aria-autocomplete ,
     aria-busy ,  aria-checked ,  aria-colcount ,  aria-colindex ,
     aria-colspan ,  aria-controls ,  aria-current ,  aria-describedby ,
     aria-details ,  aria-disabled ,  aria-dropeffect ,
     aria-errormessage ,  aria-expanded ,  aria-flowto ,  aria-grabbed ,
     aria-haspopup ,  aria-hidden ,  aria-invalid ,  aria-keyshortcuts ,
     aria-label ,  aria-labelledby ,  aria-level ,  aria-live ,
     aria-modal ,  aria-multiline ,  aria-multiselectable ,
     aria-orientation ,  aria-owns ,  aria-placeholder ,  aria-posinset
    ,  aria-pressed ,  aria-readonly ,  aria-relevant ,  aria-required ,
     aria-roledescription ,  aria-rowcount ,  aria-rowindex ,
     aria-rowspan ,  aria-selected ,  aria-setsize ,  aria-sort ,
     aria-valuemax ,  aria-valuemin ,  aria-valuenow ,  aria-valuetext ,
     role

XLink Attributes
      xlink:href  Deprecated ,   xlink:title 

Usage notes

Most attributes on  use are ignored if the corresponding attribute is
already defined on the element referenced by  use . (This differs from
how CSS style attributes override those set 'earlier' in the cascade).
Only the attributes   x  ,   y  ,   width  ,   height  and   href  on
the  use element will or may have some effect, described later, if the
referenced element has already defined the corresponding attribute.
However, any other attributes not set on the referenced element will be
applied to the  use element.

Since the cloned nodes are not exposed, care must be taken when using
CSS to style a  use element and its cloned descendants. CSS properties
are not guaranteed to be inherited by the cloned DOM unless you
explicitly request them using CSS inheritance .

For security reasons, browsers may apply the same-origin policy on  use
elements and may refuse to load a cross-origin URL in the   href 
attribute. There is currently no defined way to set a cross-origin
policy for  use elements.

Warning: Loading resources with data URIs in the  href attribute is
deprecated for security reasons. This applies to  <use href="data:...
and also when setting  href by using the  set or  setAttribute method.
See "Load from data: URI" in the Browser compatibility table to check
support in different browser versions.

Warning: Since SVG 2, the   xlink:href  attribute is deprecated in favor
of   href  . See   xlink:href  page for more information.

  ----------------------------------- -----------------------------------
  Categories                          Graphics element, Graphics
                                      referencing element, Structural
                                      element

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Animation elements
                                      Descriptive elements
  ----------------------------------- -----------------------------------

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # UseElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 17, 2024 by MDN contributors .
# <view> #

A view is a defined way to view the image, like a zoom level or a detail
view.

Usage context

  ----------------------------------- -----------------------------------
  Categories                          None

  Permitted content                   Any number of the following
                                      elements, in any order:
                                      Descriptive elements
  ----------------------------------- -----------------------------------

Attributes

Global attributes

-   Aria attributes
-   Core attributes
-   Global event attributes

Specific attributes

-     viewBox 
-     preserveAspectRatio 
-     zoomAndPan  Deprecated Non-standard

Example

SVG

svg

    <svg viewBox="0 0 300 100" width="300" height="100"
          xmlns="http://www.w3.org/2000/svg">

      <view id="one" viewBox="0 0 100 100" />
      <circle cx="50" cy="50" r="40" fill="red" />

      <view id="two" viewBox="100 0 100 100" />
      <circle cx="150" cy="50" r="40" fill="green" />

      <view id="three" viewBox="200 0 100 100" />
      <circle cx="250" cy="50" r="40" fill="blue" />
    </svg>

HTML

html

    <img src="example.svg" alt="three circles" width="300" height="100" />
    <br />
    <img src="example.svg#three" alt="blue circle" width="100" height="100" />

Result

DOM Interface

This element implements the  SVGViewElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 2
  # ViewElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 19, 2023 by MDN contributors .
# <vkern> #

Deprecated: This feature is no longer recommended. Though some browsers
might still support it, it may have already been removed from the
relevant web standards, may be in the process of being dropped, or may
only be kept for compatibility purposes. Avoid using it, and update
existing code if possible; see the compatibility table at the bottom of
this page to guide your decision. Be aware that this feature may cease
to work at any time.

The  <vkern> SVG element allows to fine-tweak the vertical distance
between two glyphs in top-to-bottom fonts. This process is known as
kerning .

Usage context

  ------------------- --------------
  Categories          Font element
  Permitted content   Empty
  ------------------- --------------

Attributes

Global attributes

-   Core attributes

Specific attributes

-     u1  Deprecated
-     g1  Deprecated
-     u2  Deprecated
-     g2  Deprecated
-     k  Deprecated

DOM Interface

This element implements the  SVGVKernElement interface.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)
  # VKernElement

  -----------------------------------------------------------------------

Browser compatibility

BCD tables only load in the browser <!-- -->with JavaScript enabled.
Enable JavaScript to view data.

See also

-    <font>
-    <glyph>
-    <hkern>
-   SVG tutorial: SVG fonts

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
#  #
# Example #

In this example, we use XHTML , SVG , JavaScript , and the DOM to
animate a swarm of "motes". These motes are governed by two simple
principles. First, each mote tries to move towards the mouse cursor, and
second each mote tries to move away from the average mote position.
Combined, we get this very natural-looking behavior.

View the example . The linked example was written with 2006 best
practices. The example below has been updated to modern JavaScript best
practices. Both work.

xml

    <?xml version='1.0'?>
    <html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:svg="http://www.w3.org/2000/svg">
      <head>
      <title>A swarm of motes</title>
      <style>
      <![CDATA[
        label, input
        {
          width: 150px;
          display: block;
          float: left;
          margin-bottom: 10px;
        }
        label
        {
          text-align: right;
          width: 75px;
          padding-right: 20px;
        }
        br
        {
          clear: left;
        }
      ]]>
      </style>
      </head>
      <body onload='update()'>
        <svg:svg id='display' width='400' height='300'>
          <svg:circle id='cursor' cx='200'
    cy='150' r='7' fill='#0000ff' fill-opacity='0.5'/>
        </svg:svg>

        <p>A swarm of motes, governed by two simple principles.
        First, each mote tries to move towards the cursor, and
        second each mote tries to move away from the average
        mote position. Combined, we get this very natural
        looking behavior.
        </p>

        <div>
        (C) 2006 <a id='emailme' href='#'>Nick Johnson</a>

        <script type='text/javascript'>
        <![CDATA[
          // foil spam bots
          let email = '@riovia.net';
          email ='nick' + email;
          document.getElementById('emailme').href = 'mailto:'+email;
        ]]>
        </script>
        This software is free for you to use in any way whatsoever,
        and comes with no warranty at all.
        </div>

        <form action="" onsubmit="return false;">
          <p>
          <label>Number of motes:</label>
            <input id='num_motes' value='5'/>
            <br/>

          <label>Max. Velocity:</label>
            <input id='max_velocity' value='15'/>
            <br/>

          <label>Attraction to cursor:</label>
            <input id='attract_cursor' value='6'/>
            <br/>

          <label>Repulsion from peers:</label>
            <input id='repel_peer' value='5'/>
            <br/>
          </p>
        </form>

      <script type='text/javascript'>
      <![CDATA[

        // Array of motes
        let motes;

        // Get the display element.
        function Display() {
          return document.getElementById('display');
        }

        // Determine dimensions of the display element.
        // Return this as a 2-tuple (x,y) in an array
        function Dimensions() {
          // Our Rendering Element
          const display = Display();
          const width = parseInt(display.getAttributeNS(null, 'width'));
          const height = parseInt(display.getAttributeNS(null, 'height'));

          return [width, height];
        }

        // This is called by mouse move events
        const mouse_x = 200;
        const mouse_y = 150;
        function OnMouseMove(evt) {
          mouse_x = evt.clientX;
          mouse_y = evt.clientY;

          const widget = document.getElementById('cursor');
          widget.setAttributeNS(null,'cx',mouse_x);
          widget.setAttributeNS(null,'cy',mouse_y);
        }
        document.onmousemove = OnMouseMove;

        // Determine (x,y) of the cursor
        function Cursor() {
          return [mouse_x, mouse_y];
        }

        // Determine average (x,y) of the swarm
        function AverageMotePosition() {
          if (!motes || motes.length === 0) {
            return [0, 0];
          }

          const sum_x = 0;
          const sum_y = 0;
          for (const mote of motes) {
            sum_x += mote.x;
            sum_y += mote.y;
          }

          return [sum_x / motes.length, sum_y / motes.length];
        }

        // A nicer, integer random
        function Rand(modulo)
        {
          return Math.round(Math.random() * (modulo - 1));
        }

        // Class Mote
        function Mote() {
          // Dimensions of drawing area.
          const dims = Dimensions();
          const width = dims[0];
          const height = dims[1];

          // Choose a random coordinate to start at.
          this.x = Rand(width);
          this.y = Rand(height);

          // Nil initial velocity.
          this.vx = this.vy = 0;

          // A visual element, initially none
          this.elt = null;
        }

        // Turn this into a class.
        new Mote();

        // Mote::applyForce() — Adjust velocity
        // towards the given position.
        // Warning: Pseudo-physics — not really
        // governed by any /real/ physical principles.
        Mote.prototype.applyForce = function (pos, mag) {
          if (pos[0] > this.x) {
            this.vx += mag;
          } else if (pos[0] < this.x) {
            this.vx -= mag;
          }

          if (pos[1] > this.y) {
            this.vy += mag;
          } else if (pos[1] < this.y) {
            this.vy -= mag;
          }
        }

        // Mote::capVelocity() — Apply an upper limit
        // on mote velocity.
        Mote.prototype.capVelocity = function () {
          const max = parseInt(document.getElementById('max_velocity').value);

          if (max < this.vx) {
            this.vx = max;
          } else if (-max > this.vx) {
            this.vx = -max;
          }

          if (max < this.vy) {
            this.vy = max;
          } else if (-max > this.vy) {
            this.vy = -max;
          }
        }

        // Mote::capPosition() — Apply an upper/lower limit
        // on mote position.
        Mote.prototype.capPosition = function () {
          const dims = Dimensions();
          if (this.x < 0) {
            this.x = 0;
          } else if (this.x >= dims[0]) {
            this.x = dims[0] - 1;
          }

          if (this.y < 0) {
            this.y = 0;
          } else if (this.y >= dims[1]) {
            this.y = dims[1] - 1;
          }
        }

        // Mote::move() — move a mote, update the screen.
        Mote.prototype.move = function () {
          // Apply attraction to cursor.
          const attract = parseInt(document.getElementById('attract_cursor').value);
          const cursor = Cursor();
          this.applyForce(cursor, attract);

          // Apply repulsion from average mote position.
          const repel = parseInt(document.getElementById('repel_peer').value);
          const average = AverageMotePosition();
          this.applyForce(average, -repel);

          // Add some randomness to the velocity.
          this.vx += Rand(3) - 1;
          this.vy += Rand(3) - 1;

          // Put an upper limit on velocity.
          this.capVelocity();

          // Apply velocity.
          const old_x = this.x;
          const old_y = this.y;
          this.x += this.vx;
          this.y += this.vy;
          this.capPosition();

          // Draw it.
          if (this.elt === null) {
            const svg = 'http://www.w3.org/2000/svg';
            this.elt = document.createElementNS(svg, 'line');
            this.elt.setAttributeNS(null, 'stroke', 'green');
            this.elt.setAttributeNS(null, 'stroke-width', '3');
            this.elt.setAttributeNS(null, 'stroke-opacity', '0.5');
            Display().appendChild(this.elt);
          }

          this.elt.setAttributeNS(null, 'x1', old_x);
          this.elt.setAttributeNS(null, 'y1', old_y);

          this.elt.setAttributeNS(null, 'x2', this.x);
          this.elt.setAttributeNS(null, 'y2', this.y);
        }

        function update() {
          // First call?
          if (!motes) {
            motes = [];
          }

          // How many motes should there be?
          let num = parseInt( document.getElementById('num_motes').value );
          if ( num < 0 ) {
            num = 0;
          }

          // Make sure we have exactly that many...
          // Too few?
          while (motes.length < num) {
            motes.push(new Mote());
          }

          // Or too many?
          if (num === 0) {
            motes = [];
          } else if (motes.length > num) {
            motes = motes.slice(0, num - 1);
          }

          // Move a random mote
          if (motes.length > 0) {
            motes[Rand(motes.length)].move();
          }

          // And do this again in 1/100 sec
          setTimeout('update()', 10);
        }
      ]]>
      </script>
      </body>
    </html>

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 19, 2023 by MDN contributors .
# Namespaces crash course #

As an XML dialect, SVG is namespaced. It is important to understand the
concept of namespaces and how they are used if you plan to author SVG
content. Namespaces are essential to user agents that support multiple
XML dialects; browsers must be very strict. Taking the time to
understand namespaces now will save you from future headaches.

Background

A long-standing goal of the various W3C specifications is to make it
possible for different types of XML-based content to be mixed together
in the same XML or HTML file. For example, SVG and MathML might be
incorporated directly into an HTML based scientific document. Being able
to mix content types like this has many advantages, but it also required
a very real problem to be solved.

Naturally, each XML dialect defines the meaning of the markup element
names described in its specification. The problem with mixing content
from different XML dialects in a single document is that the elements
defined by one dialect may have the same name as elements defined by
another. For example, both HTML and SVG have a  <title> element. How
does the user agent distinguish between the two? How do CSS styles
distinguish between the two? In fact, how does the user agent tell when
content is something it knows about, and not just a meaningless
undefined HTML custom element or an XML file containing arbitrary
element names unknown to it?

Contrary to popular opinion, the answer to this question is not "it can
tell from the  DOCTYPE declaration". DTDs were never designed with mixed
content in mind, and past attempts to create mixed content DTDs are now
considered to have failed. XML, and some XML dialects (SVG and HTML
included), don't require a  DOCTYPE declaration. SVG 1.2 doesn't even
have one. The fact that  DOCTYPE declarations (usually) match the
content in single content-type files is merely coincidental. DTDs are
for validation only, not identification of content. Any user agent that
identifies XML content using its  DOCTYPE declaration is unreliable.

The real answer to the question is that XML content tells the user agent
which dialect the element names belong to by giving them explicit
"namespace declarations".

Declaring namespaces

So what do these namespace declarations look like, and where do they go?
Here is a short example.

svg

    <svg xmlns="http://www.w3.org/2000/svg">
      <!-- more tags here -->
    </svg>

The namespace declaration is provided by the  xmlns parameter. This
parameter says that the  <svg> element and its child elements belong to
whichever XML dialect has the namespace name  http://www.w3.org/2000/svg
which is, of course, SVG. Note that the namespace declaration is only
provided once on a root element (and is implied if omitted). The
declaration defines the default namespace, so the user agent knows that
all the  <svg> element's descendants also belong to the same namespace.
User agents check to see if they recognize the namespace name to
determine if they know how to handle the markup.

Note that namespace names are just strings, so the fact that the SVG
namespace name also looks like a URI isn't important. URIs are commonly
used because they are unique, but the intention is not to "link"
somewhere. (In fact, URIs are used so frequently that the term
"namespace URI" is commonly used instead of "namespace name".)

Redeclaring the default namespace

If all the descendants of the root element are also defined to be in the
default namespace, how do you mix in content from another namespace? To
include the SVG namespace in HTML, you include  <svg> . In XML, you
declare a namespace. Here's a short example.

xml

    <report xmlns="https://www.acme.org/reports">
      <title>Some stats</title>
      <summary>...</summary>
      <statTable xmlns="https://www.acme.org/tables">
        <content>...</content>
        <!-- redeclaring root's default namespace -->
        <summary xmlns="https://www.acme.org/reports">...</summary>
      </statTable>
    </report>

In this example, the  xmlns attribute on the root  <report> element
declares the default namespace to be  https://www.acme.org/reports , or
 reports . As a result, it and all its child elements are interpreted by
the user agent as belonging to  reports , except for the  <content>
element, which exists in the  https://www.acme.org/tables , or  tables ,
namespace. The  <summary> element has its own  xmlns parameter, and by
redeclaring the  reports namespace, this tells the user agent that the
 <summary> element and its descendants (unless they also redeclare an
alternative namespace) belong to  reports .

With HTML,  http://www.w3.org/1999/xhtml is the implied namespace. With
SVG, it is  http://www.w3.org/2000/svg . MathML is
 http://www.w3.org/1998/Math/MathML .

Declaring namespace prefixes

XML dialects not only define their own elements, but they also declare
their own parameters.

By default, parameters don't have a namespace at all. They are only
known to be unique because they appear on an element that itself has a
unique name. However, sometimes it is necessary to define parameters so
that they can be reused on many different elements and still be
considered to be the same parameter, independently of the element with
which they are used. A very good example of this is the  href parameter
defined by the XLink specification. This parameter is commonly used by
other XML dialects as a means to link to external resources. But how do
you tell the user agent which dialect the parameter belongs to, in this
case  XLink ? Consider the following example.

xml

    <svg
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <script xlink:href="cool-script.js" type="text/javascript" />
    </svg>

This example has the rather unusual-looking parameter  xmlns:xlink . As
you may guess from the first  xmlns part, this is another namespace
declaration. However, instead of setting the default namespace, this
namespace declaration sets the namespace for something called a "
namespace prefix ". In this case, we have chosen to use the prefix
 xlink (the second part) since the prefix will be used to tell the user
agent about attributes that belong to  XLink .

As their name suggests, namespace prefixes are used to prefix parameter
and element names. This is done by putting the namespace prefix and a
colon before the parameter name as shown on the  <script> element in the
example above. This tells the user agent that the particular parameter
belongs to the namespace assigned to the namespace prefix (  XLink ),
and is a parameter that can be used with the same meaning on other
elements.

Note that, in XML, it is an XML error to use a prefix that hasn't been
bound to a namespace name. The binding created by the  xmlns:xlink
parameter in the example above is required for the  xlink:href parameter
to not cause an error. This XLink parameter is also frequently used in
SVG on the  <a> ,  <use> and  <image> elements among others, so it's a
good idea to always include the XLink declaration in your documents.

As an aside, it's useful to know that namespace prefixes can also be
used for element names. This tells the user agent that the particular
element (but not its children this time!) belongs to the namespace
assigned to the prefix. Knowing this will save you some confusion if you
come across markup like in the following example:

html

    <html
      lang="en"
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:svg="http://www.w3.org/2000/svg">
      <body>
        <h1>SVG embedded inline in XHTML</h1>
        <svg:svg width="300px" height="200px">
          <svg:circle cx="150" cy="100" r="50" fill="#ff0000" />
        </svg:svg>
      </body>
    </html>

Note that because a namespace prefix is used for the  <svg:svg> element
and its child  <svg:circle> , it wasn't necessary to redeclare the
default namespace. In general, it is better to redeclare the default
namespace rather than prefix lots of elements in this way.

Scripting in namespaced XML

Namespaces affect markup and scripting ( and even CSS ). If you write
scripts for namespaced XML such as SVG, read on.

The DOM Level 1 recommendation was created before the original
Namespaces in XML recommendation was released; therefore, DOM1 isn't
namespace-aware. This causes problems for namespaced XML such as SVG. To
resolve these problems, DOM Level 2 Core added namespace-aware
equivalents of all the applicable DOM Level 1 methods. When scripting
SVG, it is important to use the namespace-aware methods . The table
below lists the DOM1 methods that shouldn't be used in SVG, along with
their equivalent DOM2 counterparts that should be used instead.

  ------------------------- ----------------------------------------------------
  DOM1 (don't use)          DOM2 (use these instead!)
   createAttribute()         createAttributeNS()
   createElement()           createElementNS()
   getAttributeNode()        getAttributeNodeNS()
   getAttribute()            getAttributeNS()
   getElementsByTagName()    getElementsByTagNameNS() (also added to Element )
   getNamedItem()            getNamedItemNS()
   hasAttribute()            hasAttributeNS()
   removeAttribute()         removeAttributeNS()
   removeNamedItem()         removeNamedItemNS()
   setAttribute()            setAttributeNS()
   setAttributeNode()        setAttributeNodeNS()
   setNamedItem()            setNamedItemNS()
  ------------------------- ----------------------------------------------------

The first parameter for all the DOM2 namespace-aware methods must be the
namespace name (also known as the namespace URI) of the element or
parameter in question. For SVG elements this is
 http://www.w3.org/2000/svg . However, note carefully: the Namespaces in
XML 1.1 recommendation states that the namespace name for parameters
without a prefix does not have a value. In other words, although the
parameters belong to the namespace of the element, you do not use the
tag's namespace name. Instead, you must use null as the namespace name
for unqualified (prefixless) parameters . So, to create an SVG  rect
element using  document.createElementNS() , you must write:

js

    document.createElementNS("http://www.w3.org/2000/svg", "rect");

But to retrieve the value of the  x parameter on an SVG  rect element,
you must write:

js

    rect.getAttributeNS(null, "x");

Note that this isn't the case for parameters with a namespace prefix
(parameters that don't belong to the same XML dialect as the element).
Parameters such as  xlink:href require the namespace name that was
assigned to that prefix (  http://www.w3.org/1999/xlink for XLink).
Hence to get the value of the  xlink:href parameter of an  <a> element
in SVG you would write:

js

    elt.getAttributeNS("http://www.w3.org/1999/xlink", "href");

For setting parameters that have a namespace, it is recommended (but not
required) that you also include their prefix in the second parameter so
that the DOM can later be more easily converted back to XML (if, for
instance, you want to send it back to the server). For example:

js

    elt.setAttributeNS(
      "http://www.w3.org/1999/xlink",
      "xlink:href",
      "otherdoc.svg",
    );

As a final example, here's a demonstration of how you could dynamically
create an  <image> element using JavaScript:

js

    const SVG_NS = "http://www.w3.org/2000/svg";
    const XLink_NS = "http://www.w3.org/1999/xlink";
    const image = document.createElementNS(SVG_NS, "image");
    image.setAttributeNS(null, "width", "100");
    image.setAttributeNS(null, "height", "100");
    image.setAttributeNS(XLink_NS, "xlink:href", "flower.png");

Conclusion

For SVG, HTML, and MathML, the namespace is implied and therefore
optional. It is required to declare the namespace for XML files. If you
don't, user agents will not recognize the content and will show the XML
markup or inform the user that there's an error in the XML.

When writing SVG, it is helpful to use a template that includes all the
commonly used namespace declarations when creating new files. If you
don't already have one, make one up starting with the following code:

html

    <svg
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink"></svg>

Even if you don't use all those namespaces in a particular document,
there's no harm in including the namespace declarations. It may save you
from some annoying errors if you end up adding content from one of the
unused namespaces at a later date.

A full example

For a full example see SVG: Namespaces Crash Course: Example .

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Nov 18, 2023 by MDN contributors .
# SVG animation with SMIL #

Synchronized Multimedia Integration Language (SMIL) is an extension of
SVG allowing to animating SVG elements. SMIL allows you to:

-   animate the numeric attributes of an element (x, y, …)
-   animate transform attributes (translation or rotation)
-   animate color attributes
-   follow a motion path

This is done adding an SVG element like  <animate> inside the SVG
element to animate. Below are examples for the four different ways.

Animating attributes of an element

The following example animates the cx attribute of a circle. To do so,
we add an  <animate> element inside the  <circle> element. The important
attributes for  <animate> are:

attributeName

    The name of the attribute to animate.

from

    The initial value of the attribute.

to

    The final value.

dur

    The duration of the animation (for example, write '5s' for 5
    seconds).

If you want to animate more attributes inside the same element, just add
more  <animate> elements.

html

    <svg width="300" height="100">
      <title>Attribute Animation with SMIL</title>
      <rect x="0" y="0" width="300" height="100" stroke="black" stroke-width="1" />
      <circle cx="0" cy="50" r="15" fill="blue" stroke="black" stroke-width="1">
        <animate
          attributeName="cx"
          from="0"
          to="500"
          dur="5s"
          repeatCount="indefinite" />
      </circle>
    </svg>

Animating the transform attributes

The  <animateTransform> element let you animate transform attributes.
This new element is necessary because we are not animating a simple
attribute like x which is just a number. Rotation attributes look like
this:  rotation(theta, x, y) , where  theta is the angle in degrees, and
 x and  y are absolute positions. In the example below, we animate the
center of the rotation and the angle.

html

    <svg width="300" height="100">
      <title>SVG SMIL Animate with transform</title>
      <rect x="0" y="0" width="300" height="100" stroke="black" stroke-width="1" />
      <rect
        x="0"
        y="50"
        width="15"
        height="34"
        fill="blue"
        stroke="black"
        stroke-width="1">
        <animateTransform
          attributeName="transform"
          begin="0s"
          dur="20s"
          type="rotate"
          from="0 60 60"
          to="360 100 60"
          repeatCount="indefinite" />
      </rect>
    </svg>

Animation following a path

The  <animateMotion> element lets you animate an element position and
rotation according to a path. The path is defined the same way as in
 <path> . You can set the attribute to define whether the object rotates
following the tangent of the path.

Example 1: Linear motion

In this example, a blue circle bounces between the left and right edges
of a black box, over and over again, indefinitely. The animation here is
handled by the  <animateMotion> element. In this case, we're
establishing a path consisting of a MoveTo command to establish the
starting point for the animation, then the Horizontal-line command to
move the circle 300 pixels to the right, followed by the Z command ,
which closes the path, establishing a loop back to the beginning. By
setting the value of the repeatCount attribute to  indefinite , we
indicate that the animation should loop forever, as long as the SVG
image exists.

html

    <svg xmlns="http://www.w3.org/2000/svg" width="300" height="100">
      <title>SVG SMIL Animate with Path</title>
      <rect x="0" y="0" width="300" height="100" stroke="black" stroke-width="1" />
      <circle cx="0" cy="50" r="15" fill="blue" stroke="black" stroke-width="1">
        <animateMotion path="M 0 0 H 300 Z" dur="3s" repeatCount="indefinite" />
      </circle>
    </svg>

View live sample

Example 2: Curved motion

Same example as before with a curved path and following the direction of
the path.

html

    <svg width="300" height="100">
      <title>SVG SMIL Animate with Path</title>
      <rect x="0" y="0" width="300" height="100" stroke="black" stroke-width="1" />
      <rect
        x="0"
        y="0"
        width="20"
        height="20"
        fill="blue"
        stroke="black"
        stroke-width="1">
        <animateMotion
          path="M 250,80 H 50 Q 30,80 30,50 Q 30,20 50,20 H 250 Q 280,20,280,50 Q 280,80,250,80Z"
          dur="3s"
          repeatCount="indefinite"
          rotate="auto" />
      </rect>
    </svg>

See also

-   SVG
-   SVG Animation Specification
-   SMIL Specification

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 20, 2023 by MDN contributors .
# SVG as an Image #

SVG images can be used as an image format, in a number of contexts.
Browsers support SVG images in:

-   HTML  <img> or  <svg> elements
-   CSS  background-image
-   CSS  list-style-image
-   CSS  content
-   SVG  <image> element
-   SVG  <feImage> element
-   Canvas  drawImage function

Restrictions

For security purposes, Gecko places some restrictions on SVG content
when it's being used as an image:

-   JavaScript is disabled.
-   External resources (e.g. images, stylesheets) cannot be loaded,
    though they can be used if inlined through data: Ls.
-    :visited -link styles aren't rendered.
-   Platform-native widget styling (based on OS theme) is disabled.

Note that the above restrictions are specific to image contexts; they
don't apply when SVG content is viewed directly, or when it's embedded
as a document via the  <iframe> ,  <object> , or  <embed> elements.

Specifications

  -----------------------------------------------------------------------
  Specification
  -----------------------------------------------------------------------
  CSS Backgrounds and Borders Module Level 3
  # the-background-image

  -----------------------------------------------------------------------

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# Basic shapes #

-   « Previous
-   Next »

There are several basic shapes used for most SVG drawing. The purpose of
these shapes is fairly obvious from their names. Some of the parameters
that determine their position and size are given, but an element
reference would probably contain more accurate and complete descriptions
along with other properties that won't be covered in here. However,
since they're used in most SVG documents, it's necessary to give them
some sort of introduction.

To insert a shape, you create an element in the document. Different
elements correspond to different shapes and take different parameters to
describe the size and position of those shapes. Some are slightly
redundant in that they can be created by other shapes, but they're all
there for your convenience and to keep your SVG documents as short and
as readable as possible. All the basic shapes are shown in the following
image.

[Succession of eight different shapes and drawings. At the top left, a
black outline square follow by a black rounded outline square. Below at
the left, a red outline circle follow by a red outline ellipse. Below at
the left a yellow line, follow by a yellow zigzag. Below the yellow
lines, a green outline star and at the end of the image a blue wavy
line.]

The code to generate that image looks something like this:

xml

    <?xml version="1.0" standalone="no"?>
    <svg width="200" height="250" version="1.1" xmlns="http://www.w3.org/2000/svg">

      <rect x="10" y="10" width="30" height="30" stroke="black" fill="transparent" stroke-width="5"/>
      <rect x="60" y="10" rx="10" ry="10" width="30" height="30" stroke="black" fill="transparent" stroke-width="5"/>

      <circle cx="25" cy="75" r="20" stroke="red" fill="transparent" stroke-width="5"/>
      <ellipse cx="75" cy="75" rx="20" ry="5" stroke="red" fill="transparent" stroke-width="5"/>

      <line x1="10" x2="50" y1="110" y2="150" stroke="orange" stroke-width="5"/>
      <polyline points="60 110 65 120 70 115 75 130 80 125 85 140 90 135 95 150 100 145"
          stroke="orange" fill="transparent" stroke-width="5"/>

      <polygon points="50 160 55 180 70 180 60 190 65 205 50 195 35 205 40 190 30 180 45 180"
          stroke="green" fill="transparent" stroke-width="5"/>

      <path d="M20,230 Q40,205 50,230 T90,230" fill="none" stroke="blue" stroke-width="5"/>
    </svg>

Note: The  stroke ,  stroke-width , and  fill attributes are explained
later in the tutorial.

Rectangle

The  <rect> element draws a rectangle on the screen. There are six basic
attributes that control the position and shape of the rectangles on
screen. The one on the right has its  rx and  ry parameters set, giving
it rounded corners. If they're not set, they default to  0 .

xml

    <rect x="10" y="10" width="30" height="30"/>
    <rect x="60" y="10" rx="10" ry="10" width="30" height="30"/>

 x

    The x position of the top left corner of the rectangle.

 y

    The y position of the top left corner of the rectangle.

 width

    The width of the rectangle.

 height

    The height of the rectangle.

 rx

    The x radius of the corners of the rectangle.

 ry

    The y radius of the corners of the rectangle.

Circle

The  <circle> element draws a circle on the screen. It takes three basic
parameters to determine the shape and size of the element.

xml

    <circle cx="25" cy="75" r="20"/>

 r

    The radius of the circle.

 cx

    The x position of the center of the circle.

 cy

    The y position of the center of the circle.

Ellipse

An  <ellipse> is a more general form of the  <circle> element, where you
can scale the x and y radius (commonly referred to as the semimajor and
semiminor axes in maths) of the circle separately.

xml

    <ellipse cx="75" cy="75" rx="20" ry="5"/>

 rx

    The x radius of the ellipse.

 ry

    The y radius of the ellipse.

 cx

    The x position of the center of the ellipse.

 cy

    The y position of the center of the ellipse.

Line

The  <line> element takes the positions of two points as parameters and
draws a straight line between them.

xml

    <line x1="10" x2="50" y1="110" y2="150" stroke="black" stroke-width="5"/>

 x1

    The x position of point 1.

 y1

    The y position of point 1.

 x2

    The x position of point 2.

 y2

    The y position of point 2.

Polyline

A  <polyline> is a group of connected straight lines. Since the list of
points can get quite long, all the points are included in one attribute:

xml

    <polyline points="60, 110 65, 120 70, 115 75, 130 80, 125 85, 140 90, 135 95, 150 100, 145"/>

 points

    A list of points. Each number must be separated by a space, comma,
    EOL, or a line feed character with additional whitespace permitted.
    Each point must contain two numbers: an x coordinate and a y
    coordinate. So, the list  (0,0) ,  (1,1) , and  (2,2) could be
    written as  0, 0 1, 1 2, 2 .

Polygon

A  <polygon> is similar to a  <polyline> , in that it is composed of
straight line segments connecting a list of points. For polygons though,
the path automatically connects the last point with the first, creating
a closed shape.

Note: A rectangle is a type of polygon, so a polygon can be used to
create a  <rect/> element that does not have rounded corners.

xml

    <polygon points="50, 160 55, 180 70, 180 60, 190 65, 205 50, 195 35, 205 40, 190 30, 180 45, 180"/>

 points

    A list of points, each number separated by a space, comma, EOL, or a
    line feed character with additional whitespace permitted. Each point
    must contain two numbers: an x coordinate and a y coordinate. So,
    the list  (0,0) ,  (1,1) , and  (2,2) could be written as
     0, 0 1, 1 2, 2 . The drawing then closes the path, so a final
    straight line would be drawn from  (2,2) to  (0,0) .

Path

A  <path> is the most general shape that can be used in SVG. Using a
 path element, you can draw rectangles (with or without rounded
corners), circles, ellipses, polylines, and polygons. Basically any of
the other types of shapes, bezier curves, quadratic curves, and many
more.

For this reason, the next section in this tutorial will be focused on
paths. But for now, note that there is a single parameter used to
control its shape.

xml

    <path d="M20,230 Q40,205 50,230 T90,230" fill="none" stroke="blue" stroke-width="5"/>

 d

    A list of points and other information about how to draw the path.
    See the Paths section for more information.

-   « Previous
-   Next »

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# Basic transformations #

-   « Previous
-   Next »

Now we're ready to start distorting our beautiful images. But first,
let's formally introduce the  <g> element. With this helper, you can
assign properties to a complete set of elements. Actually, that's its
only purpose.

Example

html

    <svg width="30" height="10">
      <g fill="red">
        <rect x="0" y="0" width="10" height="10" />
        <rect x="20" y="0" width="10" height="10" />
      </g>
    </svg>

All following transformations are summed up in an element's  transform
attribute. Transformations can be chained by concatenating them,
separated by whitespace.

Translation

It may be necessary to move an element around, even though you can
position it with the according attributes. For this purpose, the
 translate() transformation stands ready.

html

    <svg width="40" height="50" style="background-color:#bff;">
      <rect x="0" y="0" width="10" height="10" transform="translate(30,40)" />
    </svg>

The example will render a rectangle, translated to the point (30,40)
instead of (0,0).

If the second value is not given, it is assumed to be 0 .

Rotation

Rotating an element is quite a common task. Use the  rotate()
transformation for this:

html

    <svg width="31" height="31">
      <rect x="12" y="-10" width="20" height="20" transform="rotate(45)" />
    </svg>

This example shows a square that is rotated by 45 degrees. The value for
 rotate() is given in degrees.

Multiple transformations

Transformations can be concatenated easily just by separating them with
spaces. For example,  translate() and  rotate() are common used
transformations.

html

    <svg width="40" height="50" style="background-color:#bff;">
      <rect
        x="0"
        y="0"
        width="10"
        height="10"
        transform="translate(30,40) rotate(45)" />
    </svg>

This example shows again the small square shown above that this time is
also rotated by 45 degrees.

Skewing

To make a rhombus out of our rectangle, the  skewX() and  skewY()
transformations are available. Each one takes an angle that determines
how far the element will be skewed.

Scaling

 scale() changes the size of an element. It takes two numbers, the first
being the x scale factor and the second being the y scale factor. The
factors are taken as the ratio of the transformed dimension to the
original. For example, 0.5 shrinks by 50%. If the second number is
omitted, it is assumed to be equal to the first.

Complex transformations with  matrix()

All the above transformations can be expressed by a 2x3 transformation
matrix. To combine several transformations, one can set the resulting
matrix directly with the  matrix(a, b, c, d, e, f) transformation which
maps coordinates from a previous coordinate system into a new coordinate
system by

$$\left\{ \begin{matrix}
{x_{newCoordSys} = ax_{prevCoordSys} + cy_{prevCoordSys} + e} \\
{y_{newCoordSys} = bx_{prevCoordSys} + dy_{prevCoordSys} + f} \\
\end{matrix} \right.$$

See a concrete example on the SVG transform documentation . Detailed
information about this property can be found in the SVG Recommendation .

Effects on Coordinate Systems

When using transformations you establish a new coordinate system inside
the element the transformations apply to. That means, the units you
specify for the element and its children might not follow the 1:1 pixel
mapping, but are also distorted, skewed, translated and scaled according
to the transformation.

html

    <svg width="100" height="100">
      <g transform="scale(2)">
        <rect width="50" height="50" />
      </g>
    </svg>

The resulting rectangular in the above example will be 100x100px. The
more intriguing effects arise, when you rely on attributes like
 userSpaceOnUse and the such.

Embedding SVG in SVG

In contrast to HTML, SVG allows you to embed other  svg elements
seamlessly. This way you can also create new coordinate systems by
utilizing the  viewBox ,  width and  height of the inner  svg element.

html

    <svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100" height="100">
      <svg width="100" height="100" viewBox="0 0 50 50">
        <rect width="50" height="50" />
      </svg>
    </svg>

The example above has basically the same effect as the one above, namely
that the rect will be twice as large as specified.

-   « Previous
-   Next »

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# Clipping and masking #

-   « Previous
-   Next »

Erasing part of what you have created might seem contradictory at first.
But when you, for example, try to create a semicircle in SVG, you will
find out the use of the following properties quickly:

-   Clipping , which refers to removing parts of elements defined by
    other parts. In this case, any half-transparent effects are not
    possible; it's an all-or-nothing approach.
-   Masking , which, on the other hand, allows soft edges by taking
    transparency and grey values of the mask into account.

Creating clips

We create the above-mentioned semicircle based on a  circle element:

html

    <svg
      version="1.1"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <defs>
        <clipPath id="cut-off-bottom">
          <rect x="0" y="0" width="200" height="100" />
        </clipPath>
      </defs>

      <circle cx="100" cy="100" r="100" clip-path="url(#cut-off-bottom)" />
    </svg>

Centered at (100,100), a circle with radius 100 is painted. The
attribute  clip-path references a    <clipPath> element with a single
 rect element. This rectangular on its own would paint the upper half of
the canvas black. Note, that the  clipPath element is usually placed in
a  defs section.

The  rect will not be painted, however. Instead, its pixel data will be
used to determine which pixels of the circle "make it" to the final
rendering. Since the rectangle covers only the upper half of the circle,
the lower half of the circle will vanish:

We now have a semicircle without having to deal with arcs in path
elements. For the clipping, every path inside the  clipPath is inspected
and evaluated together with its stroke properties and transformation.
Then every part of the target lying in a transparent area of the
resulting  clipPath 's content will not be rendered. Color, opacity, and
such have no effect as long as they don't let parts vanish completely.

Masking

The effect of masking is most impressively presented with a gradient. If
you want an element to fade out, you can achieve this effect quite
quickly with masks.

html

    <svg
      width="200"
      height="200"
      version="1.1"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <defs>
        <linearGradient id="Gradient">
          <stop offset="0" stop-color="black" />
          <stop offset="1" stop-color="white" />
        </linearGradient>
        <mask id="Mask">
          <rect x="0" y="0" width="200" height="200" fill="url(#Gradient)" />
        </mask>
      </defs>

      <rect x="0" y="0" width="200" height="200" fill="green" />
      <rect x="0" y="0" width="200" height="200" fill="red" mask="url(#Mask)" />
    </svg>

You see a green-filled  rect at the lowest layer and on top a red-filled
 rect . The latter has the  mask attribute pointing to the  mask
element. The content of the mask is a single  rect element, which is
filled with a black-to-white gradient. As a result, the pixels of the
red rectangle use the luminance value of the mask content as the alpha
value (the transparency), and we see a green-to-red gradient as a
result:

Transparency with  opacity

The  opacity attribute lets you set the transparency for a whole
element:

xml

    <rect x="0" y="0" width="100" height="100" opacity=".5" />

The above rectangle will be painted half-transparent. For the fill and
stroke, there are two separate attributes,  fill-opacity and
 stroke-opacity , that control each of those property opacities
separately. Note, that the stroke will be painted on top of the filling.
Hence, if you set a stroke opacity on an element, which also has a fill,
the fill will shine through on half of the stroke while on the other
half, the background will appear:

html

    <svg
      width="200"
      height="200"
      version="1.1"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <rect x="0" y="0" width="200" height="200" fill="blue" />
      <circle
        cx="100"
        cy="100"
        r="50"
        stroke="yellow"
        stroke-width="40"
        stroke-opacity=".5"
        fill="red" />
    </svg>

You see in this example the red circle on blue background. The yellow
stroke is set to 50% opacity, which leads effectively to a double-color
stroke.

Using well-known CSS techniques

One of the most powerful tools in a web developer's toolbox is
 display: none . It is therefore not a surprise that it was decided to
take this CSS property into SVG as well, together with  visibility and
 clip as defined by CSS 2. For reverting a previously set  display: none
, it is important to know that the initial value for all SVG elements is
 inline .

-   « Previous
-   Next »

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# Fills and Strokes #

-   « Previous
-   Next »

There are several ways to color shapes (including specifying attributes
on the object) using inline CSS , an embedded CSS section, or an
external CSS file. Most SVG you'll find around the web use inline CSS,
but there are advantages and disadvantages associated with each type.

Fill and Stroke Attributes

Painting

Basic coloring can be done by setting two attributes on the node:  fill
and  stroke . Using  fill sets the color inside the object and  stroke
sets the color of the line drawn around the object. You can use the same
CSS color naming schemes that you use in HTML, whether that's color
names (like  red ), rgb values (like  rgb(255 0 0) ), hex values, rgba
values, etc.

xml

     <rect x="10" y="10" width="100" height="100" stroke="blue" fill="purple"
           fill-opacity="0.5" stroke-opacity="0.8"/>

In addition, you can specify the opacity of either the  fill or  stroke
separately in SVG. These are controlled by the  fill-opacity and
 stroke-opacity attributes.

Note: In Firefox,  rgba values are also allowed, and will give the same
effect. But for compatibility with other viewers, it's often best to
specify the  fill /  stroke opacity separately. If you specify both an
 rgba value and a  fill /  stroke opacity value, both will be applied.

Stroke

In addition to its color properties, there are a few other attributes
available to control the way a stroke is drawn on a line.

[The stroke-linecap attribute changes the look of these stroke's ends:
square adds a square cap, round provides a rounded cap, and butt removes
capping]

xml

    <?xml version="1.0" standalone="no"?>
    <svg width="160" height="140" xmlns="http://www.w3.org/2000/svg" version="1.1">
      <line x1="40" x2="120" y1="20" y2="20" stroke="black" stroke-width="20" stroke-linecap="butt"/>
      <line x1="40" x2="120" y1="60" y2="60" stroke="black" stroke-width="20" stroke-linecap="square"/>
      <line x1="40" x2="120" y1="100" y2="100" stroke="black" stroke-width="20" stroke-linecap="round"/>
    </svg>

The  stroke-width property defines the width of this stroke. Strokes are
drawn centered around the path. In the example above, the path is shown
in pink, and the stroke in black.

The second attribute affecting strokes is the  stroke-linecap property,
demonstrated above. This controls the shape of the ends of lines.

There are three possible values for  stroke-linecap :

-    butt closes the line off with a straight edge that's normal (at 90
    degrees) to the direction of the stroke and crosses its end.
-    square has essentially the same appearance, but stretches the
    stroke slightly beyond the actual path. The distance that the stroke
    goes beyond the path is half the  stroke-width .
-    round produces a rounded effect on the end of the stroke. The
    radius of this curve is also controlled by the  stroke-width .

Use  stroke-linejoin to control how the joint between two line segments
is drawn.

[The stroke-linejoin attribute changes the look at the point where two
lines join, with miter created an angled join, round rounding the
corner, and bevel creating a beveled edge, flattening the corner .]

xml

    <?xml version="1.0" standalone="no"?>
    <svg width="160" height="280" xmlns="http://www.w3.org/2000/svg" version="1.1">
      <polyline points="40 60 80 20 120 60" stroke="black" stroke-width="20"
          stroke-linecap="butt" fill="none" stroke-linejoin="miter"/>

      <polyline points="40 140 80 100 120 140" stroke="black" stroke-width="20"
          stroke-linecap="round" fill="none" stroke-linejoin="round"/>

      <polyline points="40 220 80 180 120 220" stroke="black" stroke-width="20"
          stroke-linecap="square" fill="none" stroke-linejoin="bevel"/>
    </svg>

Each of these polylines has two segments. The joint where the two meet
is controlled by the  stroke-linejoin attribute. There are three
possible values for this attribute.  miter extends the line slightly
beyond its normal width to create a square corner where only one angle
is used.  round creates a rounded line segment.  bevel creates a new
angle to aid in the transition between the two segments.

Finally, you can also use dashed line types on a stroke by specifying
the  stroke-dasharray attribute.

[Two custom dashed lines, one with evenly spaced dashes and the other
using a long-dash short dash using a stroke-dasharray attribute value.]

xml

    <?xml version="1.0" standalone="no"?>
    <svg width="200" height="150" xmlns="http://www.w3.org/2000/svg" version="1.1">
      <path d="M 10 75 Q 50 10 100 75 T 190 75" stroke="black"
        stroke-linecap="round" stroke-dasharray="5,10,5" fill="none"/>
      <path d="M 10 75 L 190 75" stroke="red"
        stroke-linecap="round" stroke-width="1" stroke-dasharray="5,5" fill="none"/>
    </svg>

The  stroke-dasharray attribute can take a series of comma and/or
whitespace separated numbers as its argument.

The first number specifies a distance for the filled area, and the
second a distance for the unfilled area. So in the above example, the
second path fills 5 pixel units, with 5 blank units until the next dash
of 5 units. You can specify more numbers if you would like a more
complicated dash pattern. The first example specifies three numbers, in
which case the renderer loops the numbers twice to create an even
pattern. So the first path renders 5 filled, 10 empty, 5 filled, and
then loops back to create 5 empty, 10 filled, 5 empty. The pattern then
repeats.

There are additional  stroke and  fill properties available, including
 fill-rule, which specifies how to color in shapes that overlap
themselves;  stroke-miterlimit , which determines if a stroke should
draw miters; and stroke-dashoffset , which specifies where to start a
dasharray on a line.

Using CSS

In addition to setting attributes on objects, you can also use CSS to
style fills and strokes. Not all attributes can be set via CSS.
Attributes that deal with painting and filling are usually available, so
 fill ,  stroke ,  stroke-dasharray , etc. can all be set this way, in
addition to the gradient and pattern versions of those shown below.
Attributes like  width ,  height , or  <path> commands cannot be set
through CSS. It's easiest just to test and find out what is available
and what isn't.

Note: The SVG specification decides strictly between attributes that are
properties and other attributes. The former can be modified with CSS,
the latter not.

CSS can be inserted inline with the element via the  style attribute:

xml

     <rect x="10" height="180" y="10" width="180" style="stroke: black; fill: red;"/>

Or it can be moved to a special style section that you include. Instead
of shoving such a section into a  <head> section like you do in HTML,
though, it's included in an area called  <defs> .

 <defs> stands for definitions, and it is here that you can create
elements that don't appear in the SVG directly, but are used by other
elements.

xml

    <?xml version="1.0" standalone="no"?>
    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg" version="1.1">
      <defs>
        <style><![CDATA[
           #MyRect {
             stroke: black;
             fill: red;
           }
        ]]></style>
      </defs>
      <rect x="10" height="180" y="10" width="180" id="MyRect"/>
    </svg>

Moving styles to an area like this can make it easier to adjust
properties on large groups of elements. You can also use things like the
 :hover pseudo class to create rollover effects:

css

    #MyRect:hover {
      stroke: black;
      fill: blue;
    }

You can also specify an external stylesheet for your CSS rules through
normal XML-stylesheet syntax :

xml

    <?xml version="1.0" standalone="no"?>
    <?xml-stylesheet type="text/css" href="style.css"?>

    <svg width="200" height="150" xmlns="http://www.w3.org/2000/svg" version="1.1">
      <rect height="10" width="10" id="MyRect"/>
    </svg>

Where  style.css looks something like:

css

    #MyRect {
      fill: red;
      stroke: black;
    }

-   « Previous
-   Next »

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Jan 3, 2024 by MDN contributors .
# Filter effects #

-   « Previous
-   Next »

There are situations where basic shapes do not provide the flexibility
you need to achieve a certain effect. Drop shadows, to provide a popular
example, cannot be created reasonably with a combination of gradients.
Filters are SVG's mechanism to create sophisticated effects.

A basic example is to add a blur effect to SVG content. While basic
blurs can be achieved with the help of gradients, the blur filter is
needed to do anything beyond.

Example

Filters are defined by the  <filter> element, which should be put in the
 <defs> section of your SVG file. Between the filter tags goes a list of
primitives : basic operations that build on top of the previous
operations (like blurring, adding a lighting effect, etc.). To apply
your created filter on a graphic element, you set the   filter 
attribute.

html

    <svg
      width="250"
      viewBox="0 0 200 85"
      xmlns="http://www.w3.org/2000/svg"
      version="1.1">
      <defs>
        <!-- Filter declaration -->
        <filter
          id="MyFilter"
          filterUnits="userSpaceOnUse"
          x="0"
          y="0"
          width="200"
          height="120">
          <!-- offsetBlur -->
          <feGaussianBlur in="SourceAlpha" stdDeviation="4" result="blur" />
          <feOffset in="blur" dx="4" dy="4" result="offsetBlur" />

          <!-- litPaint -->
          <feSpecularLighting
            in="blur"
            surfaceScale="5"
            specularConstant=".75"
            specularExponent="20"
            lighting-color="#bbbbbb"
            result="specOut">
            <fePointLight x="-5000" y="-10000" z="20000" />
          </feSpecularLighting>
          <feComposite
            in="specOut"
            in2="SourceAlpha"
            operator="in"
            result="specOut" />
          <feComposite
            in="SourceGraphic"
            in2="specOut"
            operator="arithmetic"
            k1="0"
            k2="1"
            k3="1"
            k4="0"
            result="litPaint" />

          <!-- merge offsetBlur + litPaint -->
          <feMerge>
            <feMergeNode in="offsetBlur" />
            <feMergeNode in="litPaint" />
          </feMerge>
        </filter>
      </defs>

      <!-- Graphic elements -->
      <g filter="url(#MyFilter)">
        <path
          fill="none"
          stroke="#D90000"
          stroke-width="10"
          d="M50,66 c-50,0 -50,-60 0,-60 h100 c50,0 50,60 0,60z" />
        <path
          fill="#D90000"
          d="M60,56 c-30,0 -30,-40 0,-40 h80 c30,0 30,40 0,40z" />
        <g fill="#FFFFFF" stroke="black" font-size="45" font-family="Verdana">
          <text x="52" y="52">SVG</text>
        </g>
      </g>
    </svg>

Step 1

html

    <feGaussianBlur in="SourceAlpha" stdDeviation="4" result="blur" />

 <feGaussianBlur> takes  in "SourceAlpha", which is the alpha channel of
the source graphic; applies a blur of 4; and stores the  result in a
temporary buffer named "blur".

Step 2

html

    <feOffset in="blur" dx="4" dy="4" result="offsetBlur" />

 <feOffset> takes  in "blur", which we previously created; shifts the
result "4" to the right and "4" to the bottom; and stores the  result in
the buffer "offsetBlur". The two first primitives just created a drop
shadow.

Step 3

html

    <feSpecularLighting
      in="offsetBlur"
      surfaceScale="5"
      specularConstant=".75"
      specularExponent="20"
      lighting-color="#bbbbbb"
      result="specOut">
      <fePointLight x="-5000" y="-10000" z="20000" />
    </feSpecularLighting>

 <feSpecularLighting> takes  in "offsetBlur", generates a lighting
effect, and stores the  result in the buffer "specOut".

Step 4

html

    <feComposite in="specOut" in2="SourceAlpha" operator="in" result="specOut" />

The first  <feComposite> takes  in "specOut" and "SourceAlpha", masks
out the result of "specOut" so that the result is not bigger than
"SourceAlpha" (the original source graphic), and overrides the  result
"specOut".

Step 5

html

    <feComposite
      in="SourceGraphic"
      in2="specOut"
      operator="arithmetic"
      k1="0"
      k2="1"
      k3="1"
      k4="0"
      result="litPaint" />

The second  <feComposite> takes  in "SourceGraphic" and "specOut", adds
the result of "specOut" on top of "SourceGraphic", and stores the
 result in "litPaint".

Step 6

html

    <feMerge>
      <feMergeNode in="offsetBlur" />
      <feMergeNode in="litPaint" />
    </feMerge>

Finally,  <feMerge> merges together "offsetBlur", which is the drop
shadow, and "litPaint", which is the original source graphic with a
lighting effect.

[Source graphic]

Source graphic

[Primitive 1]

Primitive 1

[Primitive 2]

Primitive 2

[Primitive 3]

Primitive 3

[Primitive 4]

Primitive 4

[Primitive 5]

Primitive 5

[Primitive 6]

Primitive 6

-   « Previous
-   Next »

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# Getting started #

-   « Previous
-   Next »

A simple example

Let us dive straight in with a simple example. Take a look at the
following code.

xml

    <svg version="1.1"
         width="300" height="200"
         xmlns="http://www.w3.org/2000/svg">

      <rect width="100%" height="100%" fill="red" />

      <circle cx="150" cy="100" r="80" fill="green" />

      <text x="150" y="125" font-size="60" text-anchor="middle" fill="white">SVG</text>

    </svg>

Copy the code and paste it in a file, demo1.svg. Then open the file in a
browser. It will render as shown in the following screenshot. (Firefox
users: click here )

[Red background composed of a centered green circle. White text centered
inside the circle is SVG.]

The rendering process involves the following:

1.  We start with the  <svg> root element:
    -   A doctype declaration as known from (X)HTML should be left off
        because DTD based SVG validation leads to more problems than it
        solves.
    -   Before SVG 2, to identify the version of the SVG for other types
        of validation the  version and  baseProfile attributes should
        always be used instead. Both  version and  baseProfile
        attributes are deprecated in SVG 2.
    -   As an XML dialect, SVG must always bind the namespaces correctly
        (in the xmlns attribute). See the Namespaces Crash Course page
        for more info.
2.  The background is set to red by drawing a rectangle  <rect> that
    covers the complete image area.
3.  A green circle  <circle> with a radius of 80px is drawn atop the
    center of the red rectangle (center of circle offset 150px to the
    right, and 100px downward from the top left corner).
4.  The text "SVG" is drawn. The interior of each letter is filled in
    with white. The text is positioned by setting an anchor where we
    want the midpoint to be: in this case, the midpoint should
    correspond to the center of the green circle. Fine adjustments can
    be made to the font size and vertical position to ensure the final
    result is aesthetically pleasing.

Basic properties of SVG files

-   The first important thing to notice is the order of rendering
    elements. The globally valid rule for SVG files is that later
    elements are rendered atop previous elements. The further down an
    element is the more it will be visible.
-   SVG files on the web can be displayed directly in the browser or
    embedded in HTML files via several methods:
    -   If the HTML is XHTML and is delivered as type
         application/xhtml+xml , the SVG can be directly embedded in the
        XML source.
    -   The SVG can also be directly embedded in HTML.
    -   An  img element can be used.
    -   The SVG file can be referenced with an  object element:
        html

            <object data="image.svg" type="image/svg+xml"></object>
    -   Likewise an  iframe element can be used:
        html

            <iframe src="image.svg"></iframe>
    -   Finally, SVG can be created dynamically with JavaScript and
        injected into the HTML DOM.
-   How SVG handles sizes and units will be explained on the next page .

SVG file types

SVG files come in two flavors. Normal SVG files are simple text files
containing SVG markup. The recommended filename extension for these
files is ".svg" (all lowercase).

Due to the potentially massive size SVG files can reach when used for
some applications (e.g., geographical applications), the SVG
specification also allows for gzip-compressed SVG files. The recommended
filename extension for these files is ".svgz" (all lowercase).
Unfortunately, it is very problematic to get gzip-compressed SVG files
to work reliably across all SVG capable user agents when served from a
Microsoft IIS server, and Firefox cannot load gzip-compressed SVG from
the local computer. Avoid gzip-compressed SVG except when you are
publishing to a web server that you know will serve it correctly (see
below).

A word on web servers for .svgz files

Now that you have an idea of how to create basic SVG files, the next
stage is to upload them to a web server. There are some gotchas at this
stage though. For normal SVG files, servers should send the HTTP
headers:

http

    Content-Type: image/svg+xml
    Vary: Accept-Encoding

For gzip-compressed SVG files, servers should send the HTTP headers:

http

    Content-Type: image/svg+xml
    Content-Encoding: gzip
    Vary: Accept-Encoding

You can check that your server is sending the correct HTTP headers with
your SVG files by using the Network Monitor panel or a site such as
websniffer.cc . Submit the URL of one of your SVG files and look at the
HTTP response headers. If you find that your server is not sending the
headers with the values given above, then you should contact your web
host. If you have problems convincing them to correctly configure their
servers for SVG, there may be ways to do it yourself. See the server
configuration page on the w3.org for a range of simple solutions.

Server misconfiguration is a very common reason for SVG failing to load,
so make sure you check yours. If your server is not configured to send
the correct headers with the SVG files it serves, then Firefox will most
likely show the markup of the files as text or encoded garbage, or even
ask the viewer to choose an application to open them.

-   « Previous
-   Next »

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on May 19, 2023 by MDN contributors .
# Gradients in SVG #

-   « Previous
-   Next »

Perhaps more exciting than just fills and strokes is the fact that you
can also create and apply gradients as either fills or strokes.

There are two types of SVG gradients: linear and radial. They are
defined separately from where they are used, which promotes reusability.
You must give each gradient an  id attribute to allow other elements to
reference it. Gradient definitions can be placed in a  <defs> element or
an  <svg> element.

Linear Gradient

Linear gradients change along a straight line. To insert one, you create
a  <linearGradient> node inside the  <defs> section of your SVG file.

Basic example

html

    <svg width="120" height="240" version="1.1" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <linearGradient id="Gradient1">
          <stop class="stop1" offset="0%" />
          <stop class="stop2" offset="50%" />
          <stop class="stop3" offset="100%" />
        </linearGradient>
        <linearGradient id="Gradient2" x1="0" x2="0" y1="0" y2="1">
          <stop offset="0%" stop-color="red" />
          <stop offset="50%" stop-color="black" stop-opacity="0" />
          <stop offset="100%" stop-color="blue" />
        </linearGradient>
      </defs>
      <style>
        #rect1 {
          fill: url(#Gradient1);
        }
        .stop1 {
          stop-color: red;
        }
        .stop2 {
          stop-color: black;
          stop-opacity: 0;
        }
        .stop3 {
          stop-color: blue;
        }
      </style>

      <rect id="rect1" x="10" y="10" rx="15" ry="15" width="100" height="100" />
      <rect
        x="10"
        y="120"
        rx="15"
        ry="15"
        width="100"
        height="100"
        fill="url(#Gradient2)" />
    </svg>

Above is an example of a linear gradient being applied to a  <rect>
element. Inside the linear gradient are several  <stop> nodes. These
nodes tell the gradient what color it should be at certain positions by
specifying an  offset attribute for the position, and a  stop-color
attribute. This can be assigned directly or through CSS. The two methods
have been intermixed for the purposes of this example. For instance,
this one tells the gradient to start at the color red, change to
transparent-black in the middle, and end at the color blue. You can
insert as many stop colors as you like to create a blend that's as
beautiful or hideous as you need, but the offsets should always increase
from 0% (or 0 if you want to drop the % sign) to 100% (or 1). Duplicate
values will use the stop that is assigned furthest down the XML tree.
Also, like with fill and stroke, you can specify a  stop-opacity
attribute to set the opacity at that position (again, in FF3 you can
also use rgba values to do this).

svg

    <stop offset="100%" stop-color="yellow" stop-opacity="0.5"/>

To use a gradient, you have to reference it from an object's  fill or
 stroke attribute. This is done the same way you reference elements in
CSS, using a  url . In this case, the url is just a reference to our
gradient, which has the creative ID, "Gradient1". To attach it, set the
 fill to  url(#Gradient1) , and voilà! Our object is now multicolored.
You can do the same with  stroke .

svg

    <style>
      #rect1 { fill: url(#Gradient1); }
    </style>

The  <linearGradient> element also takes several other attributes, which
specify the size and appearance of the gradient. The orientation of the
gradient is controlled by two points, designated by the attributes  x1 ,
 x2 ,  y1 , and  y2 . These attributes define a line along which the
gradient travels. The gradient defaults to a horizontal orientation, but
it can be rotated by changing these. Gradient2 in the above example is
designed to create a vertical gradient.

html

    <linearGradient id="Gradient2" x1="0" x2="0" y1="0" y2="1"></linearGradient>

Note: You can also use the  href attribute on gradients too. When it is
used, attributes and stops from one gradient can be included on another.
In the above example, you wouldn't have to recreate all the stops in
Gradient2.

html

    <linearGradient id="Gradient1">
      <stop id="stop1" offset="0%" />
      <stop id="stop2" offset="50%" />
      <stop id="stop3" offset="100%" />
    </linearGradient>
    <linearGradient
      id="Gradient2"
      x1="0"
      x2="0"
      y1="0"
      y2="1"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      href="#Gradient1" />

I've included the xlink namespace here directly on the node, although
usually you would define it at the top of your document. More on that
when we talk about images .

Radial Gradient

Radial gradients are similar to linear ones but draw a gradient that
radiates out from a point. To create one you add a  <radialGradient>
element to the  <defs> section of your document.

Basic example

html

    <?xml version="1.0" standalone="no"?>
    <svg width="120" height="240" version="1.1" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <radialGradient id="RadialGradient1">
          <stop offset="0%" stop-color="red" />
          <stop offset="100%" stop-color="blue" />
        </radialGradient>
        <radialGradient id="RadialGradient2" cx="0.25" cy="0.25" r="0.25">
          <stop offset="0%" stop-color="red" />
          <stop offset="100%" stop-color="blue" />
        </radialGradient>
      </defs>

      <rect
        x="10"
        y="10"
        rx="15"
        ry="15"
        width="100"
        height="100"
        fill="url(#RadialGradient1)" />
      <rect
        x="10"
        y="120"
        rx="15"
        ry="15"
        width="100"
        height="100"
        fill="url(#RadialGradient2)" />
    </svg>

The stops used here are the same as before, but now the object will be
red in the center, and in all directions gradually change to blue at the
edge. Like linear gradients, the  <radialGradient> node can take several
attributes to describe its position and orientation. However, unlike
linear gradients, it's a bit more complex. The radial gradient is again
defined by two points, which determine where its edges are. The first of
these defines a circle around which the gradient ends. It requires a
center point, designated by the  cx and  cy attributes, and a radius,  r
. Setting these three attributes will allow you to move the gradient
around and change its size, as shown in the second  rect above.

The second point is called the focal point and is defined by the  fx and
 fy attributes. While the first point described where the edges of the
gradient were, the focal point describes where its middle is. This is
easier to see with an example.

Center and focal point

html

    <?xml version="1.0" standalone="no"?>

    <svg width="120" height="120" version="1.1" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <radialGradient id="Gradient" cx="0.5" cy="0.5" r="0.5" fx="0.25" fy="0.25">
          <stop offset="0%" stop-color="red" />
          <stop offset="100%" stop-color="blue" />
        </radialGradient>
      </defs>

      <rect
        x="10"
        y="10"
        rx="15"
        ry="15"
        width="100"
        height="100"
        fill="url(#Gradient)"
        stroke="black"
        stroke-width="2" />

      <circle
        cx="60"
        cy="60"
        r="50"
        fill="transparent"
        stroke="white"
        stroke-width="2" />
      <circle cx="35" cy="35" r="2" fill="white" stroke="white" />
      <circle cx="60" cy="60" r="2" fill="white" stroke="white" />
      <text x="38" y="40" fill="white" font-family="sans-serif" font-size="10pt">
        (fx,fy)
      </text>
      <text x="63" y="63" fill="white" font-family="sans-serif" font-size="10pt">
        (cx,cy)
      </text>
    </svg>

If the focal point is moved outside the circle described earlier, it's
impossible for the gradient to be rendered correctly, so the spot will
be assumed to be within the edge of the circle. If the focal point isn't
given at all, it's assumed to be at the same place as the center point.

Both linear and radial gradients also take a few other attributes to
describe transformations they may undergo. The only other one I want to
mention here is the  spreadMethod attribute. This attribute controls
what happens when the gradient reaches its end, but the object isn't
filled yet. It can take on one of three values,  "pad" ,  "reflect" , or
 "repeat" .  "pad" is what you have seen so far. When the gradient
reaches its end, the final offset color is used to fill the rest of the
object.  "reflect" causes the gradient to continue on, but reflected in
reverse, starting with the color offset at 100% and moving back to the
offset at 0%, and then back up again.  "repeat" also lets the gradient
continue, but instead of going backwards, it just jumps back to the
beginning and runs again.

spreadMethod

html

    <?xml version="1.0" standalone="no"?>

    <svg width="220" height="220" version="1.1" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <radialGradient
          id="GradientPad"
          cx="0.5"
          cy="0.5"
          r="0.4"
          fx="0.75"
          fy="0.75"
          spreadMethod="pad">
          <stop offset="0%" stop-color="red" />
          <stop offset="100%" stop-color="blue" />
        </radialGradient>
        <radialGradient
          id="GradientRepeat"
          cx="0.5"
          cy="0.5"
          r="0.4"
          fx="0.75"
          fy="0.75"
          spreadMethod="repeat">
          <stop offset="0%" stop-color="red" />
          <stop offset="100%" stop-color="blue" />
        </radialGradient>
        <radialGradient
          id="GradientReflect"
          cx="0.5"
          cy="0.5"
          r="0.4"
          fx="0.75"
          fy="0.75"
          spreadMethod="reflect">
          <stop offset="0%" stop-color="red" />
          <stop offset="100%" stop-color="blue" />
        </radialGradient>
      </defs>

      <rect
        x="10"
        y="10"
        rx="15"
        ry="15"
        width="100"
        height="100"
        fill="url(#GradientPad)" />
      <rect
        x="10"
        y="120"
        rx="15"
        ry="15"
        width="100"
        height="100"
        fill="url(#GradientRepeat)" />
      <rect
        x="120"
        y="120"
        rx="15"
        ry="15"
        width="100"
        height="100"
        fill="url(#GradientReflect)" />

      <text x="15" y="30" fill="white" font-family="sans-serif" font-size="12pt">
        Pad
      </text>
      <text x="15" y="140" fill="white" font-family="sans-serif" font-size="12pt">
        Repeat
      </text>
      <text x="125" y="140" fill="white" font-family="sans-serif" font-size="12pt">
        Reflect
      </text>
    </svg>

Both gradients also have an attribute named  gradientUnits , which
describes the unit system you're going to use when you describe the size
or orientation of the gradient. There are two possible values to use
here:  "userSpaceOnUse" or  "objectBoundingBox" .  "objectBoundingBox"
is the default, so that's what has been shown so far. It essentially
scales the gradient to the size of your object, so you only have to
specify coordinates in values from zero to one, and they're scaled to
the size of your object automatically for you.  userSpaceOnUse
essentially takes in absolute units. So you have to know where your
object is, and place the gradient at the same place. The radialGradient
above would be rewritten:

html

    <radialGradient
      id="Gradient"
      cx="60"
      cy="60"
      r="50"
      fx="35"
      fy="35"
      gradientUnits="userSpaceOnUse"></radialGradient>

You can also then apply another transformation to the gradient by using
the  gradientTransform attribute, but since we haven't introduced
transforms yet, I'll leave that for later.

There are some other caveats for dealing with
 gradientUnits="objectBoundingBox" when the object bounding box isn't
square, but they're fairly complex and will have to wait for someone
more in-the-know to explain them.

-   « Previous
-   Next »

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 30, 2023 by MDN contributors .
# SVG Tutorial #

Scalable Vector Graphics, SVG , is a W3C XML dialect to mark up
graphics.

This tutorial aims to explain the internals of SVG and is packed with
technical details. If you just want to draw beautiful images, you might
find more useful resources at Inkscape's documentation page . Another
good introduction to SVG is provided by the W3C's SVG Primer .

Introducing SVG from Scratch

-   Introduction
-   Getting Started
-   Positions
-   Basic Shapes
-   Paths
-   Fills and Strokes
-   Gradients
-   Patterns
-   Texts
-   Basic Transformations
-   Clipping and masking
-   Other content in SVG
-   Filter effects
-   SVG fonts
-   SVG Image tag
-   Tools for SVG
-   SVG and CSS

The following topics are more advanced and hence should get their own
tutorials.

Scripting SVG with JavaScript

TBD

SVG filters tutorial

TBD

Animations with SMIL in SVG

TBD

Creating fonts in SVG

TBD

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# Introduction #

-   « Previous
-   Next »

SVG is an XML language, similar to XHTML , which can be used to draw
vector graphics, such as the one shown below. It can be used to create
an image either by specifying all the lines and shapes necessary, by
modifying already existing raster images, or by a combination of both.
The image and its components can also be transformed, composited
together, or filtered to change their appearance completely.

[Mozilla dino logo]

SVG came about in 1999 after several competing formats had been
submitted to the W3C and failed to be fully ratified. SVG is supported
by all major browsers . A downside is loading SVG can be slow. SVG does
offer benefits, some of which include having a DOM interface available
for it, and not requiring third-party extensions. Whether or not to use
it often depends on your specific use case.

Basic ingredients

HTML provides elements for defining headers, paragraphs, tables, and so
on. In much the same way, SVG provides elements for circles, rectangles,
and simple and complex curves. A simple SVG document consists of nothing
more than the  <svg> root element and several basic shapes that build a
graphic together. In addition, there is the  <g> element, which is used
to group several basic shapes together.

Starting from this basic structure, the SVG image can become arbitrarily
complex. SVG supports gradients, rotations, filter effects, animations,
interactivity with JavaScript, and so on. But all these extra features
of the language rely on this relatively small set of elements to define
the graphics area.

Before you start

There are a number of drawing applications available, such as Inkscape ,
which are free and use SVG as their native file format. However, this
tutorial will rely on the trusty XML or text editor (your choice). The
idea is to teach the internals of SVG to those who want to understand
it, and that is best done by dirtying your hands with a bit of markup.
You should note your final goal though. Not all SVG viewers are equal
and so there is a good chance that something written for one app will
not display exactly the same in another, because they support different
levels of the SVG specification or another specification that you are
using along with SVG (that is, JavaScript or CSS ).

SVG is supported in all modern browsers and even a couple versions back
in some cases. A fairly complete browser support table can be found on
Can I use . Firefox has supported some SVG content since version 1.5,
and that support level has been growing with each release since.
Hopefully, along with the tutorial here, MDN can help developers keep up
with the differences between Gecko and some of the other major
implementations.

Before starting you should have a basic understanding of XML or another
markup language such as HTML. If you are not too familiar with XML, here
are some guidelines to keep in mind:

-   SVG elements and attributes should all be entered in the case shown
    here since XML is case-sensitive (unlike HTML).
-   Attribute values in SVG must be placed inside quotes, even if they
    are numbers.

SVG is a huge specification. This tutorial attempts to cover the basics.
Once you are familiar, you should be able to use the Element Reference
and the Interface Reference to find out anything else you need to know.

Flavors of SVG

Since becoming a recommendation in 2003, the most recent "full" SVG
version is 1.1. It builds on top of SVG 1.0, but adds more
modularization to ease implementation. The second edition of SVG 1.1
became a Recommendation in 2011. "Full" SVG 1.2 was meant to be the next
major release of SVG. It was dropped for the upcoming SVG 2.0 , which is
under heavy development right now and follows a similar approach to CSS
3 in that it splits components into several loosely coupled
specifications.

Apart from the full SVG recommendations, the working group at the W3C
introduced SVG Tiny and SVG Basic in 2003. These two profiles are aimed
mainly at mobile devices. The first, SVG Tiny, should yield graphics
primitives for small devices with low capabilities. SVG Basic offers
many features of full SVG, but doesn't include the ones which are hard
to implement or heavy to render (like animations). In 2008, SVG Tiny 1.2
became a W3C Recommendation.

There were plans for an SVG Print specification, which would add support
for multiple pages and enhanced color management. This work was
discontinued.

-   « Previous
-   Next »

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# Other content in SVG #

-   « Previous
-   Next »

Apart from graphic primitives like rectangles and circles, SVG offers a
set of elements to embed other types of content in images as well.

Embedding raster images

Much like the img element in HTML SVG has an  image element to serve the
same purpose. You can use it to embed arbitrary raster (and vector)
images. The specification requests applications to support at least PNG,
JPEG and SVG format files.

The embedded picture becomes a normal SVG element. This means, that you
can use clips, masks, filters, rotations and all other tools of SVG on
the content:

html

    <svg
      version="1.1"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      width="200"
      height="200">
      <image
        x="90"
        y="-65"
        width="128"
        height="146"
        transform="rotate(45)"
        href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image/mdn_logo_only_color.png" />
    </svg>

Embedding arbitrary XML

Since SVG is an XML application, you can of course always embed
arbitrary XML anywhere in an SVG document. But then you have no means to
define how the surrounding SVG should react on the content. Actually, in
a conforming viewer it will react in no way at all, the data will be
omitted. Therefore the specification adds the    <foreignObject> element
to SVG. Its sole purpose is to be a container for other markup and a
carrier for SVG styling attributes (most prominently  width and  height
to define the space the object will take).

The  foreignObject element is a good way to embed XHTML in SVG. If you
have longer texts, the HTML layout is more suitable and comfortable than
the SVG  text element. Another often cited use case is the embedding of
formulas with MathML. For scientific applications of SVG this is a very
good way to join both worlds.

Note: Please keep in mind, that the content of the  foreignObject must
be processable by the viewer. A standalone SVG viewer is unlikely to be
able to render HTML or MathML.

Since the  foreignObject is an SVG element, you can, like in the case of
 image , use any SVG goodness with it, which then will be applied to its
content.

-   « Previous
-   Next »

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# Paths #

-   « Previous
-   Next »

The  <path> element is the most powerful element in the SVG library of
basic shapes . It can be used to create lines, curves, arcs, and more.

Paths create complex shapes by combining multiple straight lines or
curved lines. Complex shapes composed only of straight lines can be
created as  <polyline> elements. While  <polyline> and  <path> elements
can create similar-looking shapes,  <polyline> elements require a lot of
small straight lines to simulate curves and don't scale well to larger
sizes.

A good understanding of paths is important when drawing SVGs. While
creating complex paths using an XML editor or text editor is not
recommended, understanding how they work will allow to identify and
repair display issues in SVGs.

The shape of a  <path> element is defined by one parameter:   d  . (See
more in basic shapes .) The  d attribute contains a series of commands
and parameters used by those commands.

Each of the commands is instantiated (for example, creating a class,
naming and locating it) by a specific letter. For instance, let's move
to the x and y coordinates (  10 ,  10 ). The "Move to" command is
called with the letter  M . When the parser runs into this letter, it
knows it needs to move to a point. So, to move to (  10 ,  10 ) the
command to use would be  M 10 10 . After that, the parser begins reading
for the next command.

All of the commands also come in two variants. An uppercase letter
specifies absolute coordinates on the page, and a lowercase letter
specifies relative coordinates (e.g., move 10px up and 7px to the left
from the last point ).

Coordinates in the  d parameter are always unitless and hence in the
user coordinate system. Later, we will learn how paths can be
transformed to suit other needs.

Line commands

There are five line commands for  <path> nodes. The first command is the
"Move To" or  M , which was described above. It takes two parameters, a
coordinate (  x ) and coordinate (  y ) to move to. If the cursor was
already somewhere on the page, no line is drawn to connect the two
positions. The "Move To" command appears at the beginning of paths to
specify where the drawing should start. For example:

    M x y
    (or)
    m dx dy

In the following example there's only a point at (  10 ,  10 ). Note,
though, that it wouldn't show up if a path was just drawn normally. For
example:

[A red dot is drawn on a white square 10 pixels down and 10 pixels to
the right. This dot would not normally show but is used as an example of
where the cursor will start after the "Move To" command]

xml

    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">

      <path d="M10 10"/>

      <!-- Points -->
      <circle cx="10" cy="10" r="2" fill="red"/>

    </svg>

There are three commands that draw lines. The most generic is the "Line
To" command, called with  L .  L takes two parameters—x and y
coordinates—and draws a line from the current position to a new
position.

    L x y
    (or)
    l dx dy

There are two abbreviated forms for drawing horizontal and vertical
lines.  H draws a horizontal line, and  V draws a vertical line. Both
commands only take one parameter since they only move in one direction.

    H x
    (or)
    h dx

    V y
    (or)
    v dy

An easy place to start is by drawing a shape. We will start with a
rectangle (the same type that could be more easily made with a  <rect>
element). It's composed of horizontal and vertical lines only.

[A square with black fill is drawn within a white square. The black
square's edges begin at position (10,10), move horizontally to position
(90,10), move vertically to position (90,90), move horizontally back to
position (10,90), and finally move back to the original position (10,
10).]

xml

    <svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">

      <path d="M 10 10 H 90 V 90 H 10 L 10 10"/>

      <!-- Points -->
      <circle cx="10" cy="10" r="2" fill="red"/>
      <circle cx="90" cy="90" r="2" fill="red"/>
      <circle cx="90" cy="10" r="2" fill="red"/>
      <circle cx="10" cy="90" r="2" fill="red"/>

    </svg>

We can shorten the above path declaration a little bit by using the
"Close Path" command, called with  Z . This command draws a straight
line from the current position back to the first point of the path. It
is often placed at the end of a path node, although not always. There is
no difference between the uppercase and lowercase command.

    Z
    (or)
    z

So our path above could be shortened to:

xml

     <path d="M 10 10 H 90 V 90 H 10 Z" fill="transparent" stroke="black"/>

The relative forms of these commands can also be used to draw the same
picture. Relative commands are called by using lowercase letters, and
rather than moving the cursor to an exact coordinate, they move it
relative to its last position. For instance, since our rectangle is
80×80, the  <path> element could have been written as:

xml

     <path d="M 10 10 h 80 v 80 h -80 Z" fill="transparent" stroke="black"/>

The path will move to point (  10 ,  10 ) and then move horizontally 80
points to the right, then 80 points down, then 80 points to the left,
and then back to the start.

In these examples, it would probably be simpler to use the  <polygon> or
 <polyline> elements. However, paths are used so often in drawing SVG
that developers may be more comfortable using them instead. There is no
real performance penalty or bonus for using one or the other.

Curve commands

There are three different commands that can be used to create smooth
curves. Two of those curves are Bézier curves , and the third is an
"arc" or part of a circle. You might have already gained practical
experience with Bézier curves using path tools in Inkscape, Illustrator
or Photoshop. There are an infinite number of Bézier curves, but only
two simple ones are available in  <path> elements: a cubic one, called
with  C , and a quadratic one, called with  Q .

Bézier Curves

The cubic curve,  C , is the slightly more complex curve. Cubic Béziers
take in two control points for each point. Therefore, to create a cubic
Bézier, three sets of coordinates need to be specified.

    C x1 y1, x2 y2, x y
    (or)
    c dx1 dy1, dx2 dy2, dx dy

The last set of coordinates here (  x ,  y ) specify where the line
should end. The other two are control points. (  x1 ,  y1 ) is the
control point for the start of the curve, and (  x2 ,  y2 ) is the
control point for the end. The control points essentially describe the
slope of the line starting at each point. The Bézier function then
creates a smooth curve that transfers from the slope established at the
beginning of the line, to the slope at the other end.

[Cubic Bézier Curves with grid]

xml

    <svg width="190" height="160" xmlns="http://www.w3.org/2000/svg">

      <path d="M 10 10 C 20 20, 40 20, 50 10" stroke="black" fill="transparent"/>
      <path d="M 70 10 C 70 20, 110 20, 110 10" stroke="black" fill="transparent"/>
      <path d="M 130 10 C 120 20, 180 20, 170 10" stroke="black" fill="transparent"/>
      <path d="M 10 60 C 20 80, 40 80, 50 60" stroke="black" fill="transparent"/>
      <path d="M 70 60 C 70 80, 110 80, 110 60" stroke="black" fill="transparent"/>
      <path d="M 130 60 C 120 80, 180 80, 170 60" stroke="black" fill="transparent"/>
      <path d="M 10 110 C 20 140, 40 140, 50 110" stroke="black" fill="transparent"/>
      <path d="M 70 110 C 70 140, 110 140, 110 110" stroke="black" fill="transparent"/>
      <path d="M 130 110 C 120 140, 180 140, 170 110" stroke="black" fill="transparent"/>

    </svg>

The example above creates nine cubic Bézier curves. As the curves move
toward the right, the control points become spread out horizontally. As
the curves move downward, they become further separated from the end
points. The thing to note here is that the curve starts in the direction
of the first control point, and then bends so that it arrives along the
direction of the second control point.

Several Bézier curves can be strung together to create extended, smooth
shapes. Often, the control point on one side of a point will be a
reflection of the control point used on the other side to keep the slope
constant. In this case, a shortcut version of the cubic Bézier can be
used, designated by the command  S (or  s ).

    S x2 y2, x y
    (or)
    s dx2 dy2, dx dy

 S produces the same type of curve as earlier—but if it follows another
 S command or a  C command, the first control point is assumed to be a
reflection of the one used previously. If the  S command doesn't follow
another  S or  C command, then the current position of the cursor is
used as the first control point. The result is not the same as what the
 Q command would have produced with the same parameters, but is similar.

An example of this syntax is shown below, and in the figure to the left
the specified control points are shown in red, and the inferred control
point in blue.

[A smooth S-shaped curve is drawn from two Bézier curves. The second
curve keeps the same slope of the control points as the first curve,
which is reflected to the other side.]

xml

    <svg width="190" height="160" xmlns="http://www.w3.org/2000/svg">
      <path d="M 10 80 C 40 10, 65 10, 95 80 S 150 150, 180 80" stroke="black" fill="transparent"/>
    </svg>

The other type of Bézier curve, the quadratic curve called with  Q , is
actually a simpler curve than the cubic one. It requires one control
point which determines the slope of the curve at both the start point
and the end point. It takes two parameters: the control point and the
end point of the curve.

Note: The co-ordinate deltas for  q are both relative to the previous
point (that is,  dx and  dy are not relative to  dx1 and  dy1 ).

    Q x1 y1, x y
    (or)
    q dx1 dy1, dx dy

[Quadratic Bézier with grid]

xml

    <svg width="190" height="160" xmlns="http://www.w3.org/2000/svg">
      <path d="M 10 80 Q 95 10 180 80" stroke="black" fill="transparent"/>
    </svg>

As with the cubic Bézier curve, there is a shortcut for stringing
together multiple quadratic Béziers, called with  T .

    T x y
    (or)
    t dx dy

This shortcut looks at the previous control point used and infers a new
one from it. This means that after the first control point, fairly
complex shapes can be made by specifying only end points.

This only works if the previous command was a  Q or a  T command. If
not, then the control point is assumed to be the same as the previous
point, and only lines will be drawn.

[Two quadratic curves form one smooth S-shaped curve. The second curve's
control points are reflected across the horizontal axis]

xml

    <svg width="190" height="160" xmlns="http://www.w3.org/2000/svg">
      <path d="M 10 80 Q 52.5 10, 95 80 T 180 80" stroke="black" fill="transparent"/>
    </svg>

Both curves produce similar results, although the cubic one allows
greater freedom in exactly what the curve looks like. Deciding which
curve to use is situational and depends on the amount of symmetry the
line has.

Arcs

The other type of curved line that can be created using SVG is the arc,
called with the  A command. Arcs are sections of circles or ellipses.

For a given x-radius and y-radius, there are two ellipses that can
connect any two points (as long as they're within the radius of the
circle). Along either of those circles, there are two possible paths
that can be taken to connect the points—so in any situation, there are
four possible arcs available.

Because of that, arcs require quite a few parameters:

    A rx ry x-axis-rotation large-arc-flag sweep-flag x y
    a rx ry x-axis-rotation large-arc-flag sweep-flag dx dy

At its start, the arc element takes in two parameters for the x-radius
and y-radius. If needed, see  <ellipse> s and how they behave. The final
two parameters designate the x and y coordinates to end the stroke.
Together, these four values define the basic structure of the arc.

The third parameter describes the rotation of the arc. This is best
explained with an example:

[SVGArcs_XAxisRotation_with_grid]

xml

    <svg width="320" height="320" xmlns="http://www.w3.org/2000/svg">
      <path d="M 10 315
               L 110 215
               A 30 50 0 0 1 162.55 162.45
               L 172.55 152.45
               A 30 50 -45 0 1 215.1 109.9
               L 315 10" stroke="black" fill="green" stroke-width="2" fill-opacity="0.5"/>
    </svg>

The example shows a  <path> element that goes diagonally across the
page. At its center, two elliptical arcs have been cut out (x radius =
 30 , y radius =  50 ). In the first one, the x-axis-rotation has been
left at  0 , so the ellipse that the arc travels around (shown in gray)
is oriented straight up and down. For the second arc, though, the
x-axis-rotation is set to  -45 degrees. This rotates the ellipse so that
it is aligned with its minor axis along the path direction, as shown by
the second ellipse in the example image.

For the unrotated ellipse in the image above, there are only two
different arcs and not four to choose from because the line drawn from
the start and end of the arc goes through the center of the ellipse. In
a slightly modified example the two ellipses that form the four
different arcs can be seen:

[Show the 4 arcs on the Ellipse example]

xml

    <svg xmlns="http://www.w3.org/2000/svg" width="320" height="320">
      <path d="M 10 315
               L 110 215
               A 36 60 0 0 1 150.71 170.29
               L 172.55 152.45
               A 30 50 -45 0 1 215.1 109.9
               L 315 10" stroke="black" fill="green" stroke-width="2" fill-opacity="0.5"/>
      <circle cx="150.71" cy="170.29" r="2" fill="red"/>
      <circle cx="110" cy="215" r="2" fill="red"/>
      <ellipse cx="144.931" cy="229.512" rx="36" ry="60" fill="transparent" stroke="blue"/>
      <ellipse cx="115.779" cy="155.778" rx="36" ry="60" fill="transparent" stroke="blue"/>
    </svg>

Notice that each of the blue ellipses are formed by two arcs, depending
on traveling clockwise or counter-clockwise. Each ellipse has one short
arc and one long arc. The two ellipses are just mirror images of each
other. They are flipped along the line formed from the start→end points.

If the start→end points are farther than the ellipse's  x and  y radius
can reach, the ellipse's radii will be minimally expanded so it could
reach the start→end points. The interactive codepen at the bottom of
this page demonstrates this well. To determine if an ellipse's radii are
large enough to require expanding, a system of equations would need to
be solved, such as this on wolfram alpha . This computation is for the
non-rotated ellipse with start→end (  110 ,  215 )→(  150.71 ,  170.29
). The solution, (  x ,  y ), is the center of the ellipse(s). The
solution will be imaginary if the ellipse's radii are too small. This
second computation is for the non-rotated ellipse with start→end (  110
,  215 )→(  162.55 ,  162.45 ). The solution has a small imaginary
component because the ellipse was just barely expanded.

The four different paths mentioned above are determined by the next two
parameter flags. As mentioned earlier, there are still two possible
ellipses for the path to travel around and two different possible paths
on both ellipses, giving four possible paths. The first parameter is the
 large-arc-flag . It determines if the arc should be greater than or
less than 180 degrees; in the end, this flag determines which direction
the arc will travel around a given circle. The second parameter is the
 sweep-flag . It determines if the arc should begin moving at positive
angles or negative ones, which essentially picks which of the two
circles will be traveled around. The example below shows all four
possible combinations, along with the two circles for each case.

[Four examples are shown for each combination of large-arc-flag and
sweep-flag for two circles overlapping, one in the top right, the other
in the bottom left. For sweep-flag = 0, when large-arc-flag = 0, the
interior arc of the top right circle is drawn, and when large-arc-flag =
1, the exterior arc of the bottom left circle is drawn. For sweep-flag =
1, when large-arc-flag = 0, the interior arc of the bottom left circle
is drawn, and when large-arc-flag = 1, the exterior arc of the top right
circle is drawn.]

xml

    <svg width="325" height="325" xmlns="http://www.w3.org/2000/svg">
      <path d="M 80 80
               A 45 45, 0, 0, 0, 125 125
               L 125 80 Z" fill="green"/>
      <path d="M 230 80
               A 45 45, 0, 1, 0, 275 125
               L 275 80 Z" fill="red"/>
      <path d="M 80 230
               A 45 45, 0, 0, 1, 125 275
               L 125 230 Z" fill="purple"/>
      <path d="M 230 230
               A 45 45, 0, 1, 1, 275 275
               L 275 230 Z" fill="blue"/>
    </svg>

Arcs are an easy way to create pieces of circles or ellipses in
drawings. For instance, a pie chart would require a different arc for
each piece.

If transitioning to SVG from  <canvas> , arcs can be the hardest thing
to learn, but are also much more powerful. Complete circles and ellipses
are the only shapes that SVG arcs have trouble drawing. Because the
start and end points for any path going around a circle are the same
point, there are an infinite number of circles that could be chosen, and
the actual path is undefined. It's possible to approximate them by
making the start and end points of the path slightly askew, and then
connecting them with another path segment. For example, it's possible to
make a circle with an arc for each semi-circle. At that point, it's
often easier to use a real  <circle> or  <ellipse> node instead. This
interactive demo might help understand the concepts behind SVG arcs:
https://codepen.io/lingtalfi/pen/yaLWJG (tested in Chrome and Firefox
only, might not work in your browser)

-   « Previous
-   Next »

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 27, 2023 by MDN contributors .
# Patterns #

-   « Previous
-   Next »

Patterns

Patterns are arguably one of the more confusing fill types to use in
SVG. They're also very powerful, so they're worth talking about and
getting at least a fundamental grasp on. Like gradients, the  <pattern>
element should be put in the  <defs> section of your SVG file.

html

    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <linearGradient id="Gradient1">
          <stop offset="5%" stop-color="white" />
          <stop offset="95%" stop-color="blue" />
        </linearGradient>
        <linearGradient id="Gradient2" x1="0" x2="0" y1="0" y2="1">
          <stop offset="5%" stop-color="red" />
          <stop offset="95%" stop-color="orange" />
        </linearGradient>

        <pattern id="Pattern" x="0" y="0" width=".25" height=".25">
          <rect x="0" y="0" width="50" height="50" fill="skyblue" />
          <rect x="0" y="0" width="25" height="25" fill="url(#Gradient2)" />
          <circle
            cx="25"
            cy="25"
            r="20"
            fill="url(#Gradient1)"
            fill-opacity="0.5" />
        </pattern>
      </defs>

      <rect fill="url(#Pattern)" stroke="black" width="200" height="200" />
    </svg>

Inside the  <pattern> element, you can include any of the other basic
shapes you've included before, and each of them can be styled using any
of the styles you've learned before, including gradients and opacity.
Here, we've just drawn two rectangle elements inside the pattern (which
overlap, and one of which is twice the size of the other and is used to
fill in the entire pattern), and one circle.

The confusing thing about patterns is defining a unit system and their
size. In the example above, we've defined a  width and  height attribute
on the pattern element to describe how far the pattern should go before
it begins repeating itself again. There are also  x and  y attributes
available if you want to offset the start point of this rectangle
somewhere within your drawing. The reason they've been used here is
described below.

As with the  gradientUnits attribute used above, patterns also have an
attribute,  patternUnits , which specifies the units that these
attributes will take. It defaults to  "objectBoundingBox" as it did
above, so a value of  1 is scaled to the  width and  height of the
object you're applying the pattern to. Since, in this case, we wanted
the pattern to repeat 4 times horizontally and vertically, the  height
and  width are set to  0.25 . This means the pattern's  width and
 height is only  0.25 of the total box size.

Unlike gradients, patterns have a second attribute,  patternContentUnits
, which describes the units system used inside the pattern element, on
the basic shapes themselves. This attribute defaults to
 "userSpaceOnUse" , the opposite of the  patternUnits attribute. What
this means is that unless you specify one or both of these attributes (
 patternContentUnits and  patternUnits ), the shapes you draw inside
your pattern are being drawn in a different coordinate system than the
pattern element is using, which can make things a bit confusing when
you're writing this by hand.

To make this work in the example above, we had to consider the size of
our box (200 pixels) and the fact that we wanted the pattern to repeat
itself 4 times horizontally and vertically. This means that each pattern
unit was a 50×50 square. The two rects and the circle inside the pattern
were then sized to fit in a 50×50 box. Anything we had drawn outside
that box wouldn't have been shown. The pattern also had to be offset by
10 pixels so that it would start in the upper-left corner of our box, so
the  x and  y attributes of the  pattern had to be adjusted to 10÷200 =
0.05.

The caveat here is that if the object changes size, the pattern itself
will scale to fit it, but the objects inside will not. So while we would
still have 4 repeating units inside the pattern, the objects composing
that pattern would remain the same size, and you end up with large areas
of nothing in between them. By changing the  patternContentUnits
attribute, we can put all the elements into the same unit system:

xml

     <pattern id="Pattern" width=".25" height=".25" patternContentUnits="objectBoundingBox">
       <rect x="0" y="0" width=".25" height=".25" fill="skyblue"/>
       <rect x="0" y="0" width=".125" height=".125" fill="url(#Gradient2)"/>
       <circle cx=".125" cy=".125" r=".1" fill="url(#Gradient1)" fill-opacity="0.5"/>
     </pattern>

Now, because the pattern content is in the same unit system as the
pattern, we don't have to offset the box so that the pattern starts in
the correct place, and if the object size was changed to a larger one,
the pattern would automatically scale so that it had the same number of
objects and repeats inside it. This contrasts with the  "userSpaceOnUse"
system, where if the object changes the size, the pattern would stay the
same and just repeat itself more times to fill the box.

As a slight aside, in Gecko circles seem to have trouble drawing if
their radius is set to something less than  0.075 (it is currently
unknown whether this is a bug in the pattern element or not). To work
around that it is probably best to avoid drawing in  "objectBoundingBox"
units unless you have to.

Neither of these uses is what one would normally think of when you think
of a pattern. Patterns usually have a set size and repeat themselves
independently of what an object's shape is. To create something like
this, both the pattern and its contents must be drawn in the current
userSpace, so they don't change shape if the object does:

xml

     <pattern id="Pattern" x="10" y="10" width="50" height="50" patternUnits="userSpaceOnUse">
       <rect x="0" y="0" width="50" height="50" fill="skyblue"/>
       <rect x="0" y="0" width="25" height="25" fill="url(#Gradient2)"/>
       <circle cx="25" cy="25" r="20" fill="url(#Gradient1)" fill-opacity="0.5"/>
     </pattern>

Of course, this means the pattern won't scale if you change your object
size later. All three of the preceding examples are shown below on a
rectangle that has been slightly elongated to a  height of  300px , but
I should note that it's not an exhaustive picture, and there are other
options available depending on your application.

[Three examples showing patternUnits values of default and
userSpaceOnUse and patternContentUnits values of default and
objectBoundingBox. When both are set to default, the aspect ratio is
maintained with white space visible. Setting patternContentUnits to
objectBoundingBox effects the aspect ratio to remove white space.
Setting patternUnits to userSpaceOnUse maintains the aspect ratio while
eliminating white space.]

-   « Previous
-   Next »

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# Positions #

-   « Previous
-   Next »

In this article, we examine how Scalable Vector Graphics (SVG)
represents the positions and sizes of objects within a drawing context,
including coordinate system and what a "pixel" measurement means in a
scalable context.

The grid

For all elements, SVG uses a coordinate system or grid system similar to
the one used by canvas (and by a whole lot of other computer drawing
routines). That is, the top left corner of the document is considered to
be the point (0,0), or point of origin. Positions are then measured in
pixels from the top left corner, with the positive x direction being to
the right, and the positive y direction being to the bottom.

[X, Y coordinate grid with a blue box in the middle.]

Note that this is slightly different than the way you're taught to graph
as a kid (y axis is flipped). However, this is the same way elements in
HTML are positioned (By default, LTR documents are considered not the
RTL documents which position X from right-to-left).

Example

The element

html

    <rect x="0" y="0" width="100" height="100" />

defines a rectangle from the upper left corner that spans 100px to the
right and 100px to the bottom.

What are "pixels"?

In the most basic case, one pixel in an SVG document maps to one pixel
on the output device (i.e., the screen). But SVG wouldn't have the
"Scalable" in its name if there weren't several possibilities to change
this behavior. Much like absolute and relative font sizes in CSS, SVG
defines absolute units (ones with a dimensional identifier like "pt" or
"cm") and so-called user units, which lack that identifier and are plain
numbers.

Without further specification, one user unit equals one screen unit. To
explicitly change this behavior, there are several possibilities in SVG.
We start with the  svg root element:

html

    <svg width="100" height="100">…</svg>

The above element defines a simple SVG canvas with 100x100px. One user
unit equals one screen unit.

html

    <svg width="200" height="200" viewBox="0 0 100 100">…</svg>

The whole SVG canvas here is 200px by 200px in size. However, the
 viewBox attribute defines the portion of that canvas to display. These
200x200 pixels display an area that starts at user unit (0,0) and spans
100x100 user units to the right and to the bottom. This effectively
zooms in on the 100x100 unit area and enlarges the image to double size.

The current mapping (for a single element or the whole image) of user
units to screen units is called user coordinate system . Apart from
scaling, the coordinate system can also be rotated, skewed, and flipped.
The default user coordinate system maps one user pixel to one device
pixel. (However, the device may decide what it understands as one
pixel.) Lengths in the SVG file with specific dimensions, like "in" or
"cm", are then calculated in a way that makes them appear 1:1 in the
resulting image.

A quote from the SVG 1.1 specification illustrates this:

  [...] suppose that the user agent can determine from its environment
  that "1px" corresponds to "0.2822222mm" (i.e., 90dpi). Then, for all
  processing of SVG content: [...] "1cm" equals "35.43307px" (and
  therefore 35.43307 user units)

-   « Previous
-   Next »

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# SVG and CSS #

-   « Previous

This page illustrates the application of CSS to the specialized language
for creating graphics: SVG .

Below you'll create a simple demonstration that runs in your SVG-enabled
browser.

Note: Elements referenced by  <use> elements inherit the styles from
that element. So to apply different styles to them you should use CSS
custom properties .

Example

Make a new SVG document as a plain text file,  doc8.svg . Copy and paste
the content from here, making sure that you scroll to get all of it:

html

    <svg
      width="600px"
      height="600px"
      viewBox="-300 -300 600 600"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <link
        xmlns="http://www.w3.org/1999/xhtml"
        rel="stylesheet"
        href="style8.css"
        type="text/css" />

      <title>SVG demonstration</title>
      <desc>Mozilla CSS Getting Started - SVG demonstration</desc>

      <defs>
        <radialGradient
          id="fade"
          cx="0"
          cy="0"
          r="200"
          gradientUnits="userSpaceOnUse">
          <stop id="fade-stop-1" offset="33%" />
          <stop id="fade-stop-2" offset="95%" />
        </radialGradient>
      </defs>

      <text id="heading" x="-280" y="-270">SVG demonstration</text>
      <text id="caption" x="-280" y="-250">
        Move your mouse pointer over the flower.
      </text>

      <g id="flower">
        <circle
          id="overlay"
          cx="0"
          cy="0"
          r="200"
          stroke="none"
          fill="url(#fade)" />

        <g id="outer-petals">
          <g class="quadrant">
            <g class="segment">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(18)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(36)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(54)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(72)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
          </g>

          <g class="quadrant">
            <g class="segment" transform="rotate(90)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(108)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(126)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(144)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(162)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
          </g>

          <g class="quadrant">
            <g class="segment" transform="rotate(180)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(198)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(216)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(234)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(252)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
          </g>

          <g class="quadrant">
            <g class="segment" transform="rotate(270)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(288)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(306)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(324)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(342)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
          </g>
        </g>

        <g id="inner-petals" transform="rotate(9) scale(0.33)">
          <g class="quadrant">
            <g class="segment">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(18)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(36)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(54)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(72)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
          </g>

          <g class="quadrant">
            <g class="segment" transform="rotate(90)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(108)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(126)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(144)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(162)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
          </g>

          <g class="quadrant">
            <g class="segment" transform="rotate(180)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(198)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(216)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(234)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(252)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
          </g>

          <g class="quadrant">
            <g class="segment" transform="rotate(270)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(288)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(306)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(324)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
            <g class="segment" transform="rotate(342)">
              <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
              <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
            </g>
          </g>
        </g>
      </g>
    </svg>

Make a new CSS file,  style8.css in the same directory as  doc8.svg .
Copy and paste the content from here, making sure that you scroll to get
all of it:

css

    /*** SVG demonstration ***/

    /* page */
    svg {
      background-color: beige;
    }

    #heading {
      font-size: 24px;
      font-weight: bold;
    }

    #caption {
      font-size: 12px;
    }

    /* flower */
    #flower:hover {
      cursor: crosshair;
    }

    /* gradient */
    #fade-stop-1 {
      stop-color: blue;
    }

    #fade-stop-2 {
      stop-color: white;
    }

    /* petals */
    .segment-fill {
      fill: var(--segment-fill-fill);
      stroke: var(--segment-fill-stroke);
      stroke-width: var(--segment-fill-stroke-width);
    }

    .segment-fill:hover {
      fill: var(--segment-fill-fill-hover);
      stroke: var(--segment-fill-stroke-hover);
    }

    .segment-edge {
      fill: var(--segment-edge-fill);
      stroke: var(--segment-edge-stroke);
      stroke-width: var(--segment-edge-stroke-width);
    }

    .segment-edge:hover {
      stroke: var(--segment-edge-stroke-hover);
    }

    /* outer petals */
    #outer-petals {
      opacity: 0.75;
      --segment-fill-fill: azure;
      --segment-fill-stroke: lightsteelblue;
      --segment-fill-stroke-width: 1;
      --segment-edge-fill: none;
      --segment-edge-stroke: deepskyblue;
      --segment-edge-stroke-width: 3;
      --segment-fill-fill-hover: plum;
      --segment-fill-stroke-hover: none;
      --segment-edge-stroke-hover: slateblue;
    }

    /*
     Non-standard way of styling elements referenced via <use> elements,
     supported by some older browsers
    */
    #outer-petals .segment-fill {
      fill: azure;
      stroke: lightsteelblue;
      stroke-width: 1;
    }

    #outer-petals .segment-edge {
      fill: none;
      stroke: deepskyblue;
      stroke-width: 3;
    }

    #outer-petals .segment:hover > .segment-fill {
      fill: plum;
      stroke: none;
    }

    #outer-petals .segment:hover > .segment-edge {
      stroke: slateblue;
    }

    /* inner petals */
    #inner-petals {
      --segment-fill-fill: yellow;
      --segment-fill-stroke: yellow;
      --segment-fill-stroke-width: 1;
      --segment-edge-fill: none;
      --segment-edge-stroke: yellowgreen;
      --segment-edge-stroke-width: 9;
      --segment-fill-fill-hover: darkseagreen;
      --segment-fill-stroke-hover: none;
      --segment-edge-stroke-hover: green;
    }

    /*
     Non-standard way of styling elements referenced via <use> elements,
     supported by some older browsers
    */
    #inner-petals .segment-fill {
      fill: yellow;
      stroke: yellow;
      stroke-width: 1;
    }

    #inner-petals .segment-edge {
      fill: none;
      stroke: yellowgreen;
      stroke-width: 9;
    }

    #inner-petals .segment:hover > .segment-fill {
      fill: darkseagreen;
      stroke: none;
    }

    #inner-petals .segment:hover > .segment-edge {
      stroke: green;
    }

Open the  doc8.svg document in your SVG-enabled browser. Move your mouse
pointer over the graphic to see what happens.

Result

Notes about this demonstration:

-   The SVG document links the stylesheet using the following HTML
     <link> tag:
    html

        <link rel="stylesheet" href="style8.css" type="text/css" />

    It can also be linked with the  @import rule inside a  <style> tag:
    html

        <style>
          @import url(style8.css);
        </style>
-   SVG has its own CSS properties and values. Some of them are similar
    to CSS properties for HTML.

Challenge

Change the stylesheet so that the inner petals all turn pink when the
mouse pointer is over any one of them, without changing the way the
outer petals work.

See a solution to this challenge.

Simplified structure

The SVG structure shown above could be written much more concise by
referencing the individual parts of the flower via  <use> elements. This
behavior is standardized , though only a few browsers support the
 :hover pseudo-class and other more complex CSS selectors on elements
referenced via  <use> elements, at the moment. There is some discussion
about what rules apply to such referenced elements .

See below how the structure then looks like.

html

    <svg
      width="600px"
      height="600px"
      viewBox="-300 -300 600 600"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <title>SVG demonstration</title>
      <desc>Mozilla CSS Getting Started - SVG demonstration</desc>

      <defs>
        <g id="segment" class="segment">
          <path class="segment-fill" d="M0,0 v-200 a40,40 0 0,0 -62,10 z" />
          <path class="segment-edge" d="M0,-200 a40,40 0 0,0 -62,10" />
        </g>
        <g id="quadrant">
          <use href="#segment" />
          <use href="#segment" transform="rotate(18)" />
          <use href="#segment" transform="rotate(36)" />
          <use href="#segment" transform="rotate(54)" />
          <use href="#segment" transform="rotate(72)" />
        </g>
        <g id="petals">
          <use href="#quadrant" />
          <use href="#quadrant" transform="rotate(90)" />
          <use href="#quadrant" transform="rotate(180)" />
          <use href="#quadrant" transform="rotate(270)" />
        </g>
        <radialGradient
          id="fade"
          cx="0"
          cy="0"
          r="200"
          gradientUnits="userSpaceOnUse">
          <stop id="fade-stop-1" offset="33%" />
          <stop id="fade-stop-2" offset="95%" />
        </radialGradient>
      </defs>

      <text id="heading" x="-280" y="-270">SVG demonstration</text>
      <text id="caption" x="-280" y="-250">
        Move your mouse pointer over the flower.
      </text>

      <g id="flower">
        <circle
          id="overlay"
          cx="0"
          cy="0"
          r="200"
          stroke="none"
          fill="url(#fade)" />
        <use id="outer-petals" href="#petals" />
        <use id="inner-petals" href="#petals" transform="rotate(9) scale(0.33)" />
      </g>
    </svg>

-   « Previous

What next?

In this demonstration, your SVG-enabled browser already knows how to
display SVG elements. The stylesheet only modifies the display in
certain ways. This is also true for HTML documents. But you can use CSS
for general-purpose XML documents, where there is no predefined way to
display the elements. The next page demonstrates this: XML introduction

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# SVG fonts #

-   « Previous
-   Next »

When SVG was specified, support for web fonts was not widespread in
browsers. Since accessing the correct font file is, however, crucial for
rendering text correctly, a font description technology was added to SVG
to provide this ability. It was not meant for compatibility with other
formats like PostScript or OTF , but rather as a simple means of
embedding glyph information into SVG when rendered.

Note: SVG Fonts are currently supported only in Safari and Android
Browser.

The functionality was removed from Chrome 38 (and Opera 25) and Firefox
postponed its implementation indefinitely to concentrate on WOFF . Other
tools, however, like Batik and parts of Inkscape support SVG font
embedding.

The base for defining an SVG font is the  <font> element.

Defining a font

There are some ingredients required for embedding a font in SVG. Let's
show an example declaration (the one from the specification ), and
explain the details.

html

    <font id="Font1" horiz-adv-x="1000">
      <font-face
        font-family="Super Sans"
        font-weight="bold"
        font-style="normal"
        units-per-em="1000"
        cap-height="600"
        x-height="400"
        ascent="700"
        descent="300"
        alphabetic="0"
        mathematical="350"
        ideographic="400"
        hanging="500">
        <font-face-src>
          <font-face-name name="Super Sans Bold" />
        </font-face-src>
      </font-face>
      <missing-glyph><path d="M0,0h200v200h-200z" /></missing-glyph>
      <!-- Outline of exclamation point glyph -->
      <glyph unicode="!" horiz-adv-x="300"></glyph>
      <glyph unicode="@"><!-- Outline of @ glyph --></glyph>
      <!-- more glyphs -->
    </font>

We start with the  <font> element. This bears an  id attribute, to
enable it to be referenced via a URI (see below). The  horiz-adv-x
attribute determines how wide a character is on average compared to the
path definitions of the single glyphs. The value  1000 sets a reasonable
value to work with. There are several accompanying attributes that help
further define the basic glyph-box layout.

The  <font-face> element is the SVG equivalent of the CSS  @font-face
declaration. It defines basic properties of the final font such as
weight, style, etc. In the example above, the first and most important
to be defined is  font-family , the value of which can then be
referenced in CSS and SVG  font-family properties. The  font-weight and
 font-style attributes have the same purpose as the equivalent
descriptors in CSS. All following attributes are rendering instructions
for the font layout engine; for example, how much of the glyphs' overall
heights are ascenders .

Its child, the  <font-face-src> element, corresponds to CSS'  src
descriptor in  @font-face declarations. You can point to external
sources for font declarations by means of its children  <font-face-name>
and  <font-face-uri> . The above example states that if the renderer has
a local font available named "Super Sans Bold", it should use this
instead.

Following  <font-face-src> is a  <missing-glyph> element. This defines
what should be displayed if a certain glyph is not found in the font and
if there are no fallback mechanisms. It also shows how glyphs are
created: By adding any graphical SVG content inside. You can use
literally any other SVG elements in here, even  <filter> ,  <a> or
 <script> . For simple glyphs, however, you can add a  d attribute —
this defines a shape for the glyph exactly like how standard SVG paths
work.

The actual glyphs are then defined by  <glyph> elements. The most
important attribute is  unicode . It defines the unicode code point
represented by this glyph. If you also specify the  lang attribute on a
glyph, you can further restrict it to certain languages (represented by
 xml:lang on the target) exclusively. Again, you can use arbitrary SVG
to define the glyph, which allows for great effects in supporting user
agents.

Two more elements can be defined inside  font :  <hkern> and  <vkern> .
Each carries references to at least two characters (attributes  u1 and
 u2 ) and an attribute  k that determines how much the distance between
those characters should be decreased. The below example instructs user
agents to place the "A" and "V" characters closer together than the
standard distance between characters.

html

    <hkern u1="A" u2="V" k="20" />

Referencing a font

When you have put together your font declaration as described above, you
can just use a simple  font-family attribute to actually apply the font
to some SVG text:

html

    <font>
      <font-face font-family="Super Sans" />
      <!-- and so on -->
    </font>

    <text font-family="Super Sans">My text uses Super Sans</text>

However, you are free to combine several methods for great freedom of
how and where to define the font.

Option: Use CSS @font-face

You can use  @font-face to reference remote (and not so remote) fonts:

html

    <font id="Super_Sans">
      <!-- and so on -->
    </font>

    <style>
      @font-face {
        font-family: "Super Sans";
        src: url(#Super_Sans);
      }
    </style>

    <text font-family="Super Sans">My text uses Super Sans</text>

Option: reference a remote font

The above mentioned  font-face-uri element allows you to reference an
external font; hence, allowing greater re-usability:

html

    <font>
      <font-face font-family="Super Sans">
        <font-face-src>
          <font-face-uri href="fonts.svg#Super_Sans" />
        </font-face-src>
      </font-face>
    </font>

-   « Previous
-   Next »

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Dec 1, 2023 by MDN contributors .
# SVG image element #

-   « Previous
-   Next »

The SVG  <image> element allows for raster images to be rendered within
an SVG object.

In this basic example, a .jpg image referenced by an   href  attribute
will be rendered inside an SVG object:

xml

    <?xml version="1.0" standalone="no"?>
    <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
      "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
    <svg width="5cm" height="4cm" version="1.1"
         xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
      <image href="firefox.jpg" x="0" y="0" height="50px" width="50px"/>
    </svg>

There are some important things to take note of (referenced from the W3
specs ):

-   If you do not set the  x or  y attributes, they will be set to  0 .
-   If you do not set the  height or  width attributes, they will be set
    to  0 .
-   Having a  height or  width attribute of  0 will disable rendering of
    the image.

-   « Previous
-   Next »

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
# Texts #

-   « Previous
-   Next »

When talking about text in SVG, we have to differentiate between two
almost completely separate topics. One is the inclusion and display of
text in an image, and the other is SVG fonts. The latter is described in
a later section of the tutorial, while this page will focus on the first
part: bringing text into an SVG image.

Basics

We have seen in the introducing example that the  text element can be
used to put arbitrary text in SVG documents:

xml

    <text x="10" y="10">Hello World!</text>

The  x and  y attributes determine where in the viewport the text will
appear. The attribute   text-anchor  , which can have the values
 "start" ,  "middle" ,  "end" or  "inherit" , decides in which direction
the text flows from this point. The attribute   dominant-baseline 
decides the vertical alignment.

Like with the shape elements, text can be colorized with the  fill
attribute and given a stroke with the  stroke attribute. Both may also
refer to gradients or patterns, which makes simple coloring text in SVG
very powerful compared to CSS 2.1.

Setting font properties

An essential part of a text is the font in which it is displayed. SVG
offers a set of attributes, many similar to their CSS counterparts, to
enable font selection. Each of the following properties can be set as an
attribute or via a CSS declaration:   font-family  ,   font-style  ,
  font-weight  ,   font-variant  ,   font-stretch  ,   font-size  ,
  font-size-adjust  ,   kerning  ,   letter-spacing  ,   word-spacing 
and   text-decoration  .

Other text-related elements

tspan

This element is used to mark up sub-portions of a larger text. It must
be a child of a  text element or another  tspan element. A typical use
case is to paint one word of a sentence bold red.

html

    <svg width="350" height="60" xmlns="http://www.w3.org/2000/svg">
      <text>
        This is
        <tspan font-weight="bold" fill="red">bold and red</tspan>
      </text>

      <style>
        <![CDATA[
          text{
            dominant-baseline: hanging;
            font: 28px Verdana, Helvetica, Arial, sans-serif;
          }
        ]]>
      </style>
    </svg>

The  tspan element has the following custom attributes:

 x

    Sets a new absolute  x coordinate for the containing text. This
    overwrites the default current text position. The attribute may also
    contain a list of numbers that are one by one applied to the single
    characters of the  tspan element.

 dx

    Starts drawing the text with a horizontal offset  dx from the
    default current position. Here, too, you may provide a list of
    values that are applied to consecutive characters, hence piling up
    the offset over time.

    Likewise, there are  y and  dy for vertical displacement.

 rotate

    Rotates all characters by this degree. A list of numbers makes each
    character rotate to its respective value, with remaining characters
    rotating according to the last value.

 textLength

    Gives the calculated length of the string. This is a more obscure
    attribute, and it is meant to allow the rendering engine to
    fine-tune the positions of the glyphs when its own measured text
    length doesn't meet the one provided here.

textPath

This element fetches via its  href attribute an arbitrary path and
aligns the characters, which it encircles, along this path:

html

    <svg width="200" height="100" xmlns="http://www.w3.org/2000/svg">
      <path id="my_path" d="M 20,20 C 80,60 100,40 120,20" fill="transparent" />
      <text>
        <textPath xmlns:xlink="http://www.w3.org/1999/xlink" href="#my_path">
          A curve.
        </textPath>
      </text>

      <style>
        <![CDATA[
          text{
            dominant-baseline: hanging;
            font: 28px Verdana, Helvetica, Arial, sans-serif;
          }
        ]]>
      </style>
    </svg>

-   « Previous
-   Next »

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Aug 25, 2023 by MDN contributors .
# Tools for SVG #

-   « Previous
-   Next »

Now that we covered the basics of the SVG internals, we will take a look
at some tools to work with SVG files.

Inkscape

URL: www.inkscape.org

One of the most important tools for a graphics format is a decent
drawing program. Inkscape offers state-of-the-art vector drawing, and
it's open source.

Moreover, it uses SVG as its native file format. To store Inkscape
specific data, it extends the SVG file with elements and attributes in a
custom namespace, but you can also choose to export as plain SVG.

Adobe Illustrator

URL: www.adobe.com/products/illustrator/

Before Adobe acquired Macromedia, it was the most prominent promoter of
SVG. From this time stems the good support of SVG in Illustrator.
However, the resulting SVG often shows some quirks, that make it
necessary to post-process it for general applicability.

Apache Batik

URL: xmlgraphics.apache.org/batik/

Batik is a set of open source tools under the roof of the Apache
Software Foundation. The toolkit is written in Java and offers almost
complete SVG 1.1 support, as well as some features that were originally
planned for SVG 1.2.

Batik offers a viewer (Squiggle), a rasterizer for PNG output, an SVG
pretty printer to format SVG files, and a TrueType-to-SVG-Font
converter.

Together with Apache FOP Batik can transform SVG to PDF.

Other renderers

Several projects exist that can create a raster image from an SVG
source. ImageMagick is one of the most famous command-line image
processing tools. The Gnome library rsvg is used by the Wikipedia to
raster their SVG graphics. Usage of headless browsers such as SlimerJS
and PhantomJS are also popular for this purpose, as the image produced
is closer to what the SVG will look like in the browser.

Snap.svg

URL: snapsvg.io

A newer JavaScript abstraction layer from the same author of Raphael JS.
Snap.svg is designed for modern browsers and therefore supports the
newest SVG features like masking, clipping, patterns, full gradients,
groups. It does not support the older browsers that Raphael does.

Google Docs

URL: www.google.com/google-d-s/drawings/

Drawings from Google Docs can be exported as SVG.

Science

The well-known plotting tools xfig and gnuplot both support exporting as
SVG. To render graphs on the web JSXGraph supports VML, SVG and canvas,
automatically deciding which technology to use based on browser
capabilities.

In GIS (Geographic Information System) applications SVG is often used as
both storage and rendering format. See carto.net for details.

More tools!

The W3C offers a list of programs that support SVG.

-   « Previous
-   Next »

Found a content problem with this page?

-   Edit the page on GitHub .
-   Report the content issue .
-   View the source on GitHub .

Want to get more involved? Learn how to contribute .

This page was last modified on Mar 6, 2023 by MDN contributors .
