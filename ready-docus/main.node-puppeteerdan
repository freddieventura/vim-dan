                                                                               
            88                                      88                         
            ""                                      88                         
                                                    88                         
8b       d8 88 88,dPYba,,adPYba,            ,adPPYb,88 ,adPPYYba, 8b,dPPYba,   
`8b     d8' 88 88P'   "88"    "8a aaaaaaaa a8"    `Y88 ""     `Y8 88P'   `"8a  
 `8b   d8'  88 88      88      88 """""""" 8b       88 ,adPPPPP88 88       88  
  `8b,d8'   88 88      88      88          "8a,   ,d88 88,    ,88 88       88  
    "8"     88 88      88      88           `"8bbdP"Y8 `"8bbdP"Y8 88       88  
                                                                               
                                                                               
                 _                                         _                 
 _ __   ___   __| | ___       _ __  _   _ _ __  _ __   ___| |_ ___  ___ _ __ 
| '_ \ / _ \ / _` |/ _ \_____| '_ \| | | | '_ \| '_ \ / _ \ __/ _ \/ _ \ '__|
| | | | (_) | (_| |  __/_____| |_) | |_| | |_) | |_) |  __/ ||  __/  __/ |   
|_| |_|\___/ \__,_|\___|     | .__/ \__,_| .__/| .__/ \___|\__\___|\___|_|   
                             |_|         |_|   |_|                           
Documentation indexed from : https://pptr.dev/api 
Last parsed on : Thu Mar 21 03:43:25 PM GMT 2024
 _           _           
(_)_ __   __| | _____  __
| | '_ \ / _` |/ _ \ \/ /
| | | | | (_| |  __/>  < 
|_|_| |_|\__,_|\___/_/\_\
                         
- downloaded
    - & @downloaded@ API Reference &
    - & @downloaded@ Chromium Support &
    - & @downloaded@ Contributing &
    - & @downloaded@ FAQ &
    - & @downloaded@ Puppeteer &
    - & @downloaded@ Troubleshooting &
    - & @downloaded@ Experimental WebDriver BiDi support &
- api
    - & @api@ Accessibility class &
    - & @api@ Accessibility.snapshot() method &
    - & @api@ ActionOptions interface &
    - & @api@ ActionResult type &
    - & @api@ AutofillData interface &
    - & @api@ Awaitable type &
    - & @api@ AwaitableIterable type &
    - & @api@ AwaitablePredicate type &
    - & @api@ AwaitedLocator type &
    - & @api@ BoundingBox interface &
    - & @api@ BoxModel interface &
    - & @api@ Browser.browserContexts() method &
    - & @api@ Browser.close() method &
    - & @api@ BrowserConnectOptions interface &
    - & @api@ BrowserContext.browser() method &
    - & @api@ BrowserContext.clearPermissionOverrides() method &
    - & @api@ BrowserContext.close() method &
    - & @api@ BrowserContextEvent enum &
    - & @api@ BrowserContextEvents interface &
    - & @api@ BrowserContext class &
    - & @api@ BrowserContext.isIncognito() method &
    - & @api@ BrowserContext.newPage() method &
    - & @api@ BrowserContextOptions interface &
    - & @api@ BrowserContext.overridePermissions() method &
    - & @api@ BrowserContext.pages() method &
    - & @api@ BrowserContext.targets() method &
    - & @api@ BrowserContext.waitForTarget() method &
    - & @api@ Browser.createBrowserContext() method &
    - & @api@ Browser.defaultBrowserContext() method &
    - & @api@ Browser.disconnect() method &
    - & @api@ BrowserEvent enum &
    - & @api@ BrowserEvents interface &
    - & @api@ Browser class &
    - & @api@ Browser.isConnected() method &
    - & @api@ BrowserLaunchArgumentOptions interface &
    - & @api@ Browser.newPage() method &
    - & @api@ Browser.pages() method &
    - & @api@ Browser.process() method &
    - & @api@ Browser.target() method &
    - & @api@ Browser.targets() method &
    - & @api@ Browser.userAgent() method &
    - & @api@ Browser.version() method &
    - & @api@ Browser.waitForTarget() method &
    - & @api@ Browser.wsEndpoint() method &
    - & @api@ CDPEvents type &
    - & @api@ CDPSession.connection() method &
    - & @api@ CDPSession.detach() method &
    - & @api@ CDPSessionEvent namespace &
    - & @api@ CDPSessionEvent.SessionAttached variable &
    - & @api@ CDPSessionEvent.SessionDetached variable &
    - & @api@ CDPSessionEvents interface &
    - & @api@ CDPSession class &
    - & @api@ CDPSession.id() method &
    - & @api@ CDPSession.send() method &
    - & @api@ ChromeReleaseChannel type &
    - & @api@ clearCustomQueryHandlers() function &
    - & @api@ ClickOptions interface &
    - & @api@ CommandOptions interface &
    - & @api@ CommonEventEmitter.emit() method &
    - & @api@ CommonEventEmitter interface &
    - & @api@ CommonEventEmitter.listenerCount() method &
    - & @api@ CommonEventEmitter.off() method &
    - & @api@ CommonEventEmitter.once() method &
    - & @api@ CommonEventEmitter.on() method &
    - & @api@ CommonEventEmitter.removeAllListeners() method &
    - & @api@ Configuration interface &
    - & @api@ connect() function &
    - & @api@ Connection.(constructor) &
    - & @api@ Connection.createSession() method &
    - & @api@ Connection.dispose() method &
    - & @api@ Connection.fromSession() method &
    - & @api@ Connection class &
    - & @api@ Connection.send() method &
    - & @api@ Connection.session() method &
    - & @api@ ConnectionTransport.close() method &
    - & @api@ ConnectionTransport interface &
    - & @api@ ConnectionTransport.send() method &
    - & @api@ Connection.url() method &
    - & @api@ ConnectOptions interface &
    - & @api@ ConsoleMessage.args() method &
    - & @api@ ConsoleMessage.(constructor) &
    - & @api@ ConsoleMessage class &
    - & @api@ ConsoleMessage.location() method &
    - & @api@ ConsoleMessageLocation interface &
    - & @api@ ConsoleMessage.stackTrace() method &
    - & @api@ ConsoleMessage.text() method &
    - & @api@ ConsoleMessage.type() method &
    - & @api@ ConsoleMessageType type &
    - & @api@ ContinueRequestOverrides interface &
    - & @api@ Cookie interface &
    - & @api@ CookieParam interface &
    - & @api@ CookiePriority type &
    - & @api@ CookieSameSite type &
    - & @api@ CookieSourceScheme type &
    - & @api@ Coverage.(constructor) &
    - & @api@ CoverageEntry interface &
    - & @api@ Coverage class &
    - & @api@ Coverage.startCSSCoverage() method &
    - & @api@ Coverage.startJSCoverage() method &
    - & @api@ Coverage.stopCSSCoverage() method &
    - & @api@ Coverage.stopJSCoverage() method &
    - & @api@ Credentials interface &
    - & @api@ CSSCoverage.(constructor) &
    - & @api@ CSSCoverage class &
    - & @api@ CSSCoverageOptions interface &
    - & @api@ CSSCoverage.start() method &
    - & @api@ CSSCoverage.stop() method &
    - & @api@ CustomQueryHandler interface &
    - & @api@ customQueryHandlerNames() function &
    - & @api@ DebugInfo interface &
    - & @api@ defaultArgs() function &
    - & @api@ DEFAULT_INTERCEPT_RESOLUTION_PRIORITY variable &
    - & @api@ DeleteCookiesRequest interface &
    - & @api@ Device interface &
    - & @api@ DeviceRequestPrompt.cancel() method &
    - & @api@ DeviceRequestPromptDevice class &
    - & @api@ DeviceRequestPrompt class &
    - & @api@ DeviceRequestPrompt.select() method &
    - & @api@ DeviceRequestPrompt.waitForDevice() method &
    - & @api@ Dialog.accept() method &
    - & @api@ Dialog.defaultValue() method &
    - & @api@ Dialog.dismiss() method &
    - & @api@ Dialog class &
    - & @api@ Dialog.message() method &
    - & @api@ Dialog.type() method &
    - & @api@ ElementFor type &
    - & @api@ ElementHandle.autofill() method &
    - & @api@ ElementHandle.boundingBox() method &
    - & @api@ ElementHandle.boxModel() method &
    - & @api@ ElementHandle.clickablePoint() method &
    - & @api@ ElementHandle.click() method &
    - & @api@ ElementHandle.contentFrame() method &
    - & @api@ ElementHandle.contentFrame() method &
    - & @api@ ElementHandle.dragAndDrop() method &
    - & @api@ ElementHandle.dragEnter() method &
    - & @api@ ElementHandle.drag() method &
    - & @api@ ElementHandle.dragOver() method &
    - & @api@ ElementHandle.drop() method &
    - & @api@ ElementHandle.drop() method &
    - & @api@ ElementHandle.$$eval() method &
    - & @api@ ElementHandle.$eval() method &
    - & @api@ ElementHandle.focus() method &
    - & @api@ ElementHandle.hover() method &
    - & @api@ ElementHandle.$() method &
    - & @api@ ElementHandle.$$() method &
    - & @api@ ElementHandle class &
    - & @api@ ElementHandle.isHidden() method &
    - & @api@ ElementHandle.isIntersectingViewport() method &
    - & @api@ ElementHandle.isVisible() method &
    - & @api@ ElementHandle.press() method &
    - & @api@ ElementHandle.screenshot() method &
    - & @api@ ElementHandle.screenshot() method &
    - & @api@ ElementHandle.scrollIntoView() method &
    - & @api@ ElementHandle.select() method &
    - & @api@ ElementHandle.tap() method &
    - & @api@ ElementHandle.toElement() method &
    - & @api@ ElementHandle.touchEnd() method &
    - & @api@ ElementHandle.touchMove() method &
    - & @api@ ElementHandle.touchStart() method &
    - & @api@ ElementHandle.type() method &
    - & @api@ ElementHandle.uploadFile() method &
    - & @api@ ElementHandle.waitForSelector() method &
    - & @api@ ElementScreenshotOptions interface &
    - & @api@ ErrorCode type &
    - & @api@ EvaluateFunc type &
    - & @api@ EvaluateFuncWith type &
    - & @api@ EventEmitter.emit() method &
    - & @api@ EventEmitter class &
    - & @api@ EventEmitter.listenerCount() method &
    - & @api@ EventEmitter.off() method &
    - & @api@ EventEmitter.once() method &
    - & @api@ EventEmitter.on() method &
    - & @api@ EventEmitter.removeAllListeners() method &
    - & @api@ EventsWithWildcard type &
    - & @api@ EventType type &
    - & @api@ executablePath() function &
    - & @api@ ExperimentsConfiguration type &
    - & @api@ FileChooser.accept() method &
    - & @api@ FileChooser.cancel() method &
    - & @api@ FileChooser class &
    - & @api@ FileChooser.isMultiple() method &
    - & @api@ FlattenHandle type &
    - & @api@ Frame.addScriptTag() method &
    - & @api@ FrameAddScriptTagOptions interface &
    - & @api@ Frame.addStyleTag() method &
    - & @api@ Frame.addStyleTag() method &
    - & @api@ FrameAddStyleTagOptions interface &
    - & @api@ Frame.childFrames() method &
    - & @api@ Frame.click() method &
    - & @api@ Frame.content() method &
    - & @api@ Frame.$$eval() method &
    - & @api@ Frame.$eval() method &
    - & @api@ Frame.evaluateHandle() method &
    - & @api@ Frame.evaluate() method &
    - & @api@ FrameEvents interface &
    - & @api@ Frame.focus() method &
    - & @api@ Frame.frameElement() method &
    - & @api@ Frame.goto() method &
    - & @api@ Frame.hover() method &
    - & @api@ Frame.$() method &
    - & @api@ Frame.$$() method &
    - & @api@ Frame class &
    - & @api@ Frame.isDetached() method &
    - & @api@ Frame.isOOPFrame() method &
    - & @api@ Frame.locator() method &
    - & @api@ Frame.locator() method &
    - & @api@ Frame.name() method &
    - & @api@ Frame.page() method &
    - & @api@ Frame.parentFrame() method &
    - & @api@ Frame.select() method &
    - & @api@ Frame.setContent() method &
    - & @api@ Frame.tap() method &
    - & @api@ Frame.title() method &
    - & @api@ Frame.type() method &
    - & @api@ Frame.url() method &
    - & @api@ Frame.waitForFunction() method &
    - & @api@ FrameWaitForFunctionOptions interface &
    - & @api@ Frame.waitForNavigation() method &
    - & @api@ Frame.waitForSelector() method &
    - & @api@ GeolocationOptions interface &
    - & @api@ GoToOptions interface &
    - & @api@ HandleFor type &
    - & @api@ HandleOr type &
    - & @api@ Handler type &
    - & @api@ HTTPRequest.abortErrorReason() method &
    - & @api@ HTTPRequest.abort() method &
    - & @api@ HTTPRequest.continue() method &
    - & @api@ HTTPRequest.continueRequestOverrides() method &
    - & @api@ HTTPRequest.enqueueInterceptAction() method &
    - & @api@ HTTPRequest.failure() method &
    - & @api@ HTTPRequest.fetchPostData() method &
    - & @api@ HTTPRequest.finalizeInterceptions() method &
    - & @api@ HTTPRequest.frame() method &
    - & @api@ HTTPRequest.hasPostData() method &
    - & @api@ HTTPRequest.headers() method &
    - & @api@ HTTPRequest class &
    - & @api@ HTTPRequest.initiator() method &
    - & @api@ HTTPRequest.interceptResolutionState() method &
    - & @api@ HTTPRequest.isInterceptResolutionHandled() method &
    - & @api@ HTTPRequest.isNavigationRequest() method &
    - & @api@ HTTPRequest.method() method &
    - & @api@ HTTPRequest.postData() method &
    - & @api@ HTTPRequest.redirectChain() method &
    - & @api@ HTTPRequest.resourceType() method &
    - & @api@ HTTPRequest.respond() method &
    - & @api@ HTTPRequest.responseForRequest() method &
    - & @api@ HTTPRequest.response() method &
    - & @api@ HTTPRequest.url() method &
    - & @api@ HTTPResponse.buffer() method &
    - & @api@ HTTPResponse.frame() method &
    - & @api@ HTTPResponse.fromCache() method &
    - & @api@ HTTPResponse.fromServiceWorker() method &
    - & @api@ HTTPResponse.headers() method &
    - & @api@ HTTPResponse class &
    - & @api@ HTTPResponse.ok() method &
    - & @api@ HTTPResponse.remoteAddress() method &
    - & @api@ HTTPResponse.request() method &
    - & @api@ HTTPResponse.securityDetails() method &
    - & @api@ HTTPResponse.status() method &
    - & @api@ HTTPResponse.statusText() method &
    - & @api@ HTTPResponse.text() method &
    - & @api@ HTTPResponse.timing() method &
    - & @api@ HTTPResponse.url() method &
    - & @api@ InnerParams type &
    - & @api@ InterceptResolutionAction enum &
    - & @api@ InterceptResolutionState interface &
    - & @api@ InternalNetworkConditions interface &
    - & @api@ JSCoverage.(constructor) &
    - & @api@ JSCoverageEntry interface &
    - & @api@ JSCoverage class &
    - & @api@ JSCoverageOptions interface &
    - & @api@ JSCoverage.start() method &
    - & @api@ JSCoverage.stop() method &
    - & @api@ JSHandle.asElement() method &
    - & @api@ JSHandle.dispose() method &
    - & @api@ JSHandle.evaluateHandle() method &
    - & @api@ JSHandle.evaluate() method &
    - & @api@ JSHandle.getProperties() method &
    - & @api@ JSHandle.getProperty() method &
    - & @api@ JSHandle.getProperty() method &
    - & @api@ JSHandle class &
    - & @api@ JSHandle.jsonValue() method &
    - & @api@ JSHandle.remoteObject() method &
    - & @api@ JSHandle.toString() method &
    - & @api@ Keyboard.down() method &
    - & @api@ Keyboard class &
    - & @api@ Keyboard.press() method &
    - & @api@ Keyboard.sendCharacter() method &
    - & @api@ Keyboard.type() method &
    - & @api@ KeyboardTypeOptions interface &
    - & @api@ Keyboard.up() method &
    - & @api@ KeyDownOptions interface &
    - & @api@ KeyInput type &
    - & @api@ KeyPressOptions type &
    - & @api@ KnownDevices variable &
    - & @api@ launch() function &
    - & @api@ LaunchOptions interface &
    - & @api@ Locator.click() method &
    - & @api@ LocatorClickOptions type &
    - & @api@ Locator.clone() method &
    - & @api@ LocatorEvent enum &
    - & @api@ LocatorEvents interface &
    - & @api@ Locator.fill() method &
    - & @api@ Locator.filter() method &
    - & @api@ Locator.hover() method &
    - & @api@ Locator class &
    - & @api@ Locator.map() method &
    - & @api@ LocatorOptions interface &
    - & @api@ Locator.race() method &
    - & @api@ Locator.scroll() method &
    - & @api@ LocatorScrollOptions interface &
    - & @api@ Locator.setEnsureElementIsInTheViewport() method &
    - & @api@ Locator.setTimeout() method &
    - & @api@ Locator.setVisibility() method &
    - & @api@ Locator.setWaitForEnabled() method &
    - & @api@ Locator.setWaitForStableBoundingBox() method &
    - & @api@ Locator.waitHandle() method &
    - & @api@ Locator.wait() method &
    - & @api@ LowerCasePaperFormat type &
    - & @api@ Mapper type &
    - & @api@ MediaFeature interface &
    - & @api@ Metrics interface &
    - & @api@ MouseButton variable &
    - & @api@ Mouse.click() method &
    - & @api@ MouseClickOptions interface &
    - & @api@ Mouse.down() method &
    - & @api@ Mouse.dragAndDrop() method &
    - & @api@ Mouse.dragEnter() method &
    - & @api@ Mouse.drag() method &
    - & @api@ Mouse.dragOver() method &
    - & @api@ Mouse.drop() method &
    - & @api@ Mouse class &
    - & @api@ Mouse.move() method &
    - & @api@ MouseMoveOptions interface &
    - & @api@ MouseOptions interface &
    - & @api@ Mouse.reset() method &
    - & @api@ Mouse.up() method &
    - & @api@ Mouse.wheel() method &
    - & @api@ MouseWheelOptions interface &
    - & @api@ Moveable interface &
    - & @api@ Moveable.move() method &
    - & @api@ NetworkConditions interface &
    - & @api@ NewDocumentScriptEvaluation interface &
    - & @api@ NodeFor type &
    - & @api@ Offset interface &
    - & @api@ Page.addScriptTag() method &
    - & @api@ Page.addStyleTag() method &
    - & @api@ Page.addStyleTag() method &
    - & @api@ Page.authenticate() method &
    - & @api@ Page.bringToFront() method &
    - & @api@ Page.browserContext() method &
    - & @api@ Page.browser() method &
    - & @api@ Page.click() method &
    - & @api@ Page.close() method &
    - & @api@ Page.content() method &
    - & @api@ Page.cookies() method &
    - & @api@ Page.createCDPSession() method &
    - & @api@ Page.createPDFStream() method &
    - & @api@ Page.deleteCookie() method &
    - & @api@ Page.emulateCPUThrottling() method &
    - & @api@ Page.emulate() method &
    - & @api@ Page.emulateIdleState() method &
    - & @api@ Page.emulateMediaFeatures() method &
    - & @api@ Page.emulateMediaType() method &
    - & @api@ Page.emulateNetworkConditions() method &
    - & @api@ Page.emulateTimezone() method &
    - & @api@ Page.emulateVisionDeficiency() method &
    - & @api@ Page.$$eval() method &
    - & @api@ Page.$eval() method &
    - & @api@ Page.evaluateHandle() method &
    - & @api@ Page.evaluate() method &
    - & @api@ Page.evaluateOnNewDocument() method &
    - & @api@ PageEvent enum &
    - & @api@ PageEvents interface &
    - & @api@ Page.exposeFunction() method &
    - & @api@ Page.focus() method &
    - & @api@ Page.frames() method &
    - & @api@ Page.getDefaultTimeout() method &
    - & @api@ Page.goBack() method &
    - & @api@ Page.goForward() method &
    - & @api@ Page.goto() method &
    - & @api@ Page.hover() method &
    - & @api@ Page.$() method &
    - & @api@ Page.$$() method &
    - & @api@ Page class &
    - & @api@ Page.isClosed() method &
    - & @api@ Page.isDragInterceptionEnabled() method &
    - & @api@ Page.isJavaScriptEnabled() method &
    - & @api@ Page.isServiceWorkerBypassed() method &
    - & @api@ Page.locator() method &
    - & @api@ Page.locator() method &
    - & @api@ Page.mainFrame() method &
    - & @api@ Page.metrics() method &
    - & @api@ Page.pdf() method &
    - & @api@ Page.queryObjects() method &
    - & @api@ Page.reload() method &
    - & @api@ Page.removeExposedFunction() method &
    - & @api@ Page.removeScriptToEvaluateOnNewDocument() method &
    - & @api@ Page.screencast() method &
    - & @api@ Page.screenshot() method &
    - & @api@ Page.screenshot() method &
    - & @api@ Page.select() method &
    - & @api@ Page.setBypassCSP() method &
    - & @api@ Page.setBypassServiceWorker() method &
    - & @api@ Page.setCacheEnabled() method &
    - & @api@ Page.setContent() method &
    - & @api@ Page.setCookie() method &
    - & @api@ Page.setDefaultNavigationTimeout() method &
    - & @api@ Page.setDefaultTimeout() method &
    - & @api@ Page.setDragInterception() method &
    - & @api@ Page.setExtraHTTPHeaders() method &
    - & @api@ Page.setGeolocation() method &
    - & @api@ Page.setJavaScriptEnabled() method &
    - & @api@ Page.setOfflineMode() method &
    - & @api@ Page.setRequestInterception() method &
    - & @api@ Page.setUserAgent() method &
    - & @api@ Page.setViewport() method &
    - & @api@ Page.tap() method &
    - & @api@ Page.target() method &
    - & @api@ Page.title() method &
    - & @api@ Page.type() method &
    - & @api@ Page.url() method &
    - & @api@ Page.viewport() method &
    - & @api@ Page.waitForDevicePrompt() method &
    - & @api@ Page.waitForFileChooser() method &
    - & @api@ Page.waitForFrame() method &
    - & @api@ Page.waitForFunction() method &
    - & @api@ Page.waitForNavigation() method &
    - & @api@ Page.waitForNetworkIdle() method &
    - & @api@ Page.waitForRequest() method &
    - & @api@ Page.waitForResponse() method &
    - & @api@ Page.waitForSelector() method &
    - & @api@ Page.workers() method &
    - & @api@ PaperFormat type &
    - & @api@ PDFMargin interface &
    - & @api@ PDFOptions interface &
    - & @api@ Permission type &
    - & @api@ Point interface &
    - & @api@ PredefinedNetworkConditions variable &
    - & @api@ Predicate type &
    - & @api@ Product type &
    - & @api@ ProductLauncher.defaultArgs() method &
    - & @api@ ProductLauncher.executablePath() method &
    - & @api@ ProductLauncher class &
    - & @api@ ProductLauncher.launch() method &
    - & @api@ ProtocolError class &
    - & @api@ ProtocolLifeCycleEvent type &
    - & @api@ ProtocolType type &
    - & @api@ Puppeteer.clearCustomQueryHandlers() method &
    - & @api@ Puppeteer.connect() method &
    - & @api@ Puppeteer.customQueryHandlerNames() method &
    - & @api@ PuppeteerError class &
    - & @api@ puppeteer variable &
    - & @api@ PuppeteerLaunchOptions interface &
    - & @api@ PuppeteerLifeCycleEvent type &
    - & @api@ PuppeteerNode.connect() method &
    - & @api@ PuppeteerNode.defaultArgs() method &
    - & @api@ PuppeteerNode.executablePath() method &
    - & @api@ PuppeteerNode class &
    - & @api@ PuppeteerNode.launch() method &
    - & @api@ PuppeteerNodeLaunchOptions type &
    - & @api@ PuppeteerNode.trimCache() method &
    - & @api@ Puppeteer.registerCustomQueryHandler() method &
    - & @api@ Puppeteer.unregisterCustomQueryHandler() method &
    - & @api@ Quad type &
    - & @api@ registerCustomQueryHandler() function &
    - & @api@ RemoteAddress interface &
    - & @api@ ResourceType type &
    - & @api@ ResponseForRequest interface &
    - & @api@ ScreencastOptions interface &
    - & @api@ ScreenRecorder class &
    - & @api@ ScreenRecorder.stop() method &
    - & @api@ ScreenshotClip interface &
    - & @api@ ScreenshotOptions interface &
    - & @api@ SecurityDetails class &
    - & @api@ SecurityDetails.issuer() method &
    - & @api@ SecurityDetails.protocol() method &
    - & @api@ SecurityDetails.subjectAlternativeNames() method &
    - & @api@ SecurityDetails.subjectName() method &
    - & @api@ SecurityDetails.validFrom() method &
    - & @api@ SecurityDetails.validTo() method &
    - & @api@ SerializedAXNode interface &
    - & @api@ SnapshotOptions interface &
    - & @api@ Target.asPage() method &
    - & @api@ Target.browserContext() method &
    - & @api@ Target.browser() method &
    - & @api@ Target.createCDPSession() method &
    - & @api@ TargetFilterCallback type &
    - & @api@ Target class &
    - & @api@ Target.opener() method &
    - & @api@ Target.page() method &
    - & @api@ Target.type() method &
    - & @api@ TargetType enum &
    - & @api@ Target.url() method &
    - & @api@ Target.worker() method &
    - & @api@ TimeoutError class &
    - & @api@ Touchscreen class &
    - & @api@ Touchscreen.tap() method &
    - & @api@ Touchscreen.touchEnd() method &
    - & @api@ Touchscreen.touchMove() method &
    - & @api@ Touchscreen.touchStart() method &
    - & @api@ Tracing class &
    - & @api@ TracingOptions interface &
    - & @api@ Tracing.start() method &
    - & @api@ Tracing.stop() method &
    - & @api@ trimCache() function &
    - & @api@ unregisterCustomQueryHandler() function &
    - & @api@ UnsupportedOperation class &
    - & @api@ Viewport interface &
    - & @api@ VisibilityOption type &
    - & @api@ WaitForNetworkIdleOptions interface &
    - & @api@ WaitForOptions interface &
    - & @api@ WaitForSelectorOptions interface &
    - & @api@ WaitForTargetOptions interface &
    - & @api@ WaitTimeoutOptions interface &
    - & @api@ WebWorker.close() method &
    - & @api@ WebWorker.evaluateHandle() method &
    - & @api@ WebWorker.evaluate() method &
    - & @api@ WebWorker class &
    - & @api@ WebWorker.url() method &
- browsers-api
    - & @browsers-api@ Browser enum &
    - & @browsers-api@ BrowserPlatform enum &
    - & @browsers-api@ canDownload() function &
    - & @browsers-api@ CDP_WEBSOCKET_ENDPOINT_REGEX variable &
    - & @browsers-api@ ChromeReleaseChannel enum &
    - & @browsers-api@ CLI class &
    - & @browsers-api@ computeExecutablePath() function &
    - & @browsers-api@ computeSystemExecutablePath() function &
    - & @browsers-api@ createProfile() function &
    - & @browsers-api@ detectBrowserPlatform() function &
    - & @browsers-api@ getInstalledBrowsers() function &
    - & @browsers-api@ GetInstalledBrowsersOptions interface &
    - & @browsers-api@ getVersionComparator() function &
    - & @browsers-api@ install() function &
    - & @browsers-api@ InstalledBrowser class &
    - & @browsers-api@ install() function &
    - & @browsers-api@ InstallOptions interface &
    - & @browsers-api@ launch() function &
    - & @browsers-api@ LaunchOptions interface &
    - & @browsers-api@ makeProgressCallback() function &
    - & @browsers-api@ Options interface &
    - & @browsers-api@ Process class &
    - & @browsers-api@ ProfileOptions interface &
    - & @browsers-api@ resolveBuildId() function &
    - & @browsers-api@ SystemOptions interface &
    - & @browsers-api@ TimeoutError class &
    - & @browsers-api@ uninstall() function &
    - & @browsers-api@ UninstallOptions interface &
    - & @browsers-api@ WEBDRIVER_BIDI_WEBSOCKET_ENDPOINT_REGEX variable &
    - & @browsers-api@ @puppeteer/browsers &
- guides
    - & @guides@ Chrome Extensions &
    - & @guides@ Configuration &
    - & @guides@ Debugging &
    - & @guides@ Docker &
    - & @guides@ Evaluate JavaScript &
    - & @guides@ Locators &
    - & @guides@ Query Selectors &
    - & @guides@ Request Interception &
- integrations
    - & @integrations@ Puppeteer Angular Schematic &

# downloaded API Reference #

API Reference

Classes 

+-----------------------------------+-----------------------------------+
| Class                             | Description                       |
+===================================+===================================+
| Accessibility                     | The Accessibility class provides  |
|                                   | methods for inspecting the        |
|                                   | browser's accessibility tree. The |
|                                   | accessibility tree is used by     |
|                                   | assistive technology such as      |
|                                   | screen readers or switches .      |
+-----------------------------------+-----------------------------------+
| Browser                           | Browser represents a browser      |
|                                   | instance that is either:          |
|                                   |                                   |
|                                   | - connected to via                |
|                                   | Puppeteer.connect() or - launched |
|                                   | by PuppeteerNode.launch() .       |
|                                   |                                   |
|                                   | Browser emits various events      |
|                                   | which are documented in the       |
|                                   | BrowserEvent enum.                |
+-----------------------------------+-----------------------------------+
| BrowserContext                    | BrowserContext represents         |
|                                   | individual user contexts within a |
|                                   | browser .                         |
|                                   |                                   |
|                                   | When a browser is launched, it    |
|                                   | has a single browser context by   |
|                                   | default. Others can be created    |
|                                   | using                             |
|                                   | Browser.createBrowserContext() .  |
|                                   | Each context has isolated storage |
|                                   | (cookies/localStorage/etc.)       |
|                                   |                                   |
|                                   | BrowserContext emits various      |
|                                   | events which are documented in    |
|                                   | the BrowserContextEvent enum.     |
|                                   |                                   |
|                                   | If a page opens another page ,    |
|                                   | e.g. using  window.open , the     |
|                                   | popup will belong to the parent   |
|                                   | page's browser context .          |
+-----------------------------------+-----------------------------------+
| CDPSession                        | The  CDPSession instances are     |
|                                   | used to talk raw Chrome Devtools  |
|                                   | Protocol.                         |
+-----------------------------------+-----------------------------------+
| Connection                        |                                   |
+-----------------------------------+-----------------------------------+
| ConsoleMessage                    | ConsoleMessage objects are        |
|                                   | dispatched by page via the        |
|                                   | 'console' event.                  |
+-----------------------------------+-----------------------------------+
| Coverage                          | The Coverage class provides       |
|                                   | methods to gather information     |
|                                   | about parts of JavaScript and CSS |
|                                   | that were used by the page.       |
+-----------------------------------+-----------------------------------+
| CSSCoverage                       |                                   |
+-----------------------------------+-----------------------------------+
| DeviceRequestPrompt               | Device request prompts let you    |
|                                   | respond to the page requesting    |
|                                   | for a device through an API like  |
|                                   | WebBluetooth.                     |
+-----------------------------------+-----------------------------------+
| DeviceRequestPromptDevice         | Device in a request prompt.       |
+-----------------------------------+-----------------------------------+
| Dialog                            | Dialog instances are dispatched   |
|                                   | by the Page via the  dialog       |
|                                   | event.                            |
+-----------------------------------+-----------------------------------+
| ElementHandle                     | ElementHandle represents an       |
|                                   | in-page DOM element.              |
+-----------------------------------+-----------------------------------+
| EventEmitter                      | The EventEmitter class that many  |
|                                   | Puppeteer classes extend.         |
+-----------------------------------+-----------------------------------+
| FileChooser                       | File choosers let you react to    |
|                                   | the page requesting for a file.   |
+-----------------------------------+-----------------------------------+
| Frame                             | Represents a DOM frame.           |
|                                   |                                   |
|                                   | To understand frames, you can     |
|                                   | think of frames as  <iframe>      |
|                                   | elements. Just like iframes,      |
|                                   | frames can be nested, and when    |
|                                   | JavaScript is executed in a       |
|                                   | frame, the JavaScript does not    |
|                                   | effect frames inside the ambient  |
|                                   | frame the JavaScript executes in. |
+-----------------------------------+-----------------------------------+
| HTTPRequest                       | Represents an HTTP request sent   |
|                                   | by a page.                        |
+-----------------------------------+-----------------------------------+
| HTTPResponse                      | The HTTPResponse class represents |
|                                   | responses which are received by   |
|                                   | the Page class.                   |
+-----------------------------------+-----------------------------------+
| JSCoverage                        |                                   |
+-----------------------------------+-----------------------------------+
| JSHandle                          | Represents a reference to a       |
|                                   | JavaScript object. Instances can  |
|                                   | be created using                  |
|                                   | Page.evaluateHandle() .           |
|                                   |                                   |
|                                   | Handles prevent the referenced    |
|                                   | JavaScript object from being      |
|                                   | garbage-collected unless the      |
|                                   | handle is purposely disposed .    |
|                                   | JSHandles are auto-disposed when  |
|                                   | their associated frame is         |
|                                   | navigated away or the parent      |
|                                   | context gets destroyed.           |
|                                   |                                   |
|                                   | Handles can be used as arguments  |
|                                   | for any evaluation function such  |
|                                   | as Page.$eval() , Page.evaluate() |
|                                   | , and Page.evaluateHandle() .     |
|                                   | They are resolved to their        |
|                                   | referenced object.                |
+-----------------------------------+-----------------------------------+
| Keyboard                          | Keyboard provides an api for      |
|                                   | managing a virtual keyboard. The  |
|                                   | high level api is Keyboard.type() |
|                                   | , which takes raw characters and  |
|                                   | generates proper keydown,         |
|                                   | keypress/input, and keyup events  |
|                                   | on your page.                     |
+-----------------------------------+-----------------------------------+
| Locator                           | Locators describe a strategy of   |
|                                   | locating objects and performing   |
|                                   | an action on them. If the action  |
|                                   | fails because the object is not   |
|                                   | ready for the action, the whole   |
|                                   | operation is retried. Various     |
|                                   | preconditions for a successful    |
|                                   | action are checked automatically. |
+-----------------------------------+-----------------------------------+
| Mouse                             | The Mouse class operates in       |
|                                   | main-frame CSS pixels relative to |
|                                   | the top-left corner of the        |
|                                   | viewport.                         |
+-----------------------------------+-----------------------------------+
| Page                              | Page provides methods to interact |
|                                   | with a single tab or extension    |
|                                   | background page in the browser.   |
|                                   |                                   |
|                                   | :::note                           |
|                                   |                                   |
|                                   | One Browser instance might have   |
|                                   | multiple Page instances.          |
|                                   |                                   |
|                                   | :::                               |
+-----------------------------------+-----------------------------------+
| ProductLauncher                   | Describes a launcher - a class    |
|                                   | that is able to create and launch |
|                                   | a browser instance.               |
+-----------------------------------+-----------------------------------+
| ProtocolError                     | ProtocolError is emitted whenever |
|                                   | there is an error from the        |
|                                   | protocol.                         |
+-----------------------------------+-----------------------------------+
| Puppeteer                         | The main Puppeteer class.         |
|                                   |                                   |
|                                   | IMPORTANT: if you are using       |
|                                   | Puppeteer in a Node environment,  |
|                                   | you will get an instance of       |
|                                   | PuppeteerNode when you import or  |
|                                   | require  puppeteer . That class   |
|                                   | extends  Puppeteer , so has all   |
|                                   | the methods documented below as   |
|                                   | well as all that are defined on   |
|                                   | PuppeteerNode .                   |
+-----------------------------------+-----------------------------------+
| PuppeteerError                    | The base class for all            |
|                                   | Puppeteer-specific errors         |
+-----------------------------------+-----------------------------------+
| PuppeteerNode                     | Extends the main Puppeteer class  |
|                                   | with Node specific behaviour for  |
|                                   | fetching and downloading          |
|                                   | browsers.                         |
|                                   |                                   |
|                                   | If you're using Puppeteer in a    |
|                                   | Node environment, this is the     |
|                                   | class you'll get when you run     |
|                                   |  require('puppeteer') (or the     |
|                                   | equivalent ES  import ).          |
+-----------------------------------+-----------------------------------+
| ScreenRecorder                    |                                   |
+-----------------------------------+-----------------------------------+
| SecurityDetails                   | The SecurityDetails class         |
|                                   | represents the security details   |
|                                   | of a response that was received   |
|                                   | over a secure connection.         |
+-----------------------------------+-----------------------------------+
| Target                            | Target represents a CDP target .  |
|                                   | In CDP a target is something that |
|                                   | can be debugged such a frame, a   |
|                                   | page or a worker.                 |
+-----------------------------------+-----------------------------------+
| TimeoutError                      | TimeoutError is emitted whenever  |
|                                   | certain operations are terminated |
|                                   | due to timeout.                   |
+-----------------------------------+-----------------------------------+
| Touchscreen                       | The Touchscreen class exposes     |
|                                   | touchscreen events.               |
+-----------------------------------+-----------------------------------+
| Tracing                           | The Tracing class exposes the     |
|                                   | tracing audit interface.          |
+-----------------------------------+-----------------------------------+
| UnsupportedOperation              | Puppeteer will throw this error   |
|                                   | if a method is not supported by   |
|                                   | the currently used protocol       |
+-----------------------------------+-----------------------------------+
| WebWorker                         | This class represents a WebWorker |
|                                   | .                                 |
+-----------------------------------+-----------------------------------+

Enumerations 

  Enumeration                 Description
  --------------------------- --------------------------------------------------
  BrowserContextEvent         
  BrowserEvent                All the events a browser instance may emit.
  InterceptResolutionAction   
  LocatorEvent                All the events that a locator instance may emit.
  PageEvent                   All the events that a page instance may emit.
  TargetType                  

Functions 

  Function                                    Description
  ------------------------------------------- -------------
  clearCustomQueryHandlers()                  
  connect(options)                            
  customQueryHandlerNames()                   
  defaultArgs(options)                        
  executablePath(channel)                     
  launch(options)                             
  registerCustomQueryHandler(name, handler)   
  trimCache()                                 
  unregisterCustomQueryHandler(name)          

Interfaces 

+-----------------------------------+-----------------------------------+
| Interface                         | Description                       |
+===================================+===================================+
| ActionOptions                     |                                   |
+-----------------------------------+-----------------------------------+
| AutofillData                      |                                   |
+-----------------------------------+-----------------------------------+
| BoundingBox                       |                                   |
+-----------------------------------+-----------------------------------+
| BoxModel                          |                                   |
+-----------------------------------+-----------------------------------+
| BrowserConnectOptions             | Generic browser options that can  |
|                                   | be passed when launching any      |
|                                   | browser or when connecting to an  |
|                                   | existing browser instance.        |
+-----------------------------------+-----------------------------------+
| BrowserContextEvents              |                                   |
+-----------------------------------+-----------------------------------+
| BrowserContextOptions             |                                   |
+-----------------------------------+-----------------------------------+
| BrowserEvents                     |                                   |
+-----------------------------------+-----------------------------------+
| BrowserLaunchArgumentOptions      | Launcher options that only apply  |
|                                   | to Chrome.                        |
+-----------------------------------+-----------------------------------+
| CDPSessionEvents                  |                                   |
+-----------------------------------+-----------------------------------+
| ClickOptions                      |                                   |
+-----------------------------------+-----------------------------------+
| CommandOptions                    |                                   |
+-----------------------------------+-----------------------------------+
| CommonEventEmitter                |                                   |
+-----------------------------------+-----------------------------------+
| Configuration                     | Defines options to configure      |
|                                   | Puppeteer's behavior during       |
|                                   | installation and runtime.         |
|                                   |                                   |
|                                   | See individual properties for     |
|                                   | more information.                 |
+-----------------------------------+-----------------------------------+
| ConnectionTransport               |                                   |
+-----------------------------------+-----------------------------------+
| ConnectOptions                    |                                   |
+-----------------------------------+-----------------------------------+
| ConsoleMessageLocation            |                                   |
+-----------------------------------+-----------------------------------+
| ContinueRequestOverrides          |                                   |
+-----------------------------------+-----------------------------------+
| Cookie                            | Represents a cookie object.       |
+-----------------------------------+-----------------------------------+
| CookieParam                       | Cookie parameter object           |
+-----------------------------------+-----------------------------------+
| CoverageEntry                     | The CoverageEntry class           |
|                                   | represents one entry of the       |
|                                   | coverage report.                  |
+-----------------------------------+-----------------------------------+
| Credentials                       |                                   |
+-----------------------------------+-----------------------------------+
| CSSCoverageOptions                | Set of configurable options for   |
|                                   | CSS coverage.                     |
+-----------------------------------+-----------------------------------+
| CustomQueryHandler                |                                   |
+-----------------------------------+-----------------------------------+
| DebugInfo                         |                                   |
+-----------------------------------+-----------------------------------+
| DeleteCookiesRequest              |                                   |
+-----------------------------------+-----------------------------------+
| Device                            |                                   |
+-----------------------------------+-----------------------------------+
| ElementScreenshotOptions          |                                   |
+-----------------------------------+-----------------------------------+
| FrameAddScriptTagOptions          |                                   |
+-----------------------------------+-----------------------------------+
| FrameAddStyleTagOptions           |                                   |
+-----------------------------------+-----------------------------------+
| FrameEvents                       |                                   |
+-----------------------------------+-----------------------------------+
| FrameWaitForFunctionOptions       |                                   |
+-----------------------------------+-----------------------------------+
| GeolocationOptions                |                                   |
+-----------------------------------+-----------------------------------+
| GoToOptions                       |                                   |
+-----------------------------------+-----------------------------------+
| InterceptResolutionState          |                                   |
+-----------------------------------+-----------------------------------+
| InternalNetworkConditions         |                                   |
+-----------------------------------+-----------------------------------+
| JSCoverageEntry                   | The CoverageEntry class for       |
|                                   | JavaScript                        |
+-----------------------------------+-----------------------------------+
| JSCoverageOptions                 | Set of configurable options for   |
|                                   | JS coverage.                      |
+-----------------------------------+-----------------------------------+
| KeyboardTypeOptions               |                                   |
+-----------------------------------+-----------------------------------+
| KeyDownOptions                    |                                   |
+-----------------------------------+-----------------------------------+
| LaunchOptions                     | Generic launch options that can   |
|                                   | be passed when launching any      |
|                                   | browser.                          |
+-----------------------------------+-----------------------------------+
| LocatorEvents                     |                                   |
+-----------------------------------+-----------------------------------+
| LocatorOptions                    |                                   |
+-----------------------------------+-----------------------------------+
| LocatorScrollOptions              |                                   |
+-----------------------------------+-----------------------------------+
| MediaFeature                      |                                   |
+-----------------------------------+-----------------------------------+
| Metrics                           |                                   |
+-----------------------------------+-----------------------------------+
| MouseClickOptions                 |                                   |
+-----------------------------------+-----------------------------------+
| MouseMoveOptions                  |                                   |
+-----------------------------------+-----------------------------------+
| MouseOptions                      |                                   |
+-----------------------------------+-----------------------------------+
| MouseWheelOptions                 |                                   |
+-----------------------------------+-----------------------------------+
| Moveable                          |                                   |
+-----------------------------------+-----------------------------------+
| NetworkConditions                 |                                   |
+-----------------------------------+-----------------------------------+
| NewDocumentScriptEvaluation       |                                   |
+-----------------------------------+-----------------------------------+
| Offset                            |                                   |
+-----------------------------------+-----------------------------------+
| PageEvents                        | Denotes the objects received by   |
|                                   | callback functions for page       |
|                                   | events.                           |
|                                   |                                   |
|                                   | See PageEvent for more detail on  |
|                                   | the events and when they are      |
|                                   | emitted.                          |
+-----------------------------------+-----------------------------------+
| PDFMargin                         |                                   |
+-----------------------------------+-----------------------------------+
| PDFOptions                        | Valid options to configure PDF    |
|                                   | generation via Page.pdf() .       |
+-----------------------------------+-----------------------------------+
| Point                             |                                   |
+-----------------------------------+-----------------------------------+
| PuppeteerLaunchOptions            |                                   |
+-----------------------------------+-----------------------------------+
| RemoteAddress                     |                                   |
+-----------------------------------+-----------------------------------+
| ResponseForRequest                | Required response data to fulfill |
|                                   | a request with.                   |
+-----------------------------------+-----------------------------------+
| ScreencastOptions                 |                                   |
+-----------------------------------+-----------------------------------+
| ScreenshotClip                    |                                   |
+-----------------------------------+-----------------------------------+
| ScreenshotOptions                 |                                   |
+-----------------------------------+-----------------------------------+
| SerializedAXNode                  | Represents a Node and the         |
|                                   | properties of it that are         |
|                                   | relevant to Accessibility.        |
+-----------------------------------+-----------------------------------+
| SnapshotOptions                   |                                   |
+-----------------------------------+-----------------------------------+
| TracingOptions                    |                                   |
+-----------------------------------+-----------------------------------+
| Viewport                          |                                   |
+-----------------------------------+-----------------------------------+
| WaitForNetworkIdleOptions         |                                   |
+-----------------------------------+-----------------------------------+
| WaitForOptions                    |                                   |
+-----------------------------------+-----------------------------------+
| WaitForSelectorOptions            |                                   |
+-----------------------------------+-----------------------------------+
| WaitForTargetOptions              |                                   |
+-----------------------------------+-----------------------------------+
| WaitTimeoutOptions                |                                   |
+-----------------------------------+-----------------------------------+

Namespaces 

  Namespace         Description
  ----------------- -----------------------------------------
  CDPSessionEvent   Events that the CDPSession class emits.

Variables 

  Variable                                Description
  --------------------------------------- --------------------------------------------------------------------------------
  DEFAULT_INTERCEPT_RESOLUTION_PRIORITY   The default cooperative request interception resolution priority
  KnownDevices                            A list of devices to be used with Page.emulate() .
  MouseButton                             Enum of valid mouse buttons.
  PredefinedNetworkConditions             A list of network conditions to be used with Page.emulateNetworkConditions() .
  puppeteer                               

Type Aliases 

+-----------------------------------+-----------------------------------+
| Type Alias                        | Description                       |
+===================================+===================================+
| ActionResult                      |                                   |
+-----------------------------------+-----------------------------------+
| Awaitable                         |                                   |
+-----------------------------------+-----------------------------------+
| AwaitableIterable                 |                                   |
+-----------------------------------+-----------------------------------+
| AwaitablePredicate                |                                   |
+-----------------------------------+-----------------------------------+
| AwaitedLocator                    |                                   |
+-----------------------------------+-----------------------------------+
| CDPEvents                         |                                   |
+-----------------------------------+-----------------------------------+
| ChromeReleaseChannel              |                                   |
+-----------------------------------+-----------------------------------+
| ConsoleMessageType                | The supported types for console   |
|                                   | messages.                         |
+-----------------------------------+-----------------------------------+
| CookiePriority                    | Represents the cookie's           |
|                                   | 'Priority' status:                |
|                                   | https://tools.ietf.org/h          |
|                                   | tml/draft-west-cookie-priority-00 |
+-----------------------------------+-----------------------------------+
| CookieSameSite                    | Represents the cookie's           |
|                                   | 'SameSite' status:                |
|                                   | https://tools.ietf.org/ht         |
|                                   | ml/draft-west-first-party-cookies |
+-----------------------------------+-----------------------------------+
| CookieSourceScheme                | Represents the source scheme of   |
|                                   | the origin that originally set    |
|                                   | the cookie. A value of "Unset"    |
|                                   | allows protocol clients to        |
|                                   | emulate legacy cookie scope for   |
|                                   | the scheme. This is a temporary   |
|                                   | ability and it will be removed in |
|                                   | the future.                       |
+-----------------------------------+-----------------------------------+
| ElementFor                        |                                   |
+-----------------------------------+-----------------------------------+
| ErrorCode                         |                                   |
+-----------------------------------+-----------------------------------+
| EvaluateFunc                      |                                   |
+-----------------------------------+-----------------------------------+
| EvaluateFuncWith                  |                                   |
+-----------------------------------+-----------------------------------+
| EventsWithWildcard                |                                   |
+-----------------------------------+-----------------------------------+
| EventType                         |                                   |
+-----------------------------------+-----------------------------------+
| ExperimentsConfiguration          | Defines experiment options for    |
|                                   | Puppeteer.                        |
|                                   |                                   |
|                                   | See individual properties for     |
|                                   | more information.                 |
+-----------------------------------+-----------------------------------+
| FlattenHandle                     |                                   |
+-----------------------------------+-----------------------------------+
| HandleFor                         |                                   |
+-----------------------------------+-----------------------------------+
| HandleOr                          |                                   |
+-----------------------------------+-----------------------------------+
| Handler                           |                                   |
+-----------------------------------+-----------------------------------+
| InnerParams                       |                                   |
+-----------------------------------+-----------------------------------+
| KeyInput                          | All the valid keys that can be    |
|                                   | passed to functions that take     |
|                                   | user input, such as               |
|                                   | keyboard.press                    |
+-----------------------------------+-----------------------------------+
| KeyPressOptions                   |                                   |
+-----------------------------------+-----------------------------------+
| LocatorClickOptions               |                                   |
+-----------------------------------+-----------------------------------+
| LowerCasePaperFormat              |                                   |
+-----------------------------------+-----------------------------------+
| Mapper                            |                                   |
+-----------------------------------+-----------------------------------+
| MouseButton                       |                                   |
+-----------------------------------+-----------------------------------+
| NodeFor                           |                                   |
+-----------------------------------+-----------------------------------+
| PaperFormat                       | All the valid paper format types  |
|                                   | when printing a PDF.              |
+-----------------------------------+-----------------------------------+
| Permission                        |                                   |
+-----------------------------------+-----------------------------------+
| Predicate                         |                                   |
+-----------------------------------+-----------------------------------+
| Product                           | Supported products.               |
+-----------------------------------+-----------------------------------+
| ProtocolLifeCycleEvent            |                                   |
+-----------------------------------+-----------------------------------+
| ProtocolType                      |                                   |
+-----------------------------------+-----------------------------------+
| PuppeteerLifeCycleEvent           |                                   |
+-----------------------------------+-----------------------------------+
| PuppeteerNodeLaunchOptions        | Utility type exposed to enable    |
|                                   | users to define options that can  |
|                                   | be passed to  puppeteer.launch    |
|                                   | without having to list the set of |
|                                   | all types.                        |
+-----------------------------------+-----------------------------------+
| Quad                              |                                   |
+-----------------------------------+-----------------------------------+
| ResourceType                      | Resource types for HTTPRequests   |
|                                   | as perceived by the rendering     |
|                                   | engine.                           |
+-----------------------------------+-----------------------------------+
| TargetFilterCallback              |                                   |
+-----------------------------------+-----------------------------------+
| VisibilityOption                  |                                   |
+-----------------------------------+-----------------------------------+

# downloaded Chromium Support #

Chromium Support

The following versions of Chromium are supported, mapped to Puppeteer
version. This list is automatically updated when the version of Chromium
changes in a given release of Puppeteer. If an exact matching version of
Puppeteer isn't listed, the supported version of Chromium is that for
the immediately prior version of Puppeteer:

-   Chrome for Testing 123.0.6312.58 - Puppeteer v22.6.0
-   Chrome for Testing 122.0.6261.128 - Puppeteer v22.5.0
-   Chrome for Testing 122.0.6261.111 - Puppeteer v22.4.1
-   Chrome for Testing 122.0.6261.94 - Puppeteer v22.4.0
-   Chrome for Testing 122.0.6261.69 - Puppeteer v22.3.0
-   Chrome for Testing 122.0.6261.57 - Puppeteer v22.2.0
-   Chrome for Testing 121.0.6167.85 - Puppeteer v21.9.0
-   Chrome for Testing 120.0.6099.109 - Puppeteer v21.8.0
-   Chrome for Testing 119.0.6045.105 - Puppeteer v21.5.0
-   Chrome for Testing 118.0.5993.70 - Puppeteer v21.4.0
-   Chrome for Testing 117.0.5938.149 - Puppeteer v21.3.7
-   Chrome for Testing 117.0.5938.92 - Puppeteer v21.3.2
-   Chrome for Testing 117.0.5938.62 - Puppeteer v21.3.0
-   Chrome for Testing 116.0.5845.96 - Puppeteer v21.1.0
-   Chrome for Testing 115.0.5790.170 - Puppeteer v21.0.2
-   Chrome for Testing 115.0.5790.102 - Puppeteer v21.0.0
-   Chrome for Testing 115.0.5790.98 - Puppeteer v20.9.0
-   Chrome for Testing 114.0.5735.133 - Puppeteer v20.7.2
-   Chrome for Testing 114.0.5735.90 - Puppeteer v20.6.0
-   Chrome for Testing 113.0.5672.63 - Puppeteer v20.1.0
-   Chrome for Testing 112.0.5615.121 - Puppeteer v20.0.0
-   Chromium 112.0.5614.0 - Puppeteer v19.8.0
-   Chromium 111.0.5556.0 - Puppeteer v19.7.0
-   Chromium 110.0.5479.0 - Puppeteer v19.6.0
-   Chromium 109.0.5412.0 - Puppeteer v19.4.0
-   Chromium 108.0.5351.0 - Puppeteer v19.2.0
-   Chromium 107.0.5296.0 - Puppeteer v18.1.0
-   Chromium 106.0.5249.0 - Puppeteer v17.1.0
-   Chromium 105.0.5173.0 - Puppeteer v15.5.0
-   Chromium 104.0.5109.0 - Puppeteer v15.1.0
-   Chromium 103.0.5059.0 - Puppeteer v14.2.0
-   Chromium 102.0.5002.0 - Puppeteer v14.0.0
-   Chromium 101.0.4950.0 - Puppeteer v13.6.0
-   Chromium 100.0.4889.0 - Puppeteer v13.5.0
-   Chromium 99.0.4844.16 - Puppeteer v13.2.0
-   Chromium 98.0.4758.0 - Puppeteer v13.1.0
-   Chromium 97.0.4692.0 - Puppeteer v12.0.0
-   Chromium 93.0.4577.0 - Puppeteer v10.2.0
-   Chromium 92.0.4512.0 - Puppeteer v10.0.0
-   Chromium 91.0.4469.0 - Puppeteer v9.0.0
-   Chromium 90.0.4427.0 - Puppeteer v8.0.0
-   Chromium 90.0.4403.0 - Puppeteer v7.0.0
-   Chromium 89.0.4389.0 - Puppeteer v6.0.0
-   Chromium 88.0.4298.0 - Puppeteer v5.5.0
-   Chromium 87.0.4272.0 - Puppeteer v5.4.0
-   Chromium 86.0.4240.0 - Puppeteer v5.3.0
-   Chromium 85.0.4182.0 - Puppeteer v5.2.1
-   Chromium 84.0.4147.0 - Puppeteer v5.1.0
-   Chromium 83.0.4103.0 - Puppeteer v3.1.0
-   Chromium 81.0.4044.0 - Puppeteer v3.0.0
-   Chromium 80.0.3987.0 - Puppeteer v2.1.0
-   Chromium 79.0.3942.0 - Puppeteer v2.0.0
-   Chromium 78.0.3882.0 - Puppeteer v1.20.0
-   Chromium 77.0.3803.0 - Puppeteer v1.19.0
-   Chromium 76.0.3803.0 - Puppeteer v1.17.0
-   Chromium 75.0.3765.0 - Puppeteer v1.15.0
-   Chromium 74.0.3723.0 - Puppeteer v1.13.0
-   Chromium 73.0.3679.0 - Puppeteer v1.12.2

# downloaded Contributing #

Contributing

First of all, thank you for your interest in Puppeteer! We'd love to
accept your patches and contributions!

Contributor License Agreement 

Contributions to this project must be accompanied by a Contributor
License Agreement. You (or your employer) retain the copyright to your
contribution, this simply gives us permission to use and redistribute
your contributions as part of the project. Head over to <
https://cla.developers.google.com/ > to see your current agreements on
file or to sign a new one.

You generally only need to submit a CLA once, so if you've already
submitted one (even if it was for a different project), you probably
don't need to do it again.

Getting started 

1.  Clone this repository

        git clone https://github.com/puppeteer/puppeteer
        cd puppeteer

    [] []

    or

    [Open in GitHub Codespaces]

2.  Install the dependencies

        npm install
        # Or to download Firefox by default
        PUPPETEER_PRODUCT=firefox npm install

    [] []

3.  Build all packages

        npm run build

    [] []

4.  Run all tests

        npm test

    [] []

Building a single package 

To build a single package, you can run:

    npm run build --workspace <package> # e.g. puppeteer


This will build all dependent packages automatically, so specifying a
single package is sufficient. This is all possible due to wireit which
behaves similar to GNU Make .

Watch mode 

To continuously build a package, you can run:

    npm run build --watch --workspace <package> # e.g. puppeteer


You have to only specify a single package to watch else things will not
work as expected As stated above because of wireit when a change happens
all dependencies will be build or rebuild (if needed).

Removing stale artifacts 

It's possible some generated artifacts (such as
 packages/puppeteer-core/src/types.ts ) can become stale since these
artifacts rely on complex conditions (such as names of distinct files)
that cannot be captured by the build system. To clean artifacts, you can
run

    npm run clean
    # or specify the package
    npm run clean --workspace <package>


Comprehensive testing 

Outside of  npm test , there are several other  npm scripts that are
usually check through CI:

-    test-install - Tests whether  puppeteer and  puppeteer-core install
    properly and are functional.
-    test-types - Tests the TypeScript types in  puppeteer using  tsd .
-    test:chrome:** - Tests  puppeteer on Chromium.
-    test:firefox:** - Tests  puppeteer on Firefox.
-    unit - Runs unit tests.

The default  npm test runs  test:{chrome,firefox}:headless which is
generally sufficient.

Puppeteer uses a custom test runner on top of Mocha that consults the
TestExpectations.json to see if a given test result is expected or not.
See more info about the test runner in  tools/mocha-runner .

Unit tests 

Tests that only test code (without the running browser) are put next to
the classes they test and run using the Node test runner (requires Node
20+):

    npm run unit


Code reviews 

All submissions, including submissions by project members, require
review. We use GitHub pull requests for this purpose. Consult GitHub
Help for more information on using pull requests.

Code Style 

Our coding style is fully defined in  .eslintrc ( ESLint ) and
 .prettierrc.cjs ( Prettier ).

Code is checked for PRs automatically and you can check your code
manually by running:

    npm run lint


If some errors are returned, you can attempt to fix them using:

    npm run format


Project structure 

The following is a description of the primary folders in Puppeteer:

-    packages contains all public source code.
-    test contains all test source code.
-    test-d contains type tests using  tsd .
-    tools contains miscellaneous scripts that are used in building and
    etc.
-    tools/mocha-runner - contains the source code for our test runner.

API guidelines 

When authoring new API methods, consider the following:

-   Expose as little information as needed. When in doubt, don’t expose
    new information.
-   Methods are used in favor of getters/setters.
    -   The only exception is namespaces, e.g.  page.keyboard and
         page.coverage
-   All string literals must be small case. This includes event names
    and option values.
-   Avoid adding "sugar" API (API that is trivially implementable in
    user-space) unless they're extremely demanded.

Commit messages 

Commit messages should follow the Conventional Commits format .

In particular, breaking changes should clearly be noted as “BREAKING
CHANGE:” in the commit message footer. Example:

    fix(page): fix page.pizza method

    This patch fixes page.pizza so that it works with iframes.

    Issues: #123, #234

    BREAKING CHANGE: page.pizza now delivers pizza at home by default.
    To deliver to a different location, use the "deliver" option:
      `page.pizza({deliver: 'work'})`.


Writing documentation 

Documentation is generated from TSDoc comments via  npm run docs . It is
automatically published to our documentation site on merge and gets
versioned on release.

This means that you should not change the markdown in files  docs/api
manually.

Writing TSDoc comments 

Each change to Puppeteer should be thoroughly documented using TSDoc
comments. Refer to the API Extractor documentation for information on
the exact syntax.

-   Every new method needs to have either  @public or  @internal added
    as a tag depending on if it is part of the public API.
-   Keep each line in a comment to no more than 90 characters (ESLint
    will warn you if you go over this). If you're a VSCode user the
    Rewrap plugin is highly recommended!

Running the documentation site locally 

1.  At root, install all dependencies with  npm i --ignore-scripts .
2.  run  npm run docs which will generate all the  .md files on
     puppeteer/docs/api .
3.  run  npm i in  puppeteer/website .
4.  run  npm start in  puppeteer/website .

Adding new dependencies 

For all dependencies (both installation and development):

-   Do not add a dependency if the desired functionality is easily
    implementable.
-   If adding a dependency, it should be well-maintained and
    trustworthy.

A barrier for introducing new installation dependencies is especially
high:

-   Do not add installation dependency unless it's critical to project
    success.

There are additional considerations for dependencies that are
environment agonistic. See the  third_party/README.md for details.

Testing tips 

-   Every feature should be accompanied by a test.
-   Every public api event/method should be accompanied by a test.
-   Tests should not depend on external services.
-   Tests should work on all three platforms: Mac, Linux and Win. This
    is especially important for screenshot tests.

If a test is expected to fail on certain configurations or became flaky,
update TestExpectations.json to reflect that. See more info about
TestExpectations.json in  tools/mocha-runner .

API Coverage 

Every public API method or event should be called at least once in
tests. To ensure this, the main  test command runs coverage during
testing.

Debugging Puppeteer 

See Debugging Tips .

Debugging Puppeteer tests via VSCode 

Copy the provided default  .vscode/launch.template.json to
 .vscode/launch.json and then use the integrated VSCode debugger to
debug test.

Remember to build test before launching via:

    npm run build --workspace @puppeteer-test/test


For Project Maintainers

Rolling new Chrome version 

There is a GitHub action that runs once per day. The action has a manual
trigger that can be found on the Actions Tab .

Manual instructions 

You can run the  tools/update_chrome_revision.mjs locally and try see if
any changes need to be committed.

  Note: You may need to run
   node --experimental-fetch tools/update_chrome_revision.mjs as the
  script relies on  fetch

The following steps are manual version of the script above.

1.  Find a suitable Chrome  revision and  version via
    https://googlechromelabs.github.io/chrome-for-testing/ or
    https://chromiumdash.appspot.com/ .
2.  Update  packages/puppeteer-core/src/revisions.ts with the found
     version number.
3.  Update  versions.js with the new Chrome-to-Puppeteer  version
    mapping and update  lastMaintainedChromeVersion with the next one in
    from the list.
4.  Run  npm run check . If it fails, update
     packages/puppeteer-core/package.json with the expected
     devtools-protocol version and run  npm install to generate an
    updated  package-lock.json .
5.  Run  npm run clean ,  npm install and  npm run build .
6.  Run  npm test and ensure that all tests pass. If a test fails,
    bisect the upstream cause of the failure, and either update the test
    expectations accordingly (if it was an intended change) or work
    around the changes in Puppeteer (if it’s not desirable to change
    Puppeteer’s observable behavior).
7.  Commit and push your changes and open a pull request. The commit
    message must contain the version in  Chrome <version> (r<revision>)
    format to ensure that pptr.dev can parse it correctly, e.g.
     feat(chrome): roll to Chrome 90.0.4427.0 (r856583) .

  NOTE: Another place you can find version corresponding version is
  omahaproxy.appspot.com by searching in  Find Releases for  r<revision>
  .

Bisecting upstream changes 

For bisecting Chrome/Chromium changes use
https://www.chromium.org/developers/bisect-builds-py/ .

Releasing to npm 

We use release-please to automate releases. When a release should be
done, check for the release PR in our pull requests and merge it.

In case Release Please fails 

In the event release-please fails, the following needs to be done:

1.  Update anything missing in the CHANGELOG of every package that was
    supposed to be published. For example, if the header is missing, you
    may need to add

    -   For puppeteer:

            ## [{NEW_VERSION}](https://github.com/puppeteer/puppeteer/compare/v{PREVIOUS_VERSION}...v{NEW_VERSION}) ({CURRENT_DATE})`

        [] []

    -   For other packages:

            ## [{NEW_VERSION}](https://github.com/puppeteer/puppeteer/compare/{PACKAGE_FOLDER_NAME}-v{PREVIOUS_VERSION}...{PACKAGE_FOLDER_NAME}-v{NEW_VERSION}) ({CURRENT_DATE})

        [] []

2.  Create a GitHub release for each package, following the practice of
    previous releases.

Bug triage guidelines 

Check incoming bug reports that do not have a  confirmed or
 needs-feedback label:

1.  Make sure the issue is labeled as either  bug or  feature .
2.  If the issue does not have a clear repro or you cannot repro, ask
    for the repro and set the  needs-feedback label.
3.  Follow-up on the issues you previously asked for a feedback on (you
    should get a notification on GitHub when the user responds).
4.  If the user does not provide feedback, the issue will be closed by
    the stale bot eventually.
5.  If you are able to reproduce the issue, add the label  confirmed .
6.  If the bug is on the Chromium side, create a corresponding crbug.com
    issue, label the GitHub issue with the  upstream label, and post a
    link to crbug.com in the comments.
7.  If the issue is not related to either Puppeteer or Chromium, close
    the issue.
8.  If the issue is about missing/incorrect documentation, label it as
     documentation .

Issues with PDFs:

1.  If the issue reproduces using the regular print dialog and/or
    headful, file a crbug.com against the  Blink>Layout component .
2.  If the issue is specific to Headless mode, file an issue on
    crbug.com against the  Internals>Headless component .

# downloaded FAQ #

FAQ

Q: Who maintains Puppeteer? 

The Chrome Browser Automation team maintains the library, but we'd love
your help and expertise on the project! See our contributing guide .

Q: What is the status of cross-browser support? 

Official Firefox support is currently experimental. The ongoing
collaboration with Mozilla aims to support common end-to-end testing use
cases, for which developers expect cross-browser coverage. The Puppeteer
team needs input from users to stabilize Firefox support and to bring
missing APIs to our attention.

From Puppeteer v2.1.0 onwards you can specify
 puppeteer.launch({product: 'firefox'}) to run your Puppeteer scripts in
Firefox Nightly, without any additional custom patches. While an older
experiment required a patched version of Firefox, the current approach
works with “stock” Firefox.

We will continue to collaborate with other browser vendors to bring
Puppeteer support to browsers such as Safari. This effort includes
exploration of a standard for executing cross-browser commands (instead
of relying on the non-standard DevTools Protocol used by Chrome).

Update 2023-11-17: Puppeteer has experimental support for the new
WebDriverBiDi protocol that can be used to automate Firefox. The
WebDriver BiDi implementation in Firefox will replace the current CDP
implementation in Firefox in the future. See
https://pptr.dev/webdriver-bidi for more details.

Q: Does Puppeteer support WebDriver BiDi? 

Puppeteer has experimental support for WebDriver BiDi. See
https://pptr.dev/webdriver-bidi .

Q: What are Puppeteer’s goals and principles? 

The goals of the project are:

-   Provide a reference implementation that highlights the capabilities
    of the Chrome DevTools and WebDriver BiDi protocols.
-   Grow the adoption of automated cross-browser testing.
-   Help dogfood new DevTools Protocol and WebDriver BiDi features...and
    catch bugs!
-   Learn more about the pain points of automated browser testing and
    help fill those gaps.

We adapt Chromium principles to help us drive product decisions:

-   Speed : Puppeteer has almost zero performance overhead over an
    automated page.
-   Security : Puppeteer operates off-process with respect to the
    browser, making it safe to automate potentially malicious pages.
-   Stability : Puppeteer should not be flaky and should not leak
    memory.
-   Simplicity : Puppeteer provides a high-level API that’s easy to use,
    understand, and debug.

Q: Is Puppeteer a replacement for Selenium WebDriver? 

No . Both projects are valuable for very different reasons:

-   Selenium WebDriver focuses on cross-browser automation and provides
    bindings for multiple languages; Puppeteer is only for JavaScript.
-   Puppeteer focuses on Chromium; its value proposition is richer
    functionality for Chromium-based browsers.

That said, you can use Puppeteer to run tests against Chromium, e.g.
using the community-driven jest-puppeteer or Puppeteer's Angular
integration . While this probably shouldn’t be your only testing
solution, it does have a few good points compared to WebDriver classic:

-   Puppeteer requires zero setup and comes bundled with the Chrome
    version it works best with, making it very easy to start with .
-   Puppeteer has event-driven architecture, which removes a lot of
    potential flakiness. There’s no need for “sleep(1000)” calls in
    puppeteer scripts.
-   Puppeteer exposes browser contexts, making it possible to
    efficiently parallelize test execution.
-   Puppeteer shines when it comes to debugging: flip the “headless” bit
    to false, add “slowMo”, and you’ll see what the browser is doing.
    You can even open Chrome DevTools to inspect the test environment.

Q: Why doesn’t Puppeteer v.XXX work with Chromium v.YYY? 

We see Puppeteer as an indivisible entity with Chromium. Each version of
Puppeteer bundles a specific version of Chromium – the only version it
is guaranteed to work with.

This is not an artificial constraint: A lot of work on Puppeteer is
actually taking place in the Chromium repository. Here’s a typical
story:

-   A Puppeteer bug is reported:
    https://github.com/puppeteer/puppeteer/issues/2709
-   It turned out this is an issue with the DevTools protocol, so we’re
    fixing it in Chromium:
    https://chromium-review.googlesource.com/c/chromium/src/+/1102154
-   Once the upstream fix is landed, we roll updated Chromium into
    Puppeteer: https://github.com/puppeteer/puppeteer/pull/2769

Q: Which Chrome version does Puppeteer use? 

Look for the  chrome entry in revisions.ts .

Q: Which Firefox version does Puppeteer use? 

Since Firefox support is experimental, Puppeteer downloads the latest
Firefox Nightly when the  PUPPETEER_PRODUCT environment variable is set
to  firefox . That's also why the value of  firefox in revisions.ts is
 latest -- Puppeteer isn't tied to a particular Firefox version.

To fetch Firefox Nightly as part of Puppeteer installation:

    PUPPETEER_PRODUCT=firefox npm i puppeteer


To download Firefox Nightly into an existing Puppeteer project:

    npx puppeteer browsers install firefox


Q: What’s considered a “Navigation”? 

From Puppeteer’s standpoint, “navigation” is anything that changes a
page’s URL . Aside from regular navigation where the browser hits the
network to fetch a new document from the web server, this includes
anchor navigations and History API usage.

With this definition of “navigation,” Puppeteer works seamlessly with
single-page applications.

Q: What’s the difference between a “trusted" and "untrusted" input event? 

In browsers, input events could be divided into two big groups: trusted
vs. untrusted.

-   Trusted events : events generated by users interacting with the
    page, e.g. using a mouse or keyboard.
-   Untrusted event : events generated by Web APIs, e.g.
     document.createEvent or  element.click() methods.

Websites can distinguish between these two groups:

-   using an  Event.isTrusted event flag
-   sniffing for accompanying events. For example, every trusted
     'click' event is preceded by  'mousedown' and  'mouseup' events.

For automation purposes it’s important to generate trusted events. All
input events generated with Puppeteer are trusted and fire proper
accompanying events. If, for some reason, one needs an untrusted event,
it’s always possible to hop into a page context with  page.evaluate and
generate a fake event:

    await page.evaluate(() => {
      document.querySelector('button[type=submit]').click();
    });


Q: Does Puppeteer support media and audio playback? 

Puppeteer uses Chrome for Testing binaries by default which ship with
properietary codecs support starting from M120 .

Q: I am having trouble installing / running Puppeteer in my test environment. Where should I look for help? 

We have a troubleshooting guide for various operating systems that lists
the required dependencies.

Q: I have more questions! Where do I ask? 

There are many ways to get help on Puppeteer:

-   For questions: Stack Overflow
-   For bug reports: GitHub Issues

Make sure to search these channels before posting your question.

# downloaded Puppeteer #

Puppeteer

[Build status] [npm puppeteer package]

[]

Guides | API | FAQ | Contributing | Troubleshooting 

  Puppeteer is a Node.js library which provides a high-level API to
  control Chrome/Chromium over the DevTools Protocol . Puppeteer runs in
  headless mode by default, but can be configured to run in full
  ("headful") Chrome/Chromium.

What can I do? 

Most things that you can do manually in the browser can be done using
Puppeteer! Here are a few examples to get you started:

-   Generate screenshots and PDFs of pages.
-   Crawl a SPA (Single-Page Application) and generate pre-rendered
    content (i.e. "SSR" (Server-Side Rendering)).
-   Automate form submission, UI testing, keyboard input, etc.
-   Create an automated testing environment using the latest JavaScript
    and browser features.
-   Capture a timeline trace of your site to help diagnose performance
    issues.
-   Test Chrome Extensions .

Getting Started 

Installation 

To use Puppeteer in your project, run:

    npm i puppeteer
    # or using yarn
    yarn add puppeteer
    # or using pnpm
    pnpm i puppeteer


When you install Puppeteer, it automatically downloads a recent version
of Chrome for Testing (~170MB macOS, ~282MB Linux, ~280MB Windows) and a
 chrome-headless-shell binary (starting with Puppeteer v21.6.0) that is
guaranteed to work with Puppeteer. The browser is downloaded to the
 $HOME/.cache/puppeteer folder by default (starting with Puppeteer
v19.0.0). See configuration for configuration options and environmental
variables to control the download behavor.

If you deploy a project using Puppeteer to a hosting provider, such as
Render or Heroku, you might need to reconfigure the location of the
cache to be within your project folder (see an example below) because
not all hosting providers include  $HOME/.cache into the project's
deployment.

For a version of Puppeteer without the browser installation, see
 puppeteer-core .

If used with TypeScript, the minimum supported TypeScript version is
 4.7.4 .

Configuration 

Puppeteer uses several defaults that can be customized through
configuration files.

For example, to change the default cache directory Puppeteer uses to
install browsers, you can add a  .puppeteerrc.cjs (or
 puppeteer.config.cjs ) at the root of your application with the
contents

    const {join} = require('path');

    /**
     * @type {import("puppeteer").Configuration}
     */
    module.exports = {
      // Changes the cache location for Puppeteer.
      cacheDirectory: join(__dirname, '.cache', 'puppeteer'),
    };


After adding the configuration file, you will need to remove and
reinstall  puppeteer for it to take effect.

See the configuration guide for more information.

 puppeteer-core 

For every release since v1.7.0 we publish two packages:

-    puppeteer
-    puppeteer-core

 puppeteer is a product for browser automation. When installed, it
downloads a version of Chrome, which it then drives using
 puppeteer-core . Being an end-user product,  puppeteer automates
several workflows using reasonable defaults that can be customized .

 puppeteer-core is a library to help drive anything that supports
DevTools protocol. Being a library,  puppeteer-core is fully driven
through its programmatic interface implying no defaults are assumed and
 puppeteer-core will not download Chrome when installed.

You should use  puppeteer-core if you are connecting to a remote browser
or managing browsers yourself . If you are managing browsers yourself,
you will need to call  puppeteer.launch with an explicit  executablePath
(or  channel if it's installed in a standard location).

When using  puppeteer-core , remember to change the import:

    import puppeteer from 'puppeteer-core';


Usage 

Puppeteer follows the latest maintenance LTS version of Node.

Puppeteer will be familiar to people using other browser testing
frameworks. You launch / connect a browser , create some pages , and
then manipulate them with Puppeteer's API .

For more in-depth usage, check our guides and examples .

Example 

The following example searches developer.chrome.com for blog posts with
text "automate beyond recorder", click on the first result and print the
full title of the blog post.

    import puppeteer from 'puppeteer';

    (async () => {
      // Launch the browser and open a new blank page
      const browser = await puppeteer.launch();
      const page = await browser.newPage();

      // Navigate the page to a URL
      await page.goto('https://developer.chrome.com/');

      // Set screen size
      await page.setViewport({width: 1080, height: 1024});

      // Type into search box
      await page.type('.devsite-search-field', 'automate beyond recorder');

      // Wait and click on first result
      const searchResultSelector = '.devsite-result-item-link';
      await page.waitForSelector(searchResultSelector);
      await page.click(searchResultSelector);

      // Locate the full title with a unique string
      const textSelector = await page.waitForSelector(
        'text/Customize and automate'
      );
      const fullTitle = await textSelector?.evaluate(el => el.textContent);

      // Print the full title
      console.log('The title of this blog post is "%s".', fullTitle);

      await browser.close();
    })();


Default runtime settings 

1. Uses Headless mode

By default Puppeteer launches Chrome in the Headless mode .

    const browser = await puppeteer.launch();
    // Equivalent to
    const browser = await puppeteer.launch({headless: true});


Before v22, Puppeteer launched the old Headless mode by default. The old
headless mode is now known as  chrome-headless-shell and ships as a
separate binary.  chrome-headless-shell does not match the behavior of
the regular Chrome completely but it is currently more performant for
automation tasks where the complete Chrome feature set is not needed. If
the performance is more important for your use case, switch to
 chrome-headless-shell as following:

    const browser = await puppeteer.launch({headless: 'shell'});


To launch a "headful" version of Chrome, set the  headless to  false
option when launching a browser:

    const browser = await puppeteer.launch({headless: false});


2. Runs a bundled version of Chrome

By default, Puppeteer downloads and uses a specific version of Chrome so
its API is guaranteed to work out of the box. To use Puppeteer with a
different version of Chrome or Chromium, pass in the executable's path
when creating a  Browser instance:

    const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});


You can also use Puppeteer with Firefox. See status of cross-browser
support for more information.

See  this article for a description of the differences between Chromium
and Chrome.  This article describes some differences for Linux users.

3. Creates a fresh user profile

Puppeteer creates its own browser user profile which it cleans up on
every run .

Using Docker 

See our Docker guide .

Using Chrome Extensions 

See our Chrome extensions guide .

Resources 

-   API Documentation
-   Guides
-   Examples
-   Community list of Puppeteer resources

Contributing 

Check out our contributing guide to get an overview of Puppeteer
development.

FAQ 

Our FAQ has migrated to our site .

# downloaded Troubleshooting #

Troubleshooting

[] note

To keep this page up-to-date we largely rely on community contributions.
Please send a PR if you notice something is no longer up-to-date.

 Cannot find module 'puppeteer-core/internal/...' 

This can occur if your Node.js version is lower than 14 or if you are
using a custom resolver (such as  jest-resolve ). For the former, we do
not support deprecated versions of Node.js. For the latter, usually
upgrading the resolver (or its parent module such as  jest ) will work
(e.g. https://github.com/puppeteer/puppeteer/issues/9121 )

 Could not find expected browser locally 

Starting from v19.0.0, Puppeteer will download browsers into
 ~/.cache/puppeteer using  os.homedir for better caching between
Puppeteer upgrades. Generally the home directory is well-defined (even
on Windows), but occasionally the home directory may not be available.
In this case, we provide the  PUPPETEER_CACHE_DIR variable which allows
you to change the installation directory.

For example,

    PUPPETEER_CACHE_DIR=$(pwd) npm install puppeteer
    PUPPETEER_CACHE_DIR=$(pwd) node <script-path>


You can also create a configuration file named  .puppeteerrc.cjs (or
 puppeteer.config.cjs ) at the root of your application with the
contents

    const {join} = require('path');

    /**
     * @type {import("puppeteer").Configuration}
     */
    module.exports = {
      cacheDirectory: join(__dirname, '.cache', 'puppeteer'),
    };


You will need to reinstall  puppeteer in order for the configuration to
take effect. See Configuring Puppeteer for more information.

Chrome headless doesn't launch on Windows 

Some chrome policies might enforce running Chrome/Chromium with certain
extensions.

Puppeteer passes  --disable-extensions flag by default and will fail to
launch when such policies are active.

To work around this, try running without the flag:

    const browser = await puppeteer.launch({
      ignoreDefaultArgs: ['--disable-extensions'],
    });


  Context: issue 3681 .

Chrome doesn't launch on Linux 

Make sure all the necessary dependencies are installed. You can run
 ldd chrome | grep not on a Linux machine to check which dependencies
are missing. The common ones are provided below. Also, see
https://source.chromium.org/chromium/chromium/src/+/main:chrome/installer/linux/debian/dist_package_versions.json
for the up-to-date list of dependencies declared by the Chrome
installer.

[] caution

Chrome currently does not provide arm64 binaries for Linux. There are
only arm64 binaries for Mac ARM. That means that Linux binaries
downloaded by default will not work on Linux arm64.

Debian (e.g. Ubuntu) Dependencies

    ca-certificates
    fonts-liberation
    libasound2
    libatk-bridge2.0-0
    libatk1.0-0
    libc6
    libcairo2
    libcups2
    libdbus-1-3
    libexpat1
    libfontconfig1
    libgbm1
    libgcc1
    libglib2.0-0
    libgtk-3-0
    libnspr4
    libnss3
    libpango-1.0-0
    libpangocairo-1.0-0
    libstdc++6
    libx11-6
    libx11-xcb1
    libxcb1
    libxcomposite1
    libxcursor1
    libxdamage1
    libxext6
    libxfixes3
    libxi6
    libxrandr2
    libxrender1
    libxss1
    libxtst6
    lsb-release
    wget
    xdg-utils


CentOS Dependencies

    alsa-lib.x86_64
    atk.x86_64
    cups-libs.x86_64
    gtk3.x86_64
    ipa-gothic-fonts
    libXcomposite.x86_64
    libXcursor.x86_64
    libXdamage.x86_64
    libXext.x86_64
    libXi.x86_64
    libXrandr.x86_64
    libXScrnSaver.x86_64
    libXtst.x86_64
    pango.x86_64
    xorg-x11-fonts-100dpi
    xorg-x11-fonts-75dpi
    xorg-x11-fonts-cyrillic
    xorg-x11-fonts-misc
    xorg-x11-fonts-Type1
    xorg-x11-utils


After installing dependencies you need to update  nss library using this
command

    yum update nss -y


Check out discussions

-   #290 - Debian troubleshooting
-   #391 - CentOS troubleshooting
-   #379 - Alpine troubleshooting

chrome-headless-shell disables GPU compositing 

chrome-headless-shell requires  --enable-gpu to enable GPU acceleration
in headless mode .

    const browser = await puppeteer.launch({
      headless: 'shell',
      args: ['--enable-gpu'],
    });


Setting up GPU with Chrome 

Generally, Chrome should be able to detect and enable GPU if the system
has appropriate drivers. For additional tips, see the following blog
post https://developer.chrome.com/blog/supercharge-web-ai-testing .

Setting Up Chrome Linux Sandbox 

In order to protect the host environment from untrusted web content,
Chrome uses multiple layers of sandboxing . For this to work properly,
the host should be configured first. If there's no good sandbox for
Chrome to use, it will crash with the error  No usable sandbox! .

If you absolutely trust the content you open in Chrome, you can launch
Chrome with the  --no-sandbox argument:

    const browser = await puppeteer.launch({
      args: ['--no-sandbox', '--disable-setuid-sandbox'],
    });


[] caution

Running without a sandbox is strongly discouraged . Consider configuring
a sandbox instead.

There are 2 ways to configure a sandbox in Chromium.

[recommended] Enable user namespace cloning 

User namespace cloning is only supported by modern kernels. Unprivileged
user namespaces are generally fine to enable, but in some cases they
open up more kernel attack surface for (unsandboxed) non-root processes
to elevate to kernel privileges.

    sudo sysctl -w kernel.unprivileged_userns_clone=1


[alternative] Setup setuid sandbox 

The setuid sandbox comes as a standalone executable and is located next
to the Chrome that Puppeteer downloads. It is fine to re-use the same
sandbox executable for different Chrome versions, so the following could
be done only once per host environment:

    # cd to Puppeteer cache directory (adjust the path if using a different cache directory).
    cd ~/.cache/puppeteer/chrome/linux-<version>/chrome-linux64/
    sudo chown root:root chrome_sandbox
    sudo chmod 4755 chrome_sandbox
    # copy sandbox executable to a shared location
    sudo cp -p chrome_sandbox /usr/local/sbin/chrome-devel-sandbox
    # export CHROME_DEVEL_SANDBOX env variable
    export CHROME_DEVEL_SANDBOX=/usr/local/sbin/chrome-devel-sandbox


You might want to export the  CHROME_DEVEL_SANDBOX env variable by
default. In this case, add the following to the  ~/.bashrc or  .zshenv :

    export CHROME_DEVEL_SANDBOX=/usr/local/sbin/chrome-devel-sandbox


or to your  Dockerfile :

    ENV CHROME_DEVEL_SANDBOX /usr/local/sbin/chrome-devel-sandbox


Running Puppeteer on Travis CI 

  👋 We ran our tests for Puppeteer on Travis CI until v6.0.0 (when
  we've migrated to GitHub Actions) - see our historical  .travis.yml
  (v5.5.0) for reference.

Tips-n-tricks:

-   xvfb service should be launched in order to run Chromium in
    non-headless mode
-   Runs on Xenial Linux on Travis by default
-   Runs  npm install by default
-    node_modules is cached by default

 .travis.yml might look like this:

    language: node_js
    node_js: node
    services: xvfb
    script:
      - npm test


Running Puppeteer on WSL (Windows subsystem for Linux) 

See this thread with some tips specific to WSL. In a nutshell, you need
to install missing dependencies by either:

1.  Installing Chrome on WSL to install all dependencies
2.  Installing required dependencies manually:
     sudo apt install libgtk-3-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2
    .

[] caution

The list of required dependencies might get outdated and depend on what
you already have installed.

Running Puppeteer on CircleCI 

Running Puppeteer smoothly on CircleCI requires the following steps:

1.  Start with a NodeJS image in your config like so:
        docker:
          - image: circleci/node:14 # Use your desired version
            environment:
              NODE_ENV: development # Only needed if puppeteer is in `devDependencies`

    [] []
2.  Dependencies like  libXtst6 probably need to be installed via
     apt-get , so use the threetreeslight/puppeteer orb ( instructions
    ), or paste parts of its source into your own config.
3.  Lastly, if you’re using Puppeteer through Jest, then you may
    encounter an error spawning child processes:
        [00:00.0]  jest args: --e2e --spec --max-workers=36
        Error: spawn ENOMEM
           at ChildProcess.spawn (internal/child_process.js:394:11)

    [] []

    This is likely caused by Jest autodetecting the number of processes
    on the entire machine (  36 ) rather than the number allowed to your
    container (  2 ). To fix this, set  jest --maxWorkers=2 in your test
    command.

Running Puppeteer in Docker 

  👋 We used Cirrus Ci to run our tests for Puppeteer in a Docker
  container until v3.0.x - see our historical  Dockerfile.linux (v3.0.1)
  for reference. Starting from v16.0.0 we are shipping a Docker image
  via the GitHub registry. The Dockerfile is located here and the usage
  instructions are in the README.md . The instructions below might be
  still helpful if you are building your own image.

Getting headless Chrome up and running in Docker can be tricky. The
bundled Chromium that Puppeteer installs is missing the necessary shared
library dependencies.

To fix, you'll need to install the missing dependencies and the latest
Chromium package in your Dockerfile:

    FROM node:14-slim

    # Install latest chrome dev package and fonts to support major charsets (Chinese, Japanese, Arabic, Hebrew, Thai and a few others)
    # Note: this installs the necessary libs to make the bundled version of Chromium that Puppeteer
    # installs, work.
    RUN apt-get update \
        && apt-get install -y wget gnupg \
        && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
        && sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' \
        && apt-get update \
        && apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 \
          --no-install-recommends \
        && rm -rf /var/lib/apt/lists/*

    # If running Docker >= 1.13.0 use docker run's --init arg to reap zombie processes, otherwise
    # uncomment the following lines to have `dumb-init` as PID 1
    # ADD https://github.com/Yelp/dumb-init/releases/download/v1.2.2/dumb-init_1.2.2_x86_64 /usr/local/bin/dumb-init
    # RUN chmod +x /usr/local/bin/dumb-init
    # ENTRYPOINT ["dumb-init", "--"]

    # Uncomment to skip the chromium download when installing puppeteer. If you do,
    # you'll need to launch puppeteer with:
    #     browser.launch({executablePath: 'google-chrome-stable'})
    # ENV PUPPETEER_SKIP_DOWNLOAD true

    # Install puppeteer so it's available in the container.
    RUN npm init -y &&  \
        npm i puppeteer \
        # Add user so we don't need --no-sandbox.
        # same layer as npm install to keep re-chowned files from using up several hundred MBs more space
        && groupadd -r pptruser && useradd -r -g pptruser -G audio,video pptruser \
        && mkdir -p /home/pptruser/Downloads \
        && chown -R pptruser:pptruser /home/pptruser \
        && chown -R pptruser:pptruser /node_modules \
        && chown -R pptruser:pptruser /package.json \
        && chown -R pptruser:pptruser /package-lock.json

    # Run everything after as non-privileged user.
    USER pptruser

    CMD ["google-chrome-stable"]


Build the container:

    docker build -t puppeteer-chrome-linux .


Run the container by passing
 node -e "<yourscript.js content as a string>" as the command:

     docker run -i --init --rm --cap-add=SYS_ADMIN \
       --name puppeteer-chrome puppeteer-chrome-linux \
       node -e "`cat yourscript.js`"


There's a full example at https://github.com/ebidel/try-puppeteer that
shows how to run this Dockerfile from a webserver running on App Engine
Flex (Node).

Running on Alpine 

The newest Chromium package supported on Alpine is 100, which
corresponds to Puppeteer v13.5.0 .

Example Dockerfile:

    FROM alpine

    # Installs latest Chromium (100) package.
    RUN apk add --no-cache \
          chromium \
          nss \
          freetype \
          harfbuzz \
          ca-certificates \
          ttf-freefont \
          nodejs \
          yarn

    ...

    # Tell Puppeteer to skip installing Chrome. We'll be using the installed package.
    ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

    # Puppeteer v13.5.0 works with Chromium 100.
    RUN yarn add puppeteer@13.5.0

    # Add user so we don't need --no-sandbox.
    RUN addgroup -S pptruser && adduser -S -G pptruser pptruser \
        && mkdir -p /home/pptruser/Downloads /app \
        && chown -R pptruser:pptruser /home/pptruser \
        && chown -R pptruser:pptruser /app

    # Run everything after as non-privileged user.
    USER pptruser

    ...


Running Puppeteer on GitlabCI 

This is very similar to some of the instructions above, but require a
bit different configuration to finally achieve success.

Usually the issue looks like this:

    Error: Failed to launch chrome! spawn /usr/bin/chromium-browser ENOENT


You need to patch two places:

1.  Your  gitlab-ci.yml config
2.  Arguments' list when launching puppeteer

In  gitlab-ci.yml we need to install some packages to make it possible
to launch headless Chrome in your docker env:

    before_script:
      - apt-get update
      - apt-get install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2
        libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4
        libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0
        libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1
        libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1
        libxss1 libxtst6 ca-certificates fonts-liberation libnss3 lsb-release
        xdg-utils wget


Next, you have to use  '--no-sandbox' mode and also
 '--disable-setuid-sandbox' when launching Puppeteer. This can be done
by passing them as an arguments to your  .launch() call:
 puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] });
.

Running Puppeteer on Google Cloud Run 

Google Cloud Run disables the CPU by default, after an HTTP response is
written to the client. This means that puppeteer will appear extremely
slow (taking 1-5 minutes to launch), if you "run puppeteer in the
background" after your response has been written.

So this simple express app will be percievably slow:

    import express from 'express';

    const app = express();

    app.post('/test-puppeteer', (req, res) => {
      res.json({
        jobId: 123,
        acknowledged: true,
      });

      puppeteer.launch().then(browser => {
        // 2 minutes later...
      });
    });

    app.listen(3000);


It is slow because CPU is disabled on GCR because puppeteer is launched
after the response is sent. What you want to do is this:

    app.post('/test-puppeteer', (req, res) => {
      puppeteer.launch().then(browser => {
        // A second later...
        res.json({
          jobId: 123,
          acknowledged: true,
        });
      });
    });


If you want to run the stuff in the background, you need to "enable CPU
always" even after responses are sent. That should fix it.

Tips 

By default, Docker runs a container with a  /dev/shm shared memory space
64MB. This is typically too small for Chrome and will cause Chrome to
crash when rendering large pages. To fix, run the container with
 docker run --shm-size=1gb to increase the size of  /dev/shm . Since
Chrome 65, this is no longer necessary. Instead, launch the browser with
the  --disable-dev-shm-usage flag:

    const browser = await puppeteer.launch({
      args: ['--disable-dev-shm-usage'],
    });


This will write shared memory files into  /tmp instead of  /dev/shm .
See crbug.com/736452 for more details.

Seeing other weird errors when launching Chrome? Try running your
container with  docker run --cap-add=SYS_ADMIN when developing locally.
Since the Dockerfile adds a  pptr user as a non-privileged user, it may
not have all the necessary privileges.

dumb-init is worth checking out if you're experiencing a lot of zombies
Chrome processes sticking around. There's special treatment for
processes with PID=1, which makes it hard to terminate Chrome properly
in some cases (e.g. in Docker).

Running Puppeteer in the cloud 

Running Puppeteer on Google App Engine 

The Node.js runtime of the App Engine standard environment comes with
all system packages needed to run Headless Chrome.

To use  puppeteer , specify the module as a dependency in your
 package.json and then override the puppeteer cache directory by
including a file named  .puppeteerrc.cjs at the root of your application
with the contents:

    const {join} = require('path');

    /**
     * @type {import("puppeteer").Configuration}
     */
    module.exports = {
      cacheDirectory: join(__dirname, 'node_modules', '.puppeteer_cache'),
    };


  [!NOTE] Google App Engine caches your  node_modules between builds.
  Specifying the Puppeteer cache as subdirectory of  node_modules
  mitigates an issue in which Puppeteer can't find the browser
  executable due to  postinstall not being run.

Running Puppeteer on Google Cloud Functions 

The Node.js runtime of Google Cloud Functions comes with all system
packages needed to run Headless Chrome.

To use  puppeteer , specify the module as a dependency in your
 package.json and then override the puppeteer cache directory by
including a file named  .puppeteerrc.cjs at the root of your application
with the contents:

    const {join} = require('path');

    /**
     * @type {import("puppeteer").Configuration}
     */
    module.exports = {
      cacheDirectory: join(__dirname, 'node_modules', '.puppeteer_cache'),
    };


  [!NOTE] Google Cloud Functions caches your  node_modules between
  builds. Specifying the puppeteer cache as subdirectory of
   node_modules mitigates an issue in which the puppeteer install
  process does not run when the cache is hit.

Running Puppeteer on Google Cloud Run 

The default Node.js runtime of Google Cloud Run does not come with the
system packages needed to run Headless Chrome. You will need to set up
your own  Dockerfile and include the missing dependencies .

Running Puppeteer on Heroku 

Running Puppeteer on Heroku requires some additional dependencies that
aren't included on the Linux box that Heroku spins up for you. To add
the dependencies on deploy, add the Puppeteer Heroku buildpack to the
list of buildpacks for your app under Settings > Buildpacks.

The url for the buildpack is
https://github.com/jontewks/puppeteer-heroku-buildpack

Ensure that you're using  '--no-sandbox' mode when launching Puppeteer.
This can be done by passing it as an argument to your  .launch() call:
 puppeteer.launch({ args: ['--no-sandbox'] }); .

When you click add buildpack, simply paste that url into the input, and
click save. On the next deploy, your app will also install the
dependencies that Puppeteer needs to run.

If you need to render Chinese, Japanese, or Korean characters you may
need to use a buildpack with additional font files like
https://github.com/CoffeeAndCode/puppeteer-heroku-buildpack

There's also another simple guide from @timleland that includes a sample
project: https://timleland.com/headless-chrome-on-heroku/ .

Running Puppeteer on AWS Lambda 

AWS Lambda limits deployment package sizes to ~50MB. This presents
challenges for running headless Chrome (and therefore Puppeteer) on
Lambda. The community has put together a few resources that work around
the issues:

-   https://github.com/sparticuz/chromium (a vendor and framework
    agnostic library that supports modern versions of  chromium )
-   https://github.com/alixaxel/chrome-aws-lambda (supports up to
    puppeteer 10.1 - outdated)
-   https://github.com/adieuadieu/serverless-chrome/blob/HEAD/docs/chrome.md
    (serverless plugin - outdated)

Running Puppeteer on AWS EC2 instance running Amazon-Linux 

If you are using an EC2 instance running amazon-linux in your CI/CD
pipeline, and if you want to run Puppeteer tests in amazon-linux, follow
these steps.

1.  To install Chromium, you have to first enable  amazon-linux-extras
    which comes as part of EPEL (Extra Packages for Enterprise Linux) :

        sudo amazon-linux-extras install epel -y

    [] []

2.  Next, install Chromium:

        sudo yum install -y chromium

    [] []

Now Puppeteer can launch Chromium to run your tests. If you do not
enable EPEL and if you continue installing chromium as part of
 npm install , Puppeteer cannot launch Chromium due to unavailablity of
 libatk-1.0.so.0 and many more packages.

Code Transpilation Issues 

If you are using a JavaScript transpiler like babel or TypeScript,
calling  evaluate() with an async function might not work. This is
because while  puppeteer uses  Function.prototype.toString() to
serialize functions while transpilers could be changing the output code
in such a way it's incompatible with  puppeteer .

Some workarounds to this problem would be to instruct the transpiler not
to mess up with the code, for example, configure TypeScript to use
latest ecma version (  "target": "es2018" ). Another workaround could be
using string templates instead of functions:

    await page.evaluate(`(async() => {
       console.log('1');
    })()`);


# downloaded Experimental WebDriver BiDi support #

Experimental WebDriver BiDi support

WebDriver BiDi is a new cross-browser automation protocol currently
under development, aiming to combine the best of both WebDriver
“Classic” and CDP. WebDriver BiDi promises bi-directional communication,
making it fast by default, and it comes packed with low-level control.

See also:

-   WebDriver BiDi - The future of cross-browser automation
-   WebDriver BiDi: 2023 status update

Automate with Chrome and Firefox 

Puppeteer supports WebDriver BiDi automation with Chrome and Firefox.

Firefox integration is nearing feature parity with its previous
CDP-based approach. Learn more in the dedicated announcement .

Measuring progress 

To gauge the capabilities of WebDriver BiDi, we utilized the
comprehensive Puppeteer test suite

-   For Firefox, there are currently under 60 failing tests compared to
    the CDP implementation, while over 82 new tests successfully utilize
    WebDriver BiDi, demonstrating its growing potential.
-   For Chrome, around 68% of tests pass with WebDriver BiDi, indicating
    room for improvement compared to the CDP-based approach.

Get started 

Below is an example of launching Firefox or Chrome with WebDriver BiDi:

    import puppeteer from 'puppeteer';

    const browser = await puppeteer.launch({
      product: 'firefox', // or 'chrome'
      protocol: 'webDriverBiDi',
    });
    const page = await browser.newPage();
    ...
    await browser.close();


This is an exciting step towards a more unified and efficient
cross-browser automation experience. We encourage you to explore
WebDriver BiDi with Puppeteer and join us in shaping the future of
browser automation.

Puppeteer features supported over WebDriver BiDi 

-   Browser and page automation

    -   Browser.close
    -   Frame.goto() (except  referer and  referrerPolicy )
    -   Page.bringToFront
    -   Page.goBack()
    -   Page.goForward()
    -   Page.goto (except  referer and  referrerPolicy )
    -   Page.reload (except for  ignoreCache parameter)
    -   Page.setViewport (  width ,  height ,  deviceScaleFactor only)
    -   Puppeteer.launch

-   Script evaluation :

    -   JSHandle.evaluate
    -   JSHandle.evaluateHandle
    -   Page.evaluate
    -   Page.exposeFunction

-   Selectors and locators except for ARIA:

    -   Page.$ (ARIA selectors supported in Chrome)
    -   Page.$$ (ARIA selectors supported in Chrome)
    -   Page.$$eval (ARIA selectors supported in Chrome)
    -   Page.$eval (ARIA selectors supported in Chrome)
    -   Page.waitForSelector (ARIA selectors supported in Chrome)

-   Input

    -   ElementHandle.uploadFile
    -   ElementHandle.click
    -   Keyboard.down
    -   Keyboard.press
    -   Keyboard.sendCharacter
    -   Keyboard.type
    -   Keyboard.up
    -   Mouse events (except for dedicated drag'n'drop API methods)
    -   Page.tap
    -   TouchScreen.*

-   JavaScript dialog interception

    -   page.on('dialog')
    -   Dialog.*

-   Screenshots (not all parameters are supported)

    -   Page.screenshot (supported parameters  clip ,  encoding ,
         fullPage )

-   PDF generation (not all parameters are supported)

    -   Page.pdf (only  format ,  height ,  landscape ,  margin ,
         pageRanges ,  printBackground ,  scale ,  width are supported)
    -   Page.createPDFStream (only  format ,  height ,  landscape ,
         margin ,  pageRanges ,  printBackground ,  scale ,  width are
        supported)

-   Permissions (Supported in Chrome only)

    -   BrowserContext.clearPermissionOverrides()
    -   BrowserContext.overridePermissions()

Puppeteer features not yet supported over WebDriver BiDi 

-   Request interception

    -   HTTPRequest.abort()
    -   HTTPRequest.abortErrorReason()
    -   HTTPRequest.client()
    -   HTTPRequest.continue()
    -   HTTPRequest.continueRequestOverrides()
    -   HTTPRequest.failure()
    -   HTTPRequest.finalizeInterceptions()
    -   HTTPRequest.interceptResolutionState()
    -   HTTPRequest.isInterceptResolutionHandled()
    -   HTTPRequest.respond()
    -   HTTPRequest.responseForRequest()
    -   Page.setRequestInterception()

-   Various emulations (most are supported with Chrome)

    -   Page.emulate() (supported only in Chrome)
    -   Page.emulateCPUThrottling() (supported only in Chrome)
    -   Page.emulateIdleState() (supported only in Chrome)
    -   Page.emulateMediaFeatures() (supported only in Chrome)
    -   Page.emulateMediaType() (supported only in Chrome)
    -   Page.emulateTimezone() (supported only in Chrome)
    -   Page.emulateVisionDeficiency() (supported only in Chrome)
    -   Page.setBypassCSP() (supported only in Chrome)
    -   Page.setCacheEnabled() (supported only in Chrome)
    -   Page.setGeolocation() (supported only in Chrome)
    -   Page.setJavaScriptEnabled() (supported only in Chrome)

-   CDP-specific features

    -   Page.createCDPSession() (supported only in Chrome)

-   Tracing (supported only in Chrome)

-   Coverage (supported only in Chrome)

-   Accessibility (supported only in Chrome)

-   Other methods:

    -   Browser.userAgent()
    -   Frame.isOOPFrame()
    -   Frame.waitForDevicePrompt()
    -   HTTPResponse.buffer()
    -   HTTPResponse.fromServiceWorker()
    -   HTTPResponse.securityDetails()
    -   Input.drag()
    -   Input.dragAndDrop()
    -   Input.dragOver()
    -   Input.drop()
    -   Page.authenticate()
    -   Page.cookies()
    -   Page.deleteCookie()
    -   Page.emulateNetworkConditions()
    -   Page.isDragInterceptionEnabled()
    -   Page.isJavaScriptEnabled() (supported only in Chrome)
    -   Page.isServiceWorkerBypassed()
    -   Page.metrics()
    -   Page.queryObjects() (supported only in Chrome)
    -   Page.screencast() (supported only in Chrome)
    -   Page.setBypassServiceWorker()
    -   Page.setCookie()
    -   Page.setDragInterception()
    -   Page.setExtraHTTPHeaders()
    -   Page.setOfflineMode()
    -   Page.setUserAgent()
    -   Page.waitForDevicePrompt()
    -   Page.waitForFileChooser()
    -   Page.workers()
    -   PageEvent.popup
    -   PageEvent.WorkerCreated
    -   PageEvent.WorkerDestroyed
    -   Target.opener()

# api Accessibility class #

Accessibility class

The Accessibility class provides methods for inspecting the browser's
accessibility tree. The accessibility tree is used by assistive
technology such as screen readers or switches .

Signature: 

    export declare class Accessibility


Remarks 

Accessibility is a very platform-specific thing. On different platforms,
there are different screen readers that might have wildly different
output.

Blink - Chrome's rendering engine - has a concept of "accessibility
tree", which is then translated into different platform-specific APIs.
Accessibility namespace gives users access to the Blink Accessibility
Tree.

Most of the accessibility tree gets filtered out when converting from
Blink AX Tree to Platform-specific AX-Tree or by assistive technologies
themselves. By default, Puppeteer tries to approximate this filtering,
exposing only the "interesting" nodes of the tree.

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  Accessibility class.

Methods 

  Method              Modifiers   Description
  ------------------- ----------- ----------------------------------------------------------------------------------------------------------------------------
  snapshot(options)               Captures the current state of the accessibility tree. The returned object represents the root accessible node of the page.

# api Accessibility.snapshot() method #

Accessibility.snapshot() method

Captures the current state of the accessibility tree. The returned
object represents the root accessible node of the page.

Signature: 

    class Accessibility {
      snapshot(options?: SnapshotOptions): Promise<SerializedAXNode | null>;
    }


Parameters 

  Parameter   Type              Description
  ----------- ----------------- -------------
  options     SnapshotOptions   (Optional)

Returns:

Promise< SerializedAXNode | null>

An AXNode object representing the snapshot.

Remarks 

NOTE The Chrome accessibility tree contains nodes that go unused on most
platforms and by most screen readers. Puppeteer will discard them as
well for an easier to process tree, unless  interestingOnly is set to
 false .

Example 1 

An example of dumping the entire accessibility tree:

    const snapshot = await page.accessibility.snapshot();
    console.log(snapshot);


Example 2 

An example of logging the focused node's name:

    const snapshot = await page.accessibility.snapshot();
    const node = findFocusedNode(snapshot);
    console.log(node && node.name);

    function findFocusedNode(node) {
      if (node.focused) return node;
      for (const child of node.children || []) {
        const foundNode = findFocusedNode(child);
        return foundNode;
      }
      return null;
    }


# api ActionOptions interface #

ActionOptions interface

Signature: 

    export interface ActionOptions


Properties 

  Property   Modifiers   Type          Description   Default
  ---------- ----------- ------------- ------------- ---------
  signal      optional   AbortSignal                 

# api ActionResult type #

ActionResult type

Signature: 

    export type ActionResult = 'continue' | 'abort' | 'respond';


# api AutofillData interface #

AutofillData interface

Signature: 

    export interface AutofillData


Properties 

  Property     Modifiers   Type                                                                                      Description   Default
  ------------ ----------- ----------------------------------------------------------------------------------------- ------------- ---------
  creditCard               { number: string; name: string; expiryMonth: string; expiryYear: string; cvc: string; }                 

# api Awaitable type #

Awaitable type

Signature: 

    export type Awaitable<T> = T | PromiseLike<T>;


# api AwaitableIterable type #

AwaitableIterable type

Signature: 

    export type AwaitableIterable<T> = Iterable<T> | AsyncIterable<T>;


# api AwaitablePredicate type #

AwaitablePredicate type

Signature: 

    export type AwaitablePredicate<T> = (value: T) => Awaitable<boolean>;


References: Awaitable

# api AwaitedLocator type #

AwaitedLocator type

Signature: 

    export type AwaitedLocator<T> = T extends Locator<infer S> ? S : never;


References: Locator

# api BoundingBox interface #

BoundingBox interface

Signature: 

    export interface BoundingBox extends Point


Extends: Point

Properties 

  Property   Modifiers   Type     Description                            Default
  ---------- ----------- -------- -------------------------------------- ---------
  height                 number   the height of the element in pixels.   
  width                  number   the width of the element in pixels.    

# api BoxModel interface #

BoxModel interface

Signature: 

    export interface BoxModel


Properties 

  Property   Modifiers   Type     Description   Default
  ---------- ----------- -------- ------------- ---------
  border                 Quad                   
  content                Quad                   
  height                 number                 
  margin                 Quad                   
  padding                Quad                   
  width                  number                 

# api Browser.browserContexts() method #

Browser.browserContexts() method

Gets a list of open browser contexts .

In a newly-created browser , this will return a single instance of
BrowserContext .

Signature: 

    class Browser {
      abstract browserContexts(): BrowserContext[];
    }


Returns:

BrowserContext []

# api Browser.close() method #

Browser.close() method

Closes this browser and all associated pages .

Signature: 

    class Browser {
      abstract close(): Promise<void>;
    }


Returns:

Promise<void>

# api BrowserConnectOptions interface #

BrowserConnectOptions interface

Generic browser options that can be passed when launching any browser or
when connecting to an existing browser instance.

Signature: 

    export interface BrowserConnectOptions


Properties 

  Property            Modifiers   Type                   Description                                                                                 Default
  ------------------- ----------- ---------------------- ------------------------------------------------------------------------------------------- -----------------------------
  defaultViewport      optional   Viewport | null        Sets the viewport for each page.                                                            '{width: 800, height: 600}'
  ignoreHTTPSErrors    optional   boolean                Whether to ignore HTTPS errors during navigation.                                            false
  protocol             optional   ProtocolType                                                                                                       'cdp'
  protocolTimeout      optional   number                 Timeout setting for individual protocol (CDP) calls.                                         180_000
  slowMo               optional   number                 Slows down Puppeteer operations by the specified amount of milliseconds to aid debugging.   
  targetFilter         optional   TargetFilterCallback   Callback to decide if Puppeteer should connect to a given target or not.                    

# api BrowserContext.browser() method #

BrowserContext.browser() method

Gets the browser associated with this browser context .

Signature: 

    class BrowserContext {
      abstract browser(): Browser;
    }


Returns:

Browser

# api BrowserContext.clearPermissionOverrides() method #

BrowserContext.clearPermissionOverrides() method

Clears all permission overrides for this browser context .

Signature: 

    class BrowserContext {
      abstract clearPermissionOverrides(): Promise<void>;
    }


Returns:

Promise<void>

Example 

Clearing overridden permissions in the default browser context :

    const context = browser.defaultBrowserContext();
    context.overridePermissions('https://example.com', ['clipboard-read']);
    // do stuff ..
    context.clearPermissionOverrides();


# api BrowserContext.close() method #

BrowserContext.close() method

Closes this browser context and all associated pages .

Signature: 

    class BrowserContext {
      abstract close(): Promise<void>;
    }


Returns:

Promise<void>

Remarks 

The default browser context cannot be closed.

# api BrowserContextEvent enum #

BrowserContextEvent enum

Signature: 

    export declare const enum BrowserContextEvent


Enumeration Members 

+-----------------------+-----------------------+-----------------------+
| Member                | Value                 | Description           |
+=======================+=======================+=======================+
| TargetChanged         |  "targetchanged"      | Emitted when the url  |
|                       |                       | of a target inside    |
|                       |                       | the browser context   |
|                       |                       | changes. Contains a   |
|                       |                       | Target instance.      |
+-----------------------+-----------------------+-----------------------+
| TargetCreated         |  "targetcreated"      | Emitted when a target |
|                       |                       | is created within the |
|                       |                       | browser context, for  |
|                       |                       | example when a new    |
|                       |                       | page is opened by     |
|                       |                       | window.open or by     |
|                       |                       | b                     |
|                       |                       | rowserContext.newPage |
|                       |                       |                       |
|                       |                       | Contains a Target     |
|                       |                       | instance.             |
+-----------------------+-----------------------+-----------------------+
| TargetDestroyed       |  "targetdestroyed"    | Emitted when a target |
|                       |                       | is destroyed within   |
|                       |                       | the browser context,  |
|                       |                       | for example when a    |
|                       |                       | page is closed.       |
|                       |                       | Contains a Target     |
|                       |                       | instance.             |
+-----------------------+-----------------------+-----------------------+

# api BrowserContextEvents interface #

BrowserContextEvents interface

Signature: 

    export interface BrowserContextEvents extends Record<EventType, unknown>


Extends: Record< EventType , unknown>

Properties 

  Property          Modifiers   Type     Description   Default
  ----------------- ----------- -------- ------------- ---------
  targetchanged                 Target                 
  targetcreated                 Target                 
  targetdestroyed               Target                 

# api BrowserContext class #

BrowserContext class

BrowserContext represents individual user contexts within a browser .

When a browser is launched, it has a single browser context by default.
Others can be created using Browser.createBrowserContext() . Each
context has isolated storage (cookies/localStorage/etc.)

BrowserContext emits various events which are documented in the
BrowserContextEvent enum.

If a page opens another page , e.g. using  window.open , the popup will
belong to the parent page's browser context .

Signature: 

    export declare abstract class BrowserContext extends EventEmitter<BrowserContextEvents>


Extends: EventEmitter < BrowserContextEvents >

Remarks 

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  BrowserContext class.

Example 

Creating a new browser context :

    // Create a new browser context
    const context = await browser.createBrowserContext();
    // Create a new page inside context.
    const page = await context.newPage();
    // ... do stuff with page ...
    await page.goto('https://example.com');
    // Dispose context once it's no longer needed.
    await context.close();


Properties 

  Property   Modifiers   Type                 Description
  ---------- ----------- -------------------- -----------------------------------------
  closed      readonly   boolean              Whether this browser context is closed.
  id          readonly   string | undefined   Identifier for this browser context .

Methods 

+-----------------------+-----------------------+-----------------------+
| Method                | Modifiers             | Description           |
+=======================+=======================+=======================+
| browser()             |                       | Gets the browser      |
|                       |                       | associated with this  |
|                       |                       | browser context .     |
+-----------------------+-----------------------+-----------------------+
| clear                 |                       | Clears all permission |
| PermissionOverrides() |                       | overrides for this    |
|                       |                       | browser context .     |
+-----------------------+-----------------------+-----------------------+
| close()               |                       | Closes this browser   |
|                       |                       | context and all       |
|                       |                       | associated pages .    |
+-----------------------+-----------------------+-----------------------+
| isIncognito()         |                       | Whether this browser  |
|                       |                       | context is incognito. |
|                       |                       |                       |
|                       |                       | In Chrome, the        |
|                       |                       | default browser       |
|                       |                       | context is the only   |
|                       |                       | non-incognito browser |
|                       |                       | context.              |
+-----------------------+-----------------------+-----------------------+
| newPage()             |                       | Creates a new page in |
|                       |                       | this browser context  |
|                       |                       | .                     |
+-----------------------+-----------------------+-----------------------+
| overri                |                       | Grants this browser   |
| dePermissions(origin, |                       | context the given     |
| permissions)          |                       |  permissions within   |
|                       |                       | the given  origin .   |
+-----------------------+-----------------------+-----------------------+
| pages()               |                       | Gets a list of all    |
|                       |                       | open pages inside     |
|                       |                       | this browser context  |
|                       |                       | .                     |
+-----------------------+-----------------------+-----------------------+
| targets()             |                       | Gets all active       |
|                       |                       | targets inside this   |
|                       |                       | browser context .     |
+-----------------------+-----------------------+-----------------------+
| wai                   |                       | Waits until a target  |
| tForTarget(predicate, |                       | matching the given    |
| options)              |                       |  predicate appears    |
|                       |                       | and returns it.       |
|                       |                       |                       |
|                       |                       | This will look all    |
|                       |                       | open browser contexts |
|                       |                       | .                     |
+-----------------------+-----------------------+-----------------------+

# api BrowserContext.isIncognito() method #

BrowserContext.isIncognito() method

  Warning: This API is now obsolete.

  In Chrome, the default browser context can also be "icognito" if
  configured via the arguments and in such cases this getter returns
  wrong results (see https://github.com/puppeteer/puppeteer/issues/8836
  ). Also, the term "incognito" is not applicable to other browsers. To
  migrate, check the default browser context instead: in Chrome all
  non-default contexts are incognito, and the default context might be
  incognito if you provide the  --incognito argument when launching the
  browser.

Whether this browser context is incognito.

In Chrome, the default browser context is the only non-incognito browser
context.

Signature: 

    class BrowserContext {
      abstract isIncognito(): boolean;
    }


Returns:

boolean

# api BrowserContext.newPage() method #

BrowserContext.newPage() method

Creates a new page in this browser context .

Signature: 

    class BrowserContext {
      abstract newPage(): Promise<Page>;
    }


Returns:

Promise< Page >

# api BrowserContextOptions interface #

BrowserContextOptions interface

Signature: 

    export interface BrowserContextOptions


Properties 

  Property          Modifiers   Type       Description                                                                                                         Default
  ----------------- ----------- ---------- ------------------------------------------------------------------------------------------------------------------- ---------
  proxyBypassList    optional   string[]   Bypass the proxy for the given list of hosts.                                                                       
  proxyServer        optional   string     Proxy server with optional port to use for all requests. Username and password can be set in  Page.authenticate .   

# api BrowserContext.overridePermissions() method #

BrowserContext.overridePermissions() method

Grants this browser context the given  permissions within the given
 origin .

Signature: 

    class BrowserContext {
      abstract overridePermissions(
        origin: string,
        permissions: Permission[]
      ): Promise<void>;
    }


Parameters 

  Parameter     Type            Description
  ------------- --------------- ----------------------------------------------------------------------------------------------------------
  origin        string          The origin to grant permissions to, e.g. " https://example.com ".
  permissions   Permission []   An array of permissions to grant. All permissions that are not listed here will be automatically denied.

Returns:

Promise<void>

Example 

Overriding permissions in the default browser context :

    const context = browser.defaultBrowserContext();
    await context.overridePermissions('https://html5demos.com', ['geolocation']);


# api BrowserContext.pages() method #

BrowserContext.pages() method

Gets a list of all open pages inside this browser context .

Signature: 

    class BrowserContext {
      abstract pages(): Promise<Page[]>;
    }


Returns:

Promise< Page []>

Remarks 

Non-visible pages , such as  "background_page" , will not be listed
here. You can find them using Target.page() .

# api BrowserContext.targets() method #

BrowserContext.targets() method

Gets all active targets inside this browser context .

Signature: 

    class BrowserContext {
      abstract targets(): Target[];
    }


Returns:

Target []

# api BrowserContext.waitForTarget() method #

BrowserContext.waitForTarget() method

Waits until a target matching the given  predicate appears and returns
it.

This will look all open browser contexts .

Signature: 

    class BrowserContext {
      waitForTarget(
        predicate: (x: Target) => boolean | Promise<boolean>,
        options?: WaitForTargetOptions
      ): Promise<Target>;
    }


Parameters 

  Parameter   Type                                         Description
  ----------- -------------------------------------------- -------------
  predicate   (x: Target ) => boolean | Promise<boolean>   
  options     WaitForTargetOptions                         (Optional)

Returns:

Promise< Target >

Example 

Finding a target for a page opened via  window.open :

    await page.evaluate(() => window.open('https://www.example.com/'));
    const newWindowTarget = await browserContext.waitForTarget(
      target => target.url() === 'https://www.example.com/'
    );


# api Browser.createBrowserContext() method #

Browser.createBrowserContext() method

Creates a new browser context .

This won't share cookies/cache with other browser contexts .

Signature: 

    class Browser {
      abstract createBrowserContext(
        options?: BrowserContextOptions
      ): Promise<BrowserContext>;
    }


Parameters 

  Parameter   Type                    Description
  ----------- ----------------------- -------------
  options     BrowserContextOptions   (Optional)

Returns:

Promise< BrowserContext >

Example 

    import puppeteer from 'puppeteer';

    const browser = await puppeteer.launch();
    // Create a new browser context.
    const context = await browser.createBrowserContext();
    // Create a new page in a pristine context.
    const page = await context.newPage();
    // Do stuff
    await page.goto('https://example.com');


# api Browser.defaultBrowserContext() method #

Browser.defaultBrowserContext() method

Gets the default browser context .

Signature: 

    class Browser {
      abstract defaultBrowserContext(): BrowserContext;
    }


Returns:

BrowserContext

Remarks 

The default browser context cannot be closed.

# api Browser.disconnect() method #

Browser.disconnect() method

Disconnects Puppeteer from this browser , but leaves the process
running.

Signature: 

    class Browser {
      abstract disconnect(): Promise<void>;
    }


Returns:

Promise<void>

# api BrowserEvent enum #

BrowserEvent enum

All the events a browser instance may emit.

Signature: 

    export declare const enum BrowserEvent


Enumeration Members 

+-----------------------+-----------------------+-----------------------+
| Member                | Value                 | Description           |
+=======================+=======================+=======================+
| Disconnected          |  "disconnected"       | Emitted when          |
|                       |                       | Puppeteer gets        |
|                       |                       | disconnected from the |
|                       |                       | browser instance.     |
|                       |                       | This might happen     |
|                       |                       | because either:       |
|                       |                       |                       |
|                       |                       | - The browser         |
|                       |                       | closes/crashes or -   |
|                       |                       | Browser.disconnect()  |
|                       |                       | was called.           |
+-----------------------+-----------------------+-----------------------+
| TargetChanged         |  "targetchanged"      | Emitted when the URL  |
|                       |                       | of a target changes.  |
|                       |                       | Contains a Target     |
|                       |                       | instance.             |
+-----------------------+-----------------------+-----------------------+
| TargetCreated         |  "targetcreated"      | Emitted when a target |
|                       |                       | is created, for       |
|                       |                       | example when a new    |
|                       |                       | page is opened by     |
|                       |                       | window.open or by     |
|                       |                       | browser.newPage       |
|                       |                       |                       |
|                       |                       | Contains a Target     |
|                       |                       | instance.             |
+-----------------------+-----------------------+-----------------------+
| TargetDestroyed       |  "targetdestroyed"    | Emitted when a target |
|                       |                       | is destroyed, for     |
|                       |                       | example when a page   |
|                       |                       | is closed. Contains a |
|                       |                       | Target instance.      |
+-----------------------+-----------------------+-----------------------+

# api BrowserEvents interface #

BrowserEvents interface

Signature: 

    export interface BrowserEvents extends Record<EventType, unknown>


Extends: Record< EventType , unknown>

Properties 

  Property          Modifiers   Type        Description   Default
  ----------------- ----------- ----------- ------------- ---------
  disconnected                  undefined                 
  targetchanged                 Target                    
  targetcreated                 Target                    
  targetdestroyed               Target                    

# api Browser class #

Browser class

Browser represents a browser instance that is either:

-   connected to via Puppeteer.connect() or - launched by
    PuppeteerNode.launch() .

Browser emits various events which are documented in the BrowserEvent
enum.

Signature: 

    export declare abstract class Browser extends EventEmitter<BrowserEvents>


Extends: EventEmitter < BrowserEvents >

Remarks 

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  Browser class.

Example 1 

Using a Browser to create a Page :

    import puppeteer from 'puppeteer';

    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.goto('https://example.com');
    await browser.close();


Example 2 

Disconnecting from and reconnecting to a Browser :

    import puppeteer from 'puppeteer';

    const browser = await puppeteer.launch();
    // Store the endpoint to be able to reconnect to the browser.
    const browserWSEndpoint = browser.wsEndpoint();
    // Disconnect puppeteer from the browser.
    await browser.disconnect();

    // Use the endpoint to reestablish a connection
    const browser2 = await puppeteer.connect({browserWSEndpoint});
    // Close the browser.
    await browser2.close();


Properties 

  Property    Modifiers   Type        Description
  ----------- ----------- ----------- --------------------------------------------------
  connected    readonly   boolean     Whether Puppeteer is connected to this browser .
  debugInfo    readonly   DebugInfo   Get debug information from Puppeteer.

Methods 

+-----------------------+-----------------------+-----------------------+
| Method                | Modifiers             | Description           |
+=======================+=======================+=======================+
| browserContexts()     |                       | Gets a list of open   |
|                       |                       | browser contexts .    |
|                       |                       |                       |
|                       |                       | In a newly-created    |
|                       |                       | browser , this will   |
|                       |                       | return a single       |
|                       |                       | instance of           |
|                       |                       | BrowserContext .      |
+-----------------------+-----------------------+-----------------------+
| close()               |                       | Closes this browser   |
|                       |                       | and all associated    |
|                       |                       | pages .               |
+-----------------------+-----------------------+-----------------------+
| createBr              |                       | Creates a new browser |
| owserContext(options) |                       | context .             |
|                       |                       |                       |
|                       |                       | This won't share      |
|                       |                       | cookies/cache with    |
|                       |                       | other browser         |
|                       |                       | contexts .            |
+-----------------------+-----------------------+-----------------------+
| de                    |                       | Gets the default      |
| faultBrowserContext() |                       | browser context .     |
+-----------------------+-----------------------+-----------------------+
| disconnect()          |                       | Disconnects Puppeteer |
|                       |                       | from this browser ,   |
|                       |                       | but leaves the        |
|                       |                       | process running.      |
+-----------------------+-----------------------+-----------------------+
| isConnected()         |                       | Whether Puppeteer is  |
|                       |                       | connected to this     |
|                       |                       | browser .             |
+-----------------------+-----------------------+-----------------------+
| newPage()             |                       | Creates a new page in |
|                       |                       | the default browser   |
|                       |                       | context .             |
+-----------------------+-----------------------+-----------------------+
| pages()               |                       | Gets a list of all    |
|                       |                       | open pages inside     |
|                       |                       | this Browser .        |
|                       |                       |                       |
|                       |                       | If there ar multiple  |
|                       |                       | browser contexts ,    |
|                       |                       | this returns all      |
|                       |                       | pages in all browser  |
|                       |                       | contexts .            |
+-----------------------+-----------------------+-----------------------+
| process()             |                       | Gets the associated   |
|                       |                       | ChildProcess .        |
+-----------------------+-----------------------+-----------------------+
| target()              |                       | Gets the target       |
|                       |                       | associated with the   |
|                       |                       | default browser       |
|                       |                       | context ).            |
+-----------------------+-----------------------+-----------------------+
| targets()             |                       | Gets all active       |
|                       |                       | targets .             |
|                       |                       |                       |
|                       |                       | In case of multiple   |
|                       |                       | browser contexts ,    |
|                       |                       | this returns all      |
|                       |                       | targets in all        |
|                       |                       | browser contexts .    |
+-----------------------+-----------------------+-----------------------+
| userAgent()           |                       | Gets this browser's   |
|                       |                       | original user agent.  |
|                       |                       |                       |
|                       |                       | Pages can override    |
|                       |                       | the user agent with   |
|                       |                       | Page.setUserAgent() . |
+-----------------------+-----------------------+-----------------------+
| version()             |                       | Gets a string         |
|                       |                       | representing this     |
|                       |                       | browser's name and    |
|                       |                       | version.              |
|                       |                       |                       |
|                       |                       | For headless browser, |
|                       |                       | this is similar to    |
|                       |                       |  "Headle              |
|                       |                       | ssChrome/61.0.3153.0" |
|                       |                       | . For non-headless or |
|                       |                       | new-headless, this is |
|                       |                       | similar to            |
|                       |                       |  "Chrome/61.0.3153.0" |
|                       |                       | . For Firefox, it is  |
|                       |                       | similar to            |
|                       |                       |  "Firefox/116.0a1" .  |
|                       |                       |                       |
|                       |                       | The format of         |
|                       |                       | Browser.version()     |
|                       |                       | might change with     |
|                       |                       | future releases of    |
|                       |                       | browsers.             |
+-----------------------+-----------------------+-----------------------+
| wai                   |                       | Waits until a target  |
| tForTarget(predicate, |                       | matching the given    |
| options)              |                       |  predicate appears    |
|                       |                       | and returns it.       |
|                       |                       |                       |
|                       |                       | This will look all    |
|                       |                       | open browser contexts |
|                       |                       | .                     |
+-----------------------+-----------------------+-----------------------+
| wsEndpoint()          |                       | Gets the WebSocket    |
|                       |                       | URL to connect to     |
|                       |                       | this browser .        |
|                       |                       |                       |
|                       |                       | This is usually used  |
|                       |                       | with                  |
|                       |                       | Puppeteer.connect() . |
|                       |                       |                       |
|                       |                       | You can find the      |
|                       |                       | debugger URL (        |
|                       |                       |  webSocketDebuggerUrl |
|                       |                       | ) from                |
|                       |                       |   http://HO           |
|                       |                       | ST:PORT/json/version  |
|                       |                       | .                     |
|                       |                       |                       |
|                       |                       | See browser endpoint  |
|                       |                       | for more information. |
+-----------------------+-----------------------+-----------------------+

# api Browser.isConnected() method #

Browser.isConnected() method

  Warning: This API is now obsolete.

  Use Browser.connected .

Whether Puppeteer is connected to this browser .

Signature: 

    class Browser {
      isConnected(): boolean;
    }


Returns:

boolean

# api BrowserLaunchArgumentOptions interface #

BrowserLaunchArgumentOptions interface

Launcher options that only apply to Chrome.

Signature: 

    export interface BrowserLaunchArgumentOptions


Properties 

  Property        Modifiers   Type                Description                                                                                                               Default
  --------------- ----------- ------------------- ------------------------------------------------------------------------------------------------------------------------- ---------
  args             optional   string[]            Additional command line arguments to pass to the browser instance.                                                        
  debuggingPort    optional   number              Specify the debugging port number to use                                                                                  
  devtools         optional   boolean             Whether to auto-open a DevTools panel for each tab. If this is set to  true , then  headless will be forced to  false .    false
  headless         optional   boolean | 'shell'   Whether to run the browser in headless mode.                                                                               true
  userDataDir      optional   string              Path to a user data directory. see the Chromium docs for more info.                                                       

# api Browser.newPage() method #

Browser.newPage() method

Creates a new page in the default browser context .

Signature: 

    class Browser {
      abstract newPage(): Promise<Page>;
    }


Returns:

Promise< Page >

# api Browser.pages() method #

Browser.pages() method

Gets a list of all open pages inside this Browser .

If there ar multiple browser contexts , this returns all pages in all
browser contexts .

Signature: 

    class Browser {
      pages(): Promise<Page[]>;
    }


Returns:

Promise< Page []>

Remarks 

Non-visible pages , such as  "background_page" , will not be listed
here. You can find them using Target.page() .

# api Browser.process() method #

Browser.process() method

Gets the associated ChildProcess .

Signature: 

    class Browser {
      abstract process(): ChildProcess | null;
    }


Returns:

ChildProcess | null

 null if this instance was connected to via Puppeteer.connect() .

# api Browser.target() method #

Browser.target() method

Gets the target associated with the default browser context ).

Signature: 

    class Browser {
      abstract target(): Target;
    }


Returns:

Target

# api Browser.targets() method #

Browser.targets() method

Gets all active targets .

In case of multiple browser contexts , this returns all targets in all
browser contexts .

Signature: 

    class Browser {
      abstract targets(): Target[];
    }


Returns:

Target []

# api Browser.userAgent() method #

Browser.userAgent() method

Gets this browser's original user agent.

Pages can override the user agent with Page.setUserAgent() .

Signature: 

    class Browser {
      abstract userAgent(): Promise<string>;
    }


Returns:

Promise<string>

# api Browser.version() method #

Browser.version() method

Gets a string representing this browser's name and version.

For headless browser, this is similar to  "HeadlessChrome/61.0.3153.0" .
For non-headless or new-headless, this is similar to
 "Chrome/61.0.3153.0" . For Firefox, it is similar to  "Firefox/116.0a1"
.

The format of Browser.version() might change with future releases of
browsers.

Signature: 

    class Browser {
      abstract version(): Promise<string>;
    }


Returns:

Promise<string>

# api Browser.waitForTarget() method #

Browser.waitForTarget() method

Waits until a target matching the given  predicate appears and returns
it.

This will look all open browser contexts .

Signature: 

    class Browser {
      waitForTarget(
        predicate: (x: Target) => boolean | Promise<boolean>,
        options?: WaitForTargetOptions
      ): Promise<Target>;
    }


Parameters 

  Parameter   Type                                         Description
  ----------- -------------------------------------------- -------------
  predicate   (x: Target ) => boolean | Promise<boolean>   
  options     WaitForTargetOptions                         (Optional)

Returns:

Promise< Target >

Example 

Finding a target for a page opened via  window.open :

    await page.evaluate(() => window.open('https://www.example.com/'));
    const newWindowTarget = await browser.waitForTarget(
      target => target.url() === 'https://www.example.com/'
    );


# api Browser.wsEndpoint() method #

Browser.wsEndpoint() method

Gets the WebSocket URL to connect to this browser .

This is usually used with Puppeteer.connect() .

You can find the debugger URL (  webSocketDebuggerUrl ) from
 http://HOST:PORT/json/version .

See browser endpoint for more information.

Signature: 

    class Browser {
      abstract wsEndpoint(): string;
    }


Returns:

string

Remarks 

The format is always  ws://HOST:PORT/devtools/browser/<id> .

# api CDPEvents type #

CDPEvents type

Signature: 

    export type CDPEvents = {
      [Property in keyof ProtocolMapping.Events]: ProtocolMapping.Events[Property][0];
    };


# api CDPSession.connection() method #

CDPSession.connection() method

Signature: 

    class CDPSession {
      abstract connection(): Connection | undefined;
    }


Returns:

Connection | undefined

# api CDPSession.detach() method #

CDPSession.detach() method

Detaches the cdpSession from the target. Once detached, the cdpSession
object won't emit any events and can't be used to send messages.

Signature: 

    class CDPSession {
      abstract detach(): Promise<void>;
    }


Returns:

Promise<void>

# api CDPSessionEvent namespace #

CDPSessionEvent namespace

Events that the CDPSession class emits.

Signature: 

    export declare namespace CDPSessionEvent


Variables 

  Variable          Description
  ----------------- -------------
  SessionAttached   
  SessionDetached   

# api CDPSessionEvent.SessionAttached variable #

CDPSessionEvent.SessionAttached variable

Signature: 

    SessionAttached: 'sessionattached';


# api CDPSessionEvent.SessionDetached variable #

CDPSessionEvent.SessionDetached variable

Signature: 

    SessionDetached: 'sessiondetached';


# api CDPSessionEvents interface #

CDPSessionEvents interface

Signature: 

    export interface CDPSessionEvents extends CDPEvents, Record<EventType, unknown>


Extends: CDPEvents , Record< EventType , unknown>

Properties 

  Property          Modifiers   Type         Description   Default
  ----------------- ----------- ------------ ------------- ---------
  sessionattached               CDPSession                 
  sessiondetached               CDPSession                 

# api CDPSession class #

CDPSession class

The  CDPSession instances are used to talk raw Chrome Devtools Protocol.

Signature: 

    export declare abstract class CDPSession extends EventEmitter<CDPSessionEvents>


Extends: EventEmitter < CDPSessionEvents >

Remarks 

Protocol methods can be called with CDPSession.send() method and
protocol events can be subscribed to with  CDPSession.on method.

Useful links: DevTools Protocol Viewer and Getting Started with DevTools
Protocol .

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  CDPSession class.

Example 

    const client = await page.target().createCDPSession();
    await client.send('Animation.enable');
    client.on('Animation.animationCreated', () =>
      console.log('Animation created!')
    );
    const response = await client.send('Animation.getPlaybackRate');
    console.log('playback rate is ' + response.playbackRate);
    await client.send('Animation.setPlaybackRate', {
      playbackRate: response.playbackRate / 2,
    });


Methods 

  Method                          Modifiers   Description
  ------------------------------- ----------- -----------------------------------------------------------------------------------------------------------------------------------------
  connection()                                
  detach()                                    Detaches the cdpSession from the target. Once detached, the cdpSession object won't emit any events and can't be used to send messages.
  id()                                        Returns the session's id.
  send(method, params, options)               

# api CDPSession.id() method #

CDPSession.id() method

Returns the session's id.

Signature: 

    class CDPSession {
      abstract id(): string;
    }


Returns:

string

# api CDPSession.send() method #

CDPSession.send() method

Signature: 

    class CDPSession {
      abstract send<T extends keyof ProtocolMapping.Commands>(
        method: T,
        params?: ProtocolMapping.Commands[T]['paramsType'][0],
        options?: CommandOptions
      ): Promise<ProtocolMapping.Commands[T]['returnType']>;
    }


Parameters 

  Parameter   Type                                           Description
  ----------- ---------------------------------------------- -------------
  method      T                                              
  params      ProtocolMapping.Commands[T]['paramsType'][0]   (Optional)
  options     CommandOptions                                 (Optional)

Returns:

Promise<ProtocolMapping.Commands[T]['returnType']>

# api ChromeReleaseChannel type #

ChromeReleaseChannel type

Signature: 

    export type ChromeReleaseChannel =
      | 'chrome'
      | 'chrome-beta'
      | 'chrome-canary'
      | 'chrome-dev';


# api clearCustomQueryHandlers() function #

clearCustomQueryHandlers() function

  Warning: This API is now obsolete.

  Import Puppeteer and use the static method
  Puppeteer.clearCustomQueryHandlers()

Signature: 

    export declare function clearCustomQueryHandlers(): void;


Returns:

void

# api ClickOptions interface #

ClickOptions interface

Signature: 

    export interface ClickOptions extends MouseClickOptions


Extends: MouseClickOptions

Properties 

  Property   Modifiers   Type     Description                                                                         Default
  ---------- ----------- -------- ----------------------------------------------------------------------------------- ---------
  offset      optional   Offset   Offset for the clickable point relative to the top-left corner of the border box.   

# api CommandOptions interface #

CommandOptions interface

Signature: 

    export interface CommandOptions


Properties 

  Property   Modifiers   Type     Description   Default
  ---------- ----------- -------- ------------- ---------
  timeout                number                 

# api CommonEventEmitter.emit() method #

CommonEventEmitter.emit() method

Signature: 

    interface CommonEventEmitter {
      emit<Key extends keyof Events>(type: Key, event: Events[Key]): boolean;
    }


Parameters 

  Parameter   Type          Description
  ----------- ------------- -------------
  type        Key           
  event       Events[Key]   

Returns:

boolean

# api CommonEventEmitter interface #

CommonEventEmitter interface

Signature: 

    export interface CommonEventEmitter<Events extends Record<EventType, unknown>>


Methods 

  Method                      Description
  --------------------------- -------------
  emit(type, event)           
  listenerCount(event)        
  off(type, handler)          
  on(type, handler)           
  once(type, handler)         
  removeAllListeners(event)   

# api CommonEventEmitter.listenerCount() method #

CommonEventEmitter.listenerCount() method

Signature: 

    interface CommonEventEmitter {
      listenerCount(event: keyof Events): number;
    }


Parameters 

  Parameter   Type           Description
  ----------- -------------- -------------
  event       keyof Events   

Returns:

number

# api CommonEventEmitter.off() method #

CommonEventEmitter.off() method

Signature: 

    interface CommonEventEmitter {
      off<Key extends keyof Events>(
        type: Key,
        handler?: Handler<Events[Key]>
      ): this;
    }


Parameters 

  Parameter   Type                    Description
  ----------- ----------------------- -------------
  type        Key                     
  handler     Handler <Events[Key]>   (Optional)

Returns:

this

# api CommonEventEmitter.once() method #

CommonEventEmitter.once() method

Signature: 

    interface CommonEventEmitter {
      once<Key extends keyof Events>(
        type: Key,
        handler: Handler<Events[Key]>
      ): this;
    }


Parameters 

  Parameter   Type                    Description
  ----------- ----------------------- -------------
  type        Key                     
  handler     Handler <Events[Key]>   

Returns:

this

# api CommonEventEmitter.on() method #

CommonEventEmitter.on() method

Signature: 

    interface CommonEventEmitter {
      on<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): this;
    }


Parameters 

  Parameter   Type                    Description
  ----------- ----------------------- -------------
  type        Key                     
  handler     Handler <Events[Key]>   

Returns:

this

# api CommonEventEmitter.removeAllListeners() method #

CommonEventEmitter.removeAllListeners() method

Signature: 

    interface CommonEventEmitter {
      removeAllListeners(event?: keyof Events): this;
    }


Parameters 

  Parameter   Type           Description
  ----------- -------------- -------------
  event       keyof Events   (Optional)

Returns:

this

# api Configuration interface #

Configuration interface

Defines options to configure Puppeteer's behavior during installation
and runtime.

See individual properties for more information.

Signature: 

    export interface Configuration


Properties 

+-------------+-------------+-------------+-------------+-------------+
| Property    | Modifiers   | Type        | Description | Default     |
+=============+=============+=============+=============+=============+
| brow        |  optional   | string      | Specifies a | The pinned  |
| serRevision |             |             | certain     | browser     |
|             |             |             | version of  | version     |
|             |             |             | the browser | supported   |
|             |             |             | you'd like  | by the      |
|             |             |             | Puppeteer   | current     |
|             |             |             | to use.     | Puppeteer   |
|             |             |             |             | version.    |
|             |             |             | Can be      |             |
|             |             |             | overridden  |             |
|             |             |             | by          |             |
|             |             |             |  PUPP       |             |
|             |             |             | ETEER_BROWS |             |
|             |             |             | ER_REVISION |             |
|             |             |             | .           |             |
|             |             |             |             |             |
|             |             |             | See         |             |
|             |             |             | puppe       |             |
|             |             |             | teer.launch |             |
|             |             |             | on how      |             |
|             |             |             | executable  |             |
|             |             |             | path is     |             |
|             |             |             | inferred.   |             |
|             |             |             |             |             |
|             |             |             | Use a       |             |
|             |             |             | specific    |             |
|             |             |             | browser     |             |
|             |             |             | version     |             |
|             |             |             | (e.g.,      |             |
|             |             |             | 119.0       |             |
|             |             |             | .6045.105). |             |
|             |             |             | If you use  |             |
|             |             |             | an alias    |             |
|             |             |             | such        |             |
|             |             |             |  stable or  |             |
|             |             |             |  canary it  |             |
|             |             |             | will only   |             |
|             |             |             | work during |             |
|             |             |             | the         |             |
|             |             |             | i           |             |
|             |             |             | nstallation |             |
|             |             |             | of          |             |
|             |             |             | Puppeteer   |             |
|             |             |             | and it will |             |
|             |             |             | fail when   |             |
|             |             |             | launching   |             |
|             |             |             | the         |             |
|             |             |             | browser.    |             |
+-------------+-------------+-------------+-------------+-------------+
| cac         |  optional   | string      | Defines the |  pa         |
| heDirectory |             |             | directory   | th.join(os. |
|             |             |             | to be used  | homedir(),  |
|             |             |             | by          | '.cache', ' |
|             |             |             | Puppeteer   | puppeteer') |
|             |             |             | for         |             |
|             |             |             | caching.    |             |
|             |             |             |             |             |
|             |             |             | Can be      |             |
|             |             |             | overridden  |             |
|             |             |             | by          |             |
|             |             |             |  PUPPETEE   |             |
|             |             |             | R_CACHE_DIR |             |
|             |             |             | .           |             |
+-------------+-------------+-------------+-------------+-------------+
| def         |  optional   | Product     | Specifies   |  chrome     |
| aultProduct |             |             | which       |             |
|             |             |             | browser     |             |
|             |             |             | you'd like  |             |
|             |             |             | Puppeteer   |             |
|             |             |             | to use.     |             |
|             |             |             |             |             |
|             |             |             | Can be      |             |
|             |             |             | overridden  |             |
|             |             |             | by          |             |
|             |             |             |  PUPPET     |             |
|             |             |             | EER_PRODUCT |             |
|             |             |             | .           |             |
+-------------+-------------+-------------+-------------+-------------+
| down        |  optional   | string      | Specifies   | Either      |
| loadBaseUrl |             |             | the URL     | h           |
|             |             |             | prefix that | ttps://stor |
|             |             |             | is used to  | age.googlea |
|             |             |             | download    | pis.com/chr |
|             |             |             | the         | ome-for-tes |
|             |             |             | browser.    | ting-public |
|             |             |             |             | or          |
|             |             |             | Can be      | http        |
|             |             |             | overridden  | s://archive |
|             |             |             | by          | .mozilla.or |
|             |             |             |  PUPPE      | g/pub/firef |
|             |             |             | TEER_DOWNLO | ox/nightly/ |
|             |             |             | AD_BASE_URL | latest-mozi |
|             |             |             | .           | lla-central |
|             |             |             |             | , depending |
|             |             |             |             | on the      |
|             |             |             |             | product.    |
+-------------+-------------+-------------+-------------+-------------+
| exe         |  optional   | string      | Specifies   | Aut         |
| cutablePath |             |             | an          | o-computed. |
|             |             |             | executable  |             |
|             |             |             | path to be  |             |
|             |             |             | used in     |             |
|             |             |             | puppe       |             |
|             |             |             | teer.launch |             |
|             |             |             | .           |             |
|             |             |             |             |             |
|             |             |             | Can be      |             |
|             |             |             | overridden  |             |
|             |             |             | by          |             |
|             |             |             |  PUP        |             |
|             |             |             | PETEER_EXEC |             |
|             |             |             | UTABLE_PATH |             |
|             |             |             | .           |             |
+-------------+-------------+-------------+-------------+-------------+
| experiments |  optional   | Ex          | Defines     |             |
|             |             | perimentsCo | e           |             |
|             |             | nfiguration | xperimental |             |
|             |             |             | options for |             |
|             |             |             | Puppeteer.  |             |
+-------------+-------------+-------------+-------------+-------------+
| logLevel    |  optional   | 'silent' |  | Tells       |  warn       |
|             |             | 'error' |   | Puppeteer   |             |
|             |             | 'warn'      | to log at   |             |
|             |             |             | the given   |             |
|             |             |             | level.      |             |
+-------------+-------------+-------------+-------------+-------------+
| skipChr     |  optional   | boolean     | Tells       |             |
| omeDownload |             |             | Puppeteer   |             |
|             |             |             | to not      |             |
|             |             |             | Chrome      |             |
|             |             |             | download    |             |
|             |             |             | during      |             |
|             |             |             | in          |             |
|             |             |             | stallation. |             |
|             |             |             |             |             |
|             |             |             | Can be      |             |
|             |             |             | overridden  |             |
|             |             |             | by          |             |
|             |             |             |  PUPPETEE   |             |
|             |             |             | R_SKIP_CHRO |             |
|             |             |             | ME_DOWNLOAD |             |
|             |             |             | .           |             |
+-------------+-------------+-------------+-------------+-------------+
| skipChrom   |  optional   | boolean     | Tells       |             |
| eHeadlessSh |             |             | Puppeteer   |             |
| ellDownload |             |             | to not      |             |
|             |             |             | chrome-hea  |             |
|             |             |             | dless-shell |             |
|             |             |             | download    |             |
|             |             |             | during      |             |
|             |             |             | in          |             |
|             |             |             | stallation. |             |
|             |             |             |             |             |
|             |             |             | Can be      |             |
|             |             |             | overridden  |             |
|             |             |             | by          |             |
|             |             |             |  P          |             |
|             |             |             | UPPETEER_SK |             |
|             |             |             | IP_CHROME_H |             |
|             |             |             | EADLESS_SHE |             |
|             |             |             | LL_DOWNLOAD |             |
|             |             |             | .           |             |
+-------------+-------------+-------------+-------------+-------------+
| s           |  optional   | boolean     | Tells       |             |
| kipDownload |             |             | Puppeteer   |             |
|             |             |             | to not      |             |
|             |             |             | download    |             |
|             |             |             | during      |             |
|             |             |             | in          |             |
|             |             |             | stallation. |             |
|             |             |             |             |             |
|             |             |             | Can be      |             |
|             |             |             | overridden  |             |
|             |             |             | by          |             |
|             |             |             |  P          |             |
|             |             |             | UPPETEER_SK |             |
|             |             |             | IP_DOWNLOAD |             |
|             |             |             | .           |             |
+-------------+-------------+-------------+-------------+-------------+
| tempora     |  optional   | string      | Defines the |             |
| ryDirectory |             |             | directory   | os.tmpdir() |
|             |             |             | to be used  |             |
|             |             |             | by          |             |
|             |             |             | Puppeteer   |             |
|             |             |             | for         |             |
|             |             |             | creating    |             |
|             |             |             | temporary   |             |
|             |             |             | files.      |             |
|             |             |             |             |             |
|             |             |             | Can be      |             |
|             |             |             | overridden  |             |
|             |             |             | by          |             |
|             |             |             |  PUPPET     |             |
|             |             |             | EER_TMP_DIR |             |
|             |             |             | .           |             |
+-------------+-------------+-------------+-------------+-------------+

# api connect() function #

connect() function

Signature: 

    connect: (
      options: import('puppeteer-core/internal/puppeteer-core.js').ConnectOptions
    ) => Promise<import('puppeteer-core/internal/puppeteer-core.js').Browser>;


Parameters 

  Parameter   Type                                                                  Description
  ----------- --------------------------------------------------------------------- -------------
  options     import("puppeteer-core/internal/puppeteer-core.js"). ConnectOptions   

Returns:

Promise<import("puppeteer-core/internal/puppeteer-core.js"). Browser >

# api Connection.(constructor) #

Connection.(constructor)

Constructs a new instance of the  Connection class

Signature: 

    class Connection {
      constructor(
        url: string,
        transport: ConnectionTransport,
        delay?: number,
        timeout?: number
      );
    }


Parameters 

  Parameter   Type                  Description
  ----------- --------------------- -------------
  url         string                
  transport   ConnectionTransport   
  delay       number                (Optional)
  timeout     number                (Optional)

# api Connection.createSession() method #

Connection.createSession() method

Signature: 

    class Connection {
      createSession(targetInfo: Protocol.Target.TargetInfo): Promise<CDPSession>;
    }


Parameters 

  Parameter    Type                         Description
  ------------ ---------------------------- -----------------
  targetInfo   Protocol.Target.TargetInfo   The target info

Returns:

Promise< CDPSession >

The CDP session that is created

# api Connection.dispose() method #

Connection.dispose() method

Signature: 

    class Connection {
      dispose(): void;
    }


Returns:

void

# api Connection.fromSession() method #

Connection.fromSession() method

Signature: 

    class Connection {
      static fromSession(session: CDPSession): Connection | undefined;
    }


Parameters 

  Parameter   Type         Description
  ----------- ------------ -------------
  session     CDPSession   

Returns:

Connection | undefined

# api Connection class #

Connection class

Signature: 

    export declare class Connection extends EventEmitter<CDPSessionEvents>


Extends: EventEmitter < CDPSessionEvents >

Constructors 

  Constructor                                     Modifiers   Description
  ----------------------------------------------- ----------- ----------------------------------------------------
  (constructor)(url, transport, delay, timeout)               Constructs a new instance of the  Connection class

Properties 

  Property   Modifiers   Type     Description
  ---------- ----------- -------- -------------
  timeout     readonly   number   

Methods 

  Method                          Modifiers   Description
  ------------------------------- ----------- -------------
  createSession(targetInfo)                   
  dispose()                                   
  fromSession(session)             static     
  send(method, params, options)               
  session(sessionId)                          
  url()                                       

# api Connection.send() method #

Connection.send() method

Signature: 

    class Connection {
      send<T extends keyof ProtocolMapping.Commands>(
        method: T,
        params?: ProtocolMapping.Commands[T]['paramsType'][0],
        options?: CommandOptions
      ): Promise<ProtocolMapping.Commands[T]['returnType']>;
    }


Parameters 

  Parameter   Type                                           Description
  ----------- ---------------------------------------------- -------------
  method      T                                              
  params      ProtocolMapping.Commands[T]['paramsType'][0]   (Optional)
  options     CommandOptions                                 (Optional)

Returns:

Promise<ProtocolMapping.Commands[T]['returnType']>

# api Connection.session() method #

Connection.session() method

Signature: 

    class Connection {
      session(sessionId: string): CDPSession | null;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- ----------------
  sessionId   string   The session id

Returns:

CDPSession | null

The current CDP session if it exists

# api ConnectionTransport.close() method #

ConnectionTransport.close() method

Signature: 

    interface ConnectionTransport {
      close(): void;
    }


Returns:

void

# api ConnectionTransport interface #

ConnectionTransport interface

Signature: 

    export interface ConnectionTransport


Properties 

  Property    Modifiers   Type                        Description   Default
  ----------- ----------- --------------------------- ------------- ---------
  onclose      optional   () => void                                
  onmessage    optional   (message: string) => void                 

Methods 

  Method          Description
  --------------- -------------
  close()         
  send(message)   

# api ConnectionTransport.send() method #

ConnectionTransport.send() method

Signature: 

    interface ConnectionTransport {
      send(message: string): void;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- -------------
  message     string   

Returns:

void

# api Connection.url() method #

Connection.url() method

Signature: 

    class Connection {
      url(): string;
    }


Returns:

string

# api ConnectOptions interface #

ConnectOptions interface

Signature: 

    export interface ConnectOptions extends BrowserConnectOptions


Extends: BrowserConnectOptions

Properties 

  Property            Modifiers   Type                     Description                                     Default
  ------------------- ----------- ------------------------ ----------------------------------------------- ---------
  browserURL           optional   string                                                                   
  browserWSEndpoint    optional   string                                                                   
  headers              optional   Record<string, string>   Headers to use for the web socket connection.   
  transport            optional   ConnectionTransport                                                      

# api ConsoleMessage.args() method #

ConsoleMessage.args() method

An array of arguments passed to the console.

Signature: 

    class ConsoleMessage {
      args(): JSHandle[];
    }


Returns:

JSHandle []

# api ConsoleMessage.(constructor) #

ConsoleMessage.(constructor)

Constructs a new instance of the  ConsoleMessage class

Signature: 

    class ConsoleMessage {
      constructor(
        type: ConsoleMessageType,
        text: string,
        args: JSHandle[],
        stackTraceLocations: ConsoleMessageLocation[]
      );
    }


Parameters 

  Parameter             Type                        Description
  --------------------- --------------------------- -------------
  type                  ConsoleMessageType          
  text                  string                      
  args                  JSHandle []                 
  stackTraceLocations   ConsoleMessageLocation []   

# api ConsoleMessage class #

ConsoleMessage class

ConsoleMessage objects are dispatched by page via the 'console' event.

Signature: 

    export declare class ConsoleMessage


Constructors 

  Constructor                                            Modifiers   Description
  ------------------------------------------------------ ----------- --------------------------------------------------------
  (constructor)(type, text, args, stackTraceLocations)               Constructs a new instance of the  ConsoleMessage class

Methods 

  Method         Modifiers   Description
  -------------- ----------- -------------------------------------------------------------
  args()                     An array of arguments passed to the console.
  location()                 The location of the console message.
  stackTrace()               The array of locations on the stack of the console message.
  text()                     The text of the console message.
  type()                     The type of the console message.

# api ConsoleMessage.location() method #

ConsoleMessage.location() method

The location of the console message.

Signature: 

    class ConsoleMessage {
      location(): ConsoleMessageLocation;
    }


Returns:

ConsoleMessageLocation

# api ConsoleMessageLocation interface #

ConsoleMessageLocation interface

Signature: 

    export interface ConsoleMessageLocation


Properties 

  Property       Modifiers   Type     Description                                                               Default
  -------------- ----------- -------- ------------------------------------------------------------------------- ---------
  columnNumber    optional   number   0-based column number in the resource if known or  undefined otherwise.   
  lineNumber      optional   number   0-based line number in the resource if known or  undefined otherwise.     
  url             optional   string   URL of the resource if known or  undefined otherwise.                     

# api ConsoleMessage.stackTrace() method #

ConsoleMessage.stackTrace() method

The array of locations on the stack of the console message.

Signature: 

    class ConsoleMessage {
      stackTrace(): ConsoleMessageLocation[];
    }


Returns:

ConsoleMessageLocation []

# api ConsoleMessage.text() method #

ConsoleMessage.text() method

The text of the console message.

Signature: 

    class ConsoleMessage {
      text(): string;
    }


Returns:

string

# api ConsoleMessage.type() method #

ConsoleMessage.type() method

The type of the console message.

Signature: 

    class ConsoleMessage {
      type(): ConsoleMessageType;
    }


Returns:

ConsoleMessageType

# api ConsoleMessageType type #

ConsoleMessageType type

The supported types for console messages.

Signature: 

    export type ConsoleMessageType =
      | 'log'
      | 'debug'
      | 'info'
      | 'error'
      | 'warn'
      | 'dir'
      | 'dirxml'
      | 'table'
      | 'trace'
      | 'clear'
      | 'startGroup'
      | 'startGroupCollapsed'
      | 'endGroup'
      | 'assert'
      | 'profile'
      | 'profileEnd'
      | 'count'
      | 'timeEnd'
      | 'verbose';


# api ContinueRequestOverrides interface #

ContinueRequestOverrides interface

Signature: 

    export interface ContinueRequestOverrides


Properties 

  Property   Modifiers   Type                     Description                                                    Default
  ---------- ----------- ------------------------ -------------------------------------------------------------- ---------
  headers     optional   Record<string, string>                                                                  
  method      optional   string                                                                                  
  postData    optional   string                                                                                  
  url         optional   string                   If set, the request URL will change. This is not a redirect.   

# api Cookie interface #

Cookie interface

Represents a cookie object.

Signature: 

    export interface Cookie


Properties 

  Property             Modifiers   Type                 Description                                                                                                                                                               Default
  -------------------- ----------- -------------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------
  domain                           string               Cookie domain.                                                                                                                                                            
  expires                          number               Cookie expiration date as the number of seconds since the UNIX epoch. Set to  -1 for session cookies                                                                      
  httpOnly                         boolean              True if cookie is http-only.                                                                                                                                              
  name                             string               Cookie name.                                                                                                                                                              
  partitionKey          optional   string               Cookie partition key. The site of the top-level URL the browser was visiting at the start of the request to the endpoint that set the cookie. Supported only in Chrome.   
  partitionKeyOpaque    optional   boolean              True if cookie partition key is opaque. Supported only in Chrome.                                                                                                         
  path                             string               Cookie path.                                                                                                                                                              
  priority              optional   CookiePriority       Cookie Priority. Supported only in Chrome.                                                                                                                                
  sameParty             optional   boolean              True if cookie is SameParty. Supported only in Chrome.                                                                                                                    
  sameSite              optional   CookieSameSite       Cookie SameSite type.                                                                                                                                                     
  secure                           boolean              True if cookie is secure.                                                                                                                                                 
  session                          boolean              True in case of session cookie.                                                                                                                                           
  size                             number               Cookie size.                                                                                                                                                              
  sourceScheme          optional   CookieSourceScheme   Cookie source scheme type. Supported only in Chrome.                                                                                                                      
  value                            string               Cookie value.                                                                                                                                                             

# api CookieParam interface #

CookieParam interface

Cookie parameter object

Signature: 

    export interface CookieParam


Properties 

  Property       Modifiers   Type                 Description                                                                                                                                                                                            Default
  -------------- ----------- -------------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ---------
  domain          optional   string               Cookie domain.                                                                                                                                                                                         
  expires         optional   number               Cookie expiration date, session cookie if not set                                                                                                                                                      
  httpOnly        optional   boolean              True if cookie is http-only.                                                                                                                                                                           
  name                       string               Cookie name.                                                                                                                                                                                           
  partitionKey    optional   string               Cookie partition key. The site of the top-level URL the browser was visiting at the start of the request to the endpoint that set the cookie. If not set, the cookie will be set as not partitioned.   
  path            optional   string               Cookie path.                                                                                                                                                                                           
  priority        optional   CookiePriority       Cookie Priority. Supported only in Chrome.                                                                                                                                                             
  sameParty       optional   boolean              True if cookie is SameParty. Supported only in Chrome.                                                                                                                                                 
  sameSite        optional   CookieSameSite       Cookie SameSite type.                                                                                                                                                                                  
  secure          optional   boolean              True if cookie is secure.                                                                                                                                                                              
  sourceScheme    optional   CookieSourceScheme   Cookie source scheme type. Supported only in Chrome.                                                                                                                                                   
  url             optional   string               The request-URI to associate with the setting of the cookie. This value can affect the default domain, path, and source scheme values of the created cookie.                                           
  value                      string               Cookie value.                                                                                                                                                                                          

# api CookiePriority type #

CookiePriority type

Represents the cookie's 'Priority' status:
https://tools.ietf.org/html/draft-west-cookie-priority-00

Signature: 

    export type CookiePriority = 'Low' | 'Medium' | 'High';


# api CookieSameSite type #

CookieSameSite type

Represents the cookie's 'SameSite' status:
https://tools.ietf.org/html/draft-west-first-party-cookies

Signature: 

    export type CookieSameSite = 'Strict' | 'Lax' | 'None';


# api CookieSourceScheme type #

CookieSourceScheme type

Represents the source scheme of the origin that originally set the
cookie. A value of "Unset" allows protocol clients to emulate legacy
cookie scope for the scheme. This is a temporary ability and it will be
removed in the future.

Signature: 

    export type CookieSourceScheme = 'Unset' | 'NonSecure' | 'Secure';


# api Coverage.(constructor) #

Coverage.(constructor)

Constructs a new instance of the  Coverage class

Signature: 

    class Coverage {
      constructor(client: CDPSession);
    }


Parameters 

  Parameter   Type         Description
  ----------- ------------ -------------
  client      CDPSession   

# api CoverageEntry interface #

CoverageEntry interface

The CoverageEntry class represents one entry of the coverage report.

Signature: 

    export interface CoverageEntry


Properties 

  Property   Modifiers   Type                                     Description                                     Default
  ---------- ----------- ---------------------------------------- ----------------------------------------------- ---------
  ranges                 Array<{ start: number; end: number; }>   The covered range as start and end positions.   
  text                   string                                   The content of the style sheet or script.       
  url                    string                                   The URL of the style sheet or script.           

# api Coverage class #

Coverage class

The Coverage class provides methods to gather information about parts of
JavaScript and CSS that were used by the page.

Signature: 

    export declare class Coverage


Remarks 

To output coverage in a form consumable by Istanbul , see
puppeteer-to-istanbul .

Example 

An example of using JavaScript and CSS coverage to get percentage of
initially executed code:

    // Enable both JavaScript and CSS coverage
    await Promise.all([
      page.coverage.startJSCoverage(),
      page.coverage.startCSSCoverage(),
    ]);
    // Navigate to page
    await page.goto('https://example.com');
    // Disable both JavaScript and CSS coverage
    const [jsCoverage, cssCoverage] = await Promise.all([
      page.coverage.stopJSCoverage(),
      page.coverage.stopCSSCoverage(),
    ]);
    let totalBytes = 0;
    let usedBytes = 0;
    const coverage = [...jsCoverage, ...cssCoverage];
    for (const entry of coverage) {
      totalBytes += entry.text.length;
      for (const range of entry.ranges) usedBytes += range.end - range.start - 1;
    }
    console.log(`Bytes used: ${(usedBytes / totalBytes) * 100}%`);


Constructors 

  Constructor             Modifiers   Description
  ----------------------- ----------- --------------------------------------------------
  (constructor)(client)               Constructs a new instance of the  Coverage class

Methods 

  Method                      Modifiers   Description
  --------------------------- ----------- -----------------------------------------------------------------------------
  startCSSCoverage(options)               
  startJSCoverage(options)                
  stopCSSCoverage()                       Promise that resolves to the array of coverage reports for all stylesheets.
  stopJSCoverage()                        Promise that resolves to the array of coverage reports for all scripts.

# api Coverage.startCSSCoverage() method #

Coverage.startCSSCoverage() method

Signature: 

    class Coverage {
      startCSSCoverage(options?: CSSCoverageOptions): Promise<void>;
    }


Parameters 

  Parameter   Type                 Description
  ----------- -------------------- --------------------------------------------------------------------------------------------
  options     CSSCoverageOptions   (Optional) Set of configurable options for coverage, defaults to  resetOnNavigation : true

Returns:

Promise<void>

Promise that resolves when coverage is started.

# api Coverage.startJSCoverage() method #

Coverage.startJSCoverage() method

Signature: 

    class Coverage {
      startJSCoverage(options?: JSCoverageOptions): Promise<void>;
    }


Parameters 

  Parameter   Type                Description
  ----------- ------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  options     JSCoverageOptions   (Optional) Set of configurable options for coverage defaults to  resetOnNavigation : true, reportAnonymousScripts : false,  includeRawScriptCoverage : false, useBlockCoverage : true

Returns:

Promise<void>

Promise that resolves when coverage is started.

Remarks 

Anonymous scripts are ones that don't have an associated url. These are
scripts that are dynamically created on the page using  eval or
 new Function . If  reportAnonymousScripts is set to  true , anonymous
scripts URL will start with  debugger://VM (unless a magic //# sourceURL
comment is present, in which case that will the be URL).

# api Coverage.stopCSSCoverage() method #

Coverage.stopCSSCoverage() method

Promise that resolves to the array of coverage reports for all
stylesheets.

Signature: 

    class Coverage {
      stopCSSCoverage(): Promise<CoverageEntry[]>;
    }


Returns:

Promise< CoverageEntry []>

Remarks 

CSS Coverage doesn't include dynamically injected style tags without
sourceURLs.

# api Coverage.stopJSCoverage() method #

Coverage.stopJSCoverage() method

Promise that resolves to the array of coverage reports for all scripts.

Signature: 

    class Coverage {
      stopJSCoverage(): Promise<JSCoverageEntry[]>;
    }


Returns:

Promise< JSCoverageEntry []>

Remarks 

JavaScript Coverage doesn't include anonymous scripts by default.
However, scripts with sourceURLs are reported.

# api Credentials interface #

Credentials interface

Signature: 

    export interface Credentials


Properties 

  Property   Modifiers   Type     Description   Default
  ---------- ----------- -------- ------------- ---------
  password               string                 
  username               string                 

# api CSSCoverage.(constructor) #

CSSCoverage.(constructor)

Constructs a new instance of the  CSSCoverage class

Signature: 

    class CSSCoverage {
      constructor(client: CDPSession);
    }


Parameters 

  Parameter   Type         Description
  ----------- ------------ -------------
  client      CDPSession   

# api CSSCoverage class #

CSSCoverage class

Signature: 

    export declare class CSSCoverage


Constructors 

  Constructor             Modifiers   Description
  ----------------------- ----------- -----------------------------------------------------
  (constructor)(client)               Constructs a new instance of the  CSSCoverage class

Methods 

  Method           Modifiers   Description
  ---------------- ----------- -------------
  start(options)               
  stop()                       

# api CSSCoverageOptions interface #

CSSCoverageOptions interface

Set of configurable options for CSS coverage.

Signature: 

    export interface CSSCoverageOptions


Properties 

  Property            Modifiers   Type      Description                                      Default
  ------------------- ----------- --------- ------------------------------------------------ ---------
  resetOnNavigation    optional   boolean   Whether to reset coverage on every navigation.   

# api CSSCoverage.start() method #

CSSCoverage.start() method

Signature: 

    class CSSCoverage {
      start(options?: {resetOnNavigation?: boolean}): Promise<void>;
    }


Parameters 

  Parameter   Type                               Description
  ----------- ---------------------------------- -------------
  options     { resetOnNavigation?: boolean; }   (Optional)

Returns:

Promise<void>

# api CSSCoverage.stop() method #

CSSCoverage.stop() method

Signature: 

    class CSSCoverage {
      stop(): Promise<CoverageEntry[]>;
    }


Returns:

Promise< CoverageEntry []>

# api CustomQueryHandler interface #

CustomQueryHandler interface

Signature: 

    export interface CustomQueryHandler


Properties 

  Property   Modifiers   Type                                               Description                                                        Default
  ---------- ----------- -------------------------------------------------- ------------------------------------------------------------------ ---------
  queryAll    optional   (node: Node, selector: string) => Iterable<Node>   Searches for some Nodes matching the given  selector from node .   
  queryOne    optional   (node: Node, selector: string) => Node | null      Searches for a Node matching the given  selector from node .       

# api customQueryHandlerNames() function #

customQueryHandlerNames() function

  Warning: This API is now obsolete.

  Import Puppeteer and use the static method
  Puppeteer.customQueryHandlerNames()

Signature: 

    export declare function customQueryHandlerNames(): string[];


Returns:

string[]

# api DebugInfo interface #

DebugInfo interface

Signature: 

    export interface DebugInfo


Properties 

  Property                Modifiers   Type      Description   Default
  ----------------------- ----------- --------- ------------- ---------
  pendingProtocolErrors               Error[]                 

# api defaultArgs() function #

defaultArgs() function

Signature: 

    defaultArgs: (options?: import("puppeteer-core/internal/puppeteer-core.js").BrowserLaunchArgumentOptions | undefined) => string[]


Parameters 

  Parameter   Type                                                                                            Description
  ----------- ----------------------------------------------------------------------------------------------- -------------
  options     import("puppeteer-core/internal/puppeteer-core.js"). BrowserLaunchArgumentOptions | undefined   (Optional)

Returns:

string[]

# api DEFAULT_INTERCEPT_RESOLUTION_PRIORITY variable #

DEFAULT_INTERCEPT_RESOLUTION_PRIORITY variable

The default cooperative request interception resolution priority

Signature: 

    DEFAULT_INTERCEPT_RESOLUTION_PRIORITY = 0;


# api DeleteCookiesRequest interface #

DeleteCookiesRequest interface

Signature: 

    export interface DeleteCookiesRequest


Properties 

  Property   Modifiers   Type     Description                                                                                                                                                                 Default
  ---------- ----------- -------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------
  domain      optional   string   If specified, deletes only cookies with the exact domain.                                                                                                                   
  name                   string   Name of the cookies to remove.                                                                                                                                              
  path        optional   string   If specified, deletes only cookies with the exact path.                                                                                                                     
  url         optional   string   If specified, deletes all the cookies with the given name where domain and path match provided URL. Otherwise, deletes only cookies related to the current page's domain.   

# api Device interface #

Device interface

Signature: 

    export interface Device


Properties 

  Property    Modifiers   Type       Description   Default
  ----------- ----------- ---------- ------------- ---------
  userAgent               string                   
  viewport                Viewport                 

# api DeviceRequestPrompt.cancel() method #

DeviceRequestPrompt.cancel() method

Cancel the prompt.

Signature: 

    class DeviceRequestPrompt {
      cancel(): Promise<void>;
    }


Returns:

Promise<void>

# api DeviceRequestPromptDevice class #

DeviceRequestPromptDevice class

Device in a request prompt.

Signature: 

    export declare class DeviceRequestPromptDevice


Remarks 

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  DeviceRequestPromptDevice class.

Properties 

  Property   Modifiers   Type     Description
  ---------- ----------- -------- ----------------------------------------
  id                     string   Device id during a prompt.
  name                   string   Device name as it appears in a prompt.

# api DeviceRequestPrompt class #

DeviceRequestPrompt class

Device request prompts let you respond to the page requesting for a
device through an API like WebBluetooth.

Signature: 

    export declare class DeviceRequestPrompt


Remarks 

 DeviceRequestPrompt instances are returned via the
Page.waitForDevicePrompt() method.

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  DeviceRequestPrompt class.

Example 

    const [deviceRequest] = Promise.all([
      page.waitForDevicePrompt(),
      page.click('#connect-bluetooth'),
    ]);
    await devicePrompt.select(
      await devicePrompt.waitForDevice(({name}) => name.includes('My Device'))
    );


Properties 

  Property   Modifiers   Type                           Description
  ---------- ----------- ------------------------------ -------------------------------------
  devices                DeviceRequestPromptDevice []   Current list of selectable devices.

Methods 

  Method                           Modifiers   Description
  -------------------------------- ----------- --------------------------------------------------------------
  cancel()                                     Cancel the prompt.
  select(device)                               Select a device in the prompt's list.
  waitForDevice(filter, options)               Resolve to the first device in the prompt matching a filter.

# api DeviceRequestPrompt.select() method #

DeviceRequestPrompt.select() method

Select a device in the prompt's list.

Signature: 

    class DeviceRequestPrompt {
      select(device: DeviceRequestPromptDevice): Promise<void>;
    }


Parameters 

  Parameter   Type                        Description
  ----------- --------------------------- -------------
  device      DeviceRequestPromptDevice   

Returns:

Promise<void>

# api DeviceRequestPrompt.waitForDevice() method #

DeviceRequestPrompt.waitForDevice() method

Resolve to the first device in the prompt matching a filter.

Signature: 

    class DeviceRequestPrompt {
      waitForDevice(
        filter: (device: DeviceRequestPromptDevice) => boolean,
        options?: WaitTimeoutOptions
      ): Promise<DeviceRequestPromptDevice>;
    }


Parameters 

  Parameter   Type                                              Description
  ----------- ------------------------------------------------- -------------
  filter      (device: DeviceRequestPromptDevice ) => boolean   
  options     WaitTimeoutOptions                                (Optional)

Returns:

Promise< DeviceRequestPromptDevice >

# api Dialog.accept() method #

Dialog.accept() method

A promise that resolves when the dialog has been accepted.

Signature: 

    class Dialog {
      accept(promptText?: string): Promise<void>;
    }


Parameters 

  Parameter    Type     Description
  ------------ -------- -------------------------------------------------------------------------------------------------------------------------
  promptText   string   (Optional) optional text that will be entered in the dialog prompt. Has no effect if the dialog's type is not  prompt .

Returns:

Promise<void>

# api Dialog.defaultValue() method #

Dialog.defaultValue() method

The default value of the prompt, or an empty string if the dialog is not
a  prompt .

Signature: 

    class Dialog {
      defaultValue(): string;
    }


Returns:

string

# api Dialog.dismiss() method #

Dialog.dismiss() method

A promise which will resolve once the dialog has been dismissed

Signature: 

    class Dialog {
      dismiss(): Promise<void>;
    }


Returns:

Promise<void>

# api Dialog class #

Dialog class

Dialog instances are dispatched by the Page via the  dialog event.

Signature: 

    export declare abstract class Dialog


Remarks 

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  Dialog class.

Example 

    import puppeteer from 'puppeteer';

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      page.on('dialog', async dialog => {
        console.log(dialog.message());
        await dialog.dismiss();
        await browser.close();
      });
      page.evaluate(() => alert('1'));
    })();


Methods 

  Method               Modifiers   Description
  -------------------- ----------- --------------------------------------------------------------------------------------
  accept(promptText)               A promise that resolves when the dialog has been accepted.
  defaultValue()                   The default value of the prompt, or an empty string if the dialog is not a  prompt .
  dismiss()                        A promise which will resolve once the dialog has been dismissed
  message()                        The message displayed in the dialog.
  type()                           The type of the dialog.

# api Dialog.message() method #

Dialog.message() method

The message displayed in the dialog.

Signature: 

    class Dialog {
      message(): string;
    }


Returns:

string

# api Dialog.type() method #

Dialog.type() method

The type of the dialog.

Signature: 

    class Dialog {
      type(): Protocol.Page.DialogType;
    }


Returns:

Protocol.Page.DialogType

# api ElementFor type #

ElementFor type

Signature: 

    export type ElementFor<
      TagName extends keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap,
    > = TagName extends keyof HTMLElementTagNameMap
      ? HTMLElementTagNameMap[TagName]
      : TagName extends keyof SVGElementTagNameMap
        ? SVGElementTagNameMap[TagName]
        : never;


# api ElementHandle.autofill() method #

ElementHandle.autofill() method

If the element is a form input, you can use ElementHandle.autofill() to
test if the form is compatible with the browser's autofill
implementation. Throws an error if the form cannot be autofilled.

Signature: 

    class ElementHandle {
      abstract autofill(data: AutofillData): Promise<void>;
    }


Parameters 

  Parameter   Type           Description
  ----------- -------------- -------------
  data        AutofillData   

Returns:

Promise<void>

Remarks 

Currently, Puppeteer supports auto-filling credit card information only
and in Chrome in the new headless and headful modes only.

    // Select an input on the credit card form.
    const name = await page.waitForSelector('form #name');
    // Trigger autofill with the desired data.
    await name.autofill({
      creditCard: {
        number: '4444444444444444',
        name: 'John Smith',
        expiryMonth: '01',
        expiryYear: '2030',
        cvc: '123',
      },
    });


# api ElementHandle.boundingBox() method #

ElementHandle.boundingBox() method

This method returns the bounding box of the element (relative to the
main frame), or  null if the element is not part of the layout (example:
 display: none ).

Signature: 

    class ElementHandle {
      boundingBox(): Promise<BoundingBox | null>;
    }


Returns:

Promise< BoundingBox | null>

# api ElementHandle.boxModel() method #

ElementHandle.boxModel() method

This method returns boxes of the element, or  null if the element is not
part of the layout (example:  display: none ).

Signature: 

    class ElementHandle {
      boxModel(): Promise<BoxModel | null>;
    }


Returns:

Promise< BoxModel | null>

Remarks 

Boxes are represented as an array of points; Each Point is an object
 {x, y} . Box points are sorted clock-wise.

# api ElementHandle.clickablePoint() method #

ElementHandle.clickablePoint() method

Returns the middle point within an element unless a specific offset is
provided.

Signature: 

    class ElementHandle {
      clickablePoint(offset?: Offset): Promise<Point>;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- -------------
  offset      Offset   (Optional)

Returns:

Promise< Point >

# api ElementHandle.click() method #

ElementHandle.click() method

This method scrolls element into view if needed, and then uses
Page.mouse to click in the center of the element. If the element is
detached from DOM, the method throws an error.

Signature: 

    class ElementHandle {
      click(
        this: ElementHandle<Element>,
        options?: Readonly<ClickOptions>
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                       Description
  ----------- -------------------------- -------------
  this        ElementHandle <Element>    
  options     Readonly< ClickOptions >   (Optional)

Returns:

Promise<void>

# api ElementHandle.contentFrame() method #

ElementHandle.contentFrame() method

Signature: 

    class ElementHandle {
      abstract contentFrame(): Promise<Frame | null>;
    }


Returns:

Promise< Frame | null>

# api ElementHandle.contentFrame() method #

ElementHandle.contentFrame() method

Resolves the frame associated with the element, if any. Always exists
for HTMLIFrameElements.

Signature: 

    class ElementHandle {
      abstract contentFrame(this: ElementHandle<HTMLIFrameElement>): Promise<Frame>;
    }


Parameters 

  Parameter   Type                                Description
  ----------- ----------------------------------- -------------
  this        ElementHandle <HTMLIFrameElement>   

Returns:

Promise< Frame >

# api ElementHandle.dragAndDrop() method #

ElementHandle.dragAndDrop() method

  Warning: This API is now obsolete.

  Use  ElementHandle.drop instead.

Signature: 

    class ElementHandle {
      dragAndDrop(
        this: ElementHandle<Element>,
        target: ElementHandle<Node>,
        options?: {
          delay: number;
        }
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- -------------
  this        ElementHandle <Element>   
  target      ElementHandle <Node>      
  options     { delay: number; }        (Optional)

Returns:

Promise<void>

# api ElementHandle.dragEnter() method #

ElementHandle.dragEnter() method

  Warning: This API is now obsolete.

  Do not use.  dragenter will automatically be performed during
  dragging.

Signature: 

    class ElementHandle {
      dragEnter(
        this: ElementHandle<Element>,
        data?: Protocol.Input.DragData
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- -------------
  this        ElementHandle <Element>   
  data        Protocol.Input.DragData   (Optional)

Returns:

Promise<void>

# api ElementHandle.drag() method #

ElementHandle.drag() method

Drags an element over the given element or point.

Signature: 

    class ElementHandle {
      drag(
        this: ElementHandle<Element>,
        target: Point | ElementHandle<Element>
      ): Promise<Protocol.Input.DragData | void>;
    }


Parameters 

  Parameter   Type                              Description
  ----------- --------------------------------- -------------
  this        ElementHandle <Element>           
  target      Point | ElementHandle <Element>   

Returns:

Promise<Protocol.Input.DragData | void>

DEPRECATED. When drag interception is enabled, the drag payload is
returned.

# api ElementHandle.dragOver() method #

ElementHandle.dragOver() method

  Warning: This API is now obsolete.

  Do not use.  dragover will automatically be performed during dragging.

Signature: 

    class ElementHandle {
      dragOver(
        this: ElementHandle<Element>,
        data?: Protocol.Input.DragData
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- -------------
  this        ElementHandle <Element>   
  data        Protocol.Input.DragData   (Optional)

Returns:

Promise<void>

# api ElementHandle.drop() method #

ElementHandle.drop() method

  Warning: This API is now obsolete.

  No longer supported.

Signature: 

    class ElementHandle {
      drop(
        this: ElementHandle<Element>,
        data?: Protocol.Input.DragData
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- -------------
  this        ElementHandle <Element>   
  data        Protocol.Input.DragData   (Optional)

Returns:

Promise<void>

# api ElementHandle.drop() method #

ElementHandle.drop() method

Drops the given element onto the current one.

Signature: 

    class ElementHandle {
      drop(
        this: ElementHandle<Element>,
        element: ElementHandle<Element>
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- -------------
  this        ElementHandle <Element>   
  element     ElementHandle <Element>   

Returns:

Promise<void>

# api ElementHandle.$$eval() method #

ElementHandle.$$eval() method

Runs the given function on an array of elements matching the given
selector in the current element.

If the given function returns a promise, then this method will wait till
the promise resolves.

Signature: 

    class ElementHandle {
      $$eval<
        Selector extends string,
        Params extends unknown[],
        Func extends EvaluateFuncWith<
          Array<NodeFor<Selector>>,
          Params
        > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,
      >(
        selector: Selector,
        pageFunction: Func | string,
        ...args: Params
      ): Promise<Awaited<ReturnType<Func>>>;
    }


Parameters 

  Parameter      Type            Description
  -------------- --------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
  selector       Selector        The selector to query for.
  pageFunction   Func | string   The function to be evaluated in the element's page's context. An array of elements matching the given selector will be passed to the function as its first argument.
  args           Params          Additional arguments to pass to  pageFunction .

Returns:

Promise<Awaited<ReturnType<Func>>>

A promise to the result of the function.

Example 

HTML:

    <div class="feed">
      <div class="tweet">Hello!</div>
      <div class="tweet">Hi!</div>
    </div>


JavaScript:

    const feedHandle = await page.$('.feed');
    expect(
      await feedHandle.$$eval('.tweet', nodes => nodes.map(n => n.innerText))
    ).toEqual(['Hello!', 'Hi!']);


# api ElementHandle.$eval() method #

ElementHandle.$eval() method

Runs the given function on the first element matching the given selector
in the current element.

If the given function returns a promise, then this method will wait till
the promise resolves.

Signature: 

    class ElementHandle {
      $eval<
        Selector extends string,
        Params extends unknown[],
        Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<
          NodeFor<Selector>,
          Params
        >,
      >(
        selector: Selector,
        pageFunction: Func | string,
        ...args: Params
      ): Promise<Awaited<ReturnType<Func>>>;
    }


Parameters 

  Parameter      Type            Description
  -------------- --------------- -------------------------------------------------------------------------------------------------------------------------------------------------
  selector       Selector        The selector to query for.
  pageFunction   Func | string   The function to be evaluated in this element's page's context. The first element matching the selector will be passed in as the first argument.
  args           Params          Additional arguments to pass to  pageFunction .

Returns:

Promise<Awaited<ReturnType<Func>>>

A promise to the result of the function.

Example 

    const tweetHandle = await page.$('.tweet');
    expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');
    expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');


# api ElementHandle.focus() method #

ElementHandle.focus() method

Calls focus on the element.

Signature: 

    class ElementHandle {
      focus(): Promise<void>;
    }


Returns:

Promise<void>

# api ElementHandle.hover() method #

ElementHandle.hover() method

This method scrolls element into view if needed, and then uses Page to
hover over the center of the element. If the element is detached from
DOM, the method throws an error.

Signature: 

    class ElementHandle {
      hover(this: ElementHandle<Element>): Promise<void>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- -------------
  this        ElementHandle <Element>   

Returns:

Promise<void>

# api ElementHandle.$() method #

ElementHandle.$() method

Queries the current element for an element matching the given selector.

Signature: 

    class ElementHandle {
      $<Selector extends string>(
        selector: Selector
      ): Promise<ElementHandle<NodeFor<Selector>> | null>;
    }


Parameters 

  Parameter   Type       Description
  ----------- ---------- ----------------------------
  selector    Selector   The selector to query for.

Returns:

Promise< ElementHandle < NodeFor <Selector>> | null>

A element handle to the first element matching the given selector.
Otherwise,  null .

# api ElementHandle.$$() method #

ElementHandle.$$() method

Queries the current element for all elements matching the given
selector.

Signature: 

    class ElementHandle {
      $$<Selector extends string>(
        selector: Selector
      ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;
    }


Parameters 

  Parameter   Type       Description
  ----------- ---------- ----------------------------
  selector    Selector   The selector to query for.

Returns:

Promise<Array< ElementHandle < NodeFor <Selector>>>>

An array of element handles that point to elements matching the given
selector.

# api ElementHandle class #

ElementHandle class

ElementHandle represents an in-page DOM element.

Signature: 

    export declare abstract class ElementHandle<ElementType extends Node = Element> extends JSHandle<ElementType>


Extends: JSHandle <ElementType>

Remarks 

ElementHandles can be created with the Page.$() method.

    import puppeteer from 'puppeteer';

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.goto('https://example.com');
      const hrefElement = await page.$('a');
      await hrefElement.click();
      // ...
    })();


ElementHandle prevents the DOM element from being garbage-collected
unless the handle is disposed . ElementHandles are auto-disposed when
their origin frame gets navigated.

ElementHandle instances can be used as arguments in Page.$eval() and
Page.evaluate() methods.

If you're using TypeScript, ElementHandle takes a generic argument that
denotes the type of element the handle is holding within. For example,
if you have a handle to a  <select> element, you can type it as
 ElementHandle<HTMLSelectElement> and you get some nicer type checks.

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  ElementHandle class.

Properties 

  Property   Modifiers   Type    Description
  ---------- ----------- ------- --------------------------------------------
  frame       readonly   Frame   Frame corresponding to the current handle.

Methods 

+-----------------------+-----------------------+-----------------------+
| Method                | Modifiers             | Description           |
+=======================+=======================+=======================+
| $(selector)           |                       | Queries the current   |
|                       |                       | element for an        |
|                       |                       | element matching the  |
|                       |                       | given selector.       |
+-----------------------+-----------------------+-----------------------+
| $$(selector)          |                       | Queries the current   |
|                       |                       | element for all       |
|                       |                       | elements matching the |
|                       |                       | given selector.       |
+-----------------------+-----------------------+-----------------------+
| $$eval(selector,      |                       | Runs the given        |
| pageFunction, args)   |                       | function on an array  |
|                       |                       | of elements matching  |
|                       |                       | the given selector in |
|                       |                       | the current element.  |
|                       |                       |                       |
|                       |                       | If the given function |
|                       |                       | returns a promise,    |
|                       |                       | then this method will |
|                       |                       | wait till the promise |
|                       |                       | resolves.             |
+-----------------------+-----------------------+-----------------------+
| $eval(selector,       |                       | Runs the given        |
| pageFunction, args)   |                       | function on the first |
|                       |                       | element matching the  |
|                       |                       | given selector in the |
|                       |                       | current element.      |
|                       |                       |                       |
|                       |                       | If the given function |
|                       |                       | returns a promise,    |
|                       |                       | then this method will |
|                       |                       | wait till the promise |
|                       |                       | resolves.             |
+-----------------------+-----------------------+-----------------------+
| autofill(data)        |                       | If the element is a   |
|                       |                       | form input, you can   |
|                       |                       | use                   |
|                       |                       | Ele                   |
|                       |                       | mentHandle.autofill() |
|                       |                       | to test if the form   |
|                       |                       | is compatible with    |
|                       |                       | the browser's         |
|                       |                       | autofill              |
|                       |                       | implementation.       |
|                       |                       | Throws an error if    |
|                       |                       | the form cannot be    |
|                       |                       | autofilled.           |
+-----------------------+-----------------------+-----------------------+
| boundingBox()         |                       | This method returns   |
|                       |                       | the bounding box of   |
|                       |                       | the element (relative |
|                       |                       | to the main frame),   |
|                       |                       | or  null if the       |
|                       |                       | element is not part   |
|                       |                       | of the layout         |
|                       |                       | (example:             |
|                       |                       |  display: none ).     |
+-----------------------+-----------------------+-----------------------+
| boxModel()            |                       | This method returns   |
|                       |                       | boxes of the element, |
|                       |                       | or  null if the       |
|                       |                       | element is not part   |
|                       |                       | of the layout         |
|                       |                       | (example:             |
|                       |                       |  display: none ).     |
+-----------------------+-----------------------+-----------------------+
| click(this, options)  |                       | This method scrolls   |
|                       |                       | element into view if  |
|                       |                       | needed, and then uses |
|                       |                       | Page.mouse to click   |
|                       |                       | in the center of the  |
|                       |                       | element. If the       |
|                       |                       | element is detached   |
|                       |                       | from DOM, the method  |
|                       |                       | throws an error.      |
+-----------------------+-----------------------+-----------------------+
| c                     |                       | Returns the middle    |
| lickablePoint(offset) |                       | point within an       |
|                       |                       | element unless a      |
|                       |                       | specific offset is    |
|                       |                       | provided.             |
+-----------------------+-----------------------+-----------------------+
| contentFrame(this)    |                       | Resolves the frame    |
|                       |                       | associated with the   |
|                       |                       | element, if any.      |
|                       |                       | Always exists for     |
|                       |                       | HTMLIFrameElements.   |
+-----------------------+-----------------------+-----------------------+
| contentFrame()        |                       |                       |
+-----------------------+-----------------------+-----------------------+
| drag(this, target)    |                       | Drags an element over |
|                       |                       | the given element or  |
|                       |                       | point.                |
+-----------------------+-----------------------+-----------------------+
| dragAndDrop(this,     |                       |                       |
| target, options)      |                       |                       |
+-----------------------+-----------------------+-----------------------+
| dragEnter(this, data) |                       |                       |
+-----------------------+-----------------------+-----------------------+
| dragOver(this, data)  |                       |                       |
+-----------------------+-----------------------+-----------------------+
| drop(this, element)   |                       | Drops the given       |
|                       |                       | element onto the      |
|                       |                       | current one.          |
+-----------------------+-----------------------+-----------------------+
| drop(this, data)      |                       |                       |
+-----------------------+-----------------------+-----------------------+
| focus()               |                       | Calls focus on the    |
|                       |                       | element.              |
+-----------------------+-----------------------+-----------------------+
| hover(this)           |                       | This method scrolls   |
|                       |                       | element into view if  |
|                       |                       | needed, and then uses |
|                       |                       | Page to hover over    |
|                       |                       | the center of the     |
|                       |                       | element. If the       |
|                       |                       | element is detached   |
|                       |                       | from DOM, the method  |
|                       |                       | throws an error.      |
+-----------------------+-----------------------+-----------------------+
| isHidden()            |                       | Checks if an element  |
|                       |                       | is hidden using the   |
|                       |                       | same mechanism as     |
|                       |                       | ElementHan            |
|                       |                       | dle.waitForSelector() |
|                       |                       | .                     |
+-----------------------+-----------------------+-----------------------+
| isInter               |                       | Resolves to true if   |
| sectingViewport(this, |                       | the element is        |
| options)              |                       | visible in the        |
|                       |                       | current viewport. If  |
|                       |                       | an element is an SVG, |
|                       |                       | we check if the svg   |
|                       |                       | owner element is in   |
|                       |                       | the viewport instead. |
|                       |                       | See                   |
|                       |                       | htt                   |
|                       |                       | ps://crbug.com/963246 |
|                       |                       | .                     |
+-----------------------+-----------------------+-----------------------+
| isVisible()           |                       | Checks if an element  |
|                       |                       | is visible using the  |
|                       |                       | same mechanism as     |
|                       |                       | ElementHan            |
|                       |                       | dle.waitForSelector() |
|                       |                       | .                     |
+-----------------------+-----------------------+-----------------------+
| press(key, options)   |                       | Focuses the element,  |
|                       |                       | and then uses         |
|                       |                       | Keyboard.down() and   |
|                       |                       | Keyboard.up() .       |
+-----------------------+-----------------------+-----------------------+
| screenshot(options)   |                       | This method scrolls   |
|                       |                       | element into view if  |
|                       |                       | needed, and then uses |
|                       |                       | Page.screenshot() to  |
|                       |                       | take a screenshot of  |
|                       |                       | the element. If the   |
|                       |                       | element is detached   |
|                       |                       | from DOM, the method  |
|                       |                       | throws an error.      |
+-----------------------+-----------------------+-----------------------+
| screenshot(options)   |                       |                       |
+-----------------------+-----------------------+-----------------------+
| scrollIntoView(this)  |                       | Scrolls the element   |
|                       |                       | into view using       |
|                       |                       | either the automation |
|                       |                       | protocol client or by |
|                       |                       | calling               |
|                       |                       | el                    |
|                       |                       | ement.scrollIntoView. |
+-----------------------+-----------------------+-----------------------+
| select(values)        |                       | Triggers a  change    |
|                       |                       | and  input event once |
|                       |                       | all the provided      |
|                       |                       | options have been     |
|                       |                       | selected. If there's  |
|                       |                       | no  <select> element  |
|                       |                       | matching  selector ,  |
|                       |                       | the method throws an  |
|                       |                       | error.                |
+-----------------------+-----------------------+-----------------------+
| tap(this)             |                       | This method scrolls   |
|                       |                       | element into view if  |
|                       |                       | needed, and then uses |
|                       |                       | Touchscreen.tap() to  |
|                       |                       | tap in the center of  |
|                       |                       | the element. If the   |
|                       |                       | element is detached   |
|                       |                       | from DOM, the method  |
|                       |                       | throws an error.      |
+-----------------------+-----------------------+-----------------------+
| toElement(tagName)    |                       | Converts the current  |
|                       |                       | handle to the given   |
|                       |                       | element type.         |
+-----------------------+-----------------------+-----------------------+
| touchEnd(this)        |                       |                       |
+-----------------------+-----------------------+-----------------------+
| touchMove(this)       |                       |                       |
+-----------------------+-----------------------+-----------------------+
| touchStart(this)      |                       |                       |
+-----------------------+-----------------------+-----------------------+
| type(text, options)   |                       | Focuses the element,  |
|                       |                       | and then sends a      |
|                       |                       |  keydown ,  keypress  |
|                       |                       | /  input , and  keyup |
|                       |                       | event for each        |
|                       |                       | character in the      |
|                       |                       | text.                 |
|                       |                       |                       |
|                       |                       | To press a special    |
|                       |                       | key, like  Control or |
|                       |                       |  ArrowDown , use      |
|                       |                       | ElementHandle.press() |
|                       |                       | .                     |
+-----------------------+-----------------------+-----------------------+
| uploadFile(this,      |                       | Sets the value of an  |
| paths)                |                       | input element to the  |
|                       |                       | given file paths.     |
+-----------------------+-----------------------+-----------------------+
| wait                  |                       | Wait for an element   |
| ForSelector(selector, |                       | matching the given    |
| options)              |                       | selector to appear in |
|                       |                       | the current element.  |
|                       |                       |                       |
|                       |                       | Unlike                |
|                       |                       | Fr                    |
|                       |                       | ame.waitForSelector() |
|                       |                       | , this method does    |
|                       |                       | not work across       |
|                       |                       | navigations or if the |
|                       |                       | element is detached   |
|                       |                       | from DOM.             |
+-----------------------+-----------------------+-----------------------+

# api ElementHandle.isHidden() method #

ElementHandle.isHidden() method

Checks if an element is hidden using the same mechanism as
ElementHandle.waitForSelector() .

Signature: 

    class ElementHandle {
      isHidden(): Promise<boolean>;
    }


Returns:

Promise<boolean>

# api ElementHandle.isIntersectingViewport() method #

ElementHandle.isIntersectingViewport() method

Resolves to true if the element is visible in the current viewport. If
an element is an SVG, we check if the svg owner element is in the
viewport instead. See https://crbug.com/963246 .

Signature: 

    class ElementHandle {
      isIntersectingViewport(
        this: ElementHandle<Element>,
        options?: {
          threshold?: number;
        }
      ): Promise<boolean>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- -----------------------------------------------------------------------------------------------------------------
  this        ElementHandle <Element>   
  options     { threshold?: number; }   (Optional) Threshold for the intersection between 0 (no intersection) and 1 (full intersection). Defaults to 1.

Returns:

Promise<boolean>

# api ElementHandle.isVisible() method #

ElementHandle.isVisible() method

Checks if an element is visible using the same mechanism as
ElementHandle.waitForSelector() .

Signature: 

    class ElementHandle {
      isVisible(): Promise<boolean>;
    }


Returns:

Promise<boolean>

# api ElementHandle.press() method #

ElementHandle.press() method

Focuses the element, and then uses Keyboard.down() and Keyboard.up() .

Signature: 

    class ElementHandle {
      press(key: KeyInput, options?: Readonly<KeyPressOptions>): Promise<void>;
    }


Parameters 

  Parameter   Type                          Description
  ----------- ----------------------------- --------------------------------------------------------------------------------------
  key         KeyInput                      Name of key to press, such as  ArrowLeft . See KeyInput for a list of all key names.
  options     Readonly< KeyPressOptions >   (Optional)

Returns:

Promise<void>

Remarks 

If  key is a single character and no modifier keys besides  Shift are
being held down, a  keypress /  input event will also be generated. The
 text option can be specified to force an input event to be generated.

NOTE Modifier keys DO affect  elementHandle.press . Holding down  Shift
will type the text in upper case.

# api ElementHandle.screenshot() method #

ElementHandle.screenshot() method

Signature: 

    class ElementHandle {
      screenshot(options?: Readonly<ScreenshotOptions>): Promise<Buffer>;
    }


Parameters 

  Parameter   Type                            Description
  ----------- ------------------------------- -------------
  options     Readonly< ScreenshotOptions >   (Optional)

Returns:

Promise<Buffer>

# api ElementHandle.screenshot() method #

ElementHandle.screenshot() method

This method scrolls element into view if needed, and then uses
Page.screenshot() to take a screenshot of the element. If the element is
detached from DOM, the method throws an error.

Signature: 

    class ElementHandle {
      screenshot(
        options: Readonly<ScreenshotOptions> & {
          encoding: 'base64';
        }
      ): Promise<string>;
    }


Parameters 

  Parameter   Type                                                      Description
  ----------- --------------------------------------------------------- -------------
  options     Readonly< ScreenshotOptions > & { encoding: 'base64'; }   

Returns:

Promise<string>

# api ElementHandle.scrollIntoView() method #

ElementHandle.scrollIntoView() method

Scrolls the element into view using either the automation protocol
client or by calling element.scrollIntoView.

Signature: 

    class ElementHandle {
      scrollIntoView(this: ElementHandle<Element>): Promise<void>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- -------------
  this        ElementHandle <Element>   

Returns:

Promise<void>

# api ElementHandle.select() method #

ElementHandle.select() method

Triggers a  change and  input event once all the provided options have
been selected. If there's no  <select> element matching  selector , the
method throws an error.

Signature: 

    class ElementHandle {
      select(...values: string[]): Promise<string[]>;
    }


Parameters 

  Parameter   Type       Description
  ----------- ---------- -----------------------------------------------------------------------------------------------------------------------------------------------------------
  values      string[]   Values of options to select. If the  <select> has the  multiple attribute, all values are considered, otherwise only the first one is taken into account.

Returns:

Promise<string[]>

Example 

    handle.select('blue'); // single selection
    handle.select('red', 'green', 'blue'); // multiple selections


# api ElementHandle.tap() method #

ElementHandle.tap() method

This method scrolls element into view if needed, and then uses
Touchscreen.tap() to tap in the center of the element. If the element is
detached from DOM, the method throws an error.

Signature: 

    class ElementHandle {
      tap(this: ElementHandle<Element>): Promise<void>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- -------------
  this        ElementHandle <Element>   

Returns:

Promise<void>

# api ElementHandle.toElement() method #

ElementHandle.toElement() method

Converts the current handle to the given element type.

Signature: 

    class ElementHandle {
      toElement<K extends keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap>(
        tagName: K
      ): Promise<HandleFor<ElementFor<K>>>;
    }


Parameters 

  Parameter   Type   Description
  ----------- ------ -------------------------------------------
  tagName     K      The tag name of the desired element type.

Returns:

Promise< HandleFor < ElementFor <K>>>

Exceptions 

An error if the handle does not match. The handle will not be
automatically disposed.

Example 

    const element: ElementHandle<Element> = await page.$('.class-name-of-anchor');
    // DO NOT DISPOSE `element`, this will be always be the same handle.
    const anchor: ElementHandle<HTMLAnchorElement> = await element.toElement('a');


# api ElementHandle.touchEnd() method #

ElementHandle.touchEnd() method

Signature: 

    class ElementHandle {
      touchEnd(this: ElementHandle<Element>): Promise<void>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- -------------
  this        ElementHandle <Element>   

Returns:

Promise<void>

# api ElementHandle.touchMove() method #

ElementHandle.touchMove() method

Signature: 

    class ElementHandle {
      touchMove(this: ElementHandle<Element>): Promise<void>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- -------------
  this        ElementHandle <Element>   

Returns:

Promise<void>

# api ElementHandle.touchStart() method #

ElementHandle.touchStart() method

Signature: 

    class ElementHandle {
      touchStart(this: ElementHandle<Element>): Promise<void>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- -------------
  this        ElementHandle <Element>   

Returns:

Promise<void>

# api ElementHandle.type() method #

ElementHandle.type() method

Focuses the element, and then sends a  keydown ,  keypress /  input ,
and  keyup event for each character in the text.

To press a special key, like  Control or  ArrowDown , use
ElementHandle.press() .

Signature: 

    class ElementHandle {
      type(text: string, options?: Readonly<KeyboardTypeOptions>): Promise<void>;
    }


Parameters 

  Parameter   Type                              Description
  ----------- --------------------------------- --------------------------------------------------
  text        string                            
  options     Readonly< KeyboardTypeOptions >   (Optional) Delay in milliseconds. Defaults to 0.

Returns:

Promise<void>

Example 1 

    await elementHandle.type('Hello'); // Types instantly
    await elementHandle.type('World', {delay: 100}); // Types slower, like a user


Example 2 

An example of typing into a text field and then submitting the form:

    const elementHandle = await page.$('input');
    await elementHandle.type('some text');
    await elementHandle.press('Enter');


# api ElementHandle.uploadFile() method #

ElementHandle.uploadFile() method

Sets the value of an input element to the given file paths.

Signature: 

    class ElementHandle {
      abstract uploadFile(
        this: ElementHandle<HTMLInputElement>,
        ...paths: string[]
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                               Description
  ----------- ---------------------------------- -------------
  this        ElementHandle <HTMLInputElement>   
  paths       string[]                           

Returns:

Promise<void>

Remarks 

This will not validate whether the file paths exists. Also, if a path is
relative, then it is resolved against the current working directory .
For locals script connecting to remote chrome environments, paths must
be absolute.

# api ElementHandle.waitForSelector() method #

ElementHandle.waitForSelector() method

Wait for an element matching the given selector to appear in the current
element.

Unlike Frame.waitForSelector() , this method does not work across
navigations or if the element is detached from DOM.

Signature: 

    class ElementHandle {
      waitForSelector<Selector extends string>(
        selector: Selector,
        options?: WaitForSelectorOptions
      ): Promise<ElementHandle<NodeFor<Selector>> | null>;
    }


Parameters 

  Parameter   Type                     Description
  ----------- ------------------------ ------------------------------------------------------
  selector    Selector                 The selector to query and wait for.
  options     WaitForSelectorOptions   (Optional) Options for customizing waiting behavior.

Returns:

Promise< ElementHandle < NodeFor <Selector>> | null>

An element matching the given selector.

Exceptions 

Throws if an element matching the given selector doesn't appear.

Example 

    import puppeteer from 'puppeteer';

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      let currentURL;
      page
        .mainFrame()
        .waitForSelector('img')
        .then(() => console.log('First URL with image: ' + currentURL));

      for (currentURL of [
        'https://example.com',
        'https://google.com',
        'https://bbc.com',
      ]) {
        await page.goto(currentURL);
      }
      await browser.close();
    })();


# api ElementScreenshotOptions interface #

ElementScreenshotOptions interface

Signature: 

    export interface ElementScreenshotOptions extends ScreenshotOptions


Extends: ScreenshotOptions

Properties 

  Property         Modifiers   Type      Description   Default
  ---------------- ----------- --------- ------------- ---------
  scrollIntoView    optional   boolean                  true

# api ErrorCode type #

ErrorCode type

Signature: 

    export type ErrorCode =
      | 'aborted'
      | 'accessdenied'
      | 'addressunreachable'
      | 'blockedbyclient'
      | 'blockedbyresponse'
      | 'connectionaborted'
      | 'connectionclosed'
      | 'connectionfailed'
      | 'connectionrefused'
      | 'connectionreset'
      | 'internetdisconnected'
      | 'namenotresolved'
      | 'timedout'
      | 'failed';


# api EvaluateFunc type #

EvaluateFunc type

Signature: 

    export type EvaluateFunc<T extends unknown[]> = (
      ...params: InnerParams<T>
    ) => Awaitable<unknown>;


References: InnerParams , Awaitable

# api EvaluateFuncWith type #

EvaluateFuncWith type

Signature: 

    export type EvaluateFuncWith<V, T extends unknown[]> = (
      ...params: [V, ...InnerParams<T>]
    ) => Awaitable<unknown>;


References: InnerParams , Awaitable

# api EventEmitter.emit() method #

EventEmitter.emit() method

Emit an event and call any associated listeners.

Signature: 

    class EventEmitter {
      emit<Key extends keyof EventsWithWildcard<Events>>(
        type: Key,
        event: EventsWithWildcard<Events>[Key]
      ): boolean;
    }


Parameters 

  Parameter   Type                               Description
  ----------- ---------------------------------- ------------------------------
  type        Key                                the event you'd like to emit
  event       EventsWithWildcard <Events>[Key]   

Returns:

boolean

 true if there are any listeners,  false if there are not.

# api EventEmitter class #

EventEmitter class

The EventEmitter class that many Puppeteer classes extend.

Signature: 

    export declare class EventEmitter<Events extends Record<EventType, unknown>> implements CommonEventEmitter<EventsWithWildcard<Events>>


Implements: CommonEventEmitter < EventsWithWildcard <Events>>

Remarks 

This allows you to listen to events that Puppeteer classes fire and act
accordingly. Therefore you'll mostly use on and off to bind and unbind
to event listeners.

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  EventEmitter class.

Methods 

  Method                     Modifiers   Description
  -------------------------- ----------- --------------------------------------------------------------------------------------------------
  emit(type, event)                      Emit an event and call any associated listeners.
  listenerCount(type)                    Gets the number of listeners for a given event.
  off(type, handler)                     Remove an event listener from firing.
  on(type, handler)                      Bind an event listener to fire when an event occurs.
  once(type, handler)                    Like  on but the listener will only be fired once and then it will be removed.
  removeAllListeners(type)               Removes all listeners. If given an event argument, it will remove only listeners for that event.

# api EventEmitter.listenerCount() method #

EventEmitter.listenerCount() method

Gets the number of listeners for a given event.

Signature: 

    class EventEmitter {
      listenerCount(type: keyof EventsWithWildcard<Events>): number;
    }


Parameters 

  Parameter   Type                                Description
  ----------- ----------------------------------- -----------------------------------------
  type        keyof EventsWithWildcard <Events>   the event to get the listener count for

Returns:

number

the number of listeners bound to the given event

# api EventEmitter.off() method #

EventEmitter.off() method

Remove an event listener from firing.

Signature: 

    class EventEmitter {
      off<Key extends keyof EventsWithWildcard<Events>>(
        type: Key,
        handler?: Handler<EventsWithWildcard<Events>[Key]>
      ): this;
    }


Parameters 

  Parameter   Type                                          Description
  ----------- --------------------------------------------- -------------------------------------------------
  type        Key                                           the event type you'd like to stop listening to.
  handler     Handler < EventsWithWildcard <Events>[Key]>   (Optional) the function that should be removed.

Returns:

this

 this to enable you to chain method calls.

# api EventEmitter.once() method #

EventEmitter.once() method

Like  on but the listener will only be fired once and then it will be
removed.

Signature: 

    class EventEmitter {
      once<Key extends keyof EventsWithWildcard<Events>>(
        type: Key,
        handler: Handler<EventsWithWildcard<Events>[Key]>
      ): this;
    }


Parameters 

  Parameter   Type                                          Description
  ----------- --------------------------------------------- ---------------------------------------------------
  type        Key                                           the event you'd like to listen to
  handler     Handler < EventsWithWildcard <Events>[Key]>   the handler function to run when the event occurs

Returns:

this

 this to enable you to chain method calls.

# api EventEmitter.on() method #

EventEmitter.on() method

Bind an event listener to fire when an event occurs.

Signature: 

    class EventEmitter {
      on<Key extends keyof EventsWithWildcard<Events>>(
        type: Key,
        handler: Handler<EventsWithWildcard<Events>[Key]>
      ): this;
    }


Parameters 

  Parameter   Type                                          Description
  ----------- --------------------------------------------- --------------------------------------------------------------------
  type        Key                                           the event type you'd like to listen to. Can be a string or symbol.
  handler     Handler < EventsWithWildcard <Events>[Key]>   the function to be called when the event occurs.

Returns:

this

 this to enable you to chain method calls.

# api EventEmitter.removeAllListeners() method #

EventEmitter.removeAllListeners() method

Removes all listeners. If given an event argument, it will remove only
listeners for that event.

Signature: 

    class EventEmitter {
      removeAllListeners(type?: keyof EventsWithWildcard<Events>): this;
    }


Parameters 

  Parameter   Type                                Description
  ----------- ----------------------------------- -----------------------------------------------
  type        keyof EventsWithWildcard <Events>   (Optional) the event to remove listeners for.

Returns:

this

 this to enable you to chain method calls.

# api EventsWithWildcard type #

EventsWithWildcard type

Signature: 

    export type EventsWithWildcard<Events extends Record<EventType, unknown>> =
      Events & {
        '*': Events[keyof Events];
      };


References: EventType

# api EventType type #

EventType type

Signature: 

    export type EventType = string | symbol;


# api executablePath() function #

executablePath() function

Signature: 

    executablePath: (
      channel?:
        | import('puppeteer-core/internal/puppeteer-core.js').ChromeReleaseChannel
        | undefined
    ) => string;


Parameters 

  Parameter   Type                                                                                    Description
  ----------- --------------------------------------------------------------------------------------- -------------
  channel     import("puppeteer-core/internal/puppeteer-core.js"). ChromeReleaseChannel | undefined   (Optional)

Returns:

string

# api ExperimentsConfiguration type #

ExperimentsConfiguration type

Defines experiment options for Puppeteer.

See individual properties for more information.

Signature: 

    export type ExperimentsConfiguration = Record<string, never>;


# api FileChooser.accept() method #

FileChooser.accept() method

Accept the file chooser request with the given file paths.

Signature: 

    class FileChooser {
      accept(paths: string[]): Promise<void>;
    }


Parameters 

  Parameter   Type       Description
  ----------- ---------- -------------
  paths       string[]   

Returns:

Promise<void>

Remarks 

This will not validate whether the file paths exists. Also, if a path is
relative, then it is resolved against the current working directory .
For locals script connecting to remote chrome environments, paths must
be absolute.

# api FileChooser.cancel() method #

FileChooser.cancel() method

Closes the file chooser without selecting any files.

Signature: 

    class FileChooser {
      cancel(): Promise<void>;
    }


Returns:

Promise<void>

# api FileChooser class #

FileChooser class

File choosers let you react to the page requesting for a file.

Signature: 

    export declare class FileChooser


Remarks 

 FileChooser instances are returned via the Page.waitForFileChooser()
method.

In browsers, only one file chooser can be opened at a time. All file
choosers must be accepted or canceled. Not doing so will prevent
subsequent file choosers from appearing.

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  FileChooser class.

Example 

    const [fileChooser] = await Promise.all([
      page.waitForFileChooser(),
      page.click('#upload-file-button'), // some button that triggers file selection
    ]);
    await fileChooser.accept(['/tmp/myfile.pdf']);


Methods 

  Method          Modifiers   Description
  --------------- ----------- ------------------------------------------------------------
  accept(paths)               Accept the file chooser request with the given file paths.
  cancel()                    Closes the file chooser without selecting any files.
  isMultiple()                Whether file chooser allow for multiple file selection.

# api FileChooser.isMultiple() method #

FileChooser.isMultiple() method

Whether file chooser allow for multiple file selection.

Signature: 

    class FileChooser {
      isMultiple(): boolean;
    }


Returns:

boolean

# api FlattenHandle type #

FlattenHandle type

Signature: 

    export type FlattenHandle<T> = T extends HandleOr<infer U> ? U : never;


References: HandleOr

# api Frame.addScriptTag() method #

Frame.addScriptTag() method

Adds a  <script> tag into the page with the desired url or content.

Signature: 

    class Frame {
      addScriptTag(
        options: FrameAddScriptTagOptions
      ): Promise<ElementHandle<HTMLScriptElement>>;
    }


Parameters 

  Parameter   Type                       Description
  ----------- -------------------------- -------------------------
  options     FrameAddScriptTagOptions   Options for the script.

Returns:

Promise< ElementHandle <HTMLScriptElement>>

An element handle to the injected  <script> element.

# api FrameAddScriptTagOptions interface #

FrameAddScriptTagOptions interface

Signature: 

    export interface FrameAddScriptTagOptions


Properties 

  Property   Modifiers   Type     Description                                                                    Default
  ---------- ----------- -------- ------------------------------------------------------------------------------ ---------
  content     optional   string   JavaScript to be injected into the frame.                                      
  id          optional   string   Sets the  id of the script.                                                    
  path        optional   string   Path to a JavaScript file to be injected into the frame.                       
  type        optional   string   Sets the  type of the script. Use  module in order to load an ES2015 module.   
  url         optional   string   URL of the script to be added.                                                 

# api Frame.addStyleTag() method #

Frame.addStyleTag() method

Adds a  HTMLLinkElement into the frame with the desired URL

Signature: 

    class Frame {
      addStyleTag(
        options: FrameAddStyleTagOptions
      ): Promise<ElementHandle<HTMLLinkElement>>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- -------------
  options     FrameAddStyleTagOptions   

Returns:

Promise< ElementHandle <HTMLLinkElement>>

An element handle to the loaded  <link> element.

# api Frame.addStyleTag() method #

Frame.addStyleTag() method

Adds a  HTMLStyleElement into the frame with the desired URL

Signature: 

    class Frame {
      addStyleTag(
        options: Omit<FrameAddStyleTagOptions, 'url'>
      ): Promise<ElementHandle<HTMLStyleElement>>;
    }


Parameters 

  Parameter   Type                                     Description
  ----------- ---------------------------------------- -------------
  options     Omit< FrameAddStyleTagOptions , 'url'>   

Returns:

Promise< ElementHandle <HTMLStyleElement>>

An element handle to the loaded  <style> element.

# api FrameAddStyleTagOptions interface #

FrameAddStyleTagOptions interface

Signature: 

    export interface FrameAddStyleTagOptions


Properties 

  Property   Modifiers   Type     Description                                             Default
  ---------- ----------- -------- ------------------------------------------------------- ---------
  content     optional   string   Raw CSS content to be injected into the frame.          
  path        optional   string   The path to a CSS file to be injected into the frame.   
  url         optional   string   the URL of the CSS file to be added.                    

# api Frame.childFrames() method #

Frame.childFrames() method

An array of child frames.

Signature: 

    class Frame {
      abstract childFrames(): Frame[];
    }


Returns:

Frame []

# api Frame.click() method #

Frame.click() method

Clicks the first element found that matches  selector .

Signature: 

    class Frame {
      click(selector: string, options?: Readonly<ClickOptions>): Promise<void>;
    }


Parameters 

  Parameter   Type                       Description
  ----------- -------------------------- ----------------------------
  selector    string                     The selector to query for.
  options     Readonly< ClickOptions >   (Optional)

Returns:

Promise<void>

Remarks 

If  click() triggers a navigation event and there's a separate
 page.waitForNavigation() promise to be resolved, you may end up with a
race condition that yields unexpected results. The correct pattern for
click and wait for navigation is the following:

    const [response] = await Promise.all([
      page.waitForNavigation(waitOptions),
      frame.click(selector, clickOptions),
    ]);


# api Frame.content() method #

Frame.content() method

The full HTML contents of the frame, including the DOCTYPE.

Signature: 

    class Frame {
      content(): Promise<string>;
    }


Returns:

Promise<string>

# api Frame.$$eval() method #

Frame.$$eval() method

Runs the given function on an array of elements matching the given
selector in the frame.

If the given function returns a promise, then this method will wait till
the promise resolves.

Signature: 

    class Frame {
      $$eval<
        Selector extends string,
        Params extends unknown[],
        Func extends EvaluateFuncWith<
          Array<NodeFor<Selector>>,
          Params
        > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,
      >(
        selector: Selector,
        pageFunction: string | Func,
        ...args: Params
      ): Promise<Awaited<ReturnType<Func>>>;
    }


Parameters 

  Parameter      Type            Description
  -------------- --------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------
  selector       Selector        The selector to query for.
  pageFunction   string | Func   The function to be evaluated in the frame's context. An array of elements matching the given selector will be passed to the function as its first argument.
  args           Params          Additional arguments to pass to  pageFunction .

Returns:

Promise<Awaited<ReturnType<Func>>>

A promise to the result of the function.

Example 

    const divsCounts = await frame.$$eval('div', divs => divs.length);


# api Frame.$eval() method #

Frame.$eval() method

Runs the given function on the first element matching the given selector
in the frame.

If the given function returns a promise, then this method will wait till
the promise resolves.

Signature: 

    class Frame {
      $eval<
        Selector extends string,
        Params extends unknown[],
        Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<
          NodeFor<Selector>,
          Params
        >,
      >(
        selector: Selector,
        pageFunction: string | Func,
        ...args: Params
      ): Promise<Awaited<ReturnType<Func>>>;
    }


Parameters 

  Parameter      Type            Description
  -------------- --------------- ----------------------------------------------------------------------------------------------------------------------------------------------------
  selector       Selector        The selector to query for.
  pageFunction   string | Func   The function to be evaluated in the frame's context. The first element matching the selector will be passed to the function as its first argument.
  args           Params          Additional arguments to pass to  pageFunction .

Returns:

Promise<Awaited<ReturnType<Func>>>

A promise to the result of the function.

Example 

    const searchValue = await frame.$eval('#search', el => el.value);


# api Frame.evaluateHandle() method #

Frame.evaluateHandle() method

Behaves identically to Page.evaluateHandle() except it's run within the
context of this frame.

Signature: 

    class Frame {
      evaluateHandle<
        Params extends unknown[],
        Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
      >(
        pageFunction: Func | string,
        ...args: Params
      ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
    }


Parameters 

  Parameter      Type            Description
  -------------- --------------- -------------
  pageFunction   Func | string   
  args           Params          

Returns:

Promise< HandleFor <Awaited<ReturnType<Func>>>>

# api Frame.evaluate() method #

Frame.evaluate() method

Behaves identically to Page.evaluate() except it's run within the
context of this frame.

Signature: 

    class Frame {
      evaluate<
        Params extends unknown[],
        Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
      >(
        pageFunction: Func | string,
        ...args: Params
      ): Promise<Awaited<ReturnType<Func>>>;
    }


Parameters 

  Parameter      Type            Description
  -------------- --------------- -------------
  pageFunction   Func | string   
  args           Params          

Returns:

Promise<Awaited<ReturnType<Func>>>

# api FrameEvents interface #

FrameEvents interface

Signature: 

    export interface FrameEvents extends Record<EventType, unknown>


Extends: Record< EventType , unknown>

# api Frame.focus() method #

Frame.focus() method

Focuses the first element that matches the  selector .

Signature: 

    class Frame {
      focus(selector: string): Promise<void>;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- ----------------------------
  selector    string   The selector to query for.

Returns:

Promise<void>

Exceptions 

Throws if there's no element matching  selector .

# api Frame.frameElement() method #

Frame.frameElement() method

Signature: 

    class Frame {
      frameElement(): Promise<HandleFor<HTMLIFrameElement> | null>;
    }


Returns:

Promise< HandleFor <HTMLIFrameElement> | null>

The frame element associated with this frame (if any).

# api Frame.goto() method #

Frame.goto() method

Navigates the frame to the given  url .

Signature: 

    class Frame {
      abstract goto(
        url: string,
        options?: GoToOptions
      ): Promise<HTTPResponse | null>;
    }


Parameters 

  Parameter   Type          Description
  ----------- ------------- -----------------------------------------------------------------------------
  url         string        URL to navigate the frame to. The URL should include scheme, e.g.  https://
  options     GoToOptions   (Optional) Options to configure waiting behavior.

Returns:

Promise< HTTPResponse | null>

A promise which resolves to the main resource response. In case of
multiple redirects, the navigation will resolve with the response of the
last redirect.

Exceptions 

If:

-   there's an SSL error (e.g. in case of self-signed certificates). -
    target URL is invalid. - the timeout is exceeded during
    navigation. - the remote server does not respond or is
    unreachable. - the main resource failed to load.

This method will not throw an error when any valid HTTP status code is
returned by the remote server, including 404 "Not Found" and 500
"Internal Server Error". The status code for such responses can be
retrieved by calling HTTPResponse.status() .

Remarks 

Navigation to  about:blank or navigation to the same URL with a
different hash will succeed and return  null .

[] warning

Headless mode doesn't support navigation to a PDF document. See the
upstream issue .

# api Frame.hover() method #

Frame.hover() method

Hovers the pointer over the center of the first element that matches the
 selector .

Signature: 

    class Frame {
      hover(selector: string): Promise<void>;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- ----------------------------
  selector    string   The selector to query for.

Returns:

Promise<void>

Exceptions 

Throws if there's no element matching  selector .

# api Frame.$() method #

Frame.$() method

Queries the frame for an element matching the given selector.

Signature: 

    class Frame {
      $<Selector extends string>(
        selector: Selector
      ): Promise<ElementHandle<NodeFor<Selector>> | null>;
    }


Parameters 

  Parameter   Type       Description
  ----------- ---------- ----------------------------
  selector    Selector   The selector to query for.

Returns:

Promise< ElementHandle < NodeFor <Selector>> | null>

A element handle to the first element matching the given selector.
Otherwise,  null .

# api Frame.$$() method #

Frame.$$() method

Queries the frame for all elements matching the given selector.

Signature: 

    class Frame {
      $$<Selector extends string>(
        selector: Selector
      ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;
    }


Parameters 

  Parameter   Type       Description
  ----------- ---------- ----------------------------
  selector    Selector   The selector to query for.

Returns:

Promise<Array< ElementHandle < NodeFor <Selector>>>>

An array of element handles that point to elements matching the given
selector.

# api Frame class #

Frame class

Represents a DOM frame.

To understand frames, you can think of frames as  <iframe> elements.
Just like iframes, frames can be nested, and when JavaScript is executed
in a frame, the JavaScript does not effect frames inside the ambient
frame the JavaScript executes in.

Signature: 

    export declare abstract class Frame extends EventEmitter<FrameEvents>


Extends: EventEmitter < FrameEvents >

Remarks 

Frame lifecycles are controlled by three events that are all dispatched
on the parent page :

-   PageEvent.FrameAttached - PageEvent.FrameNavigated -
    PageEvent.FrameDetached

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  Frame class.

Example 1 

At any point in time, pages expose their current frame tree via the
Page.mainFrame() and Frame.childFrames() methods.

Example 2 

An example of dumping frame tree:

    import puppeteer from 'puppeteer';

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.goto('https://www.google.com/chrome/browser/canary.html');
      dumpFrameTree(page.mainFrame(), '');
      await browser.close();

      function dumpFrameTree(frame, indent) {
        console.log(indent + frame.url());
        for (const child of frame.childFrames()) {
          dumpFrameTree(child, indent + '  ');
        }
      }
    })();


Example 3 

An example of getting text from an iframe element:

    const frame = page.frames().find(frame => frame.name() === 'myframe');
    const text = await frame.$eval('.selector', element => element.textContent);
    console.log(text);


Properties 

  Property   Modifiers   Type      Description
  ---------- ----------- --------- -------------
  detached    readonly   boolean   

Methods 

+-----------------------+-----------------------+-----------------------+
| Method                | Modifiers             | Description           |
+=======================+=======================+=======================+
| $(selector)           |                       | Queries the frame for |
|                       |                       | an element matching   |
|                       |                       | the given selector.   |
+-----------------------+-----------------------+-----------------------+
| $$(selector)          |                       | Queries the frame for |
|                       |                       | all elements matching |
|                       |                       | the given selector.   |
+-----------------------+-----------------------+-----------------------+
| $$eval(selector,      |                       | Runs the given        |
| pageFunction, args)   |                       | function on an array  |
|                       |                       | of elements matching  |
|                       |                       | the given selector in |
|                       |                       | the frame.            |
|                       |                       |                       |
|                       |                       | If the given function |
|                       |                       | returns a promise,    |
|                       |                       | then this method will |
|                       |                       | wait till the promise |
|                       |                       | resolves.             |
+-----------------------+-----------------------+-----------------------+
| $eval(selector,       |                       | Runs the given        |
| pageFunction, args)   |                       | function on the first |
|                       |                       | element matching the  |
|                       |                       | given selector in the |
|                       |                       | frame.                |
|                       |                       |                       |
|                       |                       | If the given function |
|                       |                       | returns a promise,    |
|                       |                       | then this method will |
|                       |                       | wait till the promise |
|                       |                       | resolves.             |
+-----------------------+-----------------------+-----------------------+
| addScriptTag(options) |                       | Adds a  <script> tag  |
|                       |                       | into the page with    |
|                       |                       | the desired url or    |
|                       |                       | content.              |
+-----------------------+-----------------------+-----------------------+
| addStyleTag(options)  |                       | Adds a                |
|                       |                       |  HTMLStyleElement     |
|                       |                       | into the frame with   |
|                       |                       | the desired URL       |
+-----------------------+-----------------------+-----------------------+
| addStyleTag(options)  |                       | Adds a                |
|                       |                       |  HTMLLinkElement into |
|                       |                       | the frame with the    |
|                       |                       | desired URL           |
+-----------------------+-----------------------+-----------------------+
| childFrames()         |                       | An array of child     |
|                       |                       | frames.               |
+-----------------------+-----------------------+-----------------------+
| click(selector,       |                       | Clicks the first      |
| options)              |                       | element found that    |
|                       |                       | matches  selector .   |
+-----------------------+-----------------------+-----------------------+
| content()             |                       | The full HTML         |
|                       |                       | contents of the       |
|                       |                       | frame, including the  |
|                       |                       | DOCTYPE.              |
+-----------------------+-----------------------+-----------------------+
| e                     |                       | Behaves identically   |
| valuate(pageFunction, |                       | to Page.evaluate()    |
| args)                 |                       | except it's run       |
|                       |                       | within the context of |
|                       |                       | this frame.           |
+-----------------------+-----------------------+-----------------------+
| evaluat               |                       | Behaves identically   |
| eHandle(pageFunction, |                       | to                    |
| args)                 |                       | Page.evaluateHandle() |
|                       |                       | except it's run       |
|                       |                       | within the context of |
|                       |                       | this frame.           |
+-----------------------+-----------------------+-----------------------+
| focus(selector)       |                       | Focuses the first     |
|                       |                       | element that matches  |
|                       |                       | the  selector .       |
+-----------------------+-----------------------+-----------------------+
| frameElement()        |                       |                       |
+-----------------------+-----------------------+-----------------------+
| goto(url, options)    |                       | Navigates the frame   |
|                       |                       | to the given  url .   |
+-----------------------+-----------------------+-----------------------+
| hover(selector)       |                       | Hovers the pointer    |
|                       |                       | over the center of    |
|                       |                       | the first element     |
|                       |                       | that matches the      |
|                       |                       |  selector .           |
+-----------------------+-----------------------+-----------------------+
| isDetached()          |                       | Is  true if the frame |
|                       |                       | has been detached.    |
|                       |                       | Otherwise,  false .   |
+-----------------------+-----------------------+-----------------------+
| isOOPFrame()          |                       | Is  true if the frame |
|                       |                       | is an out-of-process  |
|                       |                       | (OOP) frame.          |
|                       |                       | Otherwise,  false .   |
+-----------------------+-----------------------+-----------------------+
| locator(selector)     |                       | Creates a locator for |
|                       |                       | the provided          |
|                       |                       | selector. See Locator |
|                       |                       | for details and       |
|                       |                       | supported actions.    |
+-----------------------+-----------------------+-----------------------+
| locator(func)         |                       | Creates a locator for |
|                       |                       | the provided          |
|                       |                       | function. See Locator |
|                       |                       | for details and       |
|                       |                       | supported actions.    |
+-----------------------+-----------------------+-----------------------+
| name()                |                       | The frame's  name     |
|                       |                       | attribute as          |
|                       |                       | specified in the tag. |
+-----------------------+-----------------------+-----------------------+
| page()                |                       | The page associated   |
|                       |                       | with the frame.       |
+-----------------------+-----------------------+-----------------------+
| parentFrame()         |                       | The parent frame, if  |
|                       |                       | any. Detached and     |
|                       |                       | main frames return    |
|                       |                       |  null .               |
+-----------------------+-----------------------+-----------------------+
| select(selector,      |                       | Selects a set of      |
| values)               |                       | value on the first    |
|                       |                       |  <select> element     |
|                       |                       | that matches the      |
|                       |                       |  selector .           |
+-----------------------+-----------------------+-----------------------+
| setContent(html,      |                       | Set the content of    |
| options)              |                       | the frame.            |
+-----------------------+-----------------------+-----------------------+
| tap(selector)         |                       | Taps the first        |
|                       |                       | element that matches  |
|                       |                       | the  selector .       |
+-----------------------+-----------------------+-----------------------+
| title()               |                       | The frame's title.    |
+-----------------------+-----------------------+-----------------------+
| type(selector, text,  |                       | Sends a  keydown ,    |
| options)              |                       |  keypress /  input ,  |
|                       |                       | and  keyup event for  |
|                       |                       | each character in the |
|                       |                       | text.                 |
+-----------------------+-----------------------+-----------------------+
| url()                 |                       | The frame's URL.      |
+-----------------------+-----------------------+-----------------------+
| waitForF              |                       |                       |
| unction(pageFunction, |                       |                       |
| options, args)        |                       |                       |
+-----------------------+-----------------------+-----------------------+
| waitF                 |                       | Waits for the frame   |
| orNavigation(options) |                       | to navigate. It is    |
|                       |                       | useful for when you   |
|                       |                       | run code which will   |
|                       |                       | indirectly cause the  |
|                       |                       | frame to navigate.    |
|                       |                       |                       |
|                       |                       | Usage of the History  |
|                       |                       | API to change the URL |
|                       |                       | is considered a       |
|                       |                       | navigation.           |
+-----------------------+-----------------------+-----------------------+
| wait                  |                       | Waits for an element  |
| ForSelector(selector, |                       | matching the given    |
| options)              |                       | selector to appear in |
|                       |                       | the frame.            |
|                       |                       |                       |
|                       |                       | This method works     |
|                       |                       | across navigations.   |
+-----------------------+-----------------------+-----------------------+

# api Frame.isDetached() method #

Frame.isDetached() method

  Warning: This API is now obsolete.

  Use the  detached getter.

Is  true if the frame has been detached. Otherwise,  false .

Signature: 

    class Frame {
      isDetached(): boolean;
    }


Returns:

boolean

# api Frame.isOOPFrame() method #

Frame.isOOPFrame() method

Is  true if the frame is an out-of-process (OOP) frame. Otherwise,
 false .

Signature: 

    class Frame {
      abstract isOOPFrame(): boolean;
    }


Returns:

boolean

# api Frame.locator() method #

Frame.locator() method

Creates a locator for the provided function. See Locator for details and
supported actions.

Signature: 

    class Frame {
      locator<Ret>(func: () => Awaitable<Ret>): Locator<Ret>;
    }


Parameters 

  Parameter   Type                    Description
  ----------- ----------------------- -------------
  func        () => Awaitable <Ret>   

Returns:

Locator <Ret>

Remarks 

Locators API is experimental and we will not follow semver for breaking
change in the Locators API.

# api Frame.locator() method #

Frame.locator() method

Creates a locator for the provided selector. See Locator for details and
supported actions.

Signature: 

    class Frame {
      locator<Selector extends string>(
        selector: Selector
      ): Locator<NodeFor<Selector>>;
    }


Parameters 

  Parameter   Type       Description
  ----------- ---------- -------------
  selector    Selector   

Returns:

Locator < NodeFor <Selector>>

Remarks 

Locators API is experimental and we will not follow semver for breaking
change in the Locators API.

# api Frame.name() method #

Frame.name() method

  Warning: This API is now obsolete.

  Use

      const element = await frame.frameElement();
      const nameOrId = await element.evaluate(frame => frame.name ?? frame.id);

  [] []

The frame's  name attribute as specified in the tag.

Signature: 

    class Frame {
      name(): string;
    }


Returns:

string

Remarks 

This value is calculated once when the frame is created, and will not
update if the attribute is changed later.

# api Frame.page() method #

Frame.page() method

The page associated with the frame.

Signature: 

    class Frame {
      abstract page(): Page;
    }


Returns:

Page

# api Frame.parentFrame() method #

Frame.parentFrame() method

The parent frame, if any. Detached and main frames return  null .

Signature: 

    class Frame {
      abstract parentFrame(): Frame | null;
    }


Returns:

Frame | null

# api Frame.select() method #

Frame.select() method

Selects a set of value on the first  <select> element that matches the
 selector .

Signature: 

    class Frame {
      select(selector: string, ...values: string[]): Promise<string[]>;
    }


Parameters 

  Parameter   Type       Description
  ----------- ---------- -------------------------------------------------------------------------------------------------------------------------------------------------------------
  selector    string     The selector to query for.
  values      string[]   The array of values to select. If the  <select> has the  multiple attribute, all values are considered, otherwise only the first one is taken into account.

Returns:

Promise<string[]>

the list of values that were successfully selected.

Exceptions 

Throws if there's no  <select> matching  selector .

Example 

    frame.select('select#colors', 'blue'); // single selection
    frame.select('select#colors', 'red', 'green', 'blue'); // multiple selections


# api Frame.setContent() method #

Frame.setContent() method

Set the content of the frame.

Signature: 

    class Frame {
      abstract setContent(html: string, options?: WaitForOptions): Promise<void>;
    }


Parameters 

  Parameter   Type             Description
  ----------- ---------------- --------------------------------------------------------------------------------------------------------------------------
  html        string           HTML markup to assign to the page.
  options     WaitForOptions   (Optional) Options to configure how long before timing out and at what point to consider the content setting successful.

Returns:

Promise<void>

# api Frame.tap() method #

Frame.tap() method

Taps the first element that matches the  selector .

Signature: 

    class Frame {
      tap(selector: string): Promise<void>;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- ----------------------------
  selector    string   The selector to query for.

Returns:

Promise<void>

Exceptions 

Throws if there's no element matching  selector .

# api Frame.title() method #

Frame.title() method

The frame's title.

Signature: 

    class Frame {
      title(): Promise<string>;
    }


Returns:

Promise<string>

# api Frame.type() method #

Frame.type() method

Sends a  keydown ,  keypress /  input , and  keyup event for each
character in the text.

Signature: 

    class Frame {
      type(
        selector: string,
        text: string,
        options?: Readonly<KeyboardTypeOptions>
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                              Description
  ----------- --------------------------------- -------------------------------------------------------------------------------------------------------------------------
  selector    string                            the selector for the element to type into. If there are multiple the first will be used.
  text        string                            text to type into the element
  options     Readonly< KeyboardTypeOptions >   (Optional) takes one option,  delay , which sets the time to wait between key presses in milliseconds. Defaults to  0 .

Returns:

Promise<void>

Remarks 

To press a special key, like  Control or  ArrowDown , use
Keyboard.press() .

Example 

    await frame.type('#mytextarea', 'Hello'); // Types instantly
    await frame.type('#mytextarea', 'World', {delay: 100}); // Types slower, like a user


# api Frame.url() method #

Frame.url() method

The frame's URL.

Signature: 

    class Frame {
      abstract url(): string;
    }


Returns:

string

# api Frame.waitForFunction() method #

Frame.waitForFunction() method

Signature: 

    class Frame {
      waitForFunction<
        Params extends unknown[],
        Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
      >(
        pageFunction: Func | string,
        options?: FrameWaitForFunctionOptions,
        ...args: Params
      ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
    }


Parameters 

  Parameter      Type                          Description
  -------------- ----------------------------- -----------------------------------------------------------------
  pageFunction   Func | string                 the function to evaluate in the frame context.
  options        FrameWaitForFunctionOptions   (Optional) options to configure the polling method and timeout.
  args           Params                        arguments to pass to the  pageFunction .

Returns:

Promise< HandleFor <Awaited<ReturnType<Func>>>>

the promise which resolve when the  pageFunction returns a truthy value.

Example 

The  waitForFunction can be used to observe viewport size change:

    import puppeteer from 'puppeteer';

    (async () => {
    .  const browser = await puppeteer.launch();
    .  const page = await browser.newPage();
    .  const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');
    .  page.setViewport({width: 50, height: 50});
    .  await watchDog;
    .  await browser.close();
    })();


To pass arguments from Node.js to the predicate of  page.waitForFunction
function:

    const selector = '.foo';
    await frame.waitForFunction(
      selector => !!document.querySelector(selector),
      {}, // empty options object
      selector
    );


# api FrameWaitForFunctionOptions interface #

FrameWaitForFunctionOptions interface

Signature: 

    export interface FrameWaitForFunctionOptions


Properties 

+-------------+-------------+-------------+-------------+-------------+
| Property    | Modifiers   | Type        | Description | Default     |
+=============+=============+=============+=============+=============+
| polling     |  optional   | 'raf' |     | An interval |             |
|             |             | 'mutation'  | at which    |             |
|             |             | | number    | the         |             |
|             |             |             |  p          |             |
|             |             |             | ageFunction |             |
|             |             |             | is          |             |
|             |             |             | executed,   |             |
|             |             |             | defaults to |             |
|             |             |             |  raf . If   |             |
|             |             |             |  polling is |             |
|             |             |             | a number,   |             |
|             |             |             | then it is  |             |
|             |             |             | treated as  |             |
|             |             |             | an interval |             |
|             |             |             | in          |             |
|             |             |             | m           |             |
|             |             |             | illiseconds |             |
|             |             |             | at which    |             |
|             |             |             | the         |             |
|             |             |             | function    |             |
|             |             |             | would be    |             |
|             |             |             | executed.   |             |
|             |             |             | If  polling |             |
|             |             |             | is a        |             |
|             |             |             | string,     |             |
|             |             |             | then it can |             |
|             |             |             | be one of   |             |
|             |             |             | the         |             |
|             |             |             | following   |             |
|             |             |             | values:     |             |
|             |             |             |             |             |
|             |             |             | -  raf - to |             |
|             |             |             | constantly  |             |
|             |             |             | execute     |             |
|             |             |             |  p          |             |
|             |             |             | ageFunction |             |
|             |             |             | in          |             |
|             |             |             |  requestAni |             |
|             |             |             | mationFrame |             |
|             |             |             | callback.   |             |
|             |             |             | This is the |             |
|             |             |             | tightest    |             |
|             |             |             | polling     |             |
|             |             |             | mode which  |             |
|             |             |             | is suitable |             |
|             |             |             | to observe  |             |
|             |             |             | styling     |             |
|             |             |             | changes.    |             |
|             |             |             |             |             |
|             |             |             | -           |             |
|             |             |             |  mutation - |             |
|             |             |             | to execute  |             |
|             |             |             |  p          |             |
|             |             |             | ageFunction |             |
|             |             |             | on every    |             |
|             |             |             | DOM         |             |
|             |             |             | mutation.   |             |
+-------------+-------------+-------------+-------------+-------------+
| signal      |  optional   | AbortSignal | A signal    |             |
|             |             |             | object that |             |
|             |             |             | allows you  |             |
|             |             |             | to cancel a |             |
|             |             |             | wait        |             |
|             |             |             | ForFunction |             |
|             |             |             | call.       |             |
+-------------+-------------+-------------+-------------+-------------+
| timeout     |  optional   | number      | Maximum     |             |
|             |             |             | time to     |             |
|             |             |             | wait in     |             |
|             |             |             | mi          |             |
|             |             |             | lliseconds. |             |
|             |             |             | Defaults to |             |
|             |             |             |  30000 (30  |             |
|             |             |             | seconds).   |             |
|             |             |             | Pass  0 to  |             |
|             |             |             | disable the |             |
|             |             |             | timeout.    |             |
|             |             |             | Puppeteer's |             |
|             |             |             | default     |             |
|             |             |             | timeout can |             |
|             |             |             | be changed  |             |
|             |             |             | using       |             |
|             |             |             | Pa          |             |
|             |             |             | ge.setDefau |             |
|             |             |             | ltTimeout() |             |
|             |             |             | .           |             |
+-------------+-------------+-------------+-------------+-------------+

# api Frame.waitForNavigation() method #

Frame.waitForNavigation() method

Waits for the frame to navigate. It is useful for when you run code
which will indirectly cause the frame to navigate.

Usage of the History API to change the URL is considered a navigation.

Signature: 

    class Frame {
      abstract waitForNavigation(
        options?: WaitForOptions
      ): Promise<HTTPResponse | null>;
    }


Parameters 

  Parameter   Type             Description
  ----------- ---------------- ---------------------------------------------------
  options     WaitForOptions   (Optional) Options to configure waiting behavior.

Returns:

Promise< HTTPResponse | null>

A promise which resolves to the main resource response.

Example 

    const [response] = await Promise.all([
      // The navigation promise resolves after navigation has finished
      frame.waitForNavigation(),
      // Clicking the link will indirectly cause a navigation
      frame.click('a.my-link'),
    ]);


# api Frame.waitForSelector() method #

Frame.waitForSelector() method

Waits for an element matching the given selector to appear in the frame.

This method works across navigations.

Signature: 

    class Frame {
      waitForSelector<Selector extends string>(
        selector: Selector,
        options?: WaitForSelectorOptions
      ): Promise<ElementHandle<NodeFor<Selector>> | null>;
    }


Parameters 

  Parameter   Type                     Description
  ----------- ------------------------ ------------------------------------------------------
  selector    Selector                 The selector to query and wait for.
  options     WaitForSelectorOptions   (Optional) Options for customizing waiting behavior.

Returns:

Promise< ElementHandle < NodeFor <Selector>> | null>

An element matching the given selector.

Exceptions 

Throws if an element matching the given selector doesn't appear.

Example 

    import puppeteer from 'puppeteer';

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      let currentURL;
      page
        .mainFrame()
        .waitForSelector('img')
        .then(() => console.log('First URL with image: ' + currentURL));

      for (currentURL of [
        'https://example.com',
        'https://google.com',
        'https://bbc.com',
      ]) {
        await page.goto(currentURL);
      }
      await browser.close();
    })();


# api GeolocationOptions interface #

GeolocationOptions interface

Signature: 

    export interface GeolocationOptions


Properties 

  Property    Modifiers   Type     Description                             Default
  ----------- ----------- -------- --------------------------------------- ---------
  accuracy     optional   number   Optional non-negative accuracy value.   
  latitude                number   Longitude between  -180 and  180 .      
  longitude               number   Latitude between  -90 and  90 .         

# api GoToOptions interface #

GoToOptions interface

Signature: 

    export interface GoToOptions extends WaitForOptions


Extends: WaitForOptions

Properties 

  Property         Modifiers   Type     Description                                                                                                     Default
  ---------------- ----------- -------- --------------------------------------------------------------------------------------------------------------- ---------
  referer           optional   string   If provided, it will take preference over the referer header value set by page.setExtraHTTPHeaders() .          
  referrerPolicy    optional   string   If provided, it will take preference over the referer-policy header value set by page.setExtraHTTPHeaders() .   

# api HandleFor type #

HandleFor type

Signature: 

    export type HandleFor<T> = T extends Node ? ElementHandle<T> : JSHandle<T>;


References: ElementHandle , JSHandle

# api HandleOr type #

HandleOr type

Signature: 

    export type HandleOr<T> = HandleFor<T> | JSHandle<T> | T;


References: HandleFor , JSHandle

# api Handler type #

Handler type

Signature: 

    export type Handler<T = unknown> = (event: T) => void;


# api HTTPRequest.abortErrorReason() method #

HTTPRequest.abortErrorReason() method

The most recent reason for aborting the request

Signature: 

    class HTTPRequest {
      abstract abortErrorReason(): Protocol.Network.ErrorReason | null;
    }


Returns:

Protocol.Network.ErrorReason | null

# api HTTPRequest.abort() method #

HTTPRequest.abort() method

Aborts a request.

Signature: 

    class HTTPRequest {
      abstract abort(errorCode?: ErrorCode, priority?: number): Promise<void>;
    }


Parameters 

  Parameter   Type        Description
  ----------- ----------- -------------------------------------------------------------------------------------------------------------------------------
  errorCode   ErrorCode   (Optional) optional error code to provide.
  priority    number      (Optional) If provided, intercept is resolved using cooperative handling rules. Otherwise, intercept is resolved immediately.

Returns:

Promise<void>

Remarks 

To use this, request interception should be enabled with
Page.setRequestInterception() . If it is not enabled, this method will
throw an exception immediately.

# api HTTPRequest.continue() method #

HTTPRequest.continue() method

Continues request with optional request overrides.

Signature: 

    class HTTPRequest {
      abstract continue(
        overrides?: ContinueRequestOverrides,
        priority?: number
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                       Description
  ----------- -------------------------- -------------------------------------------------------------------------------------------------------------------------------
  overrides   ContinueRequestOverrides   (Optional) optional overrides to apply to the request.
  priority    number                     (Optional) If provided, intercept is resolved using cooperative handling rules. Otherwise, intercept is resolved immediately.

Returns:

Promise<void>

Remarks 

To use this, request interception should be enabled with
Page.setRequestInterception() .

Exception is immediately thrown if the request interception is not
enabled.

Example 

    await page.setRequestInterception(true);
    page.on('request', request => {
      // Override headers
      const headers = Object.assign({}, request.headers(), {
        foo: 'bar', // set "foo" header
        origin: undefined, // remove "origin" header
      });
      request.continue({headers});
    });


# api HTTPRequest.continueRequestOverrides() method #

HTTPRequest.continueRequestOverrides() method

The  ContinueRequestOverrides that will be used if the interception is
allowed to continue (ie,  abort() and  respond() aren't called).

Signature: 

    class HTTPRequest {
      abstract continueRequestOverrides(): ContinueRequestOverrides;
    }


Returns:

ContinueRequestOverrides

# api HTTPRequest.enqueueInterceptAction() method #

HTTPRequest.enqueueInterceptAction() method

Adds an async request handler to the processing queue. Deferred handlers
are not guaranteed to execute in any particular order, but they are
guaranteed to resolve before the request interception is finalized.

Signature: 

    class HTTPRequest {
      abstract enqueueInterceptAction(
        pendingHandler: () => void | PromiseLike<unknown>
      ): void;
    }


Parameters 

  Parameter        Type                                Description
  ---------------- ----------------------------------- -------------
  pendingHandler   () => void | PromiseLike<unknown>   

Returns:

void

# api HTTPRequest.failure() method #

HTTPRequest.failure() method

Access information about the request's failure.

Signature: 

    class HTTPRequest {
      abstract failure(): {
        errorText: string;
      } | null;
    }


Returns:

{ errorText: string; } | null

 null unless the request failed. If the request fails this can return an
object with  errorText containing a human-readable error message, e.g.
 net::ERR_FAILED . It is not guaranteed that there will be failure text
if the request fails.

Remarks 

Example 

Example of logging all failed requests:

    page.on('requestfailed', request => {
      console.log(request.url() + ' ' + request.failure().errorText);
    });


# api HTTPRequest.fetchPostData() method #

HTTPRequest.fetchPostData() method

Fetches the POST data for the request from the browser.

Signature: 

    class HTTPRequest {
      abstract fetchPostData(): Promise<string | undefined>;
    }


Returns:

Promise<string | undefined>

# api HTTPRequest.finalizeInterceptions() method #

HTTPRequest.finalizeInterceptions() method

Awaits pending interception handlers and then decides how to fulfill the
request interception.

Signature: 

    class HTTPRequest {
      abstract finalizeInterceptions(): Promise<void>;
    }


Returns:

Promise<void>

# api HTTPRequest.frame() method #

HTTPRequest.frame() method

The frame that initiated the request, or null if navigating to error
pages.

Signature: 

    class HTTPRequest {
      abstract frame(): Frame | null;
    }


Returns:

Frame | null

# api HTTPRequest.hasPostData() method #

HTTPRequest.hasPostData() method

True when the request has POST data. Note that HTTPRequest.postData()
might still be undefined when this flag is true when the data is too
long or not readily available in the decoded form. In that case, use
HTTPRequest.fetchPostData() .

Signature: 

    class HTTPRequest {
      abstract hasPostData(): boolean;
    }


Returns:

boolean

# api HTTPRequest.headers() method #

HTTPRequest.headers() method

An object with HTTP headers associated with the request. All header
names are lower-case.

Signature: 

    class HTTPRequest {
      abstract headers(): Record<string, string>;
    }


Returns:

Record<string, string>

# api HTTPRequest class #

HTTPRequest class

Represents an HTTP request sent by a page.

Signature: 

    export declare abstract class HTTPRequest


Remarks 

Whenever the page sends a request, such as for a network resource, the
following events are emitted by Puppeteer's  page :

-    request : emitted when the request is issued by the page. -
     requestfinished - emitted when the response body is downloaded and
    the request is complete.

If request fails at some point, then instead of  requestfinished event
the  requestfailed event is emitted.

All of these events provide an instance of  HTTPRequest representing the
request that occurred:

    page.on('request', request => ...)


NOTE: HTTP Error responses, such as 404 or 503, are still successful
responses from HTTP standpoint, so request will complete with
 requestfinished event.

If request gets a 'redirect' response, the request is successfully
finished with the  requestfinished event, and a new request is issued to
a redirected url.

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  HTTPRequest class.

Properties 

  Property   Modifiers   Type         Description
  ---------- ----------- ------------ -------------------------------------------------------------------
  client      readonly   CDPSession   Warning! Using this client can break Puppeteer. Use with caution.

Methods 

+-----------------------+-----------------------+-----------------------+
| Method                | Modifiers             | Description           |
+=======================+=======================+=======================+
| abort(errorCode,      |                       | Aborts a request.     |
| priority)             |                       |                       |
+-----------------------+-----------------------+-----------------------+
| abortErrorReason()    |                       | The most recent       |
|                       |                       | reason for aborting   |
|                       |                       | the request           |
+-----------------------+-----------------------+-----------------------+
| continue(overrides,   |                       | Continues request     |
| priority)             |                       | with optional request |
|                       |                       | overrides.            |
+-----------------------+-----------------------+-----------------------+
| conti                 |                       | The                   |
| nueRequestOverrides() |                       |  Con                  |
|                       |                       | tinueRequestOverrides |
|                       |                       | that will be used if  |
|                       |                       | the interception is   |
|                       |                       | allowed to continue   |
|                       |                       | (ie,  abort() and     |
|                       |                       |  respond() aren't     |
|                       |                       | called).              |
+-----------------------+-----------------------+-----------------------+
| enqueueInterceptA     |                       | Adds an async request |
| ction(pendingHandler) |                       | handler to the        |
|                       |                       | processing queue.     |
|                       |                       | Deferred handlers are |
|                       |                       | not guaranteed to     |
|                       |                       | execute in any        |
|                       |                       | particular order, but |
|                       |                       | they are guaranteed   |
|                       |                       | to resolve before the |
|                       |                       | request interception  |
|                       |                       | is finalized.         |
+-----------------------+-----------------------+-----------------------+
| failure()             |                       | Access information    |
|                       |                       | about the request's   |
|                       |                       | failure.              |
+-----------------------+-----------------------+-----------------------+
| fetchPostData()       |                       | Fetches the POST data |
|                       |                       | for the request from  |
|                       |                       | the browser.          |
+-----------------------+-----------------------+-----------------------+
| fi                    |                       | Awaits pending        |
| nalizeInterceptions() |                       | interception handlers |
|                       |                       | and then decides how  |
|                       |                       | to fulfill the        |
|                       |                       | request interception. |
+-----------------------+-----------------------+-----------------------+
| frame()               |                       | The frame that        |
|                       |                       | initiated the         |
|                       |                       | request, or null if   |
|                       |                       | navigating to error   |
|                       |                       | pages.                |
+-----------------------+-----------------------+-----------------------+
| hasPostData()         |                       | True when the request |
|                       |                       | has POST data. Note   |
|                       |                       | that                  |
|                       |                       | H                     |
|                       |                       | TTPRequest.postData() |
|                       |                       | might still be        |
|                       |                       | undefined when this   |
|                       |                       | flag is true when the |
|                       |                       | data is too long or   |
|                       |                       | not readily available |
|                       |                       | in the decoded form.  |
|                       |                       | In that case, use     |
|                       |                       | HTTPRe                |
|                       |                       | quest.fetchPostData() |
|                       |                       | .                     |
+-----------------------+-----------------------+-----------------------+
| headers()             |                       | An object with HTTP   |
|                       |                       | headers associated    |
|                       |                       | with the request. All |
|                       |                       | header names are      |
|                       |                       | lower-case.           |
+-----------------------+-----------------------+-----------------------+
| initiator()           |                       | The initiator of the  |
|                       |                       | request.              |
+-----------------------+-----------------------+-----------------------+
| inter                 |                       | An                    |
| ceptResolutionState() |                       | Int                   |
|                       |                       | erceptResolutionState |
|                       |                       | object describing the |
|                       |                       | current resolution    |
|                       |                       | action and priority.  |
|                       |                       |                       |
|                       |                       | Int                   |
|                       |                       | erceptResolutionState |
|                       |                       | contains: action:     |
|                       |                       | Inte                  |
|                       |                       | rceptResolutionAction |
|                       |                       | priority?: number     |
|                       |                       |                       |
|                       |                       | Inte                  |
|                       |                       | rceptResolutionAction |
|                       |                       | is one of:  abort ,   |
|                       |                       |  respond ,  continue  |
|                       |                       | ,  disabled ,  none , |
|                       |                       | or  already-handled . |
+-----------------------+-----------------------+-----------------------+
| isInterce             |                       | Is  true if the       |
| ptResolutionHandled() |                       | intercept resolution  |
|                       |                       | has already been      |
|                       |                       | handled,  false       |
|                       |                       | otherwise.            |
+-----------------------+-----------------------+-----------------------+
| isNavigationRequest() |                       | True if the request   |
|                       |                       | is the driver of the  |
|                       |                       | current frame's       |
|                       |                       | navigation.           |
+-----------------------+-----------------------+-----------------------+
| method()              |                       | The method used (     |
|                       |                       |  GET ,  POST , etc.)  |
+-----------------------+-----------------------+-----------------------+
| postData()            |                       | The request's post    |
|                       |                       | body, if any.         |
+-----------------------+-----------------------+-----------------------+
| redirectChain()       |                       | A  redirectChain is a |
|                       |                       | chain of requests     |
|                       |                       | initiated to fetch a  |
|                       |                       | resource.             |
+-----------------------+-----------------------+-----------------------+
| resourceType()        |                       | Contains the          |
|                       |                       | request's resource    |
|                       |                       | type as it was        |
|                       |                       | perceived by the      |
|                       |                       | rendering engine.     |
+-----------------------+-----------------------+-----------------------+
| respond(response,     |                       | Fulfills a request    |
| priority)             |                       | with the given        |
|                       |                       | response.             |
+-----------------------+-----------------------+-----------------------+
| response()            |                       | A matching            |
|                       |                       |  HTTPResponse object, |
|                       |                       | or null if the        |
|                       |                       | response has not been |
|                       |                       | received yet.         |
+-----------------------+-----------------------+-----------------------+
| responseForRequest()  |                       | The                   |
|                       |                       |  ResponseForRequest   |
|                       |                       | that gets used if the |
|                       |                       | interception is       |
|                       |                       | allowed to respond    |
|                       |                       | (ie,  abort() is not  |
|                       |                       | called).              |
+-----------------------+-----------------------+-----------------------+
| url()                 |                       | The URL of the        |
|                       |                       | request               |
+-----------------------+-----------------------+-----------------------+

# api HTTPRequest.initiator() method #

HTTPRequest.initiator() method

The initiator of the request.

Signature: 

    class HTTPRequest {
      abstract initiator(): Protocol.Network.Initiator | undefined;
    }


Returns:

Protocol.Network.Initiator | undefined

# api HTTPRequest.interceptResolutionState() method #

HTTPRequest.interceptResolutionState() method

An InterceptResolutionState object describing the current resolution
action and priority.

InterceptResolutionState contains: action: InterceptResolutionAction
priority?: number

InterceptResolutionAction is one of:  abort ,  respond ,  continue ,
 disabled ,  none , or  already-handled .

Signature: 

    class HTTPRequest {
      abstract interceptResolutionState(): InterceptResolutionState;
    }


Returns:

InterceptResolutionState

# api HTTPRequest.isInterceptResolutionHandled() method #

HTTPRequest.isInterceptResolutionHandled() method

Is  true if the intercept resolution has already been handled,  false
otherwise.

Signature: 

    class HTTPRequest {
      abstract isInterceptResolutionHandled(): boolean;
    }


Returns:

boolean

# api HTTPRequest.isNavigationRequest() method #

HTTPRequest.isNavigationRequest() method

True if the request is the driver of the current frame's navigation.

Signature: 

    class HTTPRequest {
      abstract isNavigationRequest(): boolean;
    }


Returns:

boolean

# api HTTPRequest.method() method #

HTTPRequest.method() method

The method used (  GET ,  POST , etc.)

Signature: 

    class HTTPRequest {
      abstract method(): string;
    }


Returns:

string

# api HTTPRequest.postData() method #

HTTPRequest.postData() method

The request's post body, if any.

Signature: 

    class HTTPRequest {
      abstract postData(): string | undefined;
    }


Returns:

string | undefined

# api HTTPRequest.redirectChain() method #

HTTPRequest.redirectChain() method

A  redirectChain is a chain of requests initiated to fetch a resource.

Signature: 

    class HTTPRequest {
      abstract redirectChain(): HTTPRequest[];
    }


Returns:

HTTPRequest []

the chain of requests - if a server responds with at least a single
redirect, this chain will contain all requests that were redirected.

Remarks 

 redirectChain is shared between all the requests of the same chain.

For example, if the website  http://example.com has a single redirect to
 https://example.com , then the chain will contain one request:

    const response = await page.goto('http://example.com');
    const chain = response.request().redirectChain();
    console.log(chain.length); // 1
    console.log(chain[0].url()); // 'http://example.com'


If the website  https://google.com has no redirects, then the chain will
be empty:

    const response = await page.goto('https://google.com');
    const chain = response.request().redirectChain();
    console.log(chain.length); // 0


# api HTTPRequest.resourceType() method #

HTTPRequest.resourceType() method

Contains the request's resource type as it was perceived by the
rendering engine.

Signature: 

    class HTTPRequest {
      abstract resourceType(): ResourceType;
    }


Returns:

ResourceType

# api HTTPRequest.respond() method #

HTTPRequest.respond() method

Fulfills a request with the given response.

Signature: 

    class HTTPRequest {
      abstract respond(
        response: Partial<ResponseForRequest>,
        priority?: number
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                            Description
  ----------- ------------------------------- -------------------------------------------------------------------------------------------------------------------------------
  response    Partial< ResponseForRequest >   the response to fulfill the request with.
  priority    number                          (Optional) If provided, intercept is resolved using cooperative handling rules. Otherwise, intercept is resolved immediately.

Returns:

Promise<void>

Remarks 

To use this, request interception should be enabled with
Page.setRequestInterception() .

Exception is immediately thrown if the request interception is not
enabled.

Example 

An example of fulfilling all requests with 404 responses:

    await page.setRequestInterception(true);
    page.on('request', request => {
      request.respond({
        status: 404,
        contentType: 'text/plain',
        body: 'Not Found!',
      });
    });


NOTE: Mocking responses for dataURL requests is not supported. Calling
 request.respond for a dataURL request is a noop.

# api HTTPRequest.responseForRequest() method #

HTTPRequest.responseForRequest() method

The  ResponseForRequest that gets used if the interception is allowed to
respond (ie,  abort() is not called).

Signature: 

    class HTTPRequest {
      abstract responseForRequest(): Partial<ResponseForRequest> | null;
    }


Returns:

Partial< ResponseForRequest > | null

# api HTTPRequest.response() method #

HTTPRequest.response() method

A matching  HTTPResponse object, or null if the response has not been
received yet.

Signature: 

    class HTTPRequest {
      abstract response(): HTTPResponse | null;
    }


Returns:

HTTPResponse | null

# api HTTPRequest.url() method #

HTTPRequest.url() method

The URL of the request

Signature: 

    class HTTPRequest {
      abstract url(): string;
    }


Returns:

string

# api HTTPResponse.buffer() method #

HTTPResponse.buffer() method

Promise which resolves to a buffer with response body.

Signature: 

    class HTTPResponse {
      abstract buffer(): Promise<Buffer>;
    }


Returns:

Promise<Buffer>

# api HTTPResponse.frame() method #

HTTPResponse.frame() method

A Frame that initiated this response, or  null if navigating to error
pages.

Signature: 

    class HTTPResponse {
      abstract frame(): Frame | null;
    }


Returns:

Frame | null

# api HTTPResponse.fromCache() method #

HTTPResponse.fromCache() method

True if the response was served from either the browser's disk cache or
memory cache.

Signature: 

    class HTTPResponse {
      abstract fromCache(): boolean;
    }


Returns:

boolean

# api HTTPResponse.fromServiceWorker() method #

HTTPResponse.fromServiceWorker() method

True if the response was served by a service worker.

Signature: 

    class HTTPResponse {
      abstract fromServiceWorker(): boolean;
    }


Returns:

boolean

# api HTTPResponse.headers() method #

HTTPResponse.headers() method

An object with HTTP headers associated with the response. All header
names are lower-case.

Signature: 

    class HTTPResponse {
      abstract headers(): Record<string, string>;
    }


Returns:

Record<string, string>

# api HTTPResponse class #

HTTPResponse class

The HTTPResponse class represents responses which are received by the
Page class.

Signature: 

    export declare abstract class HTTPResponse


Remarks 

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  HTTPResponse class.

Methods 

  Method                Modifiers   Description
  --------------------- ----------- ----------------------------------------------------------------------------------------------
  buffer()                          Promise which resolves to a buffer with response body.
  frame()                           A Frame that initiated this response, or  null if navigating to error pages.
  fromCache()                       True if the response was served from either the browser's disk cache or memory cache.
  fromServiceWorker()               True if the response was served by a service worker.
  headers()                         An object with HTTP headers associated with the response. All header names are lower-case.
  json()                            Promise which resolves to a JSON representation of response body.
  ok()                              True if the response was successful (status in the range 200-299).
  remoteAddress()                   The IP address and port number used to connect to the remote server.
  request()                         A matching HTTPRequest object.
  securityDetails()                 SecurityDetails if the response was received over the secure connection, or  null otherwise.
  status()                          The status code of the response (e.g., 200 for a success).
  statusText()                      The status text of the response (e.g. usually an "OK" for a success).
  text()                            Promise which resolves to a text representation of response body.
  timing()                          Timing information related to the response.
  url()                             The URL of the response.

# api HTTPResponse.ok() method #

HTTPResponse.ok() method

True if the response was successful (status in the range 200-299).

Signature: 

    class HTTPResponse {
      ok(): boolean;
    }


Returns:

boolean

# api HTTPResponse.remoteAddress() method #

HTTPResponse.remoteAddress() method

The IP address and port number used to connect to the remote server.

Signature: 

    class HTTPResponse {
      abstract remoteAddress(): RemoteAddress;
    }


Returns:

RemoteAddress

# api HTTPResponse.request() method #

HTTPResponse.request() method

A matching HTTPRequest object.

Signature: 

    class HTTPResponse {
      abstract request(): HTTPRequest;
    }


Returns:

HTTPRequest

# api HTTPResponse.securityDetails() method #

HTTPResponse.securityDetails() method

SecurityDetails if the response was received over the secure connection,
or  null otherwise.

Signature: 

    class HTTPResponse {
      abstract securityDetails(): SecurityDetails | null;
    }


Returns:

SecurityDetails | null

# api HTTPResponse.status() method #

HTTPResponse.status() method

The status code of the response (e.g., 200 for a success).

Signature: 

    class HTTPResponse {
      abstract status(): number;
    }


Returns:

number

# api HTTPResponse.statusText() method #

HTTPResponse.statusText() method

The status text of the response (e.g. usually an "OK" for a success).

Signature: 

    class HTTPResponse {
      abstract statusText(): string;
    }


Returns:

string

# api HTTPResponse.text() method #

HTTPResponse.text() method

Promise which resolves to a text representation of response body.

Signature: 

    class HTTPResponse {
      text(): Promise<string>;
    }


Returns:

Promise<string>

# api HTTPResponse.timing() method #

HTTPResponse.timing() method

Timing information related to the response.

Signature: 

    class HTTPResponse {
      abstract timing(): Protocol.Network.ResourceTiming | null;
    }


Returns:

Protocol.Network.ResourceTiming | null

# api HTTPResponse.url() method #

HTTPResponse.url() method

The URL of the response.

Signature: 

    class HTTPResponse {
      abstract url(): string;
    }


Returns:

string

# api InnerParams type #

InnerParams type

Signature: 

    export type InnerParams<T extends unknown[]> = {
      [K in keyof T]: FlattenHandle<T[K]>;
    };


References: FlattenHandle

# api InterceptResolutionAction enum #

InterceptResolutionAction enum

Signature: 

    export declare enum InterceptResolutionAction


Enumeration Members 

  Member           Value                Description
  ---------------- -------------------- -------------
  Abort             "abort"             
  AlreadyHandled    "already-handled"   
  Continue          "continue"          
  Disabled          "disabled"          
  None              "none"              
  Respond           "respond"           

# api InterceptResolutionState interface #

InterceptResolutionState interface

Signature: 

    export interface InterceptResolutionState


Properties 

  Property   Modifiers   Type                        Description   Default
  ---------- ----------- --------------------------- ------------- ---------
  action                 InterceptResolutionAction                 
  priority    optional   number                                    

# api InternalNetworkConditions interface #

InternalNetworkConditions interface

Signature: 

    export interface InternalNetworkConditions extends NetworkConditions


Extends: NetworkConditions

Properties 

  Property   Modifiers   Type      Description   Default
  ---------- ----------- --------- ------------- ---------
  offline                boolean                 

# api JSCoverage.(constructor) #

JSCoverage.(constructor)

Constructs a new instance of the  JSCoverage class

Signature: 

    class JSCoverage {
      constructor(client: CDPSession);
    }


Parameters 

  Parameter   Type         Description
  ----------- ------------ -------------
  client      CDPSession   

# api JSCoverageEntry interface #

JSCoverageEntry interface

The CoverageEntry class for JavaScript

Signature: 

    export interface JSCoverageEntry extends CoverageEntry


Extends: CoverageEntry

Properties 

  Property            Modifiers   Type                               Description                     Default
  ------------------- ----------- ---------------------------------- ------------------------------- ---------
  rawScriptCoverage    optional   Protocol.Profiler.ScriptCoverage   Raw V8 script coverage entry.   

# api JSCoverage class #

JSCoverage class

Signature: 

    export declare class JSCoverage


Constructors 

  Constructor             Modifiers   Description
  ----------------------- ----------- ----------------------------------------------------
  (constructor)(client)               Constructs a new instance of the  JSCoverage class

Methods 

  Method           Modifiers   Description
  ---------------- ----------- -------------
  start(options)               
  stop()                       

# api JSCoverageOptions interface #

JSCoverageOptions interface

Set of configurable options for JS coverage.

Signature: 

    export interface JSCoverageOptions


Properties 

  Property                   Modifiers   Type      Description                                                                                                                                                                                             Default
  -------------------------- ----------- --------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------
  includeRawScriptCoverage    optional   boolean   Whether the result includes raw V8 script coverage entries.                                                                                                                                             
  reportAnonymousScripts      optional   boolean   Whether anonymous scripts generated by the page should be reported.                                                                                                                                     
  resetOnNavigation           optional   boolean   Whether to reset coverage on every navigation.                                                                                                                                                          
  useBlockCoverage            optional   boolean   Whether to collect coverage information at the block level. If true, coverage will be collected at the block level (this is the default). If false, coverage will be collected at the function level.   

# api JSCoverage.start() method #

JSCoverage.start() method

Signature: 

    class JSCoverage {
      start(options?: {
        resetOnNavigation?: boolean;
        reportAnonymousScripts?: boolean;
        includeRawScriptCoverage?: boolean;
        useBlockCoverage?: boolean;
      }): Promise<void>;
    }


Parameters 

  Parameter   Type                                                                                                                                 Description
  ----------- ------------------------------------------------------------------------------------------------------------------------------------ -------------
  options     { resetOnNavigation?: boolean; reportAnonymousScripts?: boolean; includeRawScriptCoverage?: boolean; useBlockCoverage?: boolean; }   (Optional)

Returns:

Promise<void>

# api JSCoverage.stop() method #

JSCoverage.stop() method

Signature: 

    class JSCoverage {
      stop(): Promise<JSCoverageEntry[]>;
    }


Returns:

Promise< JSCoverageEntry []>

# api JSHandle.asElement() method #

JSHandle.asElement() method

Either  null or the handle itself if the handle is an instance of
ElementHandle .

Signature: 

    class JSHandle {
      abstract asElement(): ElementHandle<Node> | null;
    }


Returns:

ElementHandle <Node> | null

# api JSHandle.dispose() method #

JSHandle.dispose() method

Releases the object referenced by the handle for garbage collection.

Signature: 

    class JSHandle {
      abstract dispose(): Promise<void>;
    }


Returns:

Promise<void>

# api JSHandle.evaluateHandle() method #

JSHandle.evaluateHandle() method

Evaluates the given function with the current handle as its first
argument.

Signature: 

    class JSHandle {
      evaluateHandle<
        Params extends unknown[],
        Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>,
      >(
        pageFunction: Func | string,
        ...args: Params
      ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
    }


Parameters 

  Parameter      Type            Description
  -------------- --------------- -------------
  pageFunction   Func | string   
  args           Params          

Returns:

Promise< HandleFor <Awaited<ReturnType<Func>>>>

# api JSHandle.evaluate() method #

JSHandle.evaluate() method

Evaluates the given function with the current handle as its first
argument.

Signature: 

    class JSHandle {
      evaluate<
        Params extends unknown[],
        Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>,
      >(
        pageFunction: Func | string,
        ...args: Params
      ): Promise<Awaited<ReturnType<Func>>>;
    }


Parameters 

  Parameter      Type            Description
  -------------- --------------- -------------
  pageFunction   Func | string   
  args           Params          

Returns:

Promise<Awaited<ReturnType<Func>>>

# api JSHandle.getProperties() method #

JSHandle.getProperties() method

Gets a map of handles representing the properties of the current handle.

Signature: 

    class JSHandle {
      getProperties(): Promise<Map<string, JSHandle>>;
    }


Returns:

Promise<Map<string, JSHandle >>

Example 

    const listHandle = await page.evaluateHandle(() => document.body.children);
    const properties = await listHandle.getProperties();
    const children = [];
    for (const property of properties.values()) {
      const element = property.asElement();
      if (element) {
        children.push(element);
      }
    }
    children; // holds elementHandles to all children of document.body


# api JSHandle.getProperty() method #

JSHandle.getProperty() method

Signature: 

    class JSHandle {
      getProperty(propertyName: string): Promise<JSHandle<unknown>>;
    }


Parameters 

  Parameter      Type     Description
  -------------- -------- -------------
  propertyName   string   

Returns:

Promise< JSHandle <unknown>>

# api JSHandle.getProperty() method #

JSHandle.getProperty() method

Fetches a single property from the referenced object.

Signature: 

    class JSHandle {
      getProperty<K extends keyof T>(
        propertyName: HandleOr<K>
      ): Promise<HandleFor<T[K]>>;
    }


Parameters 

  Parameter      Type           Description
  -------------- -------------- -------------
  propertyName   HandleOr <K>   

Returns:

Promise< HandleFor <T[K]>>

# api JSHandle class #

JSHandle class

Represents a reference to a JavaScript object. Instances can be created
using Page.evaluateHandle() .

Handles prevent the referenced JavaScript object from being
garbage-collected unless the handle is purposely disposed . JSHandles
are auto-disposed when their associated frame is navigated away or the
parent context gets destroyed.

Handles can be used as arguments for any evaluation function such as
Page.$eval() , Page.evaluate() , and Page.evaluateHandle() . They are
resolved to their referenced object.

Signature: 

    export declare abstract class JSHandle<T = unknown>


Remarks 

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  JSHandle class.

Example 

    const windowHandle = await page.evaluateHandle(() => window);


Properties 

  Property   Modifiers   Type         Description
  ---------- ----------- ------------ --------------------------------------
  _           optional   T            Used for nominally typing JSHandle .
  move                   () => this   

Methods 

  Method                               Modifiers   Description
  ------------------------------------ ----------- -----------------------------------------------------------------------------------
  asElement()                                      Either  null or the handle itself if the handle is an instance of ElementHandle .
  dispose()                                        Releases the object referenced by the handle for garbage collection.
  evaluate(pageFunction, args)                     Evaluates the given function with the current handle as its first argument.
  evaluateHandle(pageFunction, args)               Evaluates the given function with the current handle as its first argument.
  getProperties()                                  Gets a map of handles representing the properties of the current handle.
  getProperty(propertyName)                        Fetches a single property from the referenced object.
  getProperty(propertyName)                        
  jsonValue()                                      A vanilla object representing the serializable portions of the referenced object.
  remoteObject()                                   Provides access to the Protocol.Runtime.RemoteObject backing this handle.
  toString()                                       Returns a string representation of the JSHandle.

# api JSHandle.jsonValue() method #

JSHandle.jsonValue() method

A vanilla object representing the serializable portions of the
referenced object.

Signature: 

    class JSHandle {
      abstract jsonValue(): Promise<T>;
    }


Returns:

Promise<T>

Exceptions 

Throws if the object cannot be serialized due to circularity.

Remarks 

If the object has a  toJSON function, it will not be called.

# api JSHandle.remoteObject() method #

JSHandle.remoteObject() method

Provides access to the Protocol.Runtime.RemoteObject backing this
handle.

Signature: 

    class JSHandle {
      abstract remoteObject(): Protocol.Runtime.RemoteObject;
    }


Returns:

Protocol.Runtime.RemoteObject

# api JSHandle.toString() method #

JSHandle.toString() method

Returns a string representation of the JSHandle.

Signature: 

    class JSHandle {
      abstract toString(): string;
    }


Returns:

string

Remarks 

Useful during debugging.

# api Keyboard.down() method #

Keyboard.down() method

Dispatches a  keydown event.

Signature: 

    class Keyboard {
      abstract down(
        key: KeyInput,
        options?: Readonly<KeyDownOptions>
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                         Description
  ----------- ---------------------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  key         KeyInput                     Name of key to press, such as  ArrowLeft . See KeyInput for a list of all key names.
  options     Readonly< KeyDownOptions >   (Optional) An object of options. Accepts text which, if specified, generates an input event with this text. Accepts commands which, if specified, is the commands of keyboard shortcuts, see Chromium Source Code for valid command names.

Returns:

Promise<void>

Remarks 

If  key is a single character and no modifier keys besides  Shift are
being held down, a  keypress /  input event will also generated. The
 text option can be specified to force an input event to be generated.
If  key is a modifier key,  Shift ,  Meta ,  Control , or  Alt ,
subsequent key presses will be sent with that modifier active. To
release the modifier key, use Keyboard.up() .

After the key is pressed once, subsequent calls to Keyboard.down() will
have repeat set to true. To release the key, use Keyboard.up() .

Modifier keys DO influence Keyboard.down() . Holding down  Shift will
type the text in upper case.

# api Keyboard class #

Keyboard class

Keyboard provides an api for managing a virtual keyboard. The high level
api is Keyboard.type() , which takes raw characters and generates proper
keydown, keypress/input, and keyup events on your page.

Signature: 

    export declare abstract class Keyboard


Remarks 

For finer control, you can use Keyboard.down() , Keyboard.up() , and
Keyboard.sendCharacter() to manually fire events as if they were
generated from a real keyboard.

On macOS, keyboard shortcuts like  ⌘ A -> Select All do not work. See
#1313 .

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  Keyboard class.

Example 1 

An example of holding down  Shift in order to select and delete some
text:

    await page.keyboard.type('Hello World!');
    await page.keyboard.press('ArrowLeft');

    await page.keyboard.down('Shift');
    for (let i = 0; i < ' World'.length; i++)
      await page.keyboard.press('ArrowLeft');
    await page.keyboard.up('Shift');

    await page.keyboard.press('Backspace');
    // Result text will end up saying 'Hello!'


Example 2 

An example of pressing  A

    await page.keyboard.down('Shift');
    await page.keyboard.press('KeyA');
    await page.keyboard.up('Shift');


Methods 

  Method                Modifiers   Description
  --------------------- ----------- ------------------------------------------------------------------------------------------
  down(key, options)                Dispatches a  keydown event.
  press(key, options)               Shortcut for Keyboard.down() and Keyboard.up() .
  sendCharacter(char)               Dispatches a  keypress and  input event. This does not send a  keydown or  keyup event.
  type(text, options)               Sends a  keydown ,  keypress /  input , and  keyup event for each character in the text.
  up(key)                           Dispatches a  keyup event.

# api Keyboard.press() method #

Keyboard.press() method

Shortcut for Keyboard.down() and Keyboard.up() .

Signature: 

    class Keyboard {
      abstract press(
        key: KeyInput,
        options?: Readonly<KeyPressOptions>
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                          Description
  ----------- ----------------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  key         KeyInput                      Name of key to press, such as  ArrowLeft . See KeyInput for a list of all key names.
  options     Readonly< KeyPressOptions >   (Optional) An object of options. Accepts text which, if specified, generates an input event with this text. Accepts delay which, if specified, is the time to wait between  keydown and  keyup in milliseconds. Defaults to 0. Accepts commands which, if specified, is the commands of keyboard shortcuts, see Chromium Source Code for valid command names.

Returns:

Promise<void>

Remarks 

If  key is a single character and no modifier keys besides  Shift are
being held down, a  keypress /  input event will also generated. The
 text option can be specified to force an input event to be generated.

Modifier keys DO effect Keyboard.press() . Holding down  Shift will type
the text in upper case.

# api Keyboard.sendCharacter() method #

Keyboard.sendCharacter() method

Dispatches a  keypress and  input event. This does not send a  keydown
or  keyup event.

Signature: 

    class Keyboard {
      abstract sendCharacter(char: string): Promise<void>;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- ----------------------------------
  char        string   Character to send into the page.

Returns:

Promise<void>

Remarks 

Modifier keys DO NOT effect Keyboard.sendCharacter . Holding down  Shift
will not type the text in upper case.

Example 

    page.keyboard.sendCharacter('嗨');


# api Keyboard.type() method #

Keyboard.type() method

Sends a  keydown ,  keypress /  input , and  keyup event for each
character in the text.

Signature: 

    class Keyboard {
      abstract type(
        text: string,
        options?: Readonly<KeyboardTypeOptions>
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                              Description
  ----------- --------------------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------
  text        string                            A text to type into a focused element.
  options     Readonly< KeyboardTypeOptions >   (Optional) An object of options. Accepts delay which, if specified, is the time to wait between  keydown and  keyup in milliseconds. Defaults to 0.

Returns:

Promise<void>

Remarks 

To press a special key, like  Control or  ArrowDown , use
Keyboard.press() .

Modifier keys DO NOT effect  keyboard.type . Holding down  Shift will
not type the text in upper case.

Example 

    await page.keyboard.type('Hello'); // Types instantly
    await page.keyboard.type('World', {delay: 100}); // Types slower, like a user


# api KeyboardTypeOptions interface #

KeyboardTypeOptions interface

Signature: 

    export interface KeyboardTypeOptions


Properties 

  Property   Modifiers   Type     Description   Default
  ---------- ----------- -------- ------------- ---------
  delay       optional   number                 

# api Keyboard.up() method #

Keyboard.up() method

Dispatches a  keyup event.

Signature: 

    class Keyboard {
      abstract up(key: KeyInput): Promise<void>;
    }


Parameters 

  Parameter   Type       Description
  ----------- ---------- ----------------------------------------------------------------------------------------
  key         KeyInput   Name of key to release, such as  ArrowLeft . See KeyInput for a list of all key names.

Returns:

Promise<void>

# api KeyDownOptions interface #

KeyDownOptions interface

Signature: 

    export interface KeyDownOptions


Properties 

  Property   Modifiers   Type       Description   Default
  ---------- ----------- ---------- ------------- ---------
  commands    optional   string[]                 
  text        optional   string                   

# api KeyInput type #

KeyInput type

All the valid keys that can be passed to functions that take user input,
such as keyboard.press

Signature: 

    export type KeyInput =
      | '0'
      | '1'
      | '2'
      | '3'
      | '4'
      | '5'
      | '6'
      | '7'
      | '8'
      | '9'
      | 'Power'
      | 'Eject'
      | 'Abort'
      | 'Help'
      | 'Backspace'
      | 'Tab'
      | 'Numpad5'
      | 'NumpadEnter'
      | 'Enter'
      | '\r'
      | '\n'
      | 'ShiftLeft'
      | 'ShiftRight'
      | 'ControlLeft'
      | 'ControlRight'
      | 'AltLeft'
      | 'AltRight'
      | 'Pause'
      | 'CapsLock'
      | 'Escape'
      | 'Convert'
      | 'NonConvert'
      | 'Space'
      | 'Numpad9'
      | 'PageUp'
      | 'Numpad3'
      | 'PageDown'
      | 'End'
      | 'Numpad1'
      | 'Home'
      | 'Numpad7'
      | 'ArrowLeft'
      | 'Numpad4'
      | 'Numpad8'
      | 'ArrowUp'
      | 'ArrowRight'
      | 'Numpad6'
      | 'Numpad2'
      | 'ArrowDown'
      | 'Select'
      | 'Open'
      | 'PrintScreen'
      | 'Insert'
      | 'Numpad0'
      | 'Delete'
      | 'NumpadDecimal'
      | 'Digit0'
      | 'Digit1'
      | 'Digit2'
      | 'Digit3'
      | 'Digit4'
      | 'Digit5'
      | 'Digit6'
      | 'Digit7'
      | 'Digit8'
      | 'Digit9'
      | 'KeyA'
      | 'KeyB'
      | 'KeyC'
      | 'KeyD'
      | 'KeyE'
      | 'KeyF'
      | 'KeyG'
      | 'KeyH'
      | 'KeyI'
      | 'KeyJ'
      | 'KeyK'
      | 'KeyL'
      | 'KeyM'
      | 'KeyN'
      | 'KeyO'
      | 'KeyP'
      | 'KeyQ'
      | 'KeyR'
      | 'KeyS'
      | 'KeyT'
      | 'KeyU'
      | 'KeyV'
      | 'KeyW'
      | 'KeyX'
      | 'KeyY'
      | 'KeyZ'
      | 'MetaLeft'
      | 'MetaRight'
      | 'ContextMenu'
      | 'NumpadMultiply'
      | 'NumpadAdd'
      | 'NumpadSubtract'
      | 'NumpadDivide'
      | 'F1'
      | 'F2'
      | 'F3'
      | 'F4'
      | 'F5'
      | 'F6'
      | 'F7'
      | 'F8'
      | 'F9'
      | 'F10'
      | 'F11'
      | 'F12'
      | 'F13'
      | 'F14'
      | 'F15'
      | 'F16'
      | 'F17'
      | 'F18'
      | 'F19'
      | 'F20'
      | 'F21'
      | 'F22'
      | 'F23'
      | 'F24'
      | 'NumLock'
      | 'ScrollLock'
      | 'AudioVolumeMute'
      | 'AudioVolumeDown'
      | 'AudioVolumeUp'
      | 'MediaTrackNext'
      | 'MediaTrackPrevious'
      | 'MediaStop'
      | 'MediaPlayPause'
      | 'Semicolon'
      | 'Equal'
      | 'NumpadEqual'
      | 'Comma'
      | 'Minus'
      | 'Period'
      | 'Slash'
      | 'Backquote'
      | 'BracketLeft'
      | 'Backslash'
      | 'BracketRight'
      | 'Quote'
      | 'AltGraph'
      | 'Props'
      | 'Cancel'
      | 'Clear'
      | 'Shift'
      | 'Control'
      | 'Alt'
      | 'Accept'
      | 'ModeChange'
      | ' '
      | 'Print'
      | 'Execute'
      | '\u0000'
      | 'a'
      | 'b'
      | 'c'
      | 'd'
      | 'e'
      | 'f'
      | 'g'
      | 'h'
      | 'i'
      | 'j'
      | 'k'
      | 'l'
      | 'm'
      | 'n'
      | 'o'
      | 'p'
      | 'q'
      | 'r'
      | 's'
      | 't'
      | 'u'
      | 'v'
      | 'w'
      | 'x'
      | 'y'
      | 'z'
      | 'Meta'
      | '*'
      | '+'
      | '-'
      | '/'
      | ';'
      | '='
      | ','
      | '.'
      | '`'
      | '['
      | '\\'
      | ']'
      | "'"
      | 'Attn'
      | 'CrSel'
      | 'ExSel'
      | 'EraseEof'
      | 'Play'
      | 'ZoomOut'
      | ')'
      | '!'
      | '@'
      | '#'
      | '$'
      | '%'
      | '^'
      | '&'
      | '('
      | 'A'
      | 'B'
      | 'C'
      | 'D'
      | 'E'
      | 'F'
      | 'G'
      | 'H'
      | 'I'
      | 'J'
      | 'K'
      | 'L'
      | 'M'
      | 'N'
      | 'O'
      | 'P'
      | 'Q'
      | 'R'
      | 'S'
      | 'T'
      | 'U'
      | 'V'
      | 'W'
      | 'X'
      | 'Y'
      | 'Z'
      | ':'
      | '<'
      | '_'
      | '>'
      | '?'
      | '~'
      | '{'
      | '|'
      | '}'
      | '"'
      | 'SoftLeft'
      | 'SoftRight'
      | 'Camera'
      | 'Call'
      | 'EndCall'
      | 'VolumeDown'
      | 'VolumeUp';


# api KeyPressOptions type #

KeyPressOptions type

Signature: 

    export type KeyPressOptions = KeyDownOptions & KeyboardTypeOptions;


References: KeyDownOptions , KeyboardTypeOptions

# api KnownDevices variable #

KnownDevices variable

A list of devices to be used with Page.emulate() .

Signature: 

    KnownDevices: Readonly<
      Record<
        | 'Blackberry PlayBook'
        | 'Blackberry PlayBook landscape'
        | 'BlackBerry Z30'
        | 'BlackBerry Z30 landscape'
        | 'Galaxy Note 3'
        | 'Galaxy Note 3 landscape'
        | 'Galaxy Note II'
        | 'Galaxy Note II landscape'
        | 'Galaxy S III'
        | 'Galaxy S III landscape'
        | 'Galaxy S5'
        | 'Galaxy S5 landscape'
        | 'Galaxy S8'
        | 'Galaxy S8 landscape'
        | 'Galaxy S9+'
        | 'Galaxy S9+ landscape'
        | 'Galaxy Tab S4'
        | 'Galaxy Tab S4 landscape'
        | 'iPad'
        | 'iPad landscape'
        | 'iPad (gen 6)'
        | 'iPad (gen 6) landscape'
        | 'iPad (gen 7)'
        | 'iPad (gen 7) landscape'
        | 'iPad Mini'
        | 'iPad Mini landscape'
        | 'iPad Pro'
        | 'iPad Pro landscape'
        | 'iPad Pro 11'
        | 'iPad Pro 11 landscape'
        | 'iPhone 4'
        | 'iPhone 4 landscape'
        | 'iPhone 5'
        | 'iPhone 5 landscape'
        | 'iPhone 6'
        | 'iPhone 6 landscape'
        | 'iPhone 6 Plus'
        | 'iPhone 6 Plus landscape'
        | 'iPhone 7'
        | 'iPhone 7 landscape'
        | 'iPhone 7 Plus'
        | 'iPhone 7 Plus landscape'
        | 'iPhone 8'
        | 'iPhone 8 landscape'
        | 'iPhone 8 Plus'
        | 'iPhone 8 Plus landscape'
        | 'iPhone SE'
        | 'iPhone SE landscape'
        | 'iPhone X'
        | 'iPhone X landscape'
        | 'iPhone XR'
        | 'iPhone XR landscape'
        | 'iPhone 11'
        | 'iPhone 11 landscape'
        | 'iPhone 11 Pro'
        | 'iPhone 11 Pro landscape'
        | 'iPhone 11 Pro Max'
        | 'iPhone 11 Pro Max landscape'
        | 'iPhone 12'
        | 'iPhone 12 landscape'
        | 'iPhone 12 Pro'
        | 'iPhone 12 Pro landscape'
        | 'iPhone 12 Pro Max'
        | 'iPhone 12 Pro Max landscape'
        | 'iPhone 12 Mini'
        | 'iPhone 12 Mini landscape'
        | 'iPhone 13'
        | 'iPhone 13 landscape'
        | 'iPhone 13 Pro'
        | 'iPhone 13 Pro landscape'
        | 'iPhone 13 Pro Max'
        | 'iPhone 13 Pro Max landscape'
        | 'iPhone 13 Mini'
        | 'iPhone 13 Mini landscape'
        | 'JioPhone 2'
        | 'JioPhone 2 landscape'
        | 'Kindle Fire HDX'
        | 'Kindle Fire HDX landscape'
        | 'LG Optimus L70'
        | 'LG Optimus L70 landscape'
        | 'Microsoft Lumia 550'
        | 'Microsoft Lumia 950'
        | 'Microsoft Lumia 950 landscape'
        | 'Nexus 10'
        | 'Nexus 10 landscape'
        | 'Nexus 4'
        | 'Nexus 4 landscape'
        | 'Nexus 5'
        | 'Nexus 5 landscape'
        | 'Nexus 5X'
        | 'Nexus 5X landscape'
        | 'Nexus 6'
        | 'Nexus 6 landscape'
        | 'Nexus 6P'
        | 'Nexus 6P landscape'
        | 'Nexus 7'
        | 'Nexus 7 landscape'
        | 'Nokia Lumia 520'
        | 'Nokia Lumia 520 landscape'
        | 'Nokia N9'
        | 'Nokia N9 landscape'
        | 'Pixel 2'
        | 'Pixel 2 landscape'
        | 'Pixel 2 XL'
        | 'Pixel 2 XL landscape'
        | 'Pixel 3'
        | 'Pixel 3 landscape'
        | 'Pixel 4'
        | 'Pixel 4 landscape'
        | 'Pixel 4a (5G)'
        | 'Pixel 4a (5G) landscape'
        | 'Pixel 5'
        | 'Pixel 5 landscape'
        | 'Moto G4'
        | 'Moto G4 landscape',
        Device
      >
    >;


Example 

    import {KnownDevices} from 'puppeteer';
    const iPhone = KnownDevices['iPhone 6'];

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.emulate(iPhone);
      await page.goto('https://www.google.com');
      // other actions...
      await browser.close();
    })();


# api launch() function #

launch() function

Signature: 

    launch: (
      options?:
        | import('puppeteer-core/internal/puppeteer-core.js').PuppeteerLaunchOptions
        | undefined
    ) => Promise<import('puppeteer-core/internal/puppeteer-core.js').Browser>;


Parameters 

  Parameter   Type                                                                                      Description
  ----------- ----------------------------------------------------------------------------------------- -------------
  options     import("puppeteer-core/internal/puppeteer-core.js"). PuppeteerLaunchOptions | undefined   (Optional)

Returns:

Promise<import("puppeteer-core/internal/puppeteer-core.js"). Browser >

# api LaunchOptions interface #

LaunchOptions interface

Generic launch options that can be passed when launching any browser.

Signature: 

    export interface LaunchOptions


Properties 

  Property             Modifiers   Type                                 Description                                                                                                                                                                                                      Default
  -------------------- ----------- ------------------------------------ ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------
  channel               optional   ChromeReleaseChannel                 Chrome Release Channel                                                                                                                                                                                           
  dumpio                optional   boolean                              If true, pipes the browser process stdout and stderr to  process.stdout and  process.stderr .                                                                                                                     false
  env                   optional   Record<string, string | undefined>   Specify environment variables that will be visible to the browser.                                                                                                                                               The contents of  process.env .
  executablePath        optional   string                               Path to a browser executable to use instead of the bundled Chromium. Note that Puppeteer is only guaranteed to work with the bundled Chromium, so use this setting at your own risk.                             
  extraPrefsFirefox     optional   Record<string, unknown>              Additional preferences that can be passed when launching with Firefox.                                                                                                                                           
  handleSIGHUP          optional   boolean                              Close the browser process on  SIGHUP .                                                                                                                                                                            true
  handleSIGINT          optional   boolean                              Close the browser process on  Ctrl+C .                                                                                                                                                                            true
  handleSIGTERM         optional   boolean                              Close the browser process on  SIGTERM .                                                                                                                                                                           true
  ignoreDefaultArgs     optional   boolean | string[]                   If  true , do not use  puppeteer.defaultArgs() when creating a browser. If an array is provided, these args will be filtered out. Use this with care - you probably want the default arguments Puppeteer uses.    false
  pipe                  optional   boolean                              Connect to a browser over a pipe instead of a WebSocket.                                                                                                                                                          false
  product               optional   Product                              Which browser to launch.                                                                                                                                                                                          chrome
  timeout               optional   number                               Maximum time in milliseconds to wait for the browser to start. Pass  0 to disable the timeout.                                                                                                                    30_000 (30 seconds).
  waitForInitialPage    optional   boolean                              Whether to wait for the initial page to be ready. Useful when a user explicitly disables that (e.g.  --no-startup-window for Chrome).                                                                             true

# api Locator.click() method #

Locator.click() method

Signature: 

    class Locator {
      click<ElementType extends Element>(
        this: Locator<ElementType>,
        options?: Readonly<LocatorClickOptions>
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                              Description
  ----------- --------------------------------- -------------
  this        Locator <ElementType>             
  options     Readonly< LocatorClickOptions >   (Optional)

Returns:

Promise<void>

# api LocatorClickOptions type #

LocatorClickOptions type

Signature: 

    export type LocatorClickOptions = ClickOptions & ActionOptions;


References: ClickOptions , ActionOptions

# api Locator.clone() method #

Locator.clone() method

Clones the locator.

Signature: 

    class Locator {
      clone(): Locator<T>;
    }


Returns:

Locator <T>

# api LocatorEvent enum #

LocatorEvent enum

All the events that a locator instance may emit.

Signature: 

    export declare enum LocatorEvent


Enumeration Members 

  Member   Value       Description
  -------- ----------- -------------------------------------------------------------------------------------
  Action    "action"   Emitted every time before the locator performs an action on the located element(s).

# api LocatorEvents interface #

LocatorEvents interface

Signature: 

    export interface LocatorEvents extends Record<EventType, unknown>


Extends: Record< EventType , unknown>

Properties 

  Property   Modifiers   Type        Description   Default
  ---------- ----------- ----------- ------------- ---------
  action                 undefined                 

# api Locator.fill() method #

Locator.fill() method

Fills out the input identified by the locator using the provided value.
The type of the input is determined at runtime and the appropriate
fill-out method is chosen based on the type. contenteditable, selector,
inputs are supported.

Signature: 

    class Locator {
      fill<ElementType extends Element>(
        this: Locator<ElementType>,
        value: string,
        options?: Readonly<ActionOptions>
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                        Description
  ----------- --------------------------- -------------
  this        Locator <ElementType>       
  value       string                      
  options     Readonly< ActionOptions >   (Optional)

Returns:

Promise<void>

# api Locator.filter() method #

Locator.filter() method

Creates an expectation that is evaluated against located values.

If the expectations do not match, then the locator will retry.

Signature: 

    class Locator {
      filter<S extends T>(predicate: Predicate<T, S>): Locator<S>;
    }


Parameters 

  Parameter   Type               Description
  ----------- ------------------ -------------
  predicate   Predicate <T, S>   

Returns:

Locator <S>

# api Locator.hover() method #

Locator.hover() method

Signature: 

    class Locator {
      hover<ElementType extends Element>(
        this: Locator<ElementType>,
        options?: Readonly<ActionOptions>
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                        Description
  ----------- --------------------------- -------------
  this        Locator <ElementType>       
  options     Readonly< ActionOptions >   (Optional)

Returns:

Promise<void>

# api Locator class #

Locator class

Locators describe a strategy of locating objects and performing an
action on them. If the action fails because the object is not ready for
the action, the whole operation is retried. Various preconditions for a
successful action are checked automatically.

Signature: 

    export declare abstract class Locator<T> extends EventEmitter<LocatorEvents>


Extends: EventEmitter < LocatorEvents >

Properties 

  Property   Modifiers   Type     Description
  ---------- ----------- -------- -------------------------------------
  _           optional   T        Used for nominally typing Locator .
  timeout     readonly   number   

Methods 

+-----------------------+-----------------------+-----------------------+
| Method                | Modifiers             | Description           |
+=======================+=======================+=======================+
| click(this, options)  |                       |                       |
+-----------------------+-----------------------+-----------------------+
| clone()               |                       | Clones the locator.   |
+-----------------------+-----------------------+-----------------------+
| fill(this, value,     |                       | Fills out the input   |
| options)              |                       | identified by the     |
|                       |                       | locator using the     |
|                       |                       | provided value. The   |
|                       |                       | type of the input is  |
|                       |                       | determined at runtime |
|                       |                       | and the appropriate   |
|                       |                       | fill-out method is    |
|                       |                       | chosen based on the   |
|                       |                       | type.                 |
|                       |                       | contenteditable,      |
|                       |                       | selector, inputs are  |
|                       |                       | supported.            |
+-----------------------+-----------------------+-----------------------+
| filter(predicate)     |                       | Creates an            |
|                       |                       | expectation that is   |
|                       |                       | evaluated against     |
|                       |                       | located values.       |
|                       |                       |                       |
|                       |                       | If the expectations   |
|                       |                       | do not match, then    |
|                       |                       | the locator will      |
|                       |                       | retry.                |
+-----------------------+-----------------------+-----------------------+
| hover(this, options)  |                       |                       |
+-----------------------+-----------------------+-----------------------+
| map(mapper)           |                       | Maps the locator      |
|                       |                       | using the provided    |
|                       |                       | mapper.               |
+-----------------------+-----------------------+-----------------------+
| race(locators)        |  static               | Creates a race        |
|                       |                       | between multiple      |
|                       |                       | locators but ensures  |
|                       |                       | that only a single    |
|                       |                       | one acts.             |
+-----------------------+-----------------------+-----------------------+
| scroll(this, options) |                       |                       |
+-----------------------+-----------------------+-----------------------+
| setEnsureElement      |                       |                       |
| IsInTheViewport(this, |                       |                       |
| value)                |                       |                       |
+-----------------------+-----------------------+-----------------------+
| setTimeout(timeout)   |                       |                       |
+-----------------------+-----------------------+-----------------------+
| setVisibility(this,   |                       |                       |
| visibility)           |                       |                       |
+-----------------------+-----------------------+-----------------------+
| se                    |                       |                       |
| tWaitForEnabled(this, |                       |                       |
| value)                |                       |                       |
+-----------------------+-----------------------+-----------------------+
| setWaitForSt          |                       |                       |
| ableBoundingBox(this, |                       |                       |
| value)                |                       |                       |
+-----------------------+-----------------------+-----------------------+
| wait(options)         |                       | Waits for the locator |
|                       |                       | to get the serialized |
|                       |                       | value from the page.  |
|                       |                       |                       |
|                       |                       | Note this requires    |
|                       |                       | the value to be       |
|                       |                       | JSON-serializable.    |
+-----------------------+-----------------------+-----------------------+
| waitHandle(options)   |                       | Waits for the locator |
|                       |                       | to get a handle from  |
|                       |                       | the page.             |
+-----------------------+-----------------------+-----------------------+

# api Locator.map() method #

Locator.map() method

Maps the locator using the provided mapper.

Signature: 

    class Locator {
      map<To>(mapper: Mapper<T, To>): Locator<To>;
    }


Parameters 

  Parameter   Type             Description
  ----------- ---------------- -------------
  mapper      Mapper <T, To>   

Returns:

Locator <To>

# api LocatorOptions interface #

LocatorOptions interface

Signature: 

    export interface LocatorOptions


Properties 

+-------------+-------------+-------------+-------------+-------------+
| Property    | Modifiers   | Type        | Description | Default     |
+=============+=============+=============+=============+=============+
| ensure      |             | boolean     | Whether to  |  true       |
| ElementIsIn |             |             | scroll the  |             |
| TheViewport |             |             | element     |             |
|             |             |             | into        |             |
|             |             |             | viewport if |             |
|             |             |             | not in the  |             |
|             |             |             | viewprot    |             |
|             |             |             | already.    |             |
+-------------+-------------+-------------+-------------+-------------+
| timeout     |             | number      | Total       |  Pa         |
|             |             |             | timeout for | ge.getDefau |
|             |             |             | the entire  | ltTimeout() |
|             |             |             | locator     |             |
|             |             |             | operation.  |             |
|             |             |             |             |             |
|             |             |             | Pass  0 to  |             |
|             |             |             | disable     |             |
|             |             |             | timeout.    |             |
+-------------+-------------+-------------+-------------+-------------+
| visibility  |             | Visib       | Whether to  |             |
|             |             | ilityOption | wait for    |             |
|             |             |             | the element |             |
|             |             |             | to be       |             |
|             |             |             |  visible or |             |
|             |             |             |  hidden .   |             |
|             |             |             |  null to    |             |
|             |             |             | disable     |             |
|             |             |             | visibility  |             |
|             |             |             | checks.     |             |
+-------------+-------------+-------------+-------------+-------------+
| wai         |             | boolean     | Whether to  |  true       |
| tForEnabled |             |             | wait for    |             |
|             |             |             | input       |             |
|             |             |             | elements to |             |
|             |             |             | become      |             |
|             |             |             | enabled     |             |
|             |             |             | before the  |             |
|             |             |             | action.     |             |
|             |             |             | Applicable  |             |
|             |             |             | to  click   |             |
|             |             |             | and  fill   |             |
|             |             |             | actions.    |             |
+-------------+-------------+-------------+-------------+-------------+
| wa          |             | boolean     | Whether to  |  true       |
| itForStable |             |             | wait for    |             |
| BoundingBox |             |             | the         |             |
|             |             |             | element's   |             |
|             |             |             | bounding    |             |
|             |             |             | box to be   |             |
|             |             |             | same        |             |
|             |             |             | between two |             |
|             |             |             | animation   |             |
|             |             |             | frames.     |             |
+-------------+-------------+-------------+-------------+-------------+

# api Locator.race() method #

Locator.race() method

Creates a race between multiple locators but ensures that only a single
one acts.

Signature: 

    class Locator {
      static race<Locators extends readonly unknown[] | []>(
        locators: Locators
      ): Locator<AwaitedLocator<Locators[number]>>;
    }


Parameters 

  Parameter   Type       Description
  ----------- ---------- -------------
  locators    Locators   

Returns:

Locator < AwaitedLocator <Locators[number]>>

# api Locator.scroll() method #

Locator.scroll() method

Signature: 

    class Locator {
      scroll<ElementType extends Element>(
        this: Locator<ElementType>,
        options?: Readonly<LocatorScrollOptions>
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                               Description
  ----------- ---------------------------------- -------------
  this        Locator <ElementType>              
  options     Readonly< LocatorScrollOptions >   (Optional)

Returns:

Promise<void>

# api LocatorScrollOptions interface #

LocatorScrollOptions interface

Signature: 

    export interface LocatorScrollOptions extends ActionOptions


Extends: ActionOptions

Properties 

  Property     Modifiers   Type     Description   Default
  ------------ ----------- -------- ------------- ---------
  scrollLeft    optional   number                 
  scrollTop     optional   number                 

# api Locator.setEnsureElementIsInTheViewport() method #

Locator.setEnsureElementIsInTheViewport() method

Signature: 

    class Locator {
      setEnsureElementIsInTheViewport<ElementType extends Element>(
        this: Locator<ElementType>,
        value: boolean
      ): Locator<ElementType>;
    }


Parameters 

  Parameter   Type                    Description
  ----------- ----------------------- -------------
  this        Locator <ElementType>   
  value       boolean                 

Returns:

Locator <ElementType>

# api Locator.setTimeout() method #

Locator.setTimeout() method

Signature: 

    class Locator {
      setTimeout(timeout: number): Locator<T>;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- -------------
  timeout     number   

Returns:

Locator <T>

# api Locator.setVisibility() method #

Locator.setVisibility() method

Signature: 

    class Locator {
      setVisibility<NodeType extends Node>(
        this: Locator<NodeType>,
        visibility: VisibilityOption
      ): Locator<NodeType>;
    }


Parameters 

  Parameter    Type                 Description
  ------------ -------------------- -------------
  this         Locator <NodeType>   
  visibility   VisibilityOption     

Returns:

Locator <NodeType>

# api Locator.setWaitForEnabled() method #

Locator.setWaitForEnabled() method

Signature: 

    class Locator {
      setWaitForEnabled<NodeType extends Node>(
        this: Locator<NodeType>,
        value: boolean
      ): Locator<NodeType>;
    }


Parameters 

  Parameter   Type                 Description
  ----------- -------------------- -------------
  this        Locator <NodeType>   
  value       boolean              

Returns:

Locator <NodeType>

# api Locator.setWaitForStableBoundingBox() method #

Locator.setWaitForStableBoundingBox() method

Signature: 

    class Locator {
      setWaitForStableBoundingBox<ElementType extends Element>(
        this: Locator<ElementType>,
        value: boolean
      ): Locator<ElementType>;
    }


Parameters 

  Parameter   Type                    Description
  ----------- ----------------------- -------------
  this        Locator <ElementType>   
  value       boolean                 

Returns:

Locator <ElementType>

# api Locator.waitHandle() method #

Locator.waitHandle() method

Waits for the locator to get a handle from the page.

Signature: 

    class Locator {
      waitHandle(options?: Readonly<ActionOptions>): Promise<HandleFor<T>>;
    }


Parameters 

  Parameter   Type                        Description
  ----------- --------------------------- -------------
  options     Readonly< ActionOptions >   (Optional)

Returns:

Promise< HandleFor <T>>

# api Locator.wait() method #

Locator.wait() method

Waits for the locator to get the serialized value from the page.

Note this requires the value to be JSON-serializable.

Signature: 

    class Locator {
      wait(options?: Readonly<ActionOptions>): Promise<T>;
    }


Parameters 

  Parameter   Type                        Description
  ----------- --------------------------- -------------
  options     Readonly< ActionOptions >   (Optional)

Returns:

Promise<T>

# api LowerCasePaperFormat type #

LowerCasePaperFormat type

Signature: 

    export type LowerCasePaperFormat =
      | 'letter'
      | 'legal'
      | 'tabloid'
      | 'ledger'
      | 'a0'
      | 'a1'
      | 'a2'
      | 'a3'
      | 'a4'
      | 'a5'
      | 'a6';


# api Mapper type #

Mapper type

Signature: 

    export type Mapper<From, To> = (value: From) => Awaitable<To>;


References: Awaitable

# api MediaFeature interface #

MediaFeature interface

Signature: 

    export interface MediaFeature


Properties 

  Property   Modifiers   Type     Description   Default
  ---------- ----------- -------- ------------- ---------
  name                   string                 
  value                  string                 

# api Metrics interface #

Metrics interface

Signature: 

    export interface Metrics


Properties 

  Property              Modifiers   Type     Description   Default
  --------------------- ----------- -------- ------------- ---------
  Documents              optional   number                 
  Frames                 optional   number                 
  JSEventListeners       optional   number                 
  JSHeapTotalSize        optional   number                 
  JSHeapUsedSize         optional   number                 
  LayoutCount            optional   number                 
  LayoutDuration         optional   number                 
  Nodes                  optional   number                 
  RecalcStyleCount       optional   number                 
  RecalcStyleDuration    optional   number                 
  ScriptDuration         optional   number                 
  TaskDuration           optional   number                 
  Timestamp              optional   number                 

# api MouseButton variable #

MouseButton variable

Enum of valid mouse buttons.

Signature: 

    MouseButton: Readonly<{
      Left: 'left';
      Right: 'right';
      Middle: 'middle';
      Back: 'back';
      Forward: 'forward';
    }>;


# api Mouse.click() method #

Mouse.click() method

Shortcut for  mouse.move ,  mouse.down and  mouse.up .

Signature: 

    class Mouse {
      abstract click(
        x: number,
        y: number,
        options?: Readonly<MouseClickOptions>
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                            Description
  ----------- ------------------------------- -------------------------------------------
  x           number                          Horizontal position of the mouse.
  y           number                          Vertical position of the mouse.
  options     Readonly< MouseClickOptions >   (Optional) Options to configure behavior.

Returns:

Promise<void>

# api MouseClickOptions interface #

MouseClickOptions interface

Signature: 

    export interface MouseClickOptions extends MouseOptions


Extends: MouseOptions

Properties 

  Property   Modifiers   Type     Description                                                      Default
  ---------- ----------- -------- ---------------------------------------------------------------- ---------
  count       optional   number   Number of clicks to perform.                                      1
  delay       optional   number   Time (in ms) to delay the mouse release after the mouse press.   

# api Mouse.down() method #

Mouse.down() method

Presses the mouse.

Signature: 

    class Mouse {
      abstract down(options?: Readonly<MouseOptions>): Promise<void>;
    }


Parameters 

  Parameter   Type                       Description
  ----------- -------------------------- -------------------------------------------
  options     Readonly< MouseOptions >   (Optional) Options to configure behavior.

Returns:

Promise<void>

# api Mouse.dragAndDrop() method #

Mouse.dragAndDrop() method

Performs a drag, dragenter, dragover, and drop in sequence.

Signature: 

    class Mouse {
      abstract dragAndDrop(
        start: Point,
        target: Point,
        options?: {
          delay?: number;
        }
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                  Description
  ----------- --------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------
  start       Point                 point to drag from
  target      Point                 point to drop on
  options     { delay?: number; }   (Optional) An object of options. Accepts delay which, if specified, is the time to wait between  dragover and  drop in milliseconds. Defaults to 0.

Returns:

Promise<void>

# api Mouse.dragEnter() method #

Mouse.dragEnter() method

Dispatches a  dragenter event.

Signature: 

    class Mouse {
      abstract dragEnter(
        target: Point,
        data: Protocol.Input.DragData
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- ------------------------------------------------
  target      Point                     point for emitting  dragenter event
  data        Protocol.Input.DragData   drag data containing items and operations mask

Returns:

Promise<void>

# api Mouse.drag() method #

Mouse.drag() method

Dispatches a  drag event.

Signature: 

    class Mouse {
      abstract drag(start: Point, target: Point): Promise<Protocol.Input.DragData>;
    }


Parameters 

  Parameter   Type    Description
  ----------- ------- -------------------------
  start       Point   starting point for drag
  target      Point   point to drag to

Returns:

Promise<Protocol.Input.DragData>

# api Mouse.dragOver() method #

Mouse.dragOver() method

Dispatches a  dragover event.

Signature: 

    class Mouse {
      abstract dragOver(
        target: Point,
        data: Protocol.Input.DragData
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- ------------------------------------------------
  target      Point                     point for emitting  dragover event
  data        Protocol.Input.DragData   drag data containing items and operations mask

Returns:

Promise<void>

# api Mouse.drop() method #

Mouse.drop() method

Performs a dragenter, dragover, and drop in sequence.

Signature: 

    class Mouse {
      abstract drop(target: Point, data: Protocol.Input.DragData): Promise<void>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- ------------------------------------------------
  target      Point                     point to drop on
  data        Protocol.Input.DragData   drag data containing items and operations mask

Returns:

Promise<void>

# api Mouse class #

Mouse class

The Mouse class operates in main-frame CSS pixels relative to the
top-left corner of the viewport.

Signature: 

    export declare abstract class Mouse


Remarks 

Every  page object has its own Mouse, accessible with [  page.mouse
](#pagemouse).

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  Mouse class.

Example 1 

    // Using ‘page.mouse’ to trace a 100x100 square.
    await page.mouse.move(0, 0);
    await page.mouse.down();
    await page.mouse.move(0, 100);
    await page.mouse.move(100, 100);
    await page.mouse.move(100, 0);
    await page.mouse.move(0, 0);
    await page.mouse.up();


Note : The mouse events trigger synthetic  MouseEvent s. This means that
it does not fully replicate the functionality of what a normal user
would be able to do with their mouse.

For example, dragging and selecting text is not possible using
 page.mouse . Instead, you can use the
`DocumentOrShadowRoot.getSelection()` functionality implemented in the
platform.

Example 2 

For example, if you want to select all content between nodes:

    await page.evaluate(
      (from, to) => {
        const selection = from.getRootNode().getSelection();
        const range = document.createRange();
        range.setStartBefore(from);
        range.setEndAfter(to);
        selection.removeAllRanges();
        selection.addRange(range);
      },
      fromJSHandle,
      toJSHandle
    );


If you then would want to copy-paste your selection, you can use the
clipboard api:

    // The clipboard api does not allow you to copy, unless the tab is focused.
    await page.bringToFront();
    await page.evaluate(() => {
      // Copy the selected content to the clipboard
      document.execCommand('copy');
      // Obtain the content of the clipboard as a string
      return navigator.clipboard.readText();
    });


Note : If you want access to the clipboard API, you have to give it
permission to do so:

    await browser
      .defaultBrowserContext()
      .overridePermissions('<your origin>', ['clipboard-read', 'clipboard-write']);


Methods 

  Method                                Modifiers   Description
  ------------------------------------- ----------- -------------------------------------------------------------------------------
  click(x, y, options)                              Shortcut for  mouse.move ,  mouse.down and  mouse.up .
  down(options)                                     Presses the mouse.
  drag(start, target)                               Dispatches a  drag event.
  dragAndDrop(start, target, options)               Performs a drag, dragenter, dragover, and drop in sequence.
  dragEnter(target, data)                           Dispatches a  dragenter event.
  dragOver(target, data)                            Dispatches a  dragover event.
  drop(target, data)                                Performs a dragenter, dragover, and drop in sequence.
  move(x, y, options)                               Moves the mouse to the given coordinate.
  reset()                                           Resets the mouse to the default state: No buttons pressed; position at (0,0).
  up(options)                                       Releases the mouse.
  wheel(options)                                    Dispatches a  mousewheel event.

# api Mouse.move() method #

Mouse.move() method

Moves the mouse to the given coordinate.

Signature: 

    class Mouse {
      abstract move(
        x: number,
        y: number,
        options?: Readonly<MouseMoveOptions>
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                           Description
  ----------- ------------------------------ -------------------------------------------
  x           number                         Horizontal position of the mouse.
  y           number                         Vertical position of the mouse.
  options     Readonly< MouseMoveOptions >   (Optional) Options to configure behavior.

Returns:

Promise<void>

# api MouseMoveOptions interface #

MouseMoveOptions interface

Signature: 

    export interface MouseMoveOptions


Properties 

  Property   Modifiers   Type     Description                                                                                  Default
  ---------- ----------- -------- -------------------------------------------------------------------------------------------- ---------
  steps       optional   number   Determines the number of movements to make from the current mouse position to the new one.    1

# api MouseOptions interface #

MouseOptions interface

Signature: 

    export interface MouseOptions


Properties 

  Property     Modifiers   Type          Description                                                                              Default
  ------------ ----------- ------------- ---------------------------------------------------------------------------------------- ---------
  button        optional   MouseButton   Determines which button will be pressed.                                                  'left'
  clickCount    optional   number        Determines the click count for the mouse event. This does not perform multiple clicks.    1

# api Mouse.reset() method #

Mouse.reset() method

Resets the mouse to the default state: No buttons pressed; position at
(0,0).

Signature: 

    class Mouse {
      abstract reset(): Promise<void>;
    }


Returns:

Promise<void>

# api Mouse.up() method #

Mouse.up() method

Releases the mouse.

Signature: 

    class Mouse {
      abstract up(options?: Readonly<MouseOptions>): Promise<void>;
    }


Parameters 

  Parameter   Type                       Description
  ----------- -------------------------- -------------------------------------------
  options     Readonly< MouseOptions >   (Optional) Options to configure behavior.

Returns:

Promise<void>

# api Mouse.wheel() method #

Mouse.wheel() method

Dispatches a  mousewheel event.

Signature: 

    class Mouse {
      abstract wheel(options?: Readonly<MouseWheelOptions>): Promise<void>;
    }


Parameters 

  Parameter   Type                            Description
  ----------- ------------------------------- -------------------------------------------
  options     Readonly< MouseWheelOptions >   (Optional) Optional:  MouseWheelOptions .

Returns:

Promise<void>

Example 

An example of zooming into an element:

    await page.goto(
      'https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366'
    );

    const elem = await page.$('div');
    const boundingBox = await elem.boundingBox();
    await page.mouse.move(
      boundingBox.x + boundingBox.width / 2,
      boundingBox.y + boundingBox.height / 2
    );

    await page.mouse.wheel({deltaY: -100});


# api MouseWheelOptions interface #

MouseWheelOptions interface

Signature: 

    export interface MouseWheelOptions


Properties 

  Property   Modifiers   Type     Description   Default
  ---------- ----------- -------- ------------- ---------
  deltaX      optional   number                 
  deltaY      optional   number                 

# api Moveable interface #

Moveable interface

Signature: 

    export interface Moveable


Methods 

  Method   Description
  -------- ----------------------------------
  move()   Moves the resource when 'using'.

# api Moveable.move() method #

Moveable.move() method

Moves the resource when 'using'.

Signature: 

    interface Moveable {
      move(): this;
    }


Returns:

this

# api NetworkConditions interface #

NetworkConditions interface

Signature: 

    export interface NetworkConditions


Properties 

  Property   Modifiers   Type     Description                Default
  ---------- ----------- -------- -------------------------- ---------
  download               number   Download speed (bytes/s)   
  latency                number   Latency (ms)               
  upload                 number   Upload speed (bytes/s)     

# api NewDocumentScriptEvaluation interface #

NewDocumentScriptEvaluation interface

Signature: 

    export interface NewDocumentScriptEvaluation


Properties 

  Property     Modifiers   Type     Description   Default
  ------------ ----------- -------- ------------- ---------
  identifier               string                 

# api NodeFor type #

NodeFor type

Signature: 

    export type NodeFor<ComplexSelector extends string> =
      TypeSelectorOfComplexSelector<ComplexSelector> extends infer TypeSelector
        ? TypeSelector extends
            | keyof HTMLElementTagNameMap
            | keyof SVGElementTagNameMap
          ? ElementFor<TypeSelector>
          : Element
        : never;


References: ElementFor

# api Offset interface #

Offset interface

Signature: 

    export interface Offset


Properties 

  Property   Modifiers   Type     Description                                                                           Default
  ---------- ----------- -------- ------------------------------------------------------------------------------------- ---------
  x                      number   x-offset for the clickable point relative to the top-left corner of the border box.   
  y                      number   y-offset for the clickable point relative to the top-left corner of the border box.   

# api Page.addScriptTag() method #

Page.addScriptTag() method

Adds a  <script> tag into the page with the desired URL or content.

Signature: 

    class Page {
      addScriptTag(
        options: FrameAddScriptTagOptions
      ): Promise<ElementHandle<HTMLScriptElement>>;
    }


Parameters 

  Parameter   Type                       Description
  ----------- -------------------------- -------------------------
  options     FrameAddScriptTagOptions   Options for the script.

Returns:

Promise< ElementHandle <HTMLScriptElement>>

An element handle to the injected  <script> element.

Remarks 

Shortcut for page.mainFrame().addScriptTag(options) .

# api Page.addStyleTag() method #

Page.addStyleTag() method

Signature: 

    class Page {
      addStyleTag(
        options: FrameAddStyleTagOptions
      ): Promise<ElementHandle<HTMLLinkElement>>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- -------------
  options     FrameAddStyleTagOptions   

Returns:

Promise< ElementHandle <HTMLLinkElement>>

# api Page.addStyleTag() method #

Page.addStyleTag() method

Adds a  <link rel="stylesheet"> tag into the page with the desired URL
or a  <style type="text/css"> tag with the content.

Shortcut for page.mainFrame().addStyleTag(options) .

Signature: 

    class Page {
      addStyleTag(
        options: Omit<FrameAddStyleTagOptions, 'url'>
      ): Promise<ElementHandle<HTMLStyleElement>>;
    }


Parameters 

  Parameter   Type                                     Description
  ----------- ---------------------------------------- -------------
  options     Omit< FrameAddStyleTagOptions , 'url'>   

Returns:

Promise< ElementHandle <HTMLStyleElement>>

An element handle to the injected  <link> or  <style> element.

# api Page.authenticate() method #

Page.authenticate() method

Provide credentials for  HTTP authentication .

Signature: 

    class Page {
      abstract authenticate(credentials: Credentials): Promise<void>;
    }


Parameters 

  Parameter     Type          Description
  ------------- ------------- -------------
  credentials   Credentials   

Returns:

Promise<void>

Remarks 

To disable authentication, pass  null .

# api Page.bringToFront() method #

Page.bringToFront() method

Brings page to front (activates tab).

Signature: 

    class Page {
      abstract bringToFront(): Promise<void>;
    }


Returns:

Promise<void>

# api Page.browserContext() method #

Page.browserContext() method

Get the browser context that the page belongs to.

Signature: 

    class Page {
      abstract browserContext(): BrowserContext;
    }


Returns:

BrowserContext

# api Page.browser() method #

Page.browser() method

Get the browser the page belongs to.

Signature: 

    class Page {
      abstract browser(): Browser;
    }


Returns:

Browser

# api Page.click() method #

Page.click() method

This method fetches an element with  selector , scrolls it into view if
needed, and then uses Page.mouse to click in the center of the element.
If there's no element matching  selector , the method throws an error.

Signature: 

    class Page {
      click(selector: string, options?: Readonly<ClickOptions>): Promise<void>;
    }


Parameters 

  Parameter   Type                       Description
  ----------- -------------------------- ---------------------------------------------------------------------------------------------------------------------------------
  selector    string                     A  selector to search for element to click. If there are multiple elements satisfying the  selector , the first will be clicked
  options     Readonly< ClickOptions >   (Optional)  Object

Returns:

Promise<void>

Promise which resolves when the element matching  selector is
successfully clicked. The Promise will be rejected if there is no
element matching  selector .

Remarks 

Bear in mind that if  click() triggers a navigation event and there's a
separate  page.waitForNavigation() promise to be resolved, you may end
up with a race condition that yields unexpected results. The correct
pattern for click and wait for navigation is the following:

    const [response] = await Promise.all([
      page.waitForNavigation(waitOptions),
      page.click(selector, clickOptions),
    ]);


Shortcut for page.mainFrame().click(selector[, options]) .

# api Page.close() method #

Page.close() method

Signature: 

    class Page {
      abstract close(options?: {runBeforeUnload?: boolean}): Promise<void>;
    }


Parameters 

  Parameter   Type                             Description
  ----------- -------------------------------- -------------
  options     { runBeforeUnload?: boolean; }   (Optional)

Returns:

Promise<void>

# api Page.content() method #

Page.content() method

The full HTML contents of the page, including the DOCTYPE.

Signature: 

    class Page {
      content(): Promise<string>;
    }


Returns:

Promise<string>

# api Page.cookies() method #

Page.cookies() method

If no URLs are specified, this method returns cookies for the current
page URL. If URLs are specified, only cookies for those URLs are
returned.

Signature: 

    class Page {
      abstract cookies(...urls: string[]): Promise<Cookie[]>;
    }


Parameters 

  Parameter   Type       Description
  ----------- ---------- -------------
  urls        string[]   

Returns:

Promise< Cookie []>

# api Page.createCDPSession() method #

Page.createCDPSession() method

Creates a Chrome Devtools Protocol session attached to the page.

Signature: 

    class Page {
      abstract createCDPSession(): Promise<CDPSession>;
    }


Returns:

Promise< CDPSession >

# api Page.createPDFStream() method #

Page.createPDFStream() method

Generates a PDF of the page with the  print CSS media type.

Signature: 

    class Page {
      abstract createPDFStream(
        options?: PDFOptions
      ): Promise<ReadableStream<Uint8Array>>;
    }


Parameters 

  Parameter   Type         Description
  ----------- ------------ --------------------------------------------
  options     PDFOptions   (Optional) options for generating the PDF.

Returns:

Promise<ReadableStream<Uint8Array>>

Remarks 

To generate a PDF with the  screen media type, call
`page.emulateMediaType('screen')` before calling  page.pdf() .

By default,  page.pdf() generates a pdf with modified colors for
printing. Use the `-webkit-print-color-adjust` property to force
rendering of exact colors.

# api Page.deleteCookie() method #

Page.deleteCookie() method

Signature: 

    class Page {
      abstract deleteCookie(...cookies: DeleteCookiesRequest[]): Promise<void>;
    }


Parameters 

  Parameter   Type                      Description
  ----------- ------------------------- -------------
  cookies     DeleteCookiesRequest []   

Returns:

Promise<void>

# api Page.emulateCPUThrottling() method #

Page.emulateCPUThrottling() method

Enables CPU throttling to emulate slow CPUs.

Signature: 

    class Page {
      abstract emulateCPUThrottling(factor: number | null): Promise<void>;
    }


Parameters 

  Parameter   Type            Description
  ----------- --------------- ------------------------------------------------------------
  factor      number | null   slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).

Returns:

Promise<void>

# api Page.emulate() method #

Page.emulate() method

Emulates a given device's metrics and user agent.

To aid emulation, Puppeteer provides a list of known devices that can be
via KnownDevices .

Signature: 

    class Page {
      emulate(device: Device): Promise<void>;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- -------------
  device      Device   

Returns:

Promise<void>

Remarks 

This method is a shortcut for calling two methods: Page.setUserAgent()
and Page.setViewport() .

This method will resize the page. A lot of websites don't expect phones
to change size, so you should emulate before navigating to the page.

Example 

    import {KnownDevices} from 'puppeteer';
    const iPhone = KnownDevices['iPhone 6'];

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.emulate(iPhone);
      await page.goto('https://www.google.com');
      // other actions...
      await browser.close();
    })();


# api Page.emulateIdleState() method #

Page.emulateIdleState() method

Emulates the idle state. If no arguments set, clears idle state
emulation.

Signature: 

    class Page {
      abstract emulateIdleState(overrides?: {
        isUserActive: boolean;
        isScreenUnlocked: boolean;
      }): Promise<void>;
    }


Parameters 

  Parameter   Type                                                    Description
  ----------- ------------------------------------------------------- ---------------------------------------------------------------
  overrides   { isUserActive: boolean; isScreenUnlocked: boolean; }   (Optional) Mock idle state. If not set, clears idle overrides

Returns:

Promise<void>

Example 

    // set idle emulation
    await page.emulateIdleState({isUserActive: true, isScreenUnlocked: false});

    // do some checks here
    ...

    // clear idle emulation
    await page.emulateIdleState();


# api Page.emulateMediaFeatures() method #

Page.emulateMediaFeatures() method

Signature: 

    class Page {
      abstract emulateMediaFeatures(features?: MediaFeature[]): Promise<void>;
    }


Parameters 

  Parameter   Type              Description
  ----------- ----------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  features    MediaFeature []   (Optional)  <?Array<Object>> Given an array of media feature objects, emulates CSS media features on the page. Each media feature object must have the following properties:

Returns:

Promise<void>

Example 

    await page.emulateMediaFeatures([
      {name: 'prefers-color-scheme', value: 'dark'},
    ]);
    await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);
    // → true
    await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);
    // → false

    await page.emulateMediaFeatures([
      {name: 'prefers-reduced-motion', value: 'reduce'},
    ]);
    await page.evaluate(
      () => matchMedia('(prefers-reduced-motion: reduce)').matches
    );
    // → true
    await page.evaluate(
      () => matchMedia('(prefers-reduced-motion: no-preference)').matches
    );
    // → false

    await page.emulateMediaFeatures([
      {name: 'prefers-color-scheme', value: 'dark'},
      {name: 'prefers-reduced-motion', value: 'reduce'},
    ]);
    await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);
    // → true
    await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);
    // → false
    await page.evaluate(
      () => matchMedia('(prefers-reduced-motion: reduce)').matches
    );
    // → true
    await page.evaluate(
      () => matchMedia('(prefers-reduced-motion: no-preference)').matches
    );
    // → false

    await page.emulateMediaFeatures([{name: 'color-gamut', value: 'p3'}]);
    await page.evaluate(() => matchMedia('(color-gamut: srgb)').matches);
    // → true
    await page.evaluate(() => matchMedia('(color-gamut: p3)').matches);
    // → true
    await page.evaluate(() => matchMedia('(color-gamut: rec2020)').matches);
    // → false


# api Page.emulateMediaType() method #

Page.emulateMediaType() method

Signature: 

    class Page {
      abstract emulateMediaType(type?: string): Promise<void>;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- ---------------------------------------------------------------------------------------------------------------------------------------------------------
  type        string   (Optional) Changes the CSS media type of the page. The only allowed values are  screen ,  print and  null . Passing  null disables CSS media emulation.

Returns:

Promise<void>

Example 

    await page.evaluate(() => matchMedia('screen').matches);
    // → true
    await page.evaluate(() => matchMedia('print').matches);
    // → false

    await page.emulateMediaType('print');
    await page.evaluate(() => matchMedia('screen').matches);
    // → false
    await page.evaluate(() => matchMedia('print').matches);
    // → true

    await page.emulateMediaType(null);
    await page.evaluate(() => matchMedia('screen').matches);
    // → true
    await page.evaluate(() => matchMedia('print').matches);
    // → false


# api Page.emulateNetworkConditions() method #

Page.emulateNetworkConditions() method

This does not affect WebSockets and WebRTC PeerConnections (see
https://crbug.com/563644 ). To set the page offline, you can use
Page.setOfflineMode() .

A list of predefined network conditions can be used by importing
PredefinedNetworkConditions .

Signature: 

    class Page {
      abstract emulateNetworkConditions(
        networkConditions: NetworkConditions | null
      ): Promise<void>;
    }


Parameters 

  Parameter           Type                       Description
  ------------------- -------------------------- -----------------------------------------------------
  networkConditions   NetworkConditions | null   Passing  null disables network condition emulation.

Returns:

Promise<void>

Example 

    import {PredefinedNetworkConditions} from 'puppeteer';
    const slow3G = PredefinedNetworkConditions['Slow 3G'];

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.emulateNetworkConditions(slow3G);
      await page.goto('https://www.google.com');
      // other actions...
      await browser.close();
    })();


# api Page.emulateTimezone() method #

Page.emulateTimezone() method

Signature: 

    class Page {
      abstract emulateTimezone(timezoneId?: string): Promise<void>;
    }


Parameters 

  Parameter    Type     Description
  ------------ -------- -------------------------------------------------------------------------------------------------------------------------------------------------------
  timezoneId   string   (Optional) Changes the timezone of the page. See ICU’s metaZones.txt for a list of supported timezone IDs. Passing  null disables timezone emulation.

Returns:

Promise<void>

# api Page.emulateVisionDeficiency() method #

Page.emulateVisionDeficiency() method

Simulates the given vision deficiency on the page.

Signature: 

    class Page {
      abstract emulateVisionDeficiency(
        type?: Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type']
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                                                            Description
  ----------- --------------------------------------------------------------- ---------------------------------------------------------------------
  type        Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type']   (Optional) the type of deficiency to simulate, or  'none' to reset.

Returns:

Promise<void>

Example 

    import puppeteer from 'puppeteer';

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.goto('https://v8.dev/blog/10-years');

      await page.emulateVisionDeficiency('achromatopsia');
      await page.screenshot({path: 'achromatopsia.png'});

      await page.emulateVisionDeficiency('deuteranopia');
      await page.screenshot({path: 'deuteranopia.png'});

      await page.emulateVisionDeficiency('blurredVision');
      await page.screenshot({path: 'blurred-vision.png'});

      await browser.close();
    })();


# api Page.$$eval() method #

Page.$$eval() method

This method runs  Array.from(document.querySelectorAll(selector)) within
the page and passes the result as the first argument to the
 pageFunction .

Signature: 

    class Page {
      $$eval<
        Selector extends string,
        Params extends unknown[],
        Func extends EvaluateFuncWith<
          Array<NodeFor<Selector>>,
          Params
        > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,
      >(
        selector: Selector,
        pageFunction: Func | string,
        ...args: Params
      ): Promise<Awaited<ReturnType<Func>>>;
    }


Parameters 

  Parameter      Type            Description
  -------------- --------------- --------------------------------------------------------------------------------------------------------------------------------------------------------
  selector       Selector        the selector to query for
  pageFunction   Func | string   the function to be evaluated in the page context. Will be passed the result of  Array.from(document.querySelectorAll(selector)) as its first argument.
  args           Params          any additional arguments to pass through to  pageFunction .

Returns:

Promise<Awaited<ReturnType<Func>>>

The result of calling  pageFunction . If it returns an element it is
wrapped in an ElementHandle , else the raw value itself is returned.

Remarks 

If  pageFunction returns a promise  $$eval will wait for the promise to
resolve and then return its value.

Example 1 

    // get the amount of divs on the page
    const divCount = await page.$$eval('div', divs => divs.length);

    // get the text content of all the `.options` elements:
    const options = await page.$$eval('div > span.options', options => {
      return options.map(option => option.textContent);
    });


If you are using TypeScript, you may have to provide an explicit type to
the first argument of the  pageFunction . By default it is typed as
 Element[] , but you may need to provide a more specific sub-type:

Example 2 

    // if you don't provide HTMLInputElement here, TS will error
    // as `value` is not on `Element`
    await page.$$eval('input', (elements: HTMLInputElement[]) => {
      return elements.map(e => e.value);
    });


The compiler should be able to infer the return type from the
 pageFunction you provide. If it is unable to, you can use the generic
type to tell the compiler what return type you expect from  $$eval :

Example 3 

    // The compiler can infer the return type in this case, but if it can't
    // or if you want to be more explicit, provide it as the generic type.
    const allInputValues = await page.$$eval<string[]>(
      'input',
      (elements: HTMLInputElement[]) => elements.map(e => e.textContent)
    );


# api Page.$eval() method #

Page.$eval() method

This method runs  document.querySelector within the page and passes the
result as the first argument to the  pageFunction .

Signature: 

    class Page {
      $eval<
        Selector extends string,
        Params extends unknown[],
        Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<
          NodeFor<Selector>,
          Params
        >,
      >(
        selector: Selector,
        pageFunction: Func | string,
        ...args: Params
      ): Promise<Awaited<ReturnType<Func>>>;
    }


Parameters 

  Parameter      Type            Description
  -------------- --------------- -----------------------------------------------------------------------------------------------------------------------------------------
  selector       Selector        the selector to query for
  pageFunction   Func | string   the function to be evaluated in the page context. Will be passed the result of  document.querySelector(selector) as its first argument.
  args           Params          any additional arguments to pass through to  pageFunction .

Returns:

Promise<Awaited<ReturnType<Func>>>

The result of calling  pageFunction . If it returns an element it is
wrapped in an ElementHandle , else the raw value itself is returned.

Remarks 

If no element is found matching  selector , the method will throw an
error.

If  pageFunction returns a promise  $eval will wait for the promise to
resolve and then return its value.

Example 1 

    const searchValue = await page.$eval('#search', el => el.value);
    const preloadHref = await page.$eval('link[rel=preload]', el => el.href);
    const html = await page.$eval('.main-container', el => el.outerHTML);


If you are using TypeScript, you may have to provide an explicit type to
the first argument of the  pageFunction . By default it is typed as
 Element , but you may need to provide a more specific sub-type:

Example 2 

    // if you don't provide HTMLInputElement here, TS will error
    // as `value` is not on `Element`
    const searchValue = await page.$eval(
      '#search',
      (el: HTMLInputElement) => el.value
    );


The compiler should be able to infer the return type from the
 pageFunction you provide. If it is unable to, you can use the generic
type to tell the compiler what return type you expect from  $eval :

Example 3 

    // The compiler can infer the return type in this case, but if it can't
    // or if you want to be more explicit, provide it as the generic type.
    const searchValue = await page.$eval<string>(
      '#search',
      (el: HTMLInputElement) => el.value
    );


# api Page.evaluateHandle() method #

Page.evaluateHandle() method

Signature: 

    class Page {
      evaluateHandle<
        Params extends unknown[],
        Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
      >(
        pageFunction: Func | string,
        ...args: Params
      ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
    }


Parameters 

  Parameter      Type            Description
  -------------- --------------- --------------------------------------------
  pageFunction   Func | string   a function that is run within the page
  args           Params          arguments to be passed to the pageFunction

Returns:

Promise< HandleFor <Awaited<ReturnType<Func>>>>

Remarks 

The only difference between page.evaluate and  page.evaluateHandle is
that  evaluateHandle will return the value wrapped in an in-page object.

If the function passed to  page.evaluateHandle returns a Promise, the
function will wait for the promise to resolve and return its value.

You can pass a string instead of a function (although functions are
recommended as they are easier to debug and use with TypeScript):

Example 1 

    const aHandle = await page.evaluateHandle('document');


Example 2 

JSHandle instances can be passed as arguments to the  pageFunction :

    const aHandle = await page.evaluateHandle(() => document.body);
    const resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);
    console.log(await resultHandle.jsonValue());
    await resultHandle.dispose();


Most of the time this function returns a JSHandle , but if  pageFunction
returns a reference to an element, you instead get an ElementHandle
back:

Example 3 

    const button = await page.evaluateHandle(() =>
      document.querySelector('button')
    );
    // can call `click` because `button` is an `ElementHandle`
    await button.click();


The TypeScript definitions assume that  evaluateHandle returns a
 JSHandle , but if you know it's going to return an  ElementHandle ,
pass it as the generic argument:

    const button = await page.evaluateHandle<ElementHandle>(...);


# api Page.evaluate() method #

Page.evaluate() method

Evaluates a function in the page's context and returns the result.

If the function passed to  page.evaluate returns a Promise, the function
will wait for the promise to resolve and return its value.

Signature: 

    class Page {
      evaluate<
        Params extends unknown[],
        Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
      >(
        pageFunction: Func | string,
        ...args: Params
      ): Promise<Awaited<ReturnType<Func>>>;
    }


Parameters 

  Parameter      Type            Description
  -------------- --------------- --------------------------------------------
  pageFunction   Func | string   a function that is run within the page
  args           Params          arguments to be passed to the pageFunction

Returns:

Promise<Awaited<ReturnType<Func>>>

the return value of  pageFunction .

Example 1 

    const result = await frame.evaluate(() => {
      return Promise.resolve(8 * 7);
    });
    console.log(result); // prints "56"


You can pass a string instead of a function (although functions are
recommended as they are easier to debug and use with TypeScript):

Example 2 

    const aHandle = await page.evaluate('1 + 2');


To get the best TypeScript experience, you should pass in as the generic
the type of  pageFunction :

    const aHandle = await page.evaluate(() => 2);


Example 3 

ElementHandle instances (including JSHandle s) can be passed as
arguments to the  pageFunction :

    const bodyHandle = await page.$('body');
    const html = await page.evaluate(body => body.innerHTML, bodyHandle);
    await bodyHandle.dispose();


# api Page.evaluateOnNewDocument() method #

Page.evaluateOnNewDocument() method

Adds a function which would be invoked in one of the following
scenarios:

-   whenever the page is navigated

-   whenever the child frame is attached or navigated. In this case, the
    function is invoked in the context of the newly attached frame.

The function is invoked after the document was created but before any of
its scripts were run. This is useful to amend the JavaScript
environment, e.g. to seed  Math.random .

Signature: 

    class Page {
      abstract evaluateOnNewDocument<
        Params extends unknown[],
        Func extends (...args: Params) => unknown = (...args: Params) => unknown,
      >(
        pageFunction: Func | string,
        ...args: Params
      ): Promise<NewDocumentScriptEvaluation>;
    }


Parameters 

  Parameter      Type            Description
  -------------- --------------- ---------------------------------------------
  pageFunction   Func | string   Function to be evaluated in browser context
  args           Params          Arguments to pass to  pageFunction

Returns:

Promise< NewDocumentScriptEvaluation >

Example 

An example of overriding the navigator.languages property before the
page loads:

    // preload.js

    // overwrite the `languages` property to use a custom getter
    Object.defineProperty(navigator, 'languages', {
      get: function () {
        return ['en-US', 'en', 'bn'];
      },
    });

    // In your puppeteer script, assuming the preload.js file is
    // in same folder of our script.
    const preloadFile = fs.readFileSync('./preload.js', 'utf8');
    await page.evaluateOnNewDocument(preloadFile);


# api PageEvent enum #

PageEvent enum

All the events that a page instance may emit.

Signature: 

    export declare const enum PageEvent


Enumeration Members 

+-----------------------+-----------------------+-----------------------+
| Member                | Value                 | Description           |
+=======================+=======================+=======================+
| Close                 |  "close"              | Emitted when the page |
|                       |                       | closes.               |
+-----------------------+-----------------------+-----------------------+
| Console               |  "console"            | Emitted when          |
|                       |                       | JavaScript within the |
|                       |                       | page calls one of     |
|                       |                       | console API methods,  |
|                       |                       | e.g.  console.log or  |
|                       |                       |  console.dir . Also   |
|                       |                       | emitted if the page   |
|                       |                       | throws an error or a  |
|                       |                       | warning.              |
+-----------------------+-----------------------+-----------------------+
| Dialog                |  "dialog"             | Emitted when a        |
|                       |                       | JavaScript dialog     |
|                       |                       | appears, such as      |
|                       |                       |  alert ,  prompt ,    |
|                       |                       |  confirm or           |
|                       |                       |  beforeunload .       |
|                       |                       | Puppeteer can respond |
|                       |                       | to the dialog via     |
|                       |                       | Dialog.accept() or    |
|                       |                       | Dialog.dismiss() .    |
+-----------------------+-----------------------+-----------------------+
| DOMContentLoaded      |  "domcontentloaded"   | Emitted when the      |
|                       |                       | JavaScript            |
|                       |                       | DOMContentLoaded      |
|                       |                       | event is dispatched.  |
+-----------------------+-----------------------+-----------------------+
| Error                 |  "error"              | Emitted when the page |
|                       |                       | crashes. Will contain |
|                       |                       | an  Error .           |
+-----------------------+-----------------------+-----------------------+
| FrameAttached         |  "frameattached"      | Emitted when a frame  |
|                       |                       | is attached. Will     |
|                       |                       | contain a Frame .     |
+-----------------------+-----------------------+-----------------------+
| FrameDetached         |  "framedetached"      | Emitted when a frame  |
|                       |                       | is detached. Will     |
|                       |                       | contain a Frame .     |
+-----------------------+-----------------------+-----------------------+
| FrameNavigated        |  "framenavigated"     | Emitted when a frame  |
|                       |                       | is navigated to a new |
|                       |                       | URL. Will contain a   |
|                       |                       | Frame .               |
+-----------------------+-----------------------+-----------------------+
| Load                  |  "load"               | Emitted when the      |
|                       |                       | JavaScript load event |
|                       |                       | is dispatched.        |
+-----------------------+-----------------------+-----------------------+
| Metrics               |  "metrics"            | Emitted when the      |
|                       |                       | JavaScript code makes |
|                       |                       | a call to             |
|                       |                       |  console.timeStamp .  |
|                       |                       | For the list of       |
|                       |                       | metrics see           |
|                       |                       | page.metrics .        |
+-----------------------+-----------------------+-----------------------+
| PageError             |  "pageerror"          | Emitted when an       |
|                       |                       | uncaught exception    |
|                       |                       | happens within the    |
|                       |                       | page. Contains an     |
|                       |                       |  Error .              |
+-----------------------+-----------------------+-----------------------+
| Popup                 |  "popup"              | Emitted when the page |
|                       |                       | opens a new tab or    |
|                       |                       | window.               |
|                       |                       |                       |
|                       |                       | Contains a Page       |
|                       |                       | corresponding to the  |
|                       |                       | popup window.         |
+-----------------------+-----------------------+-----------------------+
| Request               |  "request"            | Emitted when a page   |
|                       |                       | issues a request and  |
|                       |                       | contains a            |
|                       |                       | HTTPRequest .         |
+-----------------------+-----------------------+-----------------------+
| RequestFailed         |  "requestfailed"      | Emitted when a        |
|                       |                       | request fails, for    |
|                       |                       | example by timing     |
|                       |                       | out.                  |
|                       |                       |                       |
|                       |                       | Contains a            |
|                       |                       | HTTPRequest .         |
+-----------------------+-----------------------+-----------------------+
| RequestFinished       |  "requestfinished"    | Emitted when a        |
|                       |                       | request finishes      |
|                       |                       | successfully.         |
|                       |                       | Contains a            |
|                       |                       | HTTPRequest .         |
+-----------------------+-----------------------+-----------------------+
| R                     |  "re                  | Emitted when a        |
| equestServedFromCache | questservedfromcache" | request ended up      |
|                       |                       | loading from cache.   |
|                       |                       | Contains a            |
|                       |                       | HTTPRequest .         |
+-----------------------+-----------------------+-----------------------+
| Response              |  "response"           | Emitted when a        |
|                       |                       | response is received. |
|                       |                       | Contains a            |
|                       |                       | HTTPResponse .        |
+-----------------------+-----------------------+-----------------------+
| WorkerCreated         |  "workercreated"      | Emitted when a        |
|                       |                       | dedicated WebWorker   |
|                       |                       | is spawned by the     |
|                       |                       | page.                 |
+-----------------------+-----------------------+-----------------------+
| WorkerDestroyed       |  "workerdestroyed"    | Emitted when a        |
|                       |                       | dedicated WebWorker   |
|                       |                       | is destroyed by the   |
|                       |                       | page.                 |
+-----------------------+-----------------------+-----------------------+

# api PageEvents interface #

PageEvents interface

Denotes the objects received by callback functions for page events.

See PageEvent for more detail on the events and when they are emitted.

Signature: 

    export interface PageEvents extends Record<EventType, unknown>


Extends: Record< EventType , unknown>

Properties 

  Property                 Modifiers   Type                                    Description   Default
  ------------------------ ----------- --------------------------------------- ------------- ---------
  close                                undefined                                             
  console                              ConsoleMessage                                        
  dialog                               Dialog                                                
  domcontentloaded                     undefined                                             
  error                                Error                                                 
  frameattached                        Frame                                                 
  framedetached                        Frame                                                 
  framenavigated                       Frame                                                 
  load                                 undefined                                             
  metrics                              { title: string; metrics: Metrics ; }                 
  pageerror                            Error                                                 
  popup                                Page | null                                           
  request                              HTTPRequest                                           
  requestfailed                        HTTPRequest                                           
  requestfinished                      HTTPRequest                                           
  requestservedfromcache               HTTPRequest                                           
  response                             HTTPResponse                                          
  workercreated                        WebWorker                                             
  workerdestroyed                      WebWorker                                             

# api Page.exposeFunction() method #

Page.exposeFunction() method

The method adds a function called  name on the page's  window object.
When called, the function executes  puppeteerFunction in node.js and
returns a  Promise which resolves to the return value of
 puppeteerFunction .

If the puppeteerFunction returns a  Promise , it will be awaited.

[] note

Functions installed via  page.exposeFunction survive navigations.

[] note

Signature: 

    class Page {
      abstract exposeFunction(
        name: string,
        pptrFunction:
          | Function
          | {
              default: Function;
            }
      ): Promise<void>;
    }


Parameters 

  Parameter      Type                                Description
  -------------- ----------------------------------- ----------------------------------------------------------------
  name           string                              Name of the function on the window object
  pptrFunction   Function | { default: Function; }   Callback function which will be called in Puppeteer's context.

Returns:

Promise<void>

Example 1 

An example of adding an  md5 function into the page:

    import puppeteer from 'puppeteer';
    import crypto from 'crypto';

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      page.on('console', msg => console.log(msg.text()));
      await page.exposeFunction('md5', text =>
        crypto.createHash('md5').update(text).digest('hex')
      );
      await page.evaluate(async () => {
        // use window.md5 to compute hashes
        const myString = 'PUPPETEER';
        const myHash = await window.md5(myString);
        console.log(`md5 of ${myString} is ${myHash}`);
      });
      await browser.close();
    })();


Example 2 

An example of adding a  window.readfile function into the page:

    import puppeteer from 'puppeteer';
    import fs from 'fs';

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      page.on('console', msg => console.log(msg.text()));
      await page.exposeFunction('readfile', async filePath => {
        return new Promise((resolve, reject) => {
          fs.readFile(filePath, 'utf8', (err, text) => {
            if (err) reject(err);
            else resolve(text);
          });
        });
      });
      await page.evaluate(async () => {
        // use window.readfile to read contents of a file
        const content = await window.readfile('/etc/hosts');
        console.log(content);
      });
      await browser.close();
    })();


# api Page.focus() method #

Page.focus() method

This method fetches an element with  selector and focuses it. If there's
no element matching  selector , the method throws an error.

Signature: 

    class Page {
      focus(selector: string): Promise<void>;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- -----------------------------------------------------------------------------------------------------------------------
  selector    string   A selector of an element to focus. If there are multiple elements satisfying the selector, the first will be focused.

Returns:

Promise<void>

Promise which resolves when the element matching selector is
successfully focused. The promise will be rejected if there is no
element matching selector.

Remarks 

Shortcut for page.mainFrame().focus(selector) .

# api Page.frames() method #

Page.frames() method

An array of all frames attached to the page.

Signature: 

    class Page {
      abstract frames(): Frame[];
    }


Returns:

Frame []

# api Page.getDefaultTimeout() method #

Page.getDefaultTimeout() method

Maximum time in milliseconds.

Signature: 

    class Page {
      abstract getDefaultTimeout(): number;
    }


Returns:

number

# api Page.goBack() method #

Page.goBack() method

This method navigate to the previous page in history.

Signature: 

    class Page {
      abstract goBack(options?: WaitForOptions): Promise<HTTPResponse | null>;
    }


Parameters 

  Parameter   Type             Description
  ----------- ---------------- ----------------------------------
  options     WaitForOptions   (Optional) Navigation parameters

Returns:

Promise< HTTPResponse | null>

Promise which resolves to the main resource response. In case of
multiple redirects, the navigation will resolve with the response of the
last redirect. If can not go back, resolves to  null .

Remarks 

The argument  options might have the following properties:

-    timeout : Maximum navigation time in milliseconds, defaults to 30
    seconds, pass 0 to disable timeout. The default value can be changed
    by using the Page.setDefaultNavigationTimeout() or
    Page.setDefaultTimeout() methods.

-    waitUntil : When to consider navigation succeeded, defaults to
     load . Given an array of event strings, navigation is considered to
    be successful after all events have been fired. Events can be
    either:
    -  load : consider navigation to be finished when the load event is
    fired.
    -  domcontentloaded : consider navigation to be finished when the
    DOMContentLoaded event is fired.
    -  networkidle0 : consider navigation to be finished when there are
    no more than 0 network connections for at least  500 ms.
    -  networkidle2 : consider navigation to be finished when there are
    no more than 2 network connections for at least  500 ms.

# api Page.goForward() method #

Page.goForward() method

This method navigate to the next page in history.

Signature: 

    class Page {
      abstract goForward(options?: WaitForOptions): Promise<HTTPResponse | null>;
    }


Parameters 

  Parameter   Type             Description
  ----------- ---------------- ---------------------------------
  options     WaitForOptions   (Optional) Navigation Parameter

Returns:

Promise< HTTPResponse | null>

Promise which resolves to the main resource response. In case of
multiple redirects, the navigation will resolve with the response of the
last redirect. If can not go forward, resolves to  null .

Remarks 

The argument  options might have the following properties:

-    timeout : Maximum navigation time in milliseconds, defaults to 30
    seconds, pass 0 to disable timeout. The default value can be changed
    by using the Page.setDefaultNavigationTimeout() or
    Page.setDefaultTimeout() methods.

-    waitUntil : When to consider navigation succeeded, defaults to
     load . Given an array of event strings, navigation is considered to
    be successful after all events have been fired. Events can be
    either:
    -  load : consider navigation to be finished when the load event is
    fired.
    -  domcontentloaded : consider navigation to be finished when the
    DOMContentLoaded event is fired.
    -  networkidle0 : consider navigation to be finished when there are
    no more than 0 network connections for at least  500 ms.
    -  networkidle2 : consider navigation to be finished when there are
    no more than 2 network connections for at least  500 ms.

# api Page.goto() method #

Page.goto() method

Navigates the page to the given  url .

Signature: 

    class Page {
      goto(url: string, options?: GoToOptions): Promise<HTTPResponse | null>;
    }


Parameters 

  Parameter   Type          Description
  ----------- ------------- ------------------------------------------------------------------------
  url         string        URL to navigate page to. The URL should include scheme, e.g.  https://
  options     GoToOptions   (Optional) Options to configure waiting behavior.

Returns:

Promise< HTTPResponse | null>

A promise which resolves to the main resource response. In case of
multiple redirects, the navigation will resolve with the response of the
last redirect.

Exceptions 

If:

-   there's an SSL error (e.g. in case of self-signed certificates). -
    target URL is invalid. - the timeout is exceeded during
    navigation. - the remote server does not respond or is
    unreachable. - the main resource failed to load.

This method will not throw an error when any valid HTTP status code is
returned by the remote server, including 404 "Not Found" and 500
"Internal Server Error". The status code for such responses can be
retrieved by calling HTTPResponse.status() .

Remarks 

Navigation to  about:blank or navigation to the same URL with a
different hash will succeed and return  null .

[] warning

Headless mode doesn't support navigation to a PDF document. See the
upstream issue .

Shortcut for page.mainFrame().goto(url, options) .

# api Page.hover() method #

Page.hover() method

This method fetches an element with  selector , scrolls it into view if
needed, and then uses Page.mouse to hover over the center of the
element. If there's no element matching  selector , the method throws an
error.

Signature: 

    class Page {
      hover(selector: string): Promise<void>;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- -------------------------------------------------------------------------------------------------------------------------------
  selector    string   A selector to search for element to hover. If there are multiple elements satisfying the selector, the first will be hovered.

Returns:

Promise<void>

Promise which resolves when the element matching  selector is
successfully hovered. Promise gets rejected if there's no element
matching  selector .

Remarks 

Shortcut for page.mainFrame().hover(selector) .

# api Page.$() method #

Page.$() method

Runs  document.querySelector within the page. If no element matches the
selector, the return value resolves to  null .

Signature: 

    class Page {
      $<Selector extends string>(
        selector: Selector
      ): Promise<ElementHandle<NodeFor<Selector>> | null>;
    }


Parameters 

  Parameter   Type       Description
  ----------- ---------- -----------------------------------------------------------
  selector    Selector   A  selector to query page for selector to query page for.

Returns:

Promise< ElementHandle < NodeFor <Selector>> | null>

# api Page.$$() method #

Page.$$() method

The method runs  document.querySelectorAll within the page. If no
elements match the selector, the return value resolves to  [] .

Signature: 

    class Page {
      $$<Selector extends string>(
        selector: Selector
      ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;
    }


Parameters 

  Parameter   Type       Description
  ----------- ---------- -------------------------------
  selector    Selector   A  selector to query page for

Returns:

Promise<Array< ElementHandle < NodeFor <Selector>>>>

Remarks 

Shortcut for Page.mainFrame().$$(selector) .

# api Page class #

Page class

Page provides methods to interact with a single tab or extension
background page in the browser.

[] note

One Browser instance might have multiple Page instances.

Signature: 

    export declare abstract class Page extends EventEmitter<PageEvents>


Extends: EventEmitter < PageEvents >

Remarks 

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  Page class.

Example 1 

This example creates a page, navigates it to a URL, and then saves a
screenshot:

    import puppeteer from 'puppeteer';

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.goto('https://example.com');
      await page.screenshot({path: 'screenshot.png'});
      await browser.close();
    })();


The Page class extends from Puppeteer's EventEmitter class and will emit
various events which are documented in the PageEvent enum.

Example 2 

This example logs a message for a single page  load event:

    page.once('load', () => console.log('Page loaded!'));


To unsubscribe from events use the EventEmitter.off() method:

    function logRequest(interceptedRequest) {
      console.log('A request was made:', interceptedRequest.url());
    }
    page.on('request', logRequest);
    // Sometime later...
    page.off('request', logRequest);


Properties 

  Property        Modifiers   Type            Description
  --------------- ----------- --------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  accessibility    readonly   Accessibility   The Accessibility class provides methods for inspecting the browser's accessibility tree. The accessibility tree is used by assistive technology such as screen readers or switches .
  coverage         readonly   Coverage        The Coverage class provides methods to gather information about parts of JavaScript and CSS that were used by the page.
  keyboard         readonly   Keyboard        Keyboard provides an api for managing a virtual keyboard. The high level api is Keyboard.type() , which takes raw characters and generates proper keydown, keypress/input, and keyup events on your page.
  mouse            readonly   Mouse           The Mouse class operates in main-frame CSS pixels relative to the top-left corner of the viewport.
  touchscreen      readonly   Touchscreen     The Touchscreen class exposes touchscreen events.
  tracing          readonly   Tracing         The Tracing class exposes the tracing audit interface.

Methods 

+-----------------------+-----------------------+-----------------------+
| Method                | Modifiers             | Description           |
+=======================+=======================+=======================+
| $(selector)           |                       | Runs                  |
|                       |                       |  d                    |
|                       |                       | ocument.querySelector |
|                       |                       | within the page. If   |
|                       |                       | no element matches    |
|                       |                       | the selector, the     |
|                       |                       | return value resolves |
|                       |                       | to  null .            |
+-----------------------+-----------------------+-----------------------+
| $$(selector)          |                       | The method runs       |
|                       |                       |  docu                 |
|                       |                       | ment.querySelectorAll |
|                       |                       | within the page. If   |
|                       |                       | no elements match the |
|                       |                       | selector, the return  |
|                       |                       | value resolves to  [] |
|                       |                       | .                     |
+-----------------------+-----------------------+-----------------------+
| $$eval(selector,      |                       | This method runs      |
| pageFunction, args)   |                       |  Array                |
|                       |                       | .from(document.queryS |
|                       |                       | electorAll(selector)) |
|                       |                       | within the page and   |
|                       |                       | passes the result as  |
|                       |                       | the first argument to |
|                       |                       | the  pageFunction .   |
+-----------------------+-----------------------+-----------------------+
| $eval(selector,       |                       | This method runs      |
| pageFunction, args)   |                       |  d                    |
|                       |                       | ocument.querySelector |
|                       |                       | within the page and   |
|                       |                       | passes the result as  |
|                       |                       | the first argument to |
|                       |                       | the  pageFunction .   |
+-----------------------+-----------------------+-----------------------+
| addScriptTag(options) |                       | Adds a  <script> tag  |
|                       |                       | into the page with    |
|                       |                       | the desired URL or    |
|                       |                       | content.              |
+-----------------------+-----------------------+-----------------------+
| addStyleTag(options)  |                       | Adds a                |
|                       |                       |  <l                   |
|                       |                       | ink rel="stylesheet"> |
|                       |                       | tag into the page     |
|                       |                       | with the desired URL  |
|                       |                       | or a                  |
|                       |                       |  <s                   |
|                       |                       | tyle type="text/css"> |
|                       |                       | tag with the content. |
|                       |                       |                       |
|                       |                       | Shortcut for          |
|                       |                       | page.mainFrame()      |
|                       |                       | .addStyleTag(options) |
|                       |                       | .                     |
+-----------------------+-----------------------+-----------------------+
| addStyleTag(options)  |                       |                       |
+-----------------------+-----------------------+-----------------------+
| auth                  |                       | Provide credentials   |
| enticate(credentials) |                       | for                   |
|                       |                       |  HTTP authentication  |
|                       |                       | .                     |
+-----------------------+-----------------------+-----------------------+
| bringToFront()        |                       | Brings page to front  |
|                       |                       | (activates tab).      |
+-----------------------+-----------------------+-----------------------+
| browser()             |                       | Get the browser the   |
|                       |                       | page belongs to.      |
+-----------------------+-----------------------+-----------------------+
| browserContext()      |                       | Get the browser       |
|                       |                       | context that the page |
|                       |                       | belongs to.           |
+-----------------------+-----------------------+-----------------------+
| click(selector,       |                       | This method fetches   |
| options)              |                       | an element with       |
|                       |                       |  selector , scrolls   |
|                       |                       | it into view if       |
|                       |                       | needed, and then uses |
|                       |                       | Page.mouse to click   |
|                       |                       | in the center of the  |
|                       |                       | element. If there's   |
|                       |                       | no element matching   |
|                       |                       |  selector , the       |
|                       |                       | method throws an      |
|                       |                       | error.                |
+-----------------------+-----------------------+-----------------------+
| close(options)        |                       |                       |
+-----------------------+-----------------------+-----------------------+
| content()             |                       | The full HTML         |
|                       |                       | contents of the page, |
|                       |                       | including the         |
|                       |                       | DOCTYPE.              |
+-----------------------+-----------------------+-----------------------+
| cookies(urls)         |                       | If no URLs are        |
|                       |                       | specified, this       |
|                       |                       | method returns        |
|                       |                       | cookies for the       |
|                       |                       | current page URL. If  |
|                       |                       | URLs are specified,   |
|                       |                       | only cookies for      |
|                       |                       | those URLs are        |
|                       |                       | returned.             |
+-----------------------+-----------------------+-----------------------+
| createCDPSession()    |                       | Creates a Chrome      |
|                       |                       | Devtools Protocol     |
|                       |                       | session attached to   |
|                       |                       | the page.             |
+-----------------------+-----------------------+-----------------------+
| cre                   |                       | Generates a PDF of    |
| atePDFStream(options) |                       | the page with the     |
|                       |                       |  print CSS media      |
|                       |                       | type.                 |
+-----------------------+-----------------------+-----------------------+
| deleteCookie(cookies) |                       |                       |
+-----------------------+-----------------------+-----------------------+
| emulate(device)       |                       | Emulates a given      |
|                       |                       | device's metrics and  |
|                       |                       | user agent.           |
|                       |                       |                       |
|                       |                       | To aid emulation,     |
|                       |                       | Puppeteer provides a  |
|                       |                       | list of known devices |
|                       |                       | that can be via       |
|                       |                       | KnownDevices .        |
+-----------------------+-----------------------+-----------------------+
| emulate               |                       | Enables CPU           |
| CPUThrottling(factor) |                       | throttling to emulate |
|                       |                       | slow CPUs.            |
+-----------------------+-----------------------+-----------------------+
| emulat                |                       | Emulates the idle     |
| eIdleState(overrides) |                       | state. If no          |
|                       |                       | arguments set, clears |
|                       |                       | idle state emulation. |
+-----------------------+-----------------------+-----------------------+
| emulateMe             |                       |                       |
| diaFeatures(features) |                       |                       |
+-----------------------+-----------------------+-----------------------+
| e                     |                       |                       |
| mulateMediaType(type) |                       |                       |
+-----------------------+-----------------------+-----------------------+
| e                     |                       | This does not affect  |
| mulateNetworkConditio |                       | WebSockets and WebRTC |
| ns(networkConditions) |                       | PeerConnections (see  |
|                       |                       | htt                   |
|                       |                       | ps://crbug.com/563644 |
|                       |                       | ). To set the page    |
|                       |                       | offline, you can use  |
|                       |                       | Page.setOfflineMode() |
|                       |                       | .                     |
|                       |                       |                       |
|                       |                       | A list of predefined  |
|                       |                       | network conditions    |
|                       |                       | can be used by        |
|                       |                       | importing             |
|                       |                       | Predef                |
|                       |                       | inedNetworkConditions |
|                       |                       | .                     |
+-----------------------+-----------------------+-----------------------+
| emulat                |                       |                       |
| eTimezone(timezoneId) |                       |                       |
+-----------------------+-----------------------+-----------------------+
| emulateV              |                       | Simulates the given   |
| isionDeficiency(type) |                       | vision deficiency on  |
|                       |                       | the page.             |
+-----------------------+-----------------------+-----------------------+
| e                     |                       | Evaluates a function  |
| valuate(pageFunction, |                       | in the page's context |
| args)                 |                       | and returns the       |
|                       |                       | result.               |
|                       |                       |                       |
|                       |                       | If the function       |
|                       |                       | passed to             |
|                       |                       |  page.evaluate        |
|                       |                       | returns a Promise,    |
|                       |                       | the function will     |
|                       |                       | wait for the promise  |
|                       |                       | to resolve and return |
|                       |                       | its value.            |
+-----------------------+-----------------------+-----------------------+
| evaluat               |                       |                       |
| eHandle(pageFunction, |                       |                       |
| args)                 |                       |                       |
+-----------------------+-----------------------+-----------------------+
| evaluateOnNewD        |                       | Adds a function which |
| ocument(pageFunction, |                       | would be invoked in   |
| args)                 |                       | one of the following  |
|                       |                       | scenarios:            |
|                       |                       |                       |
|                       |                       | - whenever the page   |
|                       |                       | is navigated          |
|                       |                       |                       |
|                       |                       | - whenever the child  |
|                       |                       | frame is attached or  |
|                       |                       | navigated. In this    |
|                       |                       | case, the function is |
|                       |                       | invoked in the        |
|                       |                       | context of the newly  |
|                       |                       | attached frame.       |
|                       |                       |                       |
|                       |                       | The function is       |
|                       |                       | invoked after the     |
|                       |                       | document was created  |
|                       |                       | but before any of its |
|                       |                       | scripts were run.     |
|                       |                       | This is useful to     |
|                       |                       | amend the JavaScript  |
|                       |                       | environment, e.g. to  |
|                       |                       | seed  Math.random .   |
+-----------------------+-----------------------+-----------------------+
| exposeFunction(name,  |                       | The method adds a     |
| pptrFunction)         |                       | function called  name |
|                       |                       | on the page's  window |
|                       |                       | object. When called,  |
|                       |                       | the function executes |
|                       |                       |  puppeteerFunction in |
|                       |                       | node.js and returns a |
|                       |                       |  Promise which        |
|                       |                       | resolves to the       |
|                       |                       | return value of       |
|                       |                       |  puppeteerFunction .  |
|                       |                       |                       |
|                       |                       | If the                |
|                       |                       | puppeteerFunction     |
|                       |                       | returns a  Promise ,  |
|                       |                       | it will be awaited.   |
|                       |                       |                       |
|                       |                       | :::note               |
|                       |                       |                       |
|                       |                       | Functions installed   |
|                       |                       | via                   |
|                       |                       |  page.exposeFunction  |
|                       |                       | survive navigations.  |
|                       |                       |                       |
|                       |                       | :::note               |
+-----------------------+-----------------------+-----------------------+
| focus(selector)       |                       | This method fetches   |
|                       |                       | an element with       |
|                       |                       |  selector and focuses |
|                       |                       | it. If there's no     |
|                       |                       | element matching      |
|                       |                       |  selector , the       |
|                       |                       | method throws an      |
|                       |                       | error.                |
+-----------------------+-----------------------+-----------------------+
| frames()              |                       | An array of all       |
|                       |                       | frames attached to    |
|                       |                       | the page.             |
+-----------------------+-----------------------+-----------------------+
| getDefaultTimeout()   |                       | Maximum time in       |
|                       |                       | milliseconds.         |
+-----------------------+-----------------------+-----------------------+
| goBack(options)       |                       | This method navigate  |
|                       |                       | to the previous page  |
|                       |                       | in history.           |
+-----------------------+-----------------------+-----------------------+
| goForward(options)    |                       | This method navigate  |
|                       |                       | to the next page in   |
|                       |                       | history.              |
+-----------------------+-----------------------+-----------------------+
| goto(url, options)    |                       | Navigates the page to |
|                       |                       | the given  url .      |
+-----------------------+-----------------------+-----------------------+
| hover(selector)       |                       | This method fetches   |
|                       |                       | an element with       |
|                       |                       |  selector , scrolls   |
|                       |                       | it into view if       |
|                       |                       | needed, and then uses |
|                       |                       | Page.mouse to hover   |
|                       |                       | over the center of    |
|                       |                       | the element. If       |
|                       |                       | there's no element    |
|                       |                       | matching  selector ,  |
|                       |                       | the method throws an  |
|                       |                       | error.                |
+-----------------------+-----------------------+-----------------------+
| isClosed()            |                       | Indicates that the    |
|                       |                       | page has been closed. |
+-----------------------+-----------------------+-----------------------+
| isDrag                |                       |  true if drag events  |
| InterceptionEnabled() |                       | are being             |
|                       |                       | intercepted,  false   |
|                       |                       | otherwise.            |
+-----------------------+-----------------------+-----------------------+
| isJavaScriptEnabled() |                       |  true if the page has |
|                       |                       | JavaScript enabled,   |
|                       |                       |  false otherwise.     |
+-----------------------+-----------------------+-----------------------+
| isSe                  |                       |  true if the service  |
| rviceWorkerBypassed() |                       | worker are being      |
|                       |                       | bypassed,  false      |
|                       |                       | otherwise.            |
+-----------------------+-----------------------+-----------------------+
| locator(selector)     |                       | Creates a locator for |
|                       |                       | the provided          |
|                       |                       | selector. See Locator |
|                       |                       | for details and       |
|                       |                       | supported actions.    |
+-----------------------+-----------------------+-----------------------+
| locator(func)         |                       | Creates a locator for |
|                       |                       | the provided          |
|                       |                       | function. See Locator |
|                       |                       | for details and       |
|                       |                       | supported actions.    |
+-----------------------+-----------------------+-----------------------+
| mainFrame()           |                       | The page's main       |
|                       |                       | frame.                |
+-----------------------+-----------------------+-----------------------+
| metrics()             |                       | Object containing     |
|                       |                       | metrics as key/value  |
|                       |                       | pairs.                |
+-----------------------+-----------------------+-----------------------+
| pdf(options)          |                       | Generates a PDF of    |
|                       |                       | the page with the     |
|                       |                       |  print CSS media      |
|                       |                       | type.                 |
+-----------------------+-----------------------+-----------------------+
| queryObj              |                       | This method iterates  |
| ects(prototypeHandle) |                       | the JavaScript heap   |
|                       |                       | and finds all objects |
|                       |                       | with the given        |
|                       |                       | prototype.            |
+-----------------------+-----------------------+-----------------------+
| reload(options)       |                       | Reloads the page.     |
+-----------------------+-----------------------+-----------------------+
| remove                |                       | The method removes a  |
| ExposedFunction(name) |                       | previously added      |
|                       |                       | function via $        |
|                       |                       | Page.exposeFunction() |
|                       |                       | called  name from the |
|                       |                       | page's  window        |
|                       |                       | object.               |
+-----------------------+-----------------------+-----------------------+
| remov                 |                       | Removes script that   |
| eScriptToEvaluateOnNe |                       | injected into page by |
| wDocument(identifier) |                       | Page.e                |
|                       |                       | valuateOnNewDocument. |
+-----------------------+-----------------------+-----------------------+
| screencast(options)   |                       | Captures a screencast |
|                       |                       | of this page .        |
+-----------------------+-----------------------+-----------------------+
| screenshot(options)   |                       | Captures a screenshot |
|                       |                       | of this page .        |
+-----------------------+-----------------------+-----------------------+
| screenshot(options)   |                       |                       |
+-----------------------+-----------------------+-----------------------+
| select(selector,      |                       | Triggers a  change    |
| values)               |                       | and  input event once |
|                       |                       | all the provided      |
|                       |                       | options have been     |
|                       |                       | selected. If there's  |
|                       |                       | no  <select> element  |
|                       |                       | matching  selector ,  |
|                       |                       | the method throws an  |
|                       |                       | error.                |
+-----------------------+-----------------------+-----------------------+
| setBypassCSP(enabled) |                       | Toggles bypassing     |
|                       |                       | page's                |
|                       |                       | Con                   |
|                       |                       | tent-Security-Policy. |
+-----------------------+-----------------------+-----------------------+
| setBypass             |                       | Toggles ignoring of   |
| ServiceWorker(bypass) |                       | service worker for    |
|                       |                       | each request.         |
+-----------------------+-----------------------+-----------------------+
| set                   |                       | Toggles ignoring      |
| CacheEnabled(enabled) |                       | cache for each        |
|                       |                       | request based on the  |
|                       |                       | enabled state. By     |
|                       |                       | default, caching is   |
|                       |                       | enabled.              |
+-----------------------+-----------------------+-----------------------+
| setContent(html,      |                       | Set the content of    |
| options)              |                       | the page.             |
+-----------------------+-----------------------+-----------------------+
| setCookie(cookies)    |                       |                       |
+-----------------------+-----------------------+-----------------------+
| setDefaultNavig       |                       | This setting will     |
| ationTimeout(timeout) |                       | change the default    |
|                       |                       | maximum navigation    |
|                       |                       | time for the          |
|                       |                       | following methods and |
|                       |                       | related shortcuts:    |
|                       |                       |                       |
|                       |                       | -                     |
|                       |                       | page.goBack(options)  |
|                       |                       |                       |
|                       |                       | -                     |
|                       |                       | pa                    |
|                       |                       | ge.goForward(options) |
|                       |                       |                       |
|                       |                       | -                     |
|                       |                       | p                     |
|                       |                       | age.goto(url,options) |
|                       |                       |                       |
|                       |                       | -                     |
|                       |                       | page.reload(options)  |
|                       |                       |                       |
|                       |                       | -                     |
|                       |                       | page.set              |
|                       |                       | Content(html,options) |
|                       |                       |                       |
|                       |                       | -                     |
|                       |                       | page.waitF            |
|                       |                       | orNavigation(options) |
+-----------------------+-----------------------+-----------------------+
| setDe                 |                       |                       |
| faultTimeout(timeout) |                       |                       |
+-----------------------+-----------------------+-----------------------+
| setDrag               |                       |                       |
| Interception(enabled) |                       |                       |
+-----------------------+-----------------------+-----------------------+
| setExtr               |                       | The extra HTTP        |
| aHTTPHeaders(headers) |                       | headers will be sent  |
|                       |                       | with every request    |
|                       |                       | the page initiates.   |
|                       |                       |                       |
|                       |                       | :::tip                |
|                       |                       |                       |
|                       |                       | All HTTP header names |
|                       |                       | are lowercased. (HTTP |
|                       |                       | headers are           |
|                       |                       | case-insensitive, so  |
|                       |                       | this shouldn’t impact |
|                       |                       | your server code.)    |
|                       |                       |                       |
|                       |                       | :::                   |
|                       |                       |                       |
|                       |                       | :::note               |
|                       |                       |                       |
|                       |                       | pag                   |
|                       |                       | e.setExtraHTTPHeaders |
|                       |                       | does not guarantee    |
|                       |                       | the order of headers  |
|                       |                       | in the outgoing       |
|                       |                       | requests.             |
|                       |                       |                       |
|                       |                       | :::                   |
+-----------------------+-----------------------+-----------------------+
| se                    |                       | Sets the page's       |
| tGeolocation(options) |                       | geolocation.          |
+-----------------------+-----------------------+-----------------------+
| setJavaS              |                       |                       |
| criptEnabled(enabled) |                       |                       |
+-----------------------+-----------------------+-----------------------+
| se                    |                       | Sets the network      |
| tOfflineMode(enabled) |                       | connection to         |
|                       |                       | offline.              |
|                       |                       |                       |
|                       |                       | It does not change    |
|                       |                       | the parameters used   |
|                       |                       | in                    |
|                       |                       | Page.emula            |
|                       |                       | teNetworkConditions() |
+-----------------------+-----------------------+-----------------------+
| setReque              |                       | Activating request    |
| stInterception(value) |                       | interception enables  |
|                       |                       | HTTPRequest.abort() , |
|                       |                       | H                     |
|                       |                       | TTPRequest.continue() |
|                       |                       | and                   |
|                       |                       | HTTPRequest.respond() |
|                       |                       | methods. This         |
|                       |                       | provides the          |
|                       |                       | capability to modify  |
|                       |                       | network requests that |
|                       |                       | are made by a page.   |
|                       |                       |                       |
|                       |                       | Once request          |
|                       |                       | interception is       |
|                       |                       | enabled, every        |
|                       |                       | request will stall    |
|                       |                       | unless it's           |
|                       |                       | continued, responded  |
|                       |                       | or aborted; or        |
|                       |                       | completed using the   |
|                       |                       | browser cache.        |
|                       |                       |                       |
|                       |                       | See the Request       |
|                       |                       | interception guide    |
|                       |                       | for more details.     |
+-----------------------+-----------------------+-----------------------+
| se                    |                       |                       |
| tUserAgent(userAgent, |                       |                       |
| userAgentMetadata)    |                       |                       |
+-----------------------+-----------------------+-----------------------+
| setViewport(viewport) |                       |  page.setViewport     |
|                       |                       | will resize the page. |
|                       |                       | A lot of websites     |
|                       |                       | don't expect phones   |
|                       |                       | to change size, so    |
|                       |                       | you should set the    |
|                       |                       | viewport before       |
|                       |                       | navigating to the     |
|                       |                       | page.                 |
|                       |                       |                       |
|                       |                       | In the case of        |
|                       |                       | multiple pages in a   |
|                       |                       | single browser, each  |
|                       |                       | page can have its own |
|                       |                       | viewport size.        |
+-----------------------+-----------------------+-----------------------+
| tap(selector)         |                       | This method fetches   |
|                       |                       | an element with       |
|                       |                       |  selector , scrolls   |
|                       |                       | it into view if       |
|                       |                       | needed, and then uses |
|                       |                       | Page.touchscreen to   |
|                       |                       | tap in the center of  |
|                       |                       | the element. If       |
|                       |                       | there's no element    |
|                       |                       | matching  selector ,  |
|                       |                       | the method throws an  |
|                       |                       | error.                |
+-----------------------+-----------------------+-----------------------+
| target()              |                       | A target this page    |
|                       |                       | was created from.     |
+-----------------------+-----------------------+-----------------------+
| title()               |                       | The page's title      |
+-----------------------+-----------------------+-----------------------+
| type(selector, text,  |                       | Sends a  keydown ,    |
| options)              |                       |  keypress/input , and |
|                       |                       |  keyup event for each |
|                       |                       | character in the      |
|                       |                       | text.                 |
|                       |                       |                       |
|                       |                       | To press a special    |
|                       |                       | key, like  Control or |
|                       |                       |  ArrowDown , use      |
|                       |                       | Keyboard.press() .    |
+-----------------------+-----------------------+-----------------------+
| url()                 |                       | The page's URL.       |
+-----------------------+-----------------------+-----------------------+
| viewport()            |                       | Returns the current   |
|                       |                       | page viewport         |
|                       |                       | settings without      |
|                       |                       | checking the actual   |
|                       |                       | page viewport.        |
|                       |                       |                       |
|                       |                       | This is either the    |
|                       |                       | viewport set with the |
|                       |                       | previous              |
|                       |                       | Page.setViewport()    |
|                       |                       | call or the default   |
|                       |                       | viewport set via      |
|                       |                       | BrowserConnectOp      |
|                       |                       | tions.defaultViewport |
|                       |                       | .                     |
+-----------------------+-----------------------+-----------------------+
| waitFor               |                       | This method is        |
| DevicePrompt(options) |                       | typically coupled     |
|                       |                       | with an action that   |
|                       |                       | triggers a device     |
|                       |                       | request from an api   |
|                       |                       | such as WebBluetooth. |
|                       |                       |                       |
|                       |                       | :::caution            |
|                       |                       |                       |
|                       |                       | This must be called   |
|                       |                       | before the device     |
|                       |                       | request is made. It   |
|                       |                       | will not return a     |
|                       |                       | currently active      |
|                       |                       | device prompt.        |
|                       |                       |                       |
|                       |                       | :::                   |
+-----------------------+-----------------------+-----------------------+
| waitFo                |                       | This method is        |
| rFileChooser(options) |                       | typically coupled     |
|                       |                       | with an action that   |
|                       |                       | triggers file         |
|                       |                       | choosing.             |
|                       |                       |                       |
|                       |                       | :::caution            |
|                       |                       |                       |
|                       |                       | This must be called   |
|                       |                       | before the file       |
|                       |                       | chooser is launched.  |
|                       |                       | It will not return a  |
|                       |                       | currently active file |
|                       |                       | chooser.              |
|                       |                       |                       |
|                       |                       | :::                   |
+-----------------------+-----------------------+-----------------------+
| waitFor               |                       | Waits for a frame     |
| Frame(urlOrPredicate, |                       | matching the given    |
| options)              |                       | conditions to appear. |
+-----------------------+-----------------------+-----------------------+
| waitForF              |                       | Waits for the         |
| unction(pageFunction, |                       | provided function,    |
| options, args)        |                       |  pageFunction , to    |
|                       |                       | return a truthy value |
|                       |                       | when evaluated in the |
|                       |                       | page's context.       |
+-----------------------+-----------------------+-----------------------+
| waitF                 |                       | Waits for the page to |
| orNavigation(options) |                       | navigate to a new URL |
|                       |                       | or to reload. It is   |
|                       |                       | useful when you run   |
|                       |                       | code that will        |
|                       |                       | indirectly cause the  |
|                       |                       | page to navigate.     |
+-----------------------+-----------------------+-----------------------+
| waitFo                |                       | Waits for the network |
| rNetworkIdle(options) |                       | to be idle.           |
+-----------------------+-----------------------+-----------------------+
| waitForRe             |                       |                       |
| quest(urlOrPredicate, |                       |                       |
| options)              |                       |                       |
+-----------------------+-----------------------+-----------------------+
| waitForRes            |                       |                       |
| ponse(urlOrPredicate, |                       |                       |
| options)              |                       |                       |
+-----------------------+-----------------------+-----------------------+
| wait                  |                       | Wait for the          |
| ForSelector(selector, |                       |  selector to appear   |
| options)              |                       | in page. If at the    |
|                       |                       | moment of calling the |
|                       |                       | method the  selector  |
|                       |                       | already exists, the   |
|                       |                       | method will return    |
|                       |                       | immediately. If the   |
|                       |                       |  selector doesn't     |
|                       |                       | appear after the      |
|                       |                       |  timeout milliseconds |
|                       |                       | of waiting, the       |
|                       |                       | function will throw.  |
+-----------------------+-----------------------+-----------------------+
| workers()             |                       | All of the dedicated  |
|                       |                       | WebWorkers associated |
|                       |                       | with the page.        |
+-----------------------+-----------------------+-----------------------+

# api Page.isClosed() method #

Page.isClosed() method

Indicates that the page has been closed.

Signature: 

    class Page {
      abstract isClosed(): boolean;
    }


Returns:

boolean

# api Page.isDragInterceptionEnabled() method #

Page.isDragInterceptionEnabled() method

  Warning: This API is now obsolete.

  We no longer support intercepting drag payloads. Use the new drag APIs
  found on ElementHandle to drag (or just use the Page.mouse ).

 true if drag events are being intercepted,  false otherwise.

Signature: 

    class Page {
      abstract isDragInterceptionEnabled(): boolean;
    }


Returns:

boolean

# api Page.isJavaScriptEnabled() method #

Page.isJavaScriptEnabled() method

 true if the page has JavaScript enabled,  false otherwise.

Signature: 

    class Page {
      abstract isJavaScriptEnabled(): boolean;
    }


Returns:

boolean

# api Page.isServiceWorkerBypassed() method #

Page.isServiceWorkerBypassed() method

 true if the service worker are being bypassed,  false otherwise.

Signature: 

    class Page {
      abstract isServiceWorkerBypassed(): boolean;
    }


Returns:

boolean

# api Page.locator() method #

Page.locator() method

Creates a locator for the provided function. See Locator for details and
supported actions.

Signature: 

    class Page {
      locator<Ret>(func: () => Awaitable<Ret>): Locator<Ret>;
    }


Parameters 

  Parameter   Type                    Description
  ----------- ----------------------- -------------
  func        () => Awaitable <Ret>   

Returns:

Locator <Ret>

Remarks 

Locators API is experimental and we will not follow semver for breaking
change in the Locators API.

# api Page.locator() method #

Page.locator() method

Creates a locator for the provided selector. See Locator for details and
supported actions.

Signature: 

    class Page {
      locator<Selector extends string>(
        selector: Selector
      ): Locator<NodeFor<Selector>>;
    }


Parameters 

  Parameter   Type       Description
  ----------- ---------- -------------
  selector    Selector   

Returns:

Locator < NodeFor <Selector>>

Remarks 

Locators API is experimental and we will not follow semver for breaking
change in the Locators API.

# api Page.mainFrame() method #

Page.mainFrame() method

The page's main frame.

Signature: 

    class Page {
      abstract mainFrame(): Frame;
    }


Returns:

Frame

Remarks 

Page is guaranteed to have a main frame which persists during
navigations.

# api Page.metrics() method #

Page.metrics() method

Object containing metrics as key/value pairs.

Signature: 

    class Page {
      abstract metrics(): Promise<Metrics>;
    }


Returns:

Promise< Metrics >

-    Timestamp : The timestamp when the metrics sample was taken.

-    Documents : Number of documents in the page.

-    Frames : Number of frames in the page.

-    JSEventListeners : Number of events in the page.

-    Nodes : Number of DOM nodes in the page.

-    LayoutCount : Total number of full or partial page layout.

-    RecalcStyleCount : Total number of page style recalculations.

-    LayoutDuration : Combined durations of all page layouts.

-    RecalcStyleDuration : Combined duration of all page style
    recalculations.

-    ScriptDuration : Combined duration of JavaScript execution.

-    TaskDuration : Combined duration of all tasks performed by the
    browser.

-    JSHeapUsedSize : Used JavaScript heap size.

-    JSHeapTotalSize : Total JavaScript heap size.

Remarks 

All timestamps are in monotonic time: monotonically increasing time in
seconds since an arbitrary point in the past.

# api Page.pdf() method #

Page.pdf() method

Generates a PDF of the page with the  print CSS media type.

Signature: 

    class Page {
      abstract pdf(options?: PDFOptions): Promise<Buffer>;
    }


Parameters 

  Parameter   Type         Description
  ----------- ------------ --------------------------------------------
  options     PDFOptions   (Optional) options for generating the PDF.

Returns:

Promise<Buffer>

Remarks 

To generate a PDF with the  screen media type, call
`page.emulateMediaType('screen')` before calling  page.pdf() .

By default,  page.pdf() generates a pdf with modified colors for
printing. Use the `-webkit-print-color-adjust` property to force
rendering of exact colors.

# api Page.queryObjects() method #

Page.queryObjects() method

This method iterates the JavaScript heap and finds all objects with the
given prototype.

Signature: 

    class Page {
      abstract queryObjects<Prototype>(
        prototypeHandle: JSHandle<Prototype>
      ): Promise<JSHandle<Prototype[]>>;
    }


Parameters 

  Parameter         Type                   Description
  ----------------- ---------------------- -----------------------------------
  prototypeHandle   JSHandle <Prototype>   a handle to the object prototype.

Returns:

Promise< JSHandle <Prototype[]>>

Promise which resolves to a handle to an array of objects with this
prototype.

Example 

    // Create a Map object
    await page.evaluate(() => (window.map = new Map()));
    // Get a handle to the Map object prototype
    const mapPrototype = await page.evaluateHandle(() => Map.prototype);
    // Query all map instances into an array
    const mapInstances = await page.queryObjects(mapPrototype);
    // Count amount of map objects in heap
    const count = await page.evaluate(maps => maps.length, mapInstances);
    await mapInstances.dispose();
    await mapPrototype.dispose();


# api Page.reload() method #

Page.reload() method

Reloads the page.

Signature: 

    class Page {
      abstract reload(options?: WaitForOptions): Promise<HTTPResponse | null>;
    }


Parameters 

  Parameter   Type             Description
  ----------- ---------------- ---------------------------------------------------
  options     WaitForOptions   (Optional) Options to configure waiting behavior.

Returns:

Promise< HTTPResponse | null>

A promise which resolves to the main resource response. In case of
multiple redirects, the navigation will resolve with the response of the
last redirect.

# api Page.removeExposedFunction() method #

Page.removeExposedFunction() method

The method removes a previously added function via $
Page.exposeFunction() called  name from the page's  window object.

Signature: 

    class Page {
      abstract removeExposedFunction(name: string): Promise<void>;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- -------------
  name        string   

Returns:

Promise<void>

# api Page.removeScriptToEvaluateOnNewDocument() method #

Page.removeScriptToEvaluateOnNewDocument() method

Removes script that injected into page by Page.evaluateOnNewDocument.

Signature: 

    class Page {
      abstract removeScriptToEvaluateOnNewDocument(
        identifier: string
      ): Promise<void>;
    }


Parameters 

  Parameter    Type     Description
  ------------ -------- -------------------
  identifier   string   script identifier

Returns:

Promise<void>

# api Page.screencast() method #

Page.screencast() method

Captures a screencast of this page .

Signature: 

    class Page {
      screencast(options?: Readonly<ScreencastOptions>): Promise<ScreenRecorder>;
    }


Parameters 

  Parameter   Type                            Description
  ----------- ------------------------------- --------------------------------------------
  options     Readonly< ScreencastOptions >   (Optional) Configures screencast behavior.

Returns:

Promise< ScreenRecorder >

Remarks 

All recordings will be WebM format using the VP9 video codec. The FPS is
30.

You must have ffmpeg installed on your system.

Example 

Recording a page :

    import puppeteer from 'puppeteer';

    // Launch a browser
    const browser = await puppeteer.launch();

    // Create a new page
    const page = await browser.newPage();

    // Go to your site.
    await page.goto("https://www.example.com");

    // Start recording.
    const recorder = await page.screencast({path: 'recording.webm'});

    // Do something.

    // Stop recording.
    await recorder.stop();

    browser.close();


# api Page.screenshot() method #

Page.screenshot() method

Signature: 

    class Page {
      screenshot(options?: Readonly<ScreenshotOptions>): Promise<Buffer>;
    }


Parameters 

  Parameter   Type                            Description
  ----------- ------------------------------- -------------
  options     Readonly< ScreenshotOptions >   (Optional)

Returns:

Promise<Buffer>

# api Page.screenshot() method #

Page.screenshot() method

Captures a screenshot of this page .

Signature: 

    class Page {
      screenshot(
        options: Readonly<ScreenshotOptions> & {
          encoding: 'base64';
        }
      ): Promise<string>;
    }


Parameters 

  Parameter   Type                                                      Description
  ----------- --------------------------------------------------------- ---------------------------------
  options     Readonly< ScreenshotOptions > & { encoding: 'base64'; }   Configures screenshot behavior.

Returns:

Promise<string>

# api Page.select() method #

Page.select() method

Triggers a  change and  input event once all the provided options have
been selected. If there's no  <select> element matching  selector , the
method throws an error.

Signature: 

    class Page {
      select(selector: string, ...values: string[]): Promise<string[]>;
    }


Parameters 

  Parameter   Type       Description
  ----------- ---------- -----------------------------------------------------------------------------------------------------------------------------------------------------------
  selector    string     A Selector to query the page for
  values      string[]   Values of options to select. If the  <select> has the  multiple attribute, all values are considered, otherwise only the first one is taken into account.

Returns:

Promise<string[]>

Remarks 

Shortcut for page.mainFrame().select()

Example 

    page.select('select#colors', 'blue'); // single selection
    page.select('select#colors', 'red', 'green', 'blue'); // multiple selections


# api Page.setBypassCSP() method #

Page.setBypassCSP() method

Toggles bypassing page's Content-Security-Policy.

Signature: 

    class Page {
      abstract setBypassCSP(enabled: boolean): Promise<void>;
    }


Parameters 

  Parameter   Type      Description
  ----------- --------- ---------------------------------------------------
  enabled     boolean   sets bypassing of page's Content-Security-Policy.

Returns:

Promise<void>

Remarks 

NOTE: CSP bypassing happens at the moment of CSP initialization rather
than evaluation. Usually, this means that  page.setBypassCSP should be
called before navigating to the domain.

# api Page.setBypassServiceWorker() method #

Page.setBypassServiceWorker() method

Toggles ignoring of service worker for each request.

Signature: 

    class Page {
      abstract setBypassServiceWorker(bypass: boolean): Promise<void>;
    }


Parameters 

  Parameter   Type      Description
  ----------- --------- ---------------------------------------------------------
  bypass      boolean   Whether to bypass service worker and load from network.

Returns:

Promise<void>

# api Page.setCacheEnabled() method #

Page.setCacheEnabled() method

Toggles ignoring cache for each request based on the enabled state. By
default, caching is enabled.

Signature: 

    class Page {
      abstract setCacheEnabled(enabled?: boolean): Promise<void>;
    }


Parameters 

  Parameter   Type      Description
  ----------- --------- ---------------------------------------------
  enabled     boolean   (Optional) sets the  enabled state of cache

Returns:

Promise<void>

Default value: 

 true

# api Page.setContent() method #

Page.setContent() method

Set the content of the page.

Signature: 

    class Page {
      setContent(html: string, options?: WaitForOptions): Promise<void>;
    }


Parameters 

  Parameter   Type             Description
  ----------- ---------------- -------------------------------------------------
  html        string           HTML markup to assign to the page.
  options     WaitForOptions   (Optional) Parameters that has some properties.

Returns:

Promise<void>

Remarks 

The parameter  options might have the following options.

-    timeout : Maximum time in milliseconds for resources to load,
    defaults to 30 seconds, pass  0 to disable timeout. The default
    value can be changed by using the Page.setDefaultNavigationTimeout()
    or Page.setDefaultTimeout() methods.

-    waitUntil : When to consider setting markup succeeded, defaults to
     load . Given an array of event strings, setting content is
    considered to be successful after all events have been fired. Events
    can be either:
    -  load : consider setting content to be finished when the  load
    event is fired.
    -  domcontentloaded : consider setting content to be finished when
    the  DOMContentLoaded event is fired.
    -  networkidle0 : consider setting content to be finished when there
    are no more than 0 network connections for at least  500 ms.
    -  networkidle2 : consider setting content to be finished when there
    are no more than 2 network connections for at least  500 ms.

# api Page.setCookie() method #

Page.setCookie() method

Signature: 

    class Page {
      abstract setCookie(...cookies: CookieParam[]): Promise<void>;
    }


Parameters 

  Parameter   Type             Description
  ----------- ---------------- -------------
  cookies     CookieParam []   

Returns:

Promise<void>

Example 

    await page.setCookie(cookieObject1, cookieObject2);


# api Page.setDefaultNavigationTimeout() method #

Page.setDefaultNavigationTimeout() method

This setting will change the default maximum navigation time for the
following methods and related shortcuts:

-   page.goBack(options)

-   page.goForward(options)

-   page.goto(url,options)

-   page.reload(options)

-   page.setContent(html,options)

-   page.waitForNavigation(options)

Signature: 

    class Page {
      abstract setDefaultNavigationTimeout(timeout: number): void;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- ------------------------------------------
  timeout     number   Maximum navigation time in milliseconds.

Returns:

void

# api Page.setDefaultTimeout() method #

Page.setDefaultTimeout() method

Signature: 

    class Page {
      abstract setDefaultTimeout(timeout: number): void;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- -------------------------------
  timeout     number   Maximum time in milliseconds.

Returns:

void

# api Page.setDragInterception() method #

Page.setDragInterception() method

  Warning: This API is now obsolete.

  We no longer support intercepting drag payloads. Use the new drag APIs
  found on ElementHandle to drag (or just use the Page.mouse ).

Signature: 

    class Page {
      abstract setDragInterception(enabled: boolean): Promise<void>;
    }


Parameters 

  Parameter   Type      Description
  ----------- --------- --------------------------------------
  enabled     boolean   Whether to enable drag interception.

Returns:

Promise<void>

# api Page.setExtraHTTPHeaders() method #

Page.setExtraHTTPHeaders() method

The extra HTTP headers will be sent with every request the page
initiates.

[] tip

All HTTP header names are lowercased. (HTTP headers are
case-insensitive, so this shouldn’t impact your server code.)

[] note

page.setExtraHTTPHeaders does not guarantee the order of headers in the
outgoing requests.

Signature: 

    class Page {
      abstract setExtraHTTPHeaders(headers: Record<string, string>): Promise<void>;
    }


Parameters 

  Parameter   Type                     Description
  ----------- ------------------------ ----------------------------------------------------------------------------------------------------------------
  headers     Record<string, string>   An object containing additional HTTP headers to be sent with every request. All header values must be strings.

Returns:

Promise<void>

# api Page.setGeolocation() method #

Page.setGeolocation() method

Sets the page's geolocation.

Signature: 

    class Page {
      abstract setGeolocation(options: GeolocationOptions): Promise<void>;
    }


Parameters 

  Parameter   Type                 Description
  ----------- -------------------- -------------
  options     GeolocationOptions   

Returns:

Promise<void>

Remarks 

Consider using BrowserContext.overridePermissions() to grant permissions
for the page to read its geolocation.

Example 

    await page.setGeolocation({latitude: 59.95, longitude: 30.31667});


# api Page.setJavaScriptEnabled() method #

Page.setJavaScriptEnabled() method

Signature: 

    class Page {
      abstract setJavaScriptEnabled(enabled: boolean): Promise<void>;
    }


Parameters 

  Parameter   Type      Description
  ----------- --------- --------------------------------------------------
  enabled     boolean   Whether or not to enable JavaScript on the page.

Returns:

Promise<void>

Remarks 

NOTE: changing this value won't affect scripts that have already been
run. It will take full effect on the next navigation.

# api Page.setOfflineMode() method #

Page.setOfflineMode() method

Sets the network connection to offline.

It does not change the parameters used in
Page.emulateNetworkConditions()

Signature: 

    class Page {
      abstract setOfflineMode(enabled: boolean): Promise<void>;
    }


Parameters 

  Parameter   Type      Description
  ----------- --------- -------------------------------------------------
  enabled     boolean   When  true , enables offline mode for the page.

Returns:

Promise<void>

# api Page.setRequestInterception() method #

Page.setRequestInterception() method

Activating request interception enables HTTPRequest.abort() ,
HTTPRequest.continue() and HTTPRequest.respond() methods. This provides
the capability to modify network requests that are made by a page.

Once request interception is enabled, every request will stall unless
it's continued, responded or aborted; or completed using the browser
cache.

See the Request interception guide for more details.

Signature: 

    class Page {
      abstract setRequestInterception(value: boolean): Promise<void>;
    }


Parameters 

  Parameter   Type      Description
  ----------- --------- -----------------------------------------
  value       boolean   Whether to enable request interception.

Returns:

Promise<void>

Example 

An example of a naïve request interceptor that aborts all image
requests:

    import puppeteer from 'puppeteer';
    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.setRequestInterception(true);
      page.on('request', interceptedRequest => {
        if (
          interceptedRequest.url().endsWith('.png') ||
          interceptedRequest.url().endsWith('.jpg')
        )
          interceptedRequest.abort();
        else interceptedRequest.continue();
      });
      await page.goto('https://example.com');
      await browser.close();
    })();


# api Page.setUserAgent() method #

Page.setUserAgent() method

Signature: 

    class Page {
      abstract setUserAgent(
        userAgent: string,
        userAgentMetadata?: Protocol.Emulation.UserAgentMetadata
      ): Promise<void>;
    }


Parameters 

  Parameter           Type                                   Description
  ------------------- -------------------------------------- -----------------------------------------
  userAgent           string                                 Specific user agent to use in this page
  userAgentMetadata   Protocol.Emulation.UserAgentMetadata   (Optional)

Returns:

Promise<void>

Promise which resolves when the user agent is set.

# api Page.setViewport() method #

Page.setViewport() method

 page.setViewport will resize the page. A lot of websites don't expect
phones to change size, so you should set the viewport before navigating
to the page.

In the case of multiple pages in a single browser, each page can have
its own viewport size.

Signature: 

    class Page {
      abstract setViewport(viewport: Viewport): Promise<void>;
    }


Parameters 

  Parameter   Type       Description
  ----------- ---------- -------------
  viewport    Viewport   

Returns:

Promise<void>

Remarks 

NOTE: in certain cases, setting viewport will reload the page in order
to set the isMobile or hasTouch properties.

Example 

    const page = await browser.newPage();
    await page.setViewport({
      width: 640,
      height: 480,
      deviceScaleFactor: 1,
    });
    await page.goto('https://example.com');


# api Page.tap() method #

Page.tap() method

This method fetches an element with  selector , scrolls it into view if
needed, and then uses Page.touchscreen to tap in the center of the
element. If there's no element matching  selector , the method throws an
error.

Signature: 

    class Page {
      tap(selector: string): Promise<void>;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- ----------------------------------------------------------------------------------------------------------------------------
  selector    string   A Selector to search for element to tap. If there are multiple elements satisfying the selector, the first will be tapped.

Returns:

Promise<void>

Remarks 

Shortcut for page.mainFrame().tap(selector) .

# api Page.target() method #

Page.target() method

  Warning: This API is now obsolete.

  Use Page.createCDPSession() directly.

A target this page was created from.

Signature: 

    class Page {
      abstract target(): Target;
    }


Returns:

Target

# api Page.title() method #

Page.title() method

The page's title

Signature: 

    class Page {
      title(): Promise<string>;
    }


Returns:

Promise<string>

Remarks 

Shortcut for page.mainFrame().title() .

# api Page.type() method #

Page.type() method

Sends a  keydown ,  keypress/input , and  keyup event for each character
in the text.

To press a special key, like  Control or  ArrowDown , use
Keyboard.press() .

Signature: 

    class Page {
      type(
        selector: string,
        text: string,
        options?: Readonly<KeyboardTypeOptions>
      ): Promise<void>;
    }


Parameters 

  Parameter   Type                              Description
  ----------- --------------------------------- ------------------------------------------------------------------------------------------------------------------------
  selector    string                            A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used.
  text        string                            A text to type into a focused element.
  options     Readonly< KeyboardTypeOptions >   (Optional) have property  delay which is the Time to wait between key presses in milliseconds. Defaults to  0 .

Returns:

Promise<void>

Example 

    await page.type('#mytextarea', 'Hello');
    // Types instantly
    await page.type('#mytextarea', 'World', {delay: 100});
    // Types slower, like a user


# api Page.url() method #

Page.url() method

The page's URL.

Signature: 

    class Page {
      url(): string;
    }


Returns:

string

Remarks 

Shortcut for page.mainFrame().url() .

# api Page.viewport() method #

Page.viewport() method

Returns the current page viewport settings without checking the actual
page viewport.

This is either the viewport set with the previous Page.setViewport()
call or the default viewport set via
BrowserConnectOptions.defaultViewport .

Signature: 

    class Page {
      abstract viewport(): Viewport | null;
    }


Returns:

Viewport | null

# api Page.waitForDevicePrompt() method #

Page.waitForDevicePrompt() method

This method is typically coupled with an action that triggers a device
request from an api such as WebBluetooth.

[] caution

This must be called before the device request is made. It will not
return a currently active device prompt.

Signature: 

    class Page {
      abstract waitForDevicePrompt(
        options?: WaitTimeoutOptions
      ): Promise<DeviceRequestPrompt>;
    }


Parameters 

  Parameter   Type                 Description
  ----------- -------------------- -------------
  options     WaitTimeoutOptions   (Optional)

Returns:

Promise< DeviceRequestPrompt >

Example 

    const [devicePrompt] = Promise.all([
      page.waitForDevicePrompt(),
      page.click('#connect-bluetooth'),
    ]);
    await devicePrompt.select(
      await devicePrompt.waitForDevice(({name}) => name.includes('My Device'))
    );


# api Page.waitForFileChooser() method #

Page.waitForFileChooser() method

This method is typically coupled with an action that triggers file
choosing.

[] caution

This must be called before the file chooser is launched. It will not
return a currently active file chooser.

Signature: 

    class Page {
      abstract waitForFileChooser(
        options?: WaitTimeoutOptions
      ): Promise<FileChooser>;
    }


Parameters 

  Parameter   Type                 Description
  ----------- -------------------- -------------
  options     WaitTimeoutOptions   (Optional)

Returns:

Promise< FileChooser >

Remarks 

In the "headful" browser, this method results in the native file picker
dialog  not showing up for the user.

Example 

The following example clicks a button that issues a file chooser and
then responds with  /tmp/myfile.pdf as if a user has selected this file.

    const [fileChooser] = await Promise.all([
      page.waitForFileChooser(),
      page.click('#upload-file-button'),
      // some button that triggers file selection
    ]);
    await fileChooser.accept(['/tmp/myfile.pdf']);


# api Page.waitForFrame() method #

Page.waitForFrame() method

Waits for a frame matching the given conditions to appear.

Signature: 

    class Page {
      waitForFrame(
        urlOrPredicate: string | ((frame: Frame) => Awaitable<boolean>),
        options?: WaitTimeoutOptions
      ): Promise<Frame>;
    }


Parameters 

  Parameter        Type                                                Description
  ---------------- --------------------------------------------------- -------------
  urlOrPredicate   string | ((frame: Frame ) => Awaitable <boolean>)   
  options          WaitTimeoutOptions                                  (Optional)

Returns:

Promise< Frame >

Example 

    const frame = await page.waitForFrame(async frame => {
      return frame.name() === 'Test';
    });


# api Page.waitForFunction() method #

Page.waitForFunction() method

Waits for the provided function,  pageFunction , to return a truthy
value when evaluated in the page's context.

Signature: 

    class Page {
      waitForFunction<
        Params extends unknown[],
        Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
      >(
        pageFunction: Func | string,
        options?: FrameWaitForFunctionOptions,
        ...args: Params
      ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
    }


Parameters 

  Parameter      Type                          Description
  -------------- ----------------------------- ------------------------------------------------------------------------------
  pageFunction   Func | string                 Function to be evaluated in browser context until it returns a truthy value.
  options        FrameWaitForFunctionOptions   (Optional) Options for configuring waiting behavior.
  args           Params                        

Returns:

Promise< HandleFor <Awaited<ReturnType<Func>>>>

Example 1 

Page.waitForFunction() can be used to observe a viewport size change:

    import puppeteer from 'puppeteer';
    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      const watchDog = page.waitForFunction('window.innerWidth < 100');
      await page.setViewport({width: 50, height: 50});
      await watchDog;
      await browser.close();
    })();


Example 2 

Arguments can be passed from Node.js to  pageFunction :

    const selector = '.foo';
    await page.waitForFunction(
      selector => !!document.querySelector(selector),
      {},
      selector
    );


Example 3 

The provided  pageFunction can be asynchronous:

    const username = 'github-username';
    await page.waitForFunction(
      async username => {
        const githubResponse = await fetch(
          `https://api.github.com/users/${username}`
        );
        const githubUser = await githubResponse.json();
        // show the avatar
        const img = document.createElement('img');
        img.src = githubUser.avatar_url;
        // wait 3 seconds
        await new Promise((resolve, reject) => setTimeout(resolve, 3000));
        img.remove();
      },
      {},
      username
    );


# api Page.waitForNavigation() method #

Page.waitForNavigation() method

Waits for the page to navigate to a new URL or to reload. It is useful
when you run code that will indirectly cause the page to navigate.

Signature: 

    class Page {
      waitForNavigation(options?: WaitForOptions): Promise<HTTPResponse | null>;
    }


Parameters 

  Parameter   Type             Description
  ----------- ---------------- -----------------------------------------------------------------------------
  options     WaitForOptions   (Optional) Navigation parameters which might have the following properties:

Returns:

Promise< HTTPResponse | null>

A  Promise which resolves to the main resource response.

-   In case of multiple redirects, the navigation will resolve with the
    response of the last redirect. - In case of navigation to a
    different anchor or navigation due to History API usage, the
    navigation will resolve with  null .

Remarks 

Usage of the History API to change the URL is considered a navigation.

Example 

    const [response] = await Promise.all([
      page.waitForNavigation(), // The promise resolves after navigation has finished
      page.click('a.my-link'), // Clicking the link will indirectly cause a navigation
    ]);


# api Page.waitForNetworkIdle() method #

Page.waitForNetworkIdle() method

Waits for the network to be idle.

Signature: 

    class Page {
      waitForNetworkIdle(options?: WaitForNetworkIdleOptions): Promise<void>;
    }


Parameters 

  Parameter   Type                        Description
  ----------- --------------------------- ---------------------------------------------------
  options     WaitForNetworkIdleOptions   (Optional) Options to configure waiting behavior.

Returns:

Promise<void>

A promise which resolves once the network is idle.

# api Page.waitForRequest() method #

Page.waitForRequest() method

Signature: 

    class Page {
      waitForRequest(
        urlOrPredicate: string | AwaitablePredicate<HTTPRequest>,
        options?: WaitTimeoutOptions
      ): Promise<HTTPRequest>;
    }


Parameters 

  Parameter        Type                                          Description
  ---------------- --------------------------------------------- ----------------------------------------
  urlOrPredicate   string | AwaitablePredicate < HTTPRequest >   A URL or predicate to wait for
  options          WaitTimeoutOptions                            (Optional) Optional waiting parameters

Returns:

Promise< HTTPRequest >

Promise which resolves to the matched request

Remarks 

Optional Waiting Parameters have:

-    timeout : Maximum wait time in milliseconds, defaults to  30
    seconds, pass  0 to disable the timeout. The default value can be
    changed by using the Page.setDefaultTimeout() method.

Example 

    const firstRequest = await page.waitForRequest('https://example.com/resource');
    const finalRequest = await page.waitForRequest(
      request => request.url() === 'https://example.com'
    );
    return finalRequest.response()?.ok();


# api Page.waitForResponse() method #

Page.waitForResponse() method

Signature: 

    class Page {
      waitForResponse(
        urlOrPredicate: string | AwaitablePredicate<HTTPResponse>,
        options?: WaitTimeoutOptions
      ): Promise<HTTPResponse>;
    }


Parameters 

  Parameter        Type                                           Description
  ---------------- ---------------------------------------------- ----------------------------------------
  urlOrPredicate   string | AwaitablePredicate < HTTPResponse >   A URL or predicate to wait for.
  options          WaitTimeoutOptions                             (Optional) Optional waiting parameters

Returns:

Promise< HTTPResponse >

Promise which resolves to the matched response.

Remarks 

Optional Parameter have:

-    timeout : Maximum wait time in milliseconds, defaults to  30
    seconds, pass  0 to disable the timeout. The default value can be
    changed by using the Page.setDefaultTimeout() method.

Example 

    const firstResponse = await page.waitForResponse(
      'https://example.com/resource'
    );
    const finalResponse = await page.waitForResponse(
      response =>
        response.url() === 'https://example.com' && response.status() === 200
    );
    const finalResponse = await page.waitForResponse(async response => {
      return (await response.text()).includes('<html>');
    });
    return finalResponse.ok();


# api Page.waitForSelector() method #

Page.waitForSelector() method

Wait for the  selector to appear in page. If at the moment of calling
the method the  selector already exists, the method will return
immediately. If the  selector doesn't appear after the  timeout
milliseconds of waiting, the function will throw.

Signature: 

    class Page {
      waitForSelector<Selector extends string>(
        selector: Selector,
        options?: WaitForSelectorOptions
      ): Promise<ElementHandle<NodeFor<Selector>> | null>;
    }


Parameters 

  Parameter   Type                     Description
  ----------- ------------------------ ----------------------------------------
  selector    Selector                 A selector of an element to wait for
  options     WaitForSelectorOptions   (Optional) Optional waiting parameters

Returns:

Promise< ElementHandle < NodeFor <Selector>> | null>

Promise which resolves when element specified by selector string is
added to DOM. Resolves to  null if waiting for hidden:  true and
selector is not found in DOM.

Remarks 

The optional Parameter in Arguments  options are:

-    visible : A boolean wait for element to be present in DOM and to be
    visible, i.e. to not have  display: none or  visibility: hidden CSS
    properties. Defaults to  false .

-    hidden : Wait for element to not be found in the DOM or to be
    hidden, i.e. have  display: none or  visibility: hidden CSS
    properties. Defaults to  false .

-    timeout : maximum time to wait for in milliseconds. Defaults to
     30000 (30 seconds). Pass  0 to disable timeout. The default value
    can be changed by using the Page.setDefaultTimeout() method.

Example 

This method works across navigations:

    import puppeteer from 'puppeteer';
    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      let currentURL;
      page
        .waitForSelector('img')
        .then(() => console.log('First URL with image: ' + currentURL));
      for (currentURL of [
        'https://example.com',
        'https://google.com',
        'https://bbc.com',
      ]) {
        await page.goto(currentURL);
      }
      await browser.close();
    })();


# api Page.workers() method #

Page.workers() method

All of the dedicated WebWorkers associated with the page.

Signature: 

    class Page {
      abstract workers(): WebWorker[];
    }


Returns:

WebWorker []

Remarks 

This does not contain ServiceWorkers

# api PaperFormat type #

PaperFormat type

All the valid paper format types when printing a PDF.

Signature: 

    export type PaperFormat =
      | Uppercase<LowerCasePaperFormat>
      | Capitalize<LowerCasePaperFormat>
      | LowerCasePaperFormat;


References: LowerCasePaperFormat

Remarks 

The sizes of each format are as follows:

-    Letter : 8.5in x 11in

-    Legal : 8.5in x 14in

-    Tabloid : 11in x 17in

-    Ledger : 17in x 11in

-    A0 : 33.1in x 46.8in

-    A1 : 23.4in x 33.1in

-    A2 : 16.54in x 23.4in

-    A3 : 11.7in x 16.54in

-    A4 : 8.27in x 11.7in

-    A5 : 5.83in x 8.27in

-    A6 : 4.13in x 5.83in

# api PDFMargin interface #

PDFMargin interface

Signature: 

    export interface PDFMargin


Properties 

  Property   Modifiers   Type              Description   Default
  ---------- ----------- ----------------- ------------- ---------
  bottom      optional   string | number                 
  left        optional   string | number                 
  right       optional   string | number                 
  top         optional   string | number                 

# api PDFOptions interface #

PDFOptions interface

Valid options to configure PDF generation via Page.pdf() .

Signature: 

    export interface PDFOptions


Properties 

+-------------+-------------+-------------+-------------+-------------+
| Property    | Modifiers   | Type        | Description | Default     |
+=============+=============+=============+=============+=============+
| displayH    |  optional   | boolean     | Whether to  |  false      |
| eaderFooter |             |             | show the    |             |
|             |             |             | header and  |             |
|             |             |             | footer.     |             |
+-------------+-------------+-------------+-------------+-------------+
| foo         |  optional   | string      | HTML        |             |
| terTemplate |             |             | template    |             |
|             |             |             | for the     |             |
|             |             |             | print       |             |
|             |             |             | footer. Has |             |
|             |             |             | the same    |             |
|             |             |             | constraints |             |
|             |             |             | and support |             |
|             |             |             | for special |             |
|             |             |             | classes as  |             |
|             |             |             | PDF         |             |
|             |             |             | Options.hea |             |
|             |             |             | derTemplate |             |
|             |             |             | .           |             |
+-------------+-------------+-------------+-------------+-------------+
| format      |  optional   | PaperFormat |             |  letter .   |
+-------------+-------------+-------------+-------------+-------------+
| hea         |  optional   | string      | HTML        |             |
| derTemplate |             |             | template    |             |
|             |             |             | for the     |             |
|             |             |             | print       |             |
|             |             |             | header.     |             |
|             |             |             | Should be   |             |
|             |             |             | valid HTML  |             |
|             |             |             | with the    |             |
|             |             |             | following   |             |
|             |             |             | classes     |             |
|             |             |             | used to     |             |
|             |             |             | inject      |             |
|             |             |             | values into |             |
|             |             |             | them:       |             |
|             |             |             |             |             |
|             |             |             | -  date     |             |
|             |             |             | formatted   |             |
|             |             |             | print date  |             |
|             |             |             |             |             |
|             |             |             | -  title    |             |
|             |             |             | document    |             |
|             |             |             | title       |             |
|             |             |             |             |             |
|             |             |             | -  url      |             |
|             |             |             | document    |             |
|             |             |             | location    |             |
|             |             |             |             |             |
|             |             |             | -           |             |
|             |             |             |  pageNumber |             |
|             |             |             | current     |             |
|             |             |             | page number |             |
|             |             |             |             |             |
|             |             |             | -           |             |
|             |             |             |  totalPages |             |
|             |             |             | total pages |             |
|             |             |             | in the      |             |
|             |             |             | document    |             |
+-------------+-------------+-------------+-------------+-------------+
| height      |  optional   | string |    | Sets the    |             |
|             |             | number      | height of   |             |
|             |             |             | paper. You  |             |
|             |             |             | can pass in |             |
|             |             |             | a number or |             |
|             |             |             | a string    |             |
|             |             |             | with a      |             |
|             |             |             | unit.       |             |
+-------------+-------------+-------------+-------------+-------------+
| landscape   |  optional   | boolean     | Whether to  |  false      |
|             |             |             | print in    |             |
|             |             |             | landscape   |             |
|             |             |             | o           |             |
|             |             |             | rientation. |             |
+-------------+-------------+-------------+-------------+-------------+
| margin      |  optional   | PDFMargin   | Set the PDF |  undefined  |
|             |             |             | margins.    | no margins  |
|             |             |             |             | are set.    |
+-------------+-------------+-------------+-------------+-------------+
| omi         |  optional   | boolean     | Hides       |  false      |
| tBackground |             |             | default     |             |
|             |             |             | white       |             |
|             |             |             | background  |             |
|             |             |             | and allows  |             |
|             |             |             | generating  |             |
|             |             |             | pdfs with   |             |
|             |             |             | tr          |             |
|             |             |             | ansparency. |             |
+-------------+-------------+-------------+-------------+-------------+
| outline     |  optional   | boolean     | Generate    |  false      |
|             |             |             | document    |             |
|             |             |             | outline.    |             |
+-------------+-------------+-------------+-------------+-------------+
| pageRanges  |  optional   | string      | Paper       | The empty   |
|             |             |             | ranges to   | string,     |
|             |             |             | print, e.g. | which means |
|             |             |             |  1-         | all pages   |
|             |             |             | 5, 8, 11-13 | are         |
|             |             |             | .           | printed.    |
+-------------+-------------+-------------+-------------+-------------+
| path        |  optional   | string      | The path to |  undefined  |
|             |             |             | save the    | , which     |
|             |             |             | file to.    | means the   |
|             |             |             |             | PDF will    |
|             |             |             |             | not be      |
|             |             |             |             | written to  |
|             |             |             |             | disk.       |
+-------------+-------------+-------------+-------------+-------------+
| prefer      |  optional   | boolean     | Give any    |  false ,    |
| CSSPageSize |             |             | CSS  @page  | which will  |
|             |             |             | size        | scale the   |
|             |             |             | declared in | content to  |
|             |             |             | the page    | fit the     |
|             |             |             | priority    | paper size. |
|             |             |             | over what   |             |
|             |             |             | is declared |             |
|             |             |             | in the      |             |
|             |             |             |  width or   |             |
|             |             |             |  height or  |             |
|             |             |             |  format     |             |
|             |             |             | option.     |             |
+-------------+-------------+-------------+-------------+-------------+
| prin        |  optional   | boolean     | Set to      |  false      |
| tBackground |             |             |  true to    |             |
|             |             |             | print       |             |
|             |             |             | background  |             |
|             |             |             | graphics.   |             |
+-------------+-------------+-------------+-------------+-------------+
| scale       |  optional   | number      | Scales the  |  1          |
|             |             |             | rendering   |             |
|             |             |             | of the web  |             |
|             |             |             | page.       |             |
|             |             |             | Amount must |             |
|             |             |             | be between  |             |
|             |             |             |  0.1 and  2 |             |
|             |             |             | .           |             |
+-------------+-------------+-------------+-------------+-------------+
| tagged      |  optional   | boolean     | Generate    |  true       |
|             |             |             | tagged      |             |
|             |             |             | (           |             |
|             |             |             | accessible) |             |
|             |             |             | PDF.        |             |
+-------------+-------------+-------------+-------------+-------------+
| timeout     |  optional   | number      | Timeout in  |  30_000     |
|             |             |             | mi          |             |
|             |             |             | lliseconds. |             |
|             |             |             | Pass  0 to  |             |
|             |             |             | disable     |             |
|             |             |             | timeout.    |             |
+-------------+-------------+-------------+-------------+-------------+
| width       |  optional   | string |    | Sets the    |             |
|             |             | number      | width of    |             |
|             |             |             | paper. You  |             |
|             |             |             | can pass in |             |
|             |             |             | a number or |             |
|             |             |             | a string    |             |
|             |             |             | with a      |             |
|             |             |             | unit.       |             |
+-------------+-------------+-------------+-------------+-------------+

# api Permission type #

Permission type

Signature: 

    export type Permission =
      | 'geolocation'
      | 'midi'
      | 'notifications'
      | 'camera'
      | 'microphone'
      | 'background-sync'
      | 'ambient-light-sensor'
      | 'accelerometer'
      | 'gyroscope'
      | 'magnetometer'
      | 'accessibility-events'
      | 'clipboard-read'
      | 'clipboard-write'
      | 'clipboard-sanitized-write'
      | 'payment-handler'
      | 'persistent-storage'
      | 'idle-detection'
      | 'midi-sysex';


# api Point interface #

Point interface

Signature: 

    export interface Point


Properties 

  Property   Modifiers   Type     Description   Default
  ---------- ----------- -------- ------------- ---------
  x                      number                 
  y                      number                 

# api PredefinedNetworkConditions variable #

PredefinedNetworkConditions variable

A list of network conditions to be used with
Page.emulateNetworkConditions() .

Signature: 

    PredefinedNetworkConditions: Readonly<{
      'Slow 3G': NetworkConditions;
      'Fast 3G': NetworkConditions;
    }>;


Example 

    import {PredefinedNetworkConditions} from 'puppeteer';
    const slow3G = PredefinedNetworkConditions['Slow 3G'];

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.emulateNetworkConditions(slow3G);
      await page.goto('https://www.google.com');
      // other actions...
      await browser.close();
    })();


# api Predicate type #

Predicate type

Signature: 

    export type Predicate<From, To extends From = From> =
      | ((value: From) => value is To)
      | ((value: From) => Awaitable<boolean>);


References: Awaitable

# api Product type #

Product type

Supported products.

Signature: 

    export type Product = 'chrome' | 'firefox';


# api ProductLauncher.defaultArgs() method #

ProductLauncher.defaultArgs() method

Signature: 

    class ProductLauncher {
      abstract defaultArgs(object: BrowserLaunchArgumentOptions): string[];
    }


Parameters 

  Parameter   Type                           Description
  ----------- ------------------------------ -------------
  object      BrowserLaunchArgumentOptions   

Returns:

string[]

# api ProductLauncher.executablePath() method #

ProductLauncher.executablePath() method

Signature: 

    class ProductLauncher {
      abstract executablePath(channel?: ChromeReleaseChannel): string;
    }


Parameters 

  Parameter   Type                   Description
  ----------- ---------------------- -------------
  channel     ChromeReleaseChannel   (Optional)

Returns:

string

# api ProductLauncher class #

ProductLauncher class

Describes a launcher - a class that is able to create and launch a
browser instance.

Signature: 

    export declare abstract class ProductLauncher


Remarks 

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  ProductLauncher class.

Properties 

  Property   Modifiers   Type      Description
  ---------- ----------- --------- -------------
  product     readonly   Product   

Methods 

  Method                    Modifiers   Description
  ------------------------- ----------- -------------
  defaultArgs(object)                   
  executablePath(channel)               
  launch(options)                       

# api ProductLauncher.launch() method #

ProductLauncher.launch() method

Signature: 

    class ProductLauncher {
      launch(options?: PuppeteerNodeLaunchOptions): Promise<Browser>;
    }


Parameters 

  Parameter   Type                         Description
  ----------- ---------------------------- -------------
  options     PuppeteerNodeLaunchOptions   (Optional)

Returns:

Promise< Browser >

# api ProtocolError class #

ProtocolError class

ProtocolError is emitted whenever there is an error from the protocol.

Signature: 

    export declare class ProtocolError extends PuppeteerError


Extends: PuppeteerError

Properties 

  Property          Modifiers   Type                 Description
  ----------------- ----------- -------------------- -------------
  code               readonly   number | undefined   
  originalMessage    readonly   string               

# api ProtocolLifeCycleEvent type #

ProtocolLifeCycleEvent type

Signature: 

    export type ProtocolLifeCycleEvent =
      | 'load'
      | 'DOMContentLoaded'
      | 'networkIdle'
      | 'networkAlmostIdle';


# api ProtocolType type #

ProtocolType type

Signature: 

    export type ProtocolType = 'cdp' | 'webDriverBiDi';


# api Puppeteer.clearCustomQueryHandlers() method #

Puppeteer.clearCustomQueryHandlers() method

Unregisters all custom query handlers.

Signature: 

    class Puppeteer {
      static clearCustomQueryHandlers(): void;
    }


Returns:

void

# api Puppeteer.connect() method #

Puppeteer.connect() method

This method attaches Puppeteer to an existing browser instance.

Signature: 

    class Puppeteer {
      connect(options: ConnectOptions): Promise<Browser>;
    }


Parameters 

  Parameter   Type             Description
  ----------- ---------------- ----------------------------------------------------
  options     ConnectOptions   Set of configurable options to set on the browser.

Returns:

Promise< Browser >

Promise which resolves to browser instance.

Remarks 

# api Puppeteer.customQueryHandlerNames() method #

Puppeteer.customQueryHandlerNames() method

Gets the names of all custom query handlers.

Signature: 

    class Puppeteer {
      static customQueryHandlerNames(): string[];
    }


Returns:

string[]

# api PuppeteerError class #

PuppeteerError class

The base class for all Puppeteer-specific errors

Signature: 

    export declare class PuppeteerError extends Error


Extends: Error

Remarks 

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  PuppeteerError class.

# api puppeteer variable #

puppeteer variable

Signature: 

    puppeteer: PuppeteerNode;


# api PuppeteerLaunchOptions interface #

PuppeteerLaunchOptions interface

Signature: 

    export interface PuppeteerLaunchOptions extends LaunchOptions, BrowserLaunchArgumentOptions, BrowserConnectOptions


Extends: LaunchOptions , BrowserLaunchArgumentOptions ,
BrowserConnectOptions

Properties 

  Property            Modifiers   Type                      Description   Default
  ------------------- ----------- ------------------------- ------------- ---------
  extraPrefsFirefox    optional   Record<string, unknown>                 
  product              optional   Product                                 

# api PuppeteerLifeCycleEvent type #

PuppeteerLifeCycleEvent type

Signature: 

    export type PuppeteerLifeCycleEvent =
      /**
       * Waits for the 'load' event.
       */
      | 'load'
      /**
       * Waits for the 'DOMContentLoaded' event.
       */
      | 'domcontentloaded'
      /**
       * Waits till there are no more than 0 network connections for at least `500`
       * ms.
       */
      | 'networkidle0'
      /**
       * Waits till there are no more than 2 network connections for at least `500`
       * ms.
       */
      | 'networkidle2';


# api PuppeteerNode.connect() method #

PuppeteerNode.connect() method

This method attaches Puppeteer to an existing browser instance.

Signature: 

    class PuppeteerNode {
      connect(options: ConnectOptions): Promise<Browser>;
    }


Parameters 

  Parameter   Type             Description
  ----------- ---------------- ----------------------------------------------------
  options     ConnectOptions   Set of configurable options to set on the browser.

Returns:

Promise< Browser >

Promise which resolves to browser instance.

# api PuppeteerNode.defaultArgs() method #

PuppeteerNode.defaultArgs() method

Signature: 

    class PuppeteerNode {
      defaultArgs(options?: BrowserLaunchArgumentOptions): string[];
    }


Parameters 

  Parameter   Type                           Description
  ----------- ------------------------------ ---------------------------------------------------------------
  options     BrowserLaunchArgumentOptions   (Optional) Set of configurable options to set on the browser.

Returns:

string[]

The default flags that Chromium will be launched with.

# api PuppeteerNode.executablePath() method #

PuppeteerNode.executablePath() method

The default executable path.

Signature: 

    class PuppeteerNode {
      executablePath(channel?: ChromeReleaseChannel): string;
    }


Parameters 

  Parameter   Type                   Description
  ----------- ---------------------- -------------
  channel     ChromeReleaseChannel   (Optional)

Returns:

string

# api PuppeteerNode class #

PuppeteerNode class

Extends the main Puppeteer class with Node specific behaviour for
fetching and downloading browsers.

If you're using Puppeteer in a Node environment, this is the class
you'll get when you run  require('puppeteer') (or the equivalent ES
 import ).

Signature: 

    export declare class PuppeteerNode extends Puppeteer


Extends: Puppeteer

Remarks 

The most common method to use is launch , which is used to launch and
connect to a new browser instance.

See the main Puppeteer class for methods common to all environments,
such as Puppeteer.connect() .

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  PuppeteerNode class.

Example 

The following is a typical example of using Puppeteer to drive
automation:

    import puppeteer from 'puppeteer';

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.goto('https://www.google.com');
      // other actions...
      await browser.close();
    })();


Once you have created a  page you have access to a large API to interact
with the page, navigate, or find certain elements in that page. The
`page` documentation lists all the available methods.

Properties 

  Property              Modifiers   Type      Description
  --------------------- ----------- --------- ------------------------------------------------------------------------------------------------------------------------------------------------
  defaultProduct         readonly   Product   The name of the browser that will be launched by default. For  puppeteer , this is influenced by your configuration. Otherwise, it's  chrome .
  lastLaunchedProduct    readonly   Product   The name of the browser that was last launched.
  product                readonly   string    

Methods 

+-----------------------+-----------------------+-----------------------+
| Method                | Modifiers             | Description           |
+=======================+=======================+=======================+
| connect(options)      |                       | This method attaches  |
|                       |                       | Puppeteer to an       |
|                       |                       | existing browser      |
|                       |                       | instance.             |
+-----------------------+-----------------------+-----------------------+
| defaultArgs(options)  |                       |                       |
+-----------------------+-----------------------+-----------------------+
| ex                    |                       | The default           |
| ecutablePath(channel) |                       | executable path.      |
+-----------------------+-----------------------+-----------------------+
| launch(options)       |                       | Launches a browser    |
|                       |                       | instance with given   |
|                       |                       | arguments and options |
|                       |                       | when specified.       |
|                       |                       |                       |
|                       |                       | When using with       |
|                       |                       |  puppeteer-core ,     |
|                       |                       | o                     |
|                       |                       | ptions.executablePath |
|                       |                       | or options.channel    |
|                       |                       | must be provided.     |
+-----------------------+-----------------------+-----------------------+
| trimCache()           |                       | Removes all           |
|                       |                       | non-current Firefox   |
|                       |                       | and Chrome binaries   |
|                       |                       | in the cache          |
|                       |                       | directory identified  |
|                       |                       | by the provided       |
|                       |                       | Puppeteer             |
|                       |                       | configuration. The    |
|                       |                       | current browser       |
|                       |                       | version is determined |
|                       |                       | by resolving          |
|                       |                       | PUPPETEER_REVISIONS   |
|                       |                       | from Puppeteer unless |
|                       |                       |  configur             |
|                       |                       | ation.browserRevision |
|                       |                       | is provided.          |
+-----------------------+-----------------------+-----------------------+

# api PuppeteerNode.launch() method #

PuppeteerNode.launch() method

Launches a browser instance with given arguments and options when
specified.

When using with  puppeteer-core , options.executablePath or
options.channel must be provided.

Signature: 

    class PuppeteerNode {
      launch(options?: PuppeteerLaunchOptions): Promise<Browser>;
    }


Parameters 

  Parameter   Type                     Description
  ----------- ------------------------ -----------------------------------------------------
  options     PuppeteerLaunchOptions   (Optional) Options to configure launching behavior.

Returns:

Promise< Browser >

Remarks 

Puppeteer can also be used to control the Chrome browser, but it works
best with the version of Chrome for Testing downloaded by default. There
is no guarantee it will work with any other version. If Google Chrome
(rather than Chrome for Testing) is preferred, a Chrome Canary or Dev
Channel build is suggested. See this article for a description of the
differences between Chromium and Chrome. This article describes some
differences for Linux users. See this doc for the description of Chrome
for Testing.

Example 

You can use options.ignoreDefaultArgs to filter out  --mute-audio from
default arguments:

    const browser = await puppeteer.launch({
      ignoreDefaultArgs: ['--mute-audio'],
    });


# api PuppeteerNodeLaunchOptions type #

PuppeteerNodeLaunchOptions type

Utility type exposed to enable users to define options that can be
passed to  puppeteer.launch without having to list the set of all types.

Signature: 

    export type PuppeteerNodeLaunchOptions = BrowserLaunchArgumentOptions &
      LaunchOptions &
      BrowserConnectOptions;


References: BrowserLaunchArgumentOptions , LaunchOptions ,
BrowserConnectOptions

# api PuppeteerNode.trimCache() method #

PuppeteerNode.trimCache() method

Removes all non-current Firefox and Chrome binaries in the cache
directory identified by the provided Puppeteer configuration. The
current browser version is determined by resolving PUPPETEER_REVISIONS
from Puppeteer unless  configuration.browserRevision is provided.

Signature: 

    class PuppeteerNode {
      trimCache(): Promise<void>;
    }


Returns:

Promise<void>

Remarks 

Note that the method does not check if any other Puppeteer versions
installed on the host that use the same cache directory require the
non-current binaries.

# api Puppeteer.registerCustomQueryHandler() method #

Puppeteer.registerCustomQueryHandler() method

Registers a custom query handler .

Signature: 

    class Puppeteer {
      static registerCustomQueryHandler(
        name: string,
        queryHandler: CustomQueryHandler
      ): void;
    }


Parameters 

  Parameter      Type                 Description
  -------------- -------------------- ------------------------------------------------------------------
  name           string               The name that the custom query handler will be registered under.
  queryHandler   CustomQueryHandler   The custom query handler to register.

Returns:

void

Remarks 

After registration, the handler can be used everywhere where a selector
is expected by prepending the selection string with  <name>/ . The name
is only allowed to consist of lower- and upper case latin letters.

Example 

    puppeteer.registerCustomQueryHandler('text', { … });
    const aHandle = await page.$('text/…');


# api Puppeteer.unregisterCustomQueryHandler() method #

Puppeteer.unregisterCustomQueryHandler() method

Unregisters a custom query handler for a given name.

Signature: 

    class Puppeteer {
      static unregisterCustomQueryHandler(name: string): void;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- -------------
  name        string   

Returns:

void

# api Quad type #

Quad type

Signature: 

    export type Quad = [Point, Point, Point, Point];


References: Point

# api registerCustomQueryHandler() function #

registerCustomQueryHandler() function

  Warning: This API is now obsolete.

  Import Puppeteer and use the static method
  Puppeteer.registerCustomQueryHandler()

Signature: 

    export declare function registerCustomQueryHandler(
      name: string,
      handler: CustomQueryHandler
    ): void;


Parameters 

  Parameter   Type                 Description
  ----------- -------------------- -------------
  name        string               
  handler     CustomQueryHandler   

Returns:

void

# api RemoteAddress interface #

RemoteAddress interface

Signature: 

    export interface RemoteAddress


Properties 

  Property   Modifiers   Type     Description   Default
  ---------- ----------- -------- ------------- ---------
  ip          optional   string                 
  port        optional   number                 

# api ResourceType type #

ResourceType type

Resource types for HTTPRequests as perceived by the rendering engine.

Signature: 

    export type ResourceType = Lowercase<Protocol.Network.ResourceType>;


# api ResponseForRequest interface #

ResponseForRequest interface

Required response data to fulfill a request with.

Signature: 

    export interface ResponseForRequest


Properties 

  Property      Modifiers   Type                      Description                                                       Default
  ------------- ----------- ------------------------- ----------------------------------------------------------------- ---------
  body                      string | Buffer                                                                             
  contentType               string                                                                                      
  headers                   Record<string, unknown>   Optional response headers. All values are converted to strings.   
  status                    number                                                                                      

# api ScreencastOptions interface #

ScreencastOptions interface

Signature: 

    export interface ScreencastOptions


Properties 

+-------------+-------------+-------------+-------------+-------------+
| Property    | Modifiers   | Type        | Description | Default     |
+=============+=============+=============+=============+=============+
| crop        |  optional   | BoundingBox | Specifies   |             |
|             |             |             | the region  |             |
|             |             |             | of the      |             |
|             |             |             | viewport to |             |
|             |             |             | crop.       |             |
+-------------+-------------+-------------+-------------+-------------+
| ffmpegPath  |  optional   | string      | Path to the |             |
|             |             |             | [ffmpeg](   |             |
|             |             |             | https://    |             |
|             |             |             | ffmpeg.org/ |             |
|             |             |             | ).          |             |
|             |             |             |             |             |
|             |             |             | Required if |             |
|             |             |             |  ffmpeg is  |             |
|             |             |             | not in your |             |
|             |             |             | PATH.       |             |
+-------------+-------------+-------------+-------------+-------------+
| path        |  optional   | `${st       | File path   |             |
|             |             | ring}.webm` | to save the |             |
|             |             |             | screencast  |             |
|             |             |             | to.         |             |
+-------------+-------------+-------------+-------------+-------------+
| scale       |  optional   | number      | Scales the  |  1          |
|             |             |             | output      |             |
|             |             |             | video.      |             |
|             |             |             |             |             |
|             |             |             | For         |             |
|             |             |             | example,    |             |
|             |             |             |  0.5 will   |             |
|             |             |             | shrink the  |             |
|             |             |             | width and   |             |
|             |             |             | height of   |             |
|             |             |             | the output  |             |
|             |             |             | video by    |             |
|             |             |             | half.  2    |             |
|             |             |             | will double |             |
|             |             |             | the width   |             |
|             |             |             | and height  |             |
|             |             |             | of the      |             |
|             |             |             | output      |             |
|             |             |             | video.      |             |
+-------------+-------------+-------------+-------------+-------------+
| speed       |  optional   | number      | Specifies   |  1          |
|             |             |             | the speed   |             |
|             |             |             | to record   |             |
|             |             |             | at.         |             |
|             |             |             |             |             |
|             |             |             | For         |             |
|             |             |             | example,    |             |
|             |             |             |  0.5 will   |             |
|             |             |             | slowdown    |             |
|             |             |             | the output  |             |
|             |             |             | video by    |             |
|             |             |             | 50%.  2     |             |
|             |             |             | will double |             |
|             |             |             | the speed   |             |
|             |             |             | of the      |             |
|             |             |             | output      |             |
|             |             |             | video.      |             |
+-------------+-------------+-------------+-------------+-------------+

# api ScreenRecorder class #

ScreenRecorder class

Signature: 

    export declare class ScreenRecorder extends PassThrough


Extends: PassThrough

Remarks 

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  ScreenRecorder class.

Methods 

  Method   Modifiers   Description
  -------- ----------- ---------------------
  stop()               Stops the recorder.

# api ScreenRecorder.stop() method #

ScreenRecorder.stop() method

Stops the recorder.

Signature: 

    class ScreenRecorder {
      stop(): Promise<void>;
    }


Returns:

Promise<void>

# api ScreenshotClip interface #

ScreenshotClip interface

Signature: 

    export interface ScreenshotClip extends BoundingBox


Extends: BoundingBox

Properties 

  Property   Modifiers   Type     Description   Default
  ---------- ----------- -------- ------------- ---------
  scale       optional   number                  1

# api ScreenshotOptions interface #

ScreenshotOptions interface

Signature: 

    export interface ScreenshotOptions


Properties 

  Property                Modifiers   Type                      Description                                                                                                                                                                                                                                          Default
  ----------------------- ----------- ------------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ------------------------------------------------
  captureBeyondViewport    optional   boolean                   Capture the screenshot beyond the viewport.                                                                                                                                                                                                           false if there is no  clip .  true otherwise.
  clip                     optional   ScreenshotClip            Specifies the region of the page to clip.                                                                                                                                                                                                            
  encoding                 optional   'base64' | 'binary'       Encoding of the image.                                                                                                                                                                                                                                'binary'
  fromSurface              optional   boolean                   Capture the screenshot from the surface, rather than the view.                                                                                                                                                                                        true
  fullPage                 optional   boolean                   When  true , takes a screenshot of the full page.                                                                                                                                                                                                     false
  omitBackground           optional   boolean                   Hides default white background and allows capturing screenshots with transparency.                                                                                                                                                                    false
  optimizeForSpeed         optional   boolean                                                                                                                                                                                                                                                                         false
  path                     optional   string                    The file path to save the image to. The screenshot type will be inferred from file extension. If path is a relative path, then it is resolved relative to current working directory. If no path is provided, the image won't be saved to the disk.   
  quality                  optional   number                    Quality of the image, between 0-100. Not applicable to  png images.                                                                                                                                                                                  
  type                     optional   'png' | 'jpeg' | 'webp'                                                                                                                                                                                                                                                         'png'

# api SecurityDetails class #

SecurityDetails class

The SecurityDetails class represents the security details of a response
that was received over a secure connection.

Signature: 

    export declare class SecurityDetails


Remarks 

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  SecurityDetails class.

Methods 

  Method                      Modifiers   Description
  --------------------------- ----------- ------------------------------------------------------------------
  issuer()                                The name of the issuer of the certificate.
  protocol()                              The security protocol being used, e.g. "TLS 1.2".
  subjectAlternativeNames()               The list of subject alternative names (SANs) of the certificate.
  subjectName()                           The name of the subject to which the certificate was issued.
  validFrom()                             Unix timestamp marking the start of the certificate's validity.
  validTo()                               Unix timestamp marking the end of the certificate's validity.

# api SecurityDetails.issuer() method #

SecurityDetails.issuer() method

The name of the issuer of the certificate.

Signature: 

    class SecurityDetails {
      issuer(): string;
    }


Returns:

string

# api SecurityDetails.protocol() method #

SecurityDetails.protocol() method

The security protocol being used, e.g. "TLS 1.2".

Signature: 

    class SecurityDetails {
      protocol(): string;
    }


Returns:

string

# api SecurityDetails.subjectAlternativeNames() method #

SecurityDetails.subjectAlternativeNames() method

The list of subject alternative names (SANs) of the certificate.

Signature: 

    class SecurityDetails {
      subjectAlternativeNames(): string[];
    }


Returns:

string[]

# api SecurityDetails.subjectName() method #

SecurityDetails.subjectName() method

The name of the subject to which the certificate was issued.

Signature: 

    class SecurityDetails {
      subjectName(): string;
    }


Returns:

string

# api SecurityDetails.validFrom() method #

SecurityDetails.validFrom() method

Unix timestamp marking the start of the certificate's validity.

Signature: 

    class SecurityDetails {
      validFrom(): number;
    }


Returns:

number

# api SecurityDetails.validTo() method #

SecurityDetails.validTo() method

Unix timestamp marking the end of the certificate's validity.

Signature: 

    class SecurityDetails {
      validTo(): number;
    }


Returns:

number

# api SerializedAXNode interface #

SerializedAXNode interface

Represents a Node and the properties of it that are relevant to
Accessibility.

Signature: 

    export interface SerializedAXNode


Properties 

  Property          Modifiers   Type                  Description                                              Default
  ----------------- ----------- --------------------- -------------------------------------------------------- ---------
  autocomplete       optional   string                                                                         
  checked            optional   boolean | 'mixed'     Whether the checkbox is checked, or in a mixed state .   
  children           optional   SerializedAXNode []   Children of this node, if there are any.                 
  description        optional   string                An additional human readable description of the node.    
  disabled           optional   boolean                                                                        
  expanded           optional   boolean                                                                        
  focused            optional   boolean                                                                        
  haspopup           optional   string                                                                         
  invalid            optional   string                Whether and in what way this node's value is invalid.    
  keyshortcuts       optional   string                Any keyboard shortcuts associated with this node.        
  level              optional   number                The level of a heading.                                  
  modal              optional   boolean                                                                        
  multiline          optional   boolean                                                                        
  multiselectable    optional   boolean               Whether more than one child can be selected.             
  name               optional   string                A human readable name for the node.                      
  orientation        optional   string                                                                         
  pressed            optional   boolean | 'mixed'     Whether the node is checked or in a mixed state.         
  readonly           optional   boolean                                                                        
  required           optional   boolean                                                                        
  role                          string                The role of the node.                                    
  roledescription    optional   string                A human readable alternative to the role.                
  selected           optional   boolean                                                                        
  value              optional   string | number       The current value of the node.                           
  valuemax           optional   number                                                                         
  valuemin           optional   number                                                                         
  valuetext          optional   string                A description of the current value.                      

# api SnapshotOptions interface #

SnapshotOptions interface

Signature: 

    export interface SnapshotOptions


Properties 

  Property          Modifiers   Type                   Description                                   Default
  ----------------- ----------- ---------------------- --------------------------------------------- -----------------------------------
  interestingOnly    optional   boolean                Prune uninteresting nodes from the tree.       true
  root               optional   ElementHandle <Node>   Root node to get the accessibility tree for   The root node of the entire page.

# api Target.asPage() method #

Target.asPage() method

Forcefully creates a page for a target of any type. It is useful if you
want to handle a CDP target of type  other as a page. If you deal with a
regular page target, use Target.page() .

Signature: 

    class Target {
      abstract asPage(): Promise<Page>;
    }


Returns:

Promise< Page >

# api Target.browserContext() method #

Target.browserContext() method

Get the browser context the target belongs to.

Signature: 

    class Target {
      abstract browserContext(): BrowserContext;
    }


Returns:

BrowserContext

# api Target.browser() method #

Target.browser() method

Get the browser the target belongs to.

Signature: 

    class Target {
      abstract browser(): Browser;
    }


Returns:

Browser

# api Target.createCDPSession() method #

Target.createCDPSession() method

Creates a Chrome Devtools Protocol session attached to the target.

Signature: 

    class Target {
      abstract createCDPSession(): Promise<CDPSession>;
    }


Returns:

Promise< CDPSession >

# api TargetFilterCallback type #

TargetFilterCallback type

Signature: 

    export type TargetFilterCallback = (target: Target) => boolean;


References: Target

# api Target class #

Target class

Target represents a CDP target . In CDP a target is something that can
be debugged such a frame, a page or a worker.

Signature: 

    export declare abstract class Target


Remarks 

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  Target class.

Methods 

  Method               Modifiers   Description
  -------------------- ----------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  asPage()                         Forcefully creates a page for a target of any type. It is useful if you want to handle a CDP target of type  other as a page. If you deal with a regular page target, use Target.page() .
  browser()                        Get the browser the target belongs to.
  browserContext()                 Get the browser context the target belongs to.
  createCDPSession()               Creates a Chrome Devtools Protocol session attached to the target.
  opener()                         Get the target that opened this target. Top-level targets return  null .
  page()                           If the target is not of type  "page" ,  "webview" or  "background_page" , returns  null .
  type()                           Identifies what kind of target this is.
  url()                            
  worker()                         If the target is not of type  "service_worker" or  "shared_worker" , returns  null .

# api Target.opener() method #

Target.opener() method

Get the target that opened this target. Top-level targets return  null .

Signature: 

    class Target {
      abstract opener(): Target | undefined;
    }


Returns:

Target | undefined

# api Target.page() method #

Target.page() method

If the target is not of type  "page" ,  "webview" or  "background_page"
, returns  null .

Signature: 

    class Target {
      page(): Promise<Page | null>;
    }


Returns:

Promise< Page | null>

# api Target.type() method #

Target.type() method

Identifies what kind of target this is.

Signature: 

    class Target {
      abstract type(): TargetType;
    }


Returns:

TargetType

Remarks 

See docs for more info about background pages.

# api TargetType enum #

TargetType enum

Signature: 

    export declare enum TargetType


Enumeration Members 

  Member            Value                Description
  ----------------- -------------------- -------------
  BACKGROUND_PAGE    "background_page"   
  BROWSER            "browser"           
  OTHER              "other"             
  PAGE               "page"              
  SERVICE_WORKER     "service_worker"    
  SHARED_WORKER      "shared_worker"     
  WEBVIEW            "webview"           

# api Target.url() method #

Target.url() method

Signature: 

    class Target {
      abstract url(): string;
    }


Returns:

string

# api Target.worker() method #

Target.worker() method

If the target is not of type  "service_worker" or  "shared_worker" ,
returns  null .

Signature: 

    class Target {
      worker(): Promise<WebWorker | null>;
    }


Returns:

Promise< WebWorker | null>

# api TimeoutError class #

TimeoutError class

TimeoutError is emitted whenever certain operations are terminated due
to timeout.

Signature: 

    export declare class TimeoutError extends PuppeteerError


Extends: PuppeteerError

Remarks 

Example operations are page.waitForSelector or puppeteer.launch .

# api Touchscreen class #

Touchscreen class

The Touchscreen class exposes touchscreen events.

Signature: 

    export declare abstract class Touchscreen


Remarks 

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  Touchscreen class.

Methods 

  Method             Modifiers   Description
  ------------------ ----------- -----------------------------------------------
  tap(x, y)                      Dispatches a  touchstart and  touchend event.
  touchEnd()                     Dispatches a  touchend event.
  touchMove(x, y)                Dispatches a  touchMove event.
  touchStart(x, y)               Dispatches a  touchstart event.

# api Touchscreen.tap() method #

Touchscreen.tap() method

Dispatches a  touchstart and  touchend event.

Signature: 

    class Touchscreen {
      tap(x: number, y: number): Promise<void>;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- ---------------------------------
  x           number   Horizontal position of the tap.
  y           number   Vertical position of the tap.

Returns:

Promise<void>

# api Touchscreen.touchEnd() method #

Touchscreen.touchEnd() method

Dispatches a  touchend event.

Signature: 

    class Touchscreen {
      abstract touchEnd(): Promise<void>;
    }


Returns:

Promise<void>

# api Touchscreen.touchMove() method #

Touchscreen.touchMove() method

Dispatches a  touchMove event.

Signature: 

    class Touchscreen {
      abstract touchMove(x: number, y: number): Promise<void>;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- ----------------------------------
  x           number   Horizontal position of the move.
  y           number   Vertical position of the move.

Returns:

Promise<void>

Remarks 

Not every  touchMove call results in a  touchmove event being emitted,
depending on the browser's optimizations. For example, Chrome throttles
touch move events.

# api Touchscreen.touchStart() method #

Touchscreen.touchStart() method

Dispatches a  touchstart event.

Signature: 

    class Touchscreen {
      abstract touchStart(x: number, y: number): Promise<void>;
    }


Parameters 

  Parameter   Type     Description
  ----------- -------- ---------------------------------
  x           number   Horizontal position of the tap.
  y           number   Vertical position of the tap.

Returns:

Promise<void>

# api Tracing class #

Tracing class

The Tracing class exposes the tracing audit interface.

Signature: 

    export declare class Tracing


Remarks 

You can use  tracing.start and  tracing.stop to create a trace file
which can be opened in Chrome DevTools or timeline viewer .

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  Tracing class.

Example 

    await page.tracing.start({path: 'trace.json'});
    await page.goto('https://www.google.com');
    await page.tracing.stop();


Methods 

  Method           Modifiers   Description
  ---------------- ----------- -----------------------------------------------
  start(options)               Starts a trace for the current page.
  stop()                       Stops a trace started with the  start method.

# api TracingOptions interface #

TracingOptions interface

Signature: 

    export interface TracingOptions


Properties 

  Property      Modifiers   Type       Description   Default
  ------------- ----------- ---------- ------------- ---------
  categories     optional   string[]                 
  path           optional   string                   
  screenshots    optional   boolean                  

# api Tracing.start() method #

Tracing.start() method

Starts a trace for the current page.

Signature: 

    class Tracing {
      start(options?: TracingOptions): Promise<void>;
    }


Parameters 

  Parameter   Type             Description
  ----------- ---------------- ---------------------------------------
  options     TracingOptions   (Optional) Optional  TracingOptions .

Returns:

Promise<void>

Remarks 

Only one trace can be active at a time per browser.

# api Tracing.stop() method #

Tracing.stop() method

Stops a trace started with the  start method.

Signature: 

    class Tracing {
      stop(): Promise<Buffer | undefined>;
    }


Returns:

Promise<Buffer | undefined>

Promise which resolves to buffer with trace data.

# api trimCache() function #

trimCache() function

Signature: 

    trimCache: () => Promise<void>;


Returns:

Promise<void>

# api unregisterCustomQueryHandler() function #

unregisterCustomQueryHandler() function

  Warning: This API is now obsolete.

  Import Puppeteer and use the static method
  Puppeteer.unregisterCustomQueryHandler()

Signature: 

    export declare function unregisterCustomQueryHandler(name: string): void;


Parameters 

  Parameter   Type     Description
  ----------- -------- -------------
  name        string   

Returns:

void

# api UnsupportedOperation class #

UnsupportedOperation class

Puppeteer will throw this error if a method is not supported by the
currently used protocol

Signature: 

    export declare class UnsupportedOperation extends PuppeteerError


Extends: PuppeteerError

# api Viewport interface #

Viewport interface

Signature: 

    export interface Viewport


Properties 

  Property            Modifiers   Type      Description                                                        Default
  ------------------- ----------- --------- ------------------------------------------------------------------ ---------
  deviceScaleFactor    optional   number    Specify device scale factor. See devicePixelRatio for more info.    1
  hasTouch             optional   boolean   Specify if the viewport supports touch events.                      false
  height                          number    The page height in CSS pixels.                                     
  isLandscape          optional   boolean   Specifies if the viewport is in landscape mode.                     false
  isMobile             optional   boolean   Whether the  meta viewport tag is taken into account.               false
  width                           number    The page width in CSS pixels.                                      

# api VisibilityOption type #

VisibilityOption type

Signature: 

    export type VisibilityOption = 'hidden' | 'visible' | null;


# api WaitForNetworkIdleOptions interface #

WaitForNetworkIdleOptions interface

Signature: 

    export interface WaitForNetworkIdleOptions extends WaitTimeoutOptions


Extends: WaitTimeoutOptions

Properties 

  Property      Modifiers   Type     Description                                                                   Default
  ------------- ----------- -------- ----------------------------------------------------------------------------- ---------
  concurrency    optional   number   Maximum number concurrent of network connections to be considered inactive.    0
  idleTime       optional   number   Time (in milliseconds) the network should be idle.                             500

# api WaitForOptions interface #

WaitForOptions interface

Signature: 

    export interface WaitForOptions


Properties 

+-------------+-------------+-------------+-------------+-------------+
| Property    | Modifiers   | Type        | Description | Default     |
+=============+=============+=============+=============+=============+
| timeout     |  optional   | number      | Maximum     |  30000      |
|             |             |             | wait time   |             |
|             |             |             | in          |             |
|             |             |             | mi          |             |
|             |             |             | lliseconds. |             |
|             |             |             | Pass 0 to   |             |
|             |             |             | disable the |             |
|             |             |             | timeout.    |             |
|             |             |             |             |             |
|             |             |             | The default |             |
|             |             |             | value can   |             |
|             |             |             | be changed  |             |
|             |             |             | by using    |             |
|             |             |             | the         |             |
|             |             |             | Pa          |             |
|             |             |             | ge.setDefau |             |
|             |             |             | ltTimeout() |             |
|             |             |             | or          |             |
|             |             |             | P           |             |
|             |             |             | age.setDefa |             |
|             |             |             | ultNavigati |             |
|             |             |             | onTimeout() |             |
|             |             |             | methods.    |             |
+-------------+-------------+-------------+-------------+-------------+
| waitUntil   |  optional   | P           | When to     |  'load'     |
|             |             | uppeteerLif | consider    |             |
|             |             | eCycleEvent | waiting     |             |
|             |             | |           | succeeds.   |             |
|             |             | P           | Given an    |             |
|             |             | uppeteerLif | array of    |             |
|             |             | eCycleEvent | event       |             |
|             |             | []          | strings,    |             |
|             |             |             | waiting is  |             |
|             |             |             | considered  |             |
|             |             |             | to be       |             |
|             |             |             | successful  |             |
|             |             |             | after all   |             |
|             |             |             | events have |             |
|             |             |             | been fired. |             |
+-------------+-------------+-------------+-------------+-------------+

# api WaitForSelectorOptions interface #

WaitForSelectorOptions interface

Signature: 

    export interface WaitForSelectorOptions


Properties 

+-------------+-------------+-------------+-------------+-------------+
| Property    | Modifiers   | Type        | Description | Default     |
+=============+=============+=============+=============+=============+
| hidden      |  optional   | boolean     | Wait for    |  false      |
|             |             |             | the         |             |
|             |             |             | selected    |             |
|             |             |             | element to  |             |
|             |             |             | not be      |             |
|             |             |             | found in    |             |
|             |             |             | the DOM or  |             |
|             |             |             | to be       |             |
|             |             |             | hidden,     |             |
|             |             |             | i.e. have   |             |
|             |             |             |  di         |             |
|             |             |             | splay: none |             |
|             |             |             | or          |             |
|             |             |             |  visibil    |             |
|             |             |             | ity: hidden |             |
|             |             |             | CSS         |             |
|             |             |             | properties. |             |
+-------------+-------------+-------------+-------------+-------------+
| signal      |  optional   | AbortSignal | A signal    |             |
|             |             |             | object that |             |
|             |             |             | allows you  |             |
|             |             |             | to cancel a |             |
|             |             |             | wait        |             |
|             |             |             | ForSelector |             |
|             |             |             | call.       |             |
+-------------+-------------+-------------+-------------+-------------+
| timeout     |  optional   | number      | Maximum     |  30_000 (30 |
|             |             |             | time to     | seconds)    |
|             |             |             | wait in     |             |
|             |             |             | mi          |             |
|             |             |             | lliseconds. |             |
|             |             |             | Pass  0 to  |             |
|             |             |             | disable     |             |
|             |             |             | timeout.    |             |
|             |             |             |             |             |
|             |             |             | The default |             |
|             |             |             | value can   |             |
|             |             |             | be changed  |             |
|             |             |             | by using    |             |
|             |             |             | Pa          |             |
|             |             |             | ge.setDefau |             |
|             |             |             | ltTimeout() |             |
+-------------+-------------+-------------+-------------+-------------+
| visible     |  optional   | boolean     | Wait for    |  false      |
|             |             |             | the         |             |
|             |             |             | selected    |             |
|             |             |             | element to  |             |
|             |             |             | be present  |             |
|             |             |             | in DOM and  |             |
|             |             |             | to be       |             |
|             |             |             | visible,    |             |
|             |             |             | i.e. to not |             |
|             |             |             | have        |             |
|             |             |             |  di         |             |
|             |             |             | splay: none |             |
|             |             |             | or          |             |
|             |             |             |  visibil    |             |
|             |             |             | ity: hidden |             |
|             |             |             | CSS         |             |
|             |             |             | properties. |             |
+-------------+-------------+-------------+-------------+-------------+

# api WaitForTargetOptions interface #

WaitForTargetOptions interface

Signature: 

    export interface WaitForTargetOptions


Properties 

  Property   Modifiers   Type     Description                                                          Default
  ---------- ----------- -------- -------------------------------------------------------------------- ---------
  timeout     optional   number   Maximum wait time in milliseconds. Pass  0 to disable the timeout.    30_000

# api WaitTimeoutOptions interface #

WaitTimeoutOptions interface

Signature: 

    export interface WaitTimeoutOptions


Properties 

+-------------+-------------+-------------+-------------+-------------+
| Property    | Modifiers   | Type        | Description | Default     |
+=============+=============+=============+=============+=============+
| timeout     |  optional   | number      | Maximum     |  30000      |
|             |             |             | wait time   |             |
|             |             |             | in          |             |
|             |             |             | mi          |             |
|             |             |             | lliseconds. |             |
|             |             |             | Pass 0 to   |             |
|             |             |             | disable the |             |
|             |             |             | timeout.    |             |
|             |             |             |             |             |
|             |             |             | The default |             |
|             |             |             | value can   |             |
|             |             |             | be changed  |             |
|             |             |             | by using    |             |
|             |             |             | the         |             |
|             |             |             | Pa          |             |
|             |             |             | ge.setDefau |             |
|             |             |             | ltTimeout() |             |
|             |             |             | method.     |             |
+-------------+-------------+-------------+-------------+-------------+

# api WebWorker.close() method #

WebWorker.close() method

Signature: 

    class WebWorker {
      close(): Promise<void>;
    }


Returns:

Promise<void>

# api WebWorker.evaluateHandle() method #

WebWorker.evaluateHandle() method

Evaluates a given function in the worker .

Signature: 

    class WebWorker {
      evaluateHandle<
        Params extends unknown[],
        Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
      >(
        func: Func | string,
        ...args: Params
      ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
    }


Parameters 

  Parameter   Type            Description
  ----------- --------------- --------------------------------
  func        Func | string   Function to be evaluated.
  args        Params          Arguments to pass into  func .

Returns:

Promise< HandleFor <Awaited<ReturnType<Func>>>>

A handle to the return value of  func .

Remarks 

If the given function returns a promise, evaluate will wait for the
promise to resolve.

In general, you should use evaluateHandle if evaluate cannot serialize
the return value properly or you need a mutable handle to the return
object.

# api WebWorker.evaluate() method #

WebWorker.evaluate() method

Evaluates a given function in the worker .

Signature: 

    class WebWorker {
      evaluate<
        Params extends unknown[],
        Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
      >(func: Func | string, ...args: Params): Promise<Awaited<ReturnType<Func>>>;
    }


Parameters 

  Parameter   Type            Description
  ----------- --------------- --------------------------------
  func        Func | string   Function to be evaluated.
  args        Params          Arguments to pass into  func .

Returns:

Promise<Awaited<ReturnType<Func>>>

The result of  func .

Remarks 

If the given function returns a promise, evaluate will wait for the
promise to resolve.

As a rule of thumb, if the return value of the given function is more
complicated than a JSON object (e.g. most classes), then evaluate will
_likely_ return some truncated value (or  {} ). This is because we are
not returning the actual return value, but a deserialized version as a
result of transferring the return value through a protocol to Puppeteer.

In general, you should use evaluateHandle if evaluate cannot serialize
the return value properly or you need a mutable handle to the return
object.

# api WebWorker class #

WebWorker class

This class represents a WebWorker .

Signature: 

    export declare abstract class WebWorker extends EventEmitter<Record<EventType, unknown>>


Extends: EventEmitter <Record< EventType , unknown>>

Remarks 

The events  workercreated and  workerdestroyed are emitted on the page
object to signal the worker lifecycle.

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  WebWorker class.

Example 

    page.on('workercreated', worker =>
      console.log('Worker created: ' + worker.url())
    );
    page.on('workerdestroyed', worker =>
      console.log('Worker destroyed: ' + worker.url())
    );

    console.log('Current workers:');
    for (const worker of page.workers()) {
      console.log('  ' + worker.url());
    }


Properties 

  Property   Modifiers   Type         Description
  ---------- ----------- ------------ --------------------------------------------------
  client      readonly   CDPSession   The CDP session client the WebWorker belongs to.

Methods 

  Method                       Modifiers   Description
  ---------------------------- ----------- --------------------------------------------
  close()                                  
  evaluate(func, args)                     Evaluates a given function in the worker .
  evaluateHandle(func, args)               Evaluates a given function in the worker .
  url()                                    The URL of this web worker.

# api WebWorker.url() method #

WebWorker.url() method

The URL of this web worker.

Signature: 

    class WebWorker {
      url(): string;
    }


Returns:

string

# browsers-api Browser enum #

Browser enum

Supported browsers.

Signature: 

    export declare enum Browser


Enumeration Members 

  Member                Value                      Description
  --------------------- -------------------------- -------------
  CHROME                 "chrome"                  
  CHROMEDRIVER           "chromedriver"            
  CHROMEHEADLESSSHELL    "chrome-headless-shell"   
  CHROMIUM               "chromium"                
  FIREFOX                "firefox"                 

# browsers-api BrowserPlatform enum #

BrowserPlatform enum

Platform names used to identify a OS platform x architecture combination
in the way that is relevant for the browser download.

Signature: 

    export declare enum BrowserPlatform


Enumeration Members 

  Member    Value        Description
  --------- ------------ -------------
  LINUX      "linux"     
  MAC        "mac"       
  MAC_ARM    "mac_arm"   
  WIN32      "win32"     
  WIN64      "win64"     

# browsers-api canDownload() function #

canDownload() function

Signature: 

    export declare function canDownload(options: InstallOptions): Promise<boolean>;


Parameters 

  Parameter   Type             Description
  ----------- ---------------- -------------
  options     InstallOptions   

Returns:

Promise<boolean>

# browsers-api CDP_WEBSOCKET_ENDPOINT_REGEX variable #

CDP_WEBSOCKET_ENDPOINT_REGEX variable

Signature: 

    CDP_WEBSOCKET_ENDPOINT_REGEX: RegExp;


# browsers-api ChromeReleaseChannel enum #

ChromeReleaseChannel enum

Signature: 

    export declare enum ChromeReleaseChannel


Enumeration Members 

  Member   Value       Description
  -------- ----------- -------------
  BETA      "beta"     
  CANARY    "canary"   
  DEV       "dev"      
  STABLE    "stable"   

# browsers-api CLI class #

CLI class

Signature: 

    export declare class CLI


Constructors 

  Constructor               Modifiers   Description
  ------------------------- ----------- ---------------------------------------------
  (constructor)(opts, rl)               Constructs a new instance of the  CLI class

Methods 

  Method      Modifiers   Description
  ----------- ----------- -------------
  run(argv)               

# browsers-api computeExecutablePath() function #

computeExecutablePath() function

Signature: 

    export declare function computeExecutablePath(
      options: ComputeExecutablePathOptions
    ): string;


Parameters 

  Parameter   Type                           Description
  ----------- ------------------------------ -------------
  options     ComputeExecutablePathOptions   

Returns:

string

# browsers-api computeSystemExecutablePath() function #

computeSystemExecutablePath() function

Signature: 

    export declare function computeSystemExecutablePath(
      options: SystemOptions
    ): string;


Parameters 

  Parameter   Type            Description
  ----------- --------------- -------------
  options     SystemOptions   

Returns:

string

# browsers-api createProfile() function #

createProfile() function

Signature: 

    export declare function createProfile(
      browser: Browser,
      opts: ProfileOptions
    ): Promise<void>;


Parameters 

  Parameter   Type             Description
  ----------- ---------------- -------------
  browser     Browser          
  opts        ProfileOptions   

Returns:

Promise<void>

# browsers-api detectBrowserPlatform() function #

detectBrowserPlatform() function

Signature: 

    export declare function detectBrowserPlatform(): BrowserPlatform | undefined;


Returns:

BrowserPlatform | undefined

# browsers-api getInstalledBrowsers() function #

getInstalledBrowsers() function

Returns metadata about browsers installed in the cache directory.

Signature: 

    export declare function getInstalledBrowsers(
      options: GetInstalledBrowsersOptions
    ): Promise<InstalledBrowser[]>;


Parameters 

  Parameter   Type                          Description
  ----------- ----------------------------- -------------
  options     GetInstalledBrowsersOptions   

Returns:

Promise< InstalledBrowser []>

# browsers-api GetInstalledBrowsersOptions interface #

GetInstalledBrowsersOptions interface

Signature: 

    export interface GetInstalledBrowsersOptions


Properties 

  Property   Modifiers   Type     Description                                    Default
  ---------- ----------- -------- ---------------------------------------------- ---------
  cacheDir               string   The path to the root of the cache directory.   

# browsers-api getVersionComparator() function #

getVersionComparator() function

Returns a version comparator for the given browser that can be used to
sort browser versions.

Signature: 

    export declare function getVersionComparator(
      browser: Browser
    ): (a: string, b: string) => number;


Parameters 

  Parameter   Type      Description
  ----------- --------- -------------
  browser     Browser   

Returns:

(a: string, b: string) => number

# browsers-api install() function #

install() function

Signature: 

    export declare function install(
      options: InstallOptions & {
        unpack: false;
      }
    ): Promise<string>;


Parameters 

  Parameter   Type                                  Description
  ----------- ------------------------------------- -------------
  options     InstallOptions & { unpack: false; }   

Returns:

Promise<string>

# browsers-api InstalledBrowser class #

InstalledBrowser class

Signature: 

    export declare class InstalledBrowser


Remarks 

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  InstalledBrowser class.

Properties 

  Property         Modifiers   Type              Description
  ---------------- ----------- ----------------- --------------------------------------------------------------------------------------------------------------------
  browser                      Browser           
  buildId                      string            
  executablePath    readonly   string            
  path              readonly   string            Path to the root of the installation folder. Use computeExecutablePath() to get the path to the executable binary.
  platform                     BrowserPlatform   

Methods 

  Method                    Modifiers   Description
  ------------------------- ----------- -------------
  readMetadata()                        
  writeMetadata(metadata)               

# browsers-api install() function #

install() function

Signature: 

    export declare function install(
      options: InstallOptions & {
        unpack?: true;
      }
    ): Promise<InstalledBrowser>;


Parameters 

  Parameter   Type                                  Description
  ----------- ------------------------------------- -------------
  options     InstallOptions & { unpack?: true; }   

Returns:

Promise< InstalledBrowser >

# browsers-api InstallOptions interface #

InstallOptions interface

Signature: 

    export interface InstallOptions


Properties 

+-------------+-------------+-------------+-------------+-------------+
| Property    | Modifiers   | Type        | Description | Default     |
+=============+=============+=============+=============+=============+
| baseUrl     |  optional   | string      | Determines  | Either      |
|             |             |             | the host    |             |
|             |             |             | that will   | -           |
|             |             |             | be used for | h           |
|             |             |             | d           | ttps://stor |
|             |             |             | ownloading. | age.googlea |
|             |             |             |             | pis.com/chr |
|             |             |             |             | ome-for-tes |
|             |             |             |             | ting-public |
|             |             |             |             | or -        |
|             |             |             |             | http        |
|             |             |             |             | s://archive |
|             |             |             |             | .mozilla.or |
|             |             |             |             | g/pub/firef |
|             |             |             |             | ox/nightly/ |
|             |             |             |             | latest-mozi |
|             |             |             |             | lla-central |
+-------------+-------------+-------------+-------------+-------------+
| browser     |             | Browser     | Determines  |             |
|             |             |             | which       |             |
|             |             |             | browser to  |             |
|             |             |             | install.    |             |
+-------------+-------------+-------------+-------------+-------------+
| buildId     |             | string      | Determines  |             |
|             |             |             | which       |             |
|             |             |             | buildId to  |             |
|             |             |             | download.   |             |
|             |             |             | BuildId     |             |
|             |             |             | should      |             |
|             |             |             | uniquely    |             |
|             |             |             | identify    |             |
|             |             |             | binaries    |             |
|             |             |             | and they    |             |
|             |             |             | are used    |             |
|             |             |             | for         |             |
|             |             |             | caching.    |             |
+-------------+-------------+-------------+-------------+-------------+
| b           |  optional   | string      | An alias    |             |
| uildIdAlias |             |             | for the     |             |
|             |             |             | provided    |             |
|             |             |             |  buildId .  |             |
|             |             |             | It will be  |             |
|             |             |             | used to     |             |
|             |             |             | maintain    |             |
|             |             |             | local       |             |
|             |             |             | metadata to |             |
|             |             |             | support     |             |
|             |             |             | aliases in  |             |
|             |             |             | the  launch |             |
|             |             |             | command.    |             |
+-------------+-------------+-------------+-------------+-------------+
| cacheDir    |             | string      | Determines  |             |
|             |             |             | the path to |             |
|             |             |             | download    |             |
|             |             |             | browsers    |             |
|             |             |             | to.         |             |
+-------------+-------------+-------------+-------------+-------------+
| do          |  optional   | (downl      | Provides    |             |
| wnloadProgr |             | oadedBytes: | information |             |
| essCallback |             | number,     | about the   |             |
|             |             | totalBytes: | progress of |             |
|             |             | number) =>  | the         |             |
|             |             | void        | download.   |             |
+-------------+-------------+-------------+-------------+-------------+
| platform    |  optional   | Brow        | Determines  | Aut         |
|             |             | serPlatform | which       | o-detected. |
|             |             |             | platform    |             |
|             |             |             | the browser |             |
|             |             |             | will be     |             |
|             |             |             | suited for. |             |
+-------------+-------------+-------------+-------------+-------------+
| unpack      |  optional   | boolean     | Whether to  |  true       |
|             |             |             | unpack and  |             |
|             |             |             | install     |             |
|             |             |             | browser     |             |
|             |             |             | archives.   |             |
+-------------+-------------+-------------+-------------+-------------+

# browsers-api launch() function #

launch() function

Signature: 

    export declare function launch(opts: LaunchOptions): Process;


Parameters 

  Parameter   Type            Description
  ----------- --------------- -------------
  opts        LaunchOptions   

Returns:

Process

# browsers-api LaunchOptions interface #

LaunchOptions interface

Signature: 

    export interface LaunchOptions


Properties 

  Property         Modifiers   Type                                 Description   Default
  ---------------- ----------- ------------------------------------ ------------- ---------
  args              optional   string[]                                           
  detached          optional   boolean                                            
  dumpio            optional   boolean                                            
  env               optional   Record<string, string | undefined>                 
  executablePath               string                                             
  handleSIGHUP      optional   boolean                                            
  handleSIGINT      optional   boolean                                            
  handleSIGTERM     optional   boolean                                            
  onExit            optional   () => Promise<void>                                
  pipe              optional   boolean                                            

# browsers-api makeProgressCallback() function #

makeProgressCallback() function

Signature: 

    export declare function makeProgressCallback(
      browser: Browser,
      buildId: string
    ): (downloadedBytes: number, totalBytes: number) => void;


Parameters 

  Parameter   Type      Description
  ----------- --------- -------------
  browser     Browser   
  buildId     string    

Returns:

(downloadedBytes: number, totalBytes: number) => void

# browsers-api Options interface #

Options interface

Signature: 

    export interface ComputeExecutablePathOptions


Properties 

  Property   Modifiers   Type              Description                                                                                                      Default
  ---------- ----------- ----------------- ---------------------------------------------------------------------------------------------------------------- ----------------
  browser                Browser           Determines which browser to launch.                                                                              
  buildId                string            Determines which buildId to download. BuildId should uniquely identify binaries and they are used for caching.   
  cacheDir               string            Root path to the storage directory.                                                                              
  platform    optional   BrowserPlatform   Determines which platform the browser will be suited for.                                                        Auto-detected.

# browsers-api Process class #

Process class

Signature: 

    export declare class Process


Constructors 

  Constructor           Modifiers   Description
  --------------------- ----------- -------------------------------------------------
  (constructor)(opts)               Constructs a new instance of the  Process class

Properties 

  Property      Modifiers   Type                        Description
  ------------- ----------- --------------------------- -------------
  nodeProcess    readonly   childProcess.ChildProcess   

Methods 

  Method                              Modifiers   Description
  ----------------------------------- ----------- -------------
  close()                                         
  hasClosed()                                     
  kill()                                          
  waitForLineOutput(regex, timeout)               

# browsers-api ProfileOptions interface #

ProfileOptions interface

Signature: 

    export interface ProfileOptions


Properties 

  Property      Modifiers   Type                      Description   Default
  ------------- ----------- ------------------------- ------------- ---------
  path                      string                                  
  preferences               Record<string, unknown>                 

# browsers-api resolveBuildId() function #

resolveBuildId() function

Signature: 

    export declare function resolveBuildId(
      browser: Browser,
      platform: BrowserPlatform,
      tag: string
    ): Promise<string>;


Parameters 

  Parameter   Type              Description
  ----------- ----------------- -------------
  browser     Browser           
  platform    BrowserPlatform   
  tag         string            

Returns:

Promise<string>

# browsers-api SystemOptions interface #

SystemOptions interface

Signature: 

    export interface SystemOptions


Properties 

  Property   Modifiers   Type                   Description                                                 Default
  ---------- ----------- ---------------------- ----------------------------------------------------------- ----------------
  browser                Browser                Determines which browser to launch.                         
  channel                ChromeReleaseChannel   Release channel to look for on the system.                  
  platform    optional   BrowserPlatform        Determines which platform the browser will be suited for.   Auto-detected.

# browsers-api TimeoutError class #

TimeoutError class

Signature: 

    export declare class TimeoutError extends Error


Extends: Error

Remarks 

The constructor for this class is marked as internal. Third-party code
should not call the constructor directly or create subclasses that
extend the  TimeoutError class.

# browsers-api uninstall() function #

uninstall() function

Signature: 

    export declare function uninstall(options: UninstallOptions): Promise<void>;


Parameters 

  Parameter   Type               Description
  ----------- ------------------ -------------
  options     UninstallOptions   

Returns:

Promise<void>

# browsers-api UninstallOptions interface #

UninstallOptions interface

Signature: 

    export interface UninstallOptions


Properties 

  Property   Modifiers   Type              Description                                       Default
  ---------- ----------- ----------------- ------------------------------------------------- ----------------
  browser                Browser           Determines which browser to uninstall.            
  buildId                string            The browser build to uninstall                    
  cacheDir               string            The path to the root of the cache directory.      
  platform    optional   BrowserPlatform   Determines the platform for the browser binary.   Auto-detected.

# browsers-api WEBDRIVER_BIDI_WEBSOCKET_ENDPOINT_REGEX variable #

WEBDRIVER_BIDI_WEBSOCKET_ENDPOINT_REGEX variable

Signature: 

    WEBDRIVER_BIDI_WEBSOCKET_ENDPOINT_REGEX: RegExp;


# browsers-api @puppeteer/browsers #

@puppeteer/browsers

Manage and launch browsers/drivers from a CLI or programmatically.

CLI 

Use  npx to run the CLI:

    npx @puppeteer/browsers --help


CLI help will provide all documentation you need to use the CLI.

    npx @puppeteer/browsers --help # help for all commands
    npx @puppeteer/browsers install --help # help for the install command
    npx @puppeteer/browsers launch --help # help for the launch command


Known limitations 

1.  We support installing and running Firefox, Chrome and Chromium. The
     latest ,  beta ,  dev ,  canary ,  stable keywords are only
    supported for the install command. For the  launch command you need
    to specify an exact build ID. The build ID is provided by the
     install command (see  npx @puppeteer/browsers install --help for
    the format).
2.  Launching the system browsers is only possible for Chrome/Chromium.

API 

The programmatic API allows installing and launching browsers from your
code. See the  test folder for examples on how to use the  install ,
 canInstall ,  launch ,  computeExecutablePath ,
 computeSystemExecutablePath and other methods.

Classes 

  Class              Description
  ------------------ -------------
  CLI                
  InstalledBrowser   
  Process            
  TimeoutError       

Enumerations 

  Enumeration            Description
  ---------------------- --------------------------------------------------------------------------------------------------------------------------------
  Browser                Supported browsers.
  BrowserPlatform        Platform names used to identify a OS platform x architecture combination in the way that is relevant for the browser download.
  ChromeReleaseChannel   

Functions 

  Function                                 Description
  ---------------------------------------- -----------------------------------------------------------------------------------------------
  canDownload(options)                     
  computeExecutablePath(options)           
  computeSystemExecutablePath(options)     
  createProfile(browser, opts)             
  detectBrowserPlatform()                  
  getInstalledBrowsers(options)            Returns metadata about browsers installed in the cache directory.
  getVersionComparator(browser)            Returns a version comparator for the given browser that can be used to sort browser versions.
  install(options)                         
  install(options)                         
  launch(opts)                             
  makeProgressCallback(browser, buildId)   
  resolveBuildId(browser, platform, tag)   
  uninstall(options)                       

Interfaces 

  Interface                     Description
  ----------------------------- -------------
  GetInstalledBrowsersOptions   
  InstallOptions                
  LaunchOptions                 
  Options                       
  ProfileOptions                
  SystemOptions                 
  UninstallOptions              

Variables 

  Variable                                  Description
  ----------------------------------------- -------------
  CDP_WEBSOCKET_ENDPOINT_REGEX              
  WEBDRIVER_BIDI_WEBSOCKET_ENDPOINT_REGEX   

# guides Chrome Extensions #

Chrome Extensions

Puppeteer can be used for testing Chrome Extensions.

[] caution

Extensions in Chrome/Chromium currently only work in non-headless mode
and experimental Chrome headless mode.

The following is code for getting a handle to the background page of an
extension whose source is located in  ./my-extension :

    import puppeteer from 'puppeteer';
    import path from 'path';

    (async () => {
      const pathToExtension = path.join(process.cwd(), 'my-extension');
      const browser = await puppeteer.launch({
        headless: 'new',
        args: [
          `--disable-extensions-except=${pathToExtension}`,
          `--load-extension=${pathToExtension}`,
        ],
      });
      const backgroundPageTarget = await browser.waitForTarget(
        target => target.type() === 'background_page'
      );
      const backgroundPage = await backgroundPageTarget.page();
      // Test the background page as you would any other page.
      await browser.close();
    })();


[] note

Chrome Manifest V3 extensions have a background ServiceWorker of type
'service_worker', instead of a page of type 'background_page'.

[] note

It is not yet possible to test extension popups or content scripts.

# guides Configuration #

Configuration

All defaults in Puppeteer can be customized in two ways:

1.  Configuration files ( recommended )
2.  Environment variables

[] caution

Note that some options are only customizable through environment
variables (such as  HTTPS_PROXY ).

[] caution

Puppeteer's configuration files and environment variables are ignored by
 puppeteer-core .

Configuration files 

Configuration files are the recommended choice for configuring
Puppeteer. Puppeteer will look up the file tree for any of the following
formats:

-    .puppeteerrc.cjs ,
-    .puppeteerrc.js ,
-    .puppeteerrc (YAML/JSON),
-    .puppeteerrc.json ,
-    .puppeteerrc.yaml ,
-    puppeteer.config.js , and
-    puppeteer.config.cjs

Puppeteer will also read a  puppeteer key from your application's
 package.json .

See the  Configuration interface for possible options.

[] caution

After adding a configuration file, you may need to remove and reinstall
 puppeteer for it to take effect if the changes affect installation.

Examples 

Changing the default cache directory 

Starting in v19.0.0, Puppeteer stores browsers in  ~/.cache/puppeteer to
globally cache browsers between installation. This can cause problems if
 puppeteer is packed during some build step and moved to a fresh
location. The following configuration can solve this issue (reinstall
 puppeteer to take effect):

project-directory/.puppeteerrc.cjs

    const {join} = require('path');

    /**
     * @type {import("puppeteer").Configuration}
     */
    module.exports = {
      // Changes the cache location for Puppeteer.
      cacheDirectory: join(__dirname, '.cache', 'puppeteer'),
    };


[] note

Notice this is only possible with CommonJS configuration files as
information about the ambient environment is needed (in this case,
 __dirname ).

Environment variables 

Along with configuration files, Puppeteer looks for certain environment
variables for customizing behavior. Environment variables will always
override configuration file options when applicable.

The following options are environment-only options

-    HTTP_PROXY ,  HTTPS_PROXY ,  NO_PROXY - defines HTTP proxy settings
    that are used to download and run the browser.

All other options can be found in the documentation for the
 Configuration interface.

# guides Debugging #

Debugging

Debugging with Puppeteer can be an arduous task. There is no single
method for debugging all possible issues since Puppeteer touches many
distinct components of a browser such as network requests and Web APIs.
On a high note, Puppeteer provides several methods for debugging which
hopefully does cover all possible issues.

Background 

In general, there are two possible sources of an issue: Code running on
Node.js (which we call server code ), and code running in the browser
(which we call client code ). There is also a third possible source
being the browser itself (which we call internal code ), but if you
suspect this is the source after attempting the methods below , we
suggest searching existing issues before filing an issue .

Debugging methods for all situations 

These methods can be used to debug any situation. These should be used
as a quick sanity check before diving into more complex methods.

Turn off  headless 

Sometimes it's useful to see what the browser is displaying. Instead of
launching in  headless mode, launch a full version of the browser with
 headless set to  false :

    const browser = await puppeteer.launch({headless: false});


Puppeteer "slow-mo" 

The  slowMo option slows down Puppeteer operations by a specified amount
of milliseconds. It's another way to help see what's going on.

    const browser = await puppeteer.launch({
      headless: false,
      slowMo: 250, // slow down by 250ms
    });


Debugging methods for client code 

Capture  console.* output 

Since client code runs in the browser, doing  console.* in client code
will not directly log to Node.js. However, you can listen (page.on) for
the  console event which returns a payload with the logged text.

    page.on('console', msg => console.log('PAGE LOG:', msg.text()));

    await page.evaluate(() => console.log(`url is ${location.href}`));


Use the debugger in the browser 

1.  Set  devtools to  true when launching Puppeteer:

        const browser = await puppeteer.launch({devtools: true});

    [] []

2.  Add  debugger inside any client code you want debugged. For example,

        await page.evaluate(() => {
          debugger;
        });

    [] []

    The Browser will now stop in the location the  debugger word is
    found in debug mode.

Debugging methods for server code 

Use the debugger in Node.js (Chrome/Chromium-only) 

Since server code intermingles with client code, this method of
debugging is closely tied with the browser. For example, you can step
over  await page.click() in the server script and see the click happen
in the browser.

Note that you won't be able to run  await page.click() in DevTools
console due to this Chromium bug , so if you want to try something out,
you have to add it to your test file.

1.  Set  headless to  false .

2.  Add  debugger to any server code you want debugged. For example,

        debugger;
        await page.click('a[target=_blank]');

    [] []

3.  Run your server code with  --inspect-brk . For example,

        node --inspect-brk path/to/script.js

    [] []

4.  In the opened Chrome/Chromium browser, open
     chrome://inspect/#devices and click  inspect .

5.  In the newly opened test browser, press  F8 to resume test
    execution.

6.  Now your  debugger statement will be hit and you can debug in the
    test browser.

Log DevTools protocol traffic 

If all else fails, it's possible there may be an issue between Puppeteer
and the DevTools protocol. You can debug this by setting the  DEBUG
environment variable before running your script. This will log internal
traffic via  debug under the  puppeteer namespace.

    # Basic verbose logging
    env DEBUG="puppeteer:*" node script.js

    # Prevent truncating of long messages
    env DEBUG="puppeteer:*" env DEBUG_MAX_STRING_LENGTH=null node script.js

    # Protocol traffic can be rather noisy. This example filters out all Network domain messages
    env DEBUG="puppeteer:*" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '"Network'

    # Filter out all protocol messages but keep all other logging
    env DEBUG="puppeteer:*,-puppeteer:protocol:*" node script.js


# guides Docker #

Docker

Puppeteer offers a Docker image that includes Chrome for Testing along
with the required dependencies and a pre-installed Puppeteer version.
The image is available via the GitHub Container Registry . The latest
image is tagged as  latest and other tags match Puppeteer versions. For
example,

    docker pull ghcr.io/puppeteer/puppeteer:latest # pulls the latest
    docker pull ghcr.io/puppeteer/puppeteer:16.1.0 # pulls the image that contains Puppeteer v16.1.0


The image is meant for running the browser in sandbox mode and
therefore, running the image requires the  SYS_ADMIN capability.

Usage 

To use the docker image directly, run:

    docker run -i --init --cap-add=SYS_ADMIN --rm ghcr.io/puppeteer/puppeteer:latest node -e "$(cat path/to/script.js)"


where  path/to/script.js is the path relative to your working directory.
Note the image requires the  SYS_ADMIN capability since the browser runs
in sandbox mode.

If you need to build an image based on a different base image, you can
use our  Dockerfile as the starting point.

# guides Evaluate JavaScript #

Evaluate JavaScript

Puppeteer allows evaluating JavaScript functions in the context of the
page driven by Puppeteer:

    // Import puppeteer
    import puppeteer from 'puppeteer';

    (async () => {
      // Launch the browser
      const browser = await puppeteer.launch();

      // Create a page
      const page = await browser.newPage();

      // Go to your site
      await page.goto('YOUR_SITE');

      // Evaluate JavaScript
      const three = await page.evaluate(() => {
        return 1 + 2;
      });

      console.log(three);

      // Close browser.
      await browser.close();
    })();


[] caution

Although the function is defined in your script context, it actually
gets stringified by Puppeteer, sent to the target page over Chrome
DevTools protocol and evaluated there. It means that the function cannot
access scope variables in your script.

Alternatively, you can provide a function body as a string:

    // Evaluate JavaScript
    const three = await page.evaluate(`
        1 + 2
    `);


[] caution

The example above produces the equivalent results but it also
illustrates that the types and global variables available to the
evaluated function cannot be known. Especially, in TypeScript you should
be careful to make sure that objects referenced by the evaluated
function are correct.

Return types 

The functions you evaluate can return values. If the returned value is
of a primitive type, it gets automatically converted by Puppeteer to a
primitive type in the script context like in the previous example.

If the script returns an object, Puppeteer serializes it to a JSON and
reconstructs it on the script side. This process might not always yield
correct results, for example, when you return a DOM node:

    const body = await page.evaluate(() => {
      return document.body;
    });
    console.log(body); // {}, unexpected!


To work with the returned objects, Puppeteer offers a way to return
objects by reference:

    const body = await page.evaluateHandle(() => {
      return document.body;
    });
    console.log(body instanceof ElementHandle); // true


The returned object is either a  JSHandle or a  ElementHandle .
 ElementHandle extends  JSHandle and it is only created for DOM
elements.

See the API documentation for more details about what methods are
available for handles.

Passing arguments to the evaluate function 

You can provide arguments to your function:

    const three = await page.evaluate(
      (a, b) => {
        return 1 + 2;
      },
      1,
      2
    );


The arguments can be primitive values or  JSHandle s.

[] note

Page, JSHandle and ElementHandle offer several different helpers to
evaluate JavaScript but they all follow the basic principles outlined in
this guide.

# guides Locators #

Locators

Locators is a new, experimental API that combines the functionalities of
waiting and actions. With additional precondition checks, it enables
automatic retries for failed actions, resulting in more reliable and
less flaky automation scripts.

[] note

Locators API is experimental and we will not follow semver for breaking
changes in the Locators API.

Use cases 

Waiting for an element 

    await page.locator('button').wait();


The following preconditions are automatically checked:

-   Waits for the element to become visible or hidden.

Waiting for a function 

    await page
      .locator(() => {
        let resolve!: (node: HTMLCanvasElement) => void;
        const promise = new Promise(res => {
          return (resolve = res);
        });
        const observer = new MutationObserver(records => {
          for (const record of records) {
            if (record.target instanceof HTMLCanvasElement) {
              resolve(record.target);
            }
          }
        });
        observer.observe(document);
        return promise;
      })
      .wait();


Clicking an element 

    await page.locator('button').click();


The following preconditions are automatically checked:

-   Ensures the element is in the viewport.
-   Waits for the element to become visible or hidden.
-   Waits for the element to become enabled.
-   Waits for the element to have a stable bounding box over two
    consecutive animation frames.

Clicking an element matching a criteria 

    await page
      .locator('button')
      .filter(button => !button.disabled)
      .click();


The following preconditions are automatically checked:

-   Ensures the element is in the viewport.
-   Waits for the element to become visible or hidden.
-   Waits for the element to become enabled.
-   Waits for the element to have a stable bounding box over two
    consecutive animation frames.

Filling out an input 

    await page.locator('input').fill('value');


Automatically detects the input type and choose an approritate way to
fill it out with the provided value.

The following preconditions are automatically checked:

-   Ensures the element is in the viewport.
-   Waits for the element to become visible or hidden.
-   Waits for the element to become enabled.
-   Waits for the element to have a stable bounding box over two
    consecutive animation frames.

Retrieving an element property 

    const enabled = await page
      .locator('button')
      .map(button => !button.disabled)
      .wait();


Hover over an element 

    await page.locator('div').hover();


The following preconditions are automatically checked:

-   Ensures the element is in the viewport.
-   Waits for the element to become visible or hidden.
-   Waits for the element to have a stable bounding box over two
    consecutive animation frames.

Scroll an element 

    await page.locator('div').scroll({
      scrollLeft: 10,
      scrollTop: 20,
    });


The following preconditions are automatically checked:

-   Ensures the element is in the viewport.
-   Waits for the element to become visible or hidden.
-   Waits for the element to have a stable bounding box over two
    consecutive animation frames.

Configuring locators 

Locators can be configured to tune configure the preconditions and other
other options:

    await page
      .locator('button')
      .setEnsureElementIsInTheViewport(false)
      .setTimeout(0)
      .setVisibility(null)
      .setWaitForEnabled(false)
      .setWaitForStableBoundingBox(false)
      .click();


Getting locator events 

Currently, locators support a single event that notifies you when the
locator is about to perform the action:

    let willClick = false;
    await page
      .locator('button')
      .on(LocatorEvent.Action, () => {
        willClick = true;
      })
      .click();


This event can be used for logging/debugging or other purposes. The
event might fire multiple times if the locator retries the action.

# guides Query Selectors #

Query Selectors

Queries are the primary mechanism for interacting with the DOM on your
site. For example, a typical workflow goes like:

    // Import puppeteer
    import puppeteer from 'puppeteer';

    (async () => {
      // Launch the browser
      const browser = await puppeteer.launch();

      // Create a page
      const page = await browser.newPage();

      // Go to your site
      await page.goto('YOUR_SITE');

      // Query for an element handle.
      const element = await page.waitForSelector('div > .class-name');

      // Do something with element...
      await element.click(); // Just an example.

      // Dispose of handle
      await element.dispose();

      // Close browser.
      await browser.close();
    })();


 P Selectors 

Puppeteer uses a superset of the CSS selector syntax for querying. We
call this syntax P selectors and it's supercharged with extra
capabilities such as deep combinators and text selection.

[] caution

Although P selectors look like real CSS selectors (we intentionally
designed it this way), they should not be used for actually CSS styling.
They are designed only for Puppeteer.

[] note

P selectors only work on the first "depth" of selectors; for example,
 :is(div >>> a) will not work.

 >>> and  >>>> combinators 

The  >>> and  >>>> are called deep descendent and deep combinators
respectively. Both combinators have the effect of going into shadow
hosts with  >>> going into every shadow host under a node and  >>>>
going into the immediate one (if the node is a shadow host; otherwise,
it's a no-op).

[] note

A common question is when should  >>>> be chosen over  >>> considering
the flexibility of  >>> . A similar question can be asked about  > and a
space; choose  > if you do not need to query all elements under a given
node and a space otherwise. This answer extends to  >>>> (  > ) and  >>>
(space) naturally.

Example 

Suppose we have the markup

    <custom-element>
      <template shadowrootmode="open">
        <slot></slot>
      </template>
      <custom-element>
        <template shadowrootmode="open">
          <slot></slot>
        </template>
        <custom-element>
          <template shadowrootmode="open">
            <slot></slot>
          </template>
          <h2>Light content</h2>
        </custom-element>
      </custom-element>
    </custom-element>


  Note:  <template shadowrootmode="open"> is not supported on Firefox.
  You can read more about it here .

Then  custom-element >>> h2 will return  h2 , but
 custom-element >>>> h2 will return nothing since the inner  h2 is in a
deeper shadow root.

 P -elements 

 P elements are pseudo-elements with a  -p vendor prefix. It allows you
to enhance your selectors with Puppeteer-specific query engines such as
XPath, text queries, and ARIA.

Text selectors (  -p-text ) 

Text selectors will select "minimal" elements containing the given text,
even within (open) shadow roots. Here, "minimum" means the deepest
elements that contain a given text, but not their parents (which
technically will also contain the given text).

Example 

    const element = await page.waitForSelector('div ::-p-text(My name is Jun)');
    // You can also use escapes.
    const element = await page.waitForSelector(
      ':scope >>> ::-p-text(My name is Jun \\(pronounced like "June"\\))'
    );
    // or quotes
    const element = await page.waitForSelector(
      'div >>>> ::-p-text("My name is Jun (pronounced like \\"June\\")"):hover'
    );


XPath selectors (  -p-xpath ) 

XPath selectors will use the browser's native  Document.evaluate to
query for elements.

Example 

    const element = await page.waitForSelector('::-p-xpath(h2)');


ARIA selectors (  -p-aria ) 

ARIA selectors can be used to find elements with a given ARIA label.
These labels are computed using Chrome's internal representation.

Example 

    const node = await page.waitForSelector('::-p-aria(Submit)');
    const node = await page.waitForSelector(
      '::-p-aria([name="Click me"][role="button"])'
    );


Custom selectors 

Puppeteer provides users the ability to add their own query selectors to
Puppeteer using Puppeteer.registerCustomQueryHandler . This is useful
for creating custom selectors based on framework objects or other
vendor-specific objects.

Custom Selectors 

You can register a custom query handler that allows you to create custom
selectors. For example, define a query handler for  getById selectors:

    Puppeteer.registerCustomQueryHandler('getById', {
      queryOne: (elementOrDocument, selector) => {
        return elementOrDocument.querySelector(`[id="${CSS.escape(selector)}"]`);
      },
      // Note: for demonstation perpose only `id` should be page unique
      queryAll: (elementOrDocument, selector) => {
        return elementOrDocument.querySelectorAll(`[id="${CSS.escape(selector)}"]`);
      },
    });


You can now use it as following:

    const node = await page.waitForSelector('::-p-getById(elementId)');
    // OR used in conjunction with other selectors
    const moreSpecificNode = await page.waitForSelector(
      '.side-bar ::-p-getById(elementId)'
    );


Custom framework components selector 

[] caution

Be careful when relying on internal APIs of libraries or frameworks.
They can change at any time.

Find Vue components by name by using Vue internals for querying:

    Puppeteer.registerCustomQueryHandler('vue', {
      queryOne: (element, name) => {
        const walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT);
        do {
          const currentNode = walker.currentNode;
          if (
            currentNode.__vnode?.ctx?.type?.name.toLowerCase() ===
            name.toLocaleLowerCase()
          ) {
            return currentNode;
          }
        } while (walker.nextNode());

        return null;
      },
    });


Query the Vue component as following:

    const element = await page.$('::-p-vue(MyComponent)');


Web Components 

Web Components create their own tag so you can query them by the tag
name:

    const element = await page.$('my-web-component');


Extend  HTMLElementTagNameMap to define types for custom tags. This
allows Puppeteer to infer the return type for the ElementHandle:

    declare global {
      interface HTMLElementTagNameMap {
        'my-web-component': MyWebComponent;
      }
    }


# guides Request Interception #

Request Interception

Once request interception is enabled, every request will stall unless
it's continued, responded or aborted.

An example of a naïve request interceptor that aborts all image
requests:

    import puppeteer from 'puppeteer';

    (async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.setRequestInterception(true);
      page.on('request', interceptedRequest => {
        if (interceptedRequest.isInterceptResolutionHandled()) return;
        if (
          interceptedRequest.url().endsWith('.png') ||
          interceptedRequest.url().endsWith('.jpg')
        )
          interceptedRequest.abort();
        else interceptedRequest.continue();
      });
      await page.goto('https://example.com');
      await browser.close();
    })();


Multiple Intercept Handlers and Asynchronous Resolutions 

By default Puppeteer will raise a  Request is already handled! exception
if  request.abort ,  request.continue , or  request.respond are called
after any of them have already been called.

Always assume that an unknown handler may have already called
 abort/continue/respond . Even if your handler is the only one you
registered, 3rd party packages may register their own handlers. It is
therefore important to always check the resolution status using
request.isInterceptResolutionHandled before calling
 abort/continue/respond .

Importantly, the intercept resolution may get handled by another
listener while your handler is awaiting an asynchronous operation.
Therefore, the return value of  request.isInterceptResolutionHandled is
only safe in a synchronous code block. Always execute
 request.isInterceptResolutionHandled and  abort/continue/respond
synchronously together.

This example demonstrates two synchronous handlers working together:

    /*
    This first handler will succeed in calling request.continue because the request interception has never been resolved.
    */
    page.on('request', interceptedRequest => {
      if (interceptedRequest.isInterceptResolutionHandled()) return;
      interceptedRequest.continue();
    });

    /*
    This second handler will return before calling request.abort because request.continue was already
    called by the first handler.
    */
    page.on('request', interceptedRequest => {
      if (interceptedRequest.isInterceptResolutionHandled()) return;
      interceptedRequest.abort();
    });


This example demonstrates asynchronous handlers working together:

    /*
    This first handler will succeed in calling request.continue because the request interception has never been resolved.
    */
    page.on('request', interceptedRequest => {
      // The interception has not been handled yet. Control will pass through this guard.
      if (interceptedRequest.isInterceptResolutionHandled()) return;

      // It is not strictly necessary to return a promise, but doing so will allow Puppeteer to await this handler.
      return new Promise(resolve => {
        // Continue after 500ms
        setTimeout(() => {
          // Inside, check synchronously to verify that the intercept wasn't handled already.
          // It might have been handled during the 500ms while the other handler awaited an async op of its own.
          if (interceptedRequest.isInterceptResolutionHandled()) {
            resolve();
            return;
          }
          interceptedRequest.continue();
          resolve();
        }, 500);
      });
    });
    page.on('request', async interceptedRequest => {
      // The interception has not been handled yet. Control will pass through this guard.
      if (interceptedRequest.isInterceptResolutionHandled()) return;

      await someLongAsyncOperation();
      // The interception *MIGHT* have been handled by the first handler, we can't be sure.
      // Therefore, we must check again before calling continue() or we risk Puppeteer raising an exception.
      if (interceptedRequest.isInterceptResolutionHandled()) return;
      interceptedRequest.continue();
    });


For finer-grained introspection (see Cooperative Intercept Mode below),
you may also call request.interceptResolutionState synchronously before
using  abort/continue/respond .

Here is the example above rewritten using
 request.interceptResolutionState

    /*
    This first handler will succeed in calling request.continue because the request interception has never been resolved.
    */
    page.on('request', interceptedRequest => {
      // The interception has not been handled yet. Control will pass through this guard.
      const {action} = interceptedRequest.interceptResolutionState();
      if (action === InterceptResolutionAction.AlreadyHandled) return;

      // It is not strictly necessary to return a promise, but doing so will allow Puppeteer to await this handler.
      return new Promise(resolve => {
        // Continue after 500ms
        setTimeout(() => {
          // Inside, check synchronously to verify that the intercept wasn't handled already.
          // It might have been handled during the 500ms while the other handler awaited an async op of its own.
          const {action} = interceptedRequest.interceptResolutionState();
          if (action === InterceptResolutionAction.AlreadyHandled) {
            resolve();
            return;
          }
          interceptedRequest.continue();
          resolve();
        }, 500);
      });
    });
    page.on('request', async interceptedRequest => {
      // The interception has not been handled yet. Control will pass through this guard.
      if (
        interceptedRequest.interceptResolutionState().action ===
        InterceptResolutionAction.AlreadyHandled
      )
        return;

      await someLongAsyncOperation();
      // The interception *MIGHT* have been handled by the first handler, we can't be sure.
      // Therefore, we must check again before calling continue() or we risk Puppeteer raising an exception.
      if (
        interceptedRequest.interceptResolutionState().action ===
        InterceptResolutionAction.AlreadyHandled
      )
        return;
      interceptedRequest.continue();
    });


Cooperative Intercept Mode 

 request.abort ,  request.continue , and  request.respond can accept an
optional  priority to work in Cooperative Intercept Mode. When all
handlers are using Cooperative Intercept Mode, Puppeteer guarantees that
all intercept handlers will run and be awaited in order of registration.
The interception is resolved to the highest-priority resolution. Here
are the rules of Cooperative Intercept Mode:

-   All resolutions must supply a numeric  priority argument to
     abort/continue/respond .
-   If any resolution does not supply a numeric  priority , Legacy Mode
    is active and Cooperative Intercept Mode is inactive.
-   Async handlers finish before intercept resolution is finalized.
-   The highest priority interception resolution "wins", i.e. the
    interception is ultimately aborted/responded/continued according to
    which resolution was given the highest priority.
-   In the event of a tie,  abort >  respond >  continue .

For standardization, when specifying a Cooperative Intercept Mode
priority use  0 or  DEFAULT_INTERCEPT_RESOLUTION_PRIORITY (exported from
 HTTPRequest ) unless you have a clear reason to use a higher priority.
This gracefully prefers  respond over  continue and  abort over  respond
and allows other handlers to work cooperatively. If you do intentionally
want to use a different priority, higher priorities win over lower
priorities. Negative priorities are allowed. For example,
 continue({}, 4) would win over  continue({}, -2) .

To preserve backward compatibility, any handler resolving the intercept
without specifying  priority (Legacy Mode) causes immediate resolution.
For Cooperative Intercept Mode to work, all resolutions must use a
 priority . In practice, this means you must still test for
 request.isInterceptResolutionHandled because a handler beyond your
control may have called  abort/continue/respond without a priority
(Legacy Mode).

In this example, Legacy Mode prevails and the request is aborted
immediately because at least one handler omits  priority when resolving
the intercept:

    // Final outcome: immediate abort()
    page.setRequestInterception(true);
    page.on('request', request => {
      if (request.isInterceptResolutionHandled()) return;

      // Legacy Mode: interception is aborted immediately.
      request.abort('failed');
    });
    page.on('request', request => {
      if (request.isInterceptResolutionHandled()) return;
      // Control will never reach this point because the request was already aborted in Legacy Mode

      // Cooperative Intercept Mode: votes for continue at priority 0.
      request.continue({}, 0);
    });


In this example, Legacy Mode prevails and the request is continued
because at least one handler does not specify a  priority :

    // Final outcome: immediate continue()
    page.setRequestInterception(true);
    page.on('request', request => {
      if (request.isInterceptResolutionHandled()) return;

      // Cooperative Intercept Mode: votes to abort at priority 0.
      request.abort('failed', 0);
    });
    page.on('request', request => {
      if (request.isInterceptResolutionHandled()) return;

      // Control reaches this point because the request was cooperatively aborted which postpones resolution.

      // { action: InterceptResolutionAction.Abort, priority: 0 }, because abort @ 0 is the current winning resolution
      console.log(request.interceptResolutionState());

      // Legacy Mode: intercept continues immediately.
      request.continue({});
    });
    page.on('request', request => {
      // { action: InterceptResolutionAction.AlreadyHandled }, because continue in Legacy Mode was called
      console.log(request.interceptResolutionState());
    });


In this example, Cooperative Intercept Mode is active because all
handlers specify a  priority .  continue() wins because it has a higher
priority than  abort() .

    // Final outcome: cooperative continue() @ 5
    page.setRequestInterception(true);
    page.on('request', request => {
      if (request.isInterceptResolutionHandled()) return;

      // Cooperative Intercept Mode: votes to abort at priority 10
      request.abort('failed', 0);
    });
    page.on('request', request => {
      if (request.isInterceptResolutionHandled()) return;

      // Cooperative Intercept Mode: votes to continue at priority 5
      request.continue(request.continueRequestOverrides(), 5);
    });
    page.on('request', request => {
      // { action: InterceptResolutionAction.Continue, priority: 5 }, because continue @ 5 > abort @ 0
      console.log(request.interceptResolutionState());
    });


In this example, Cooperative Intercept Mode is active because all
handlers specify  priority .  respond() wins because its priority ties
with  continue() , but  respond() beats  continue() .

    // Final outcome: cooperative respond() @ 15
    page.setRequestInterception(true);
    page.on('request', request => {
      if (request.isInterceptResolutionHandled()) return;

      // Cooperative Intercept Mode: votes to abort at priority 10
      request.abort('failed', 10);
    });
    page.on('request', request => {
      if (request.isInterceptResolutionHandled()) return;

      // Cooperative Intercept Mode: votes to continue at priority 15
      request.continue(request.continueRequestOverrides(), 15);
    });
    page.on('request', request => {
      if (request.isInterceptResolutionHandled()) return;

      // Cooperative Intercept Mode: votes to respond at priority 15
      request.respond(request.responseForRequest(), 15);
    });
    page.on('request', request => {
      if (request.isInterceptResolutionHandled()) return;

      // Cooperative Intercept Mode: votes to respond at priority 12
      request.respond(request.responseForRequest(), 12);
    });
    page.on('request', request => {
      // { action: InterceptResolutionAction.Respond, priority: 15 }, because respond @ 15 > continue @ 15 > respond @ 12 > abort @ 10
      console.log(request.interceptResolutionState());
    });


Cooperative Request Continuation 

Puppeteer requires  request.continue() to be called explicitly or the
request will hang. Even if your handler means to take no special action,
or 'opt out',  request.continue() must still be called.

With the introduction of Cooperative Intercept Mode, two use cases arise
for cooperative request continuations: Unopinionated and Opinionated.

The first case (common) is that your handler means to opt out of doing
anything special the request. It has no opinion on further action and
simply intends to continue by default and/or defer to other handlers
that might have an opinion. But in case there are no other handlers, we
must call  request.continue() to ensure that the request doesn't hang.

We call this an Unopinionated continuation because the intent is to
continue the request if nobody else has a better idea. Use
 request.continue({...}, DEFAULT_INTERCEPT_RESOLUTION_PRIORITY) (or  0 )
for this type of continuation.

The second case (uncommon) is that your handler actually does have an
opinion and means to force continuation by overriding a lower-priority
 abort() or  respond() issued elsewhere. We call this an Opinionated
continuation . In these rare cases where you mean to specify an
overriding continuation priority, use a custom priority.

To summarize, reason through whether your use of  request.continue is
just meant to be default/bypass behavior vs falling within the intended
use case of your handler. Consider using a custom priority for in-scope
use cases, and a default priority otherwise. Be aware that your handler
may have both Opinionated and Unopinionated cases.

Upgrading to Cooperative Intercept Mode for package maintainers 

If you are package maintainer and your package uses intercept handlers,
you can update your intercept handlers to use Cooperative Intercept
Mode. Suppose you have the following existing handler:

    page.on('request', interceptedRequest => {
      if (request.isInterceptResolutionHandled()) return;
      if (
        interceptedRequest.url().endsWith('.png') ||
        interceptedRequest.url().endsWith('.jpg')
      )
        interceptedRequest.abort();
      else interceptedRequest.continue();
    });


To use Cooperative Intercept Mode, upgrade  continue() and  abort() :

    page.on('request', interceptedRequest => {
      if (request.isInterceptResolutionHandled()) return;
      if (
        interceptedRequest.url().endsWith('.png') ||
        interceptedRequest.url().endsWith('.jpg')
      )
        interceptedRequest.abort('failed', 0);
      else
        interceptedRequest.continue(
          interceptedRequest.continueRequestOverrides(),
          0
        );
    });


With those simple upgrades, your handler now uses Cooperative Intercept
Mode instead.

However, we recommend a slightly more robust solution because the above
introduces several subtle issues:

1.  Backward compatibility. If any handler still uses a Legacy Mode
    resolution (ie, does not specify a priority), that handler will
    resolve the interception immediately even if your handler runs
    first. This could cause disconcerting behavior for your users
    because suddenly your handler is not resolving the interception and
    a different handler is taking priority when all the user did was
    upgrade your package.
2.  Hard-coded priority. Your package user has no ability to specify the
    default resolution priority for your handlers. This can become
    important when the user wishes to manipulate the priorities based on
    use case. For example, one user might want your package to take a
    high priority while another user might want it to take a low
    priority.

To resolve both of these issues, our recommended approach is to export a
 setInterceptResolutionConfig() from your package. The user can then
call  setInterceptResolutionConfig() to explicitly activate Cooperative
Intercept Mode in your package so they aren't surprised by changes in
how the interception is resolved. They can also optionally specify a
custom priority using  setInterceptResolutionConfig(priority) that works
for their use case:

    // Defaults to undefined which preserves Legacy Mode behavior
    let _priority = undefined;

    // Export a module configuration function
    export const setInterceptResolutionConfig = (priority = 0) =>
      (_priority = priority);

    /**
     * Note that this handler uses `DEFAULT_INTERCEPT_RESOLUTION_PRIORITY` to "pass" on this request. It is important to use
     * the default priority when your handler has no opinion on the request and the intent is to continue() by default.
     */
    page.on('request', interceptedRequest => {
      if (request.isInterceptResolutionHandled()) return;
      if (
        interceptedRequest.url().endsWith('.png') ||
        interceptedRequest.url().endsWith('.jpg')
      )
        interceptedRequest.abort('failed', _priority);
      else
        interceptedRequest.continue(
          interceptedRequest.continueRequestOverrides(),
          DEFAULT_INTERCEPT_RESOLUTION_PRIORITY // Unopinionated continuation
        );
    });


If your package calls for more fine-grained control over resolution
priorities, use a config pattern like this:

    interface InterceptResolutionConfig {
      abortPriority?: number;
      continuePriority?: number;
    }

    // This approach supports multiple priorities based on situational
    // differences. You could, for example, create a config that
    // allowed separate priorities for PNG vs JPG.
    const DEFAULT_CONFIG: InterceptResolutionConfig = {
      abortPriority: undefined, // Default to Legacy Mode
      continuePriority: undefined, // Default to Legacy Mode
    };

    // Defaults to undefined which preserves Legacy Mode behavior
    let _config: Partial<InterceptResolutionConfig> = {};

    export const setInterceptResolutionConfig = (
      config: InterceptResolutionConfig
    ) => (_config = {...DEFAULT_CONFIG, ...config});

    page.on('request', interceptedRequest => {
      if (request.isInterceptResolutionHandled()) return;
      if (
        interceptedRequest.url().endsWith('.png') ||
        interceptedRequest.url().endsWith('.jpg')
      ) {
        interceptedRequest.abort('failed', _config.abortPriority);
      } else {
        // Here we use a custom-configured priority to allow for Opinionated
        // continuation.
        // We would only want to allow this if we had a very clear reason why
        // some use cases required Opinionated continuation.
        interceptedRequest.continue(
          interceptedRequest.continueRequestOverrides(),
          _config.continuePriority // Why would we ever want priority!==0 here?
        );
      }
    });


The above solutions ensure backward compatibility while also allowing
the user to adjust the importance of your package in the resolution
chain when Cooperative Intercept Mode is being used. Your package
continues to work as expected until the user has fully upgraded their
code and all third party packages to use Cooperative Intercept Mode. If
any handler or package still uses Legacy Mode, your package can still
operate in Legacy Mode too.

# integrations Puppeteer Angular Schematic #

Puppeteer Angular Schematic

Adds Puppeteer-based e2e tests to your Angular project.

Getting started 

Run the command below in an Angular CLI app directory and follow the
prompts.

  Note this will add the schematic as a dependency to your project.

    ng add @puppeteer/ng-schematics


Or you can use the same command followed by the options below.

Currently, this schematic supports the following test runners:

-   Jasmine
-   Jest
-   Mocha
-   Node Test Runner

With the schematics installed you can run E2E tests:

    ng e2e


Options 

When adding schematics to your project you can to provide following
options:

  Option           Description                                              Value                                       Required
  ---------------- -------------------------------------------------------- ------------------------------------------- ----------
   --test-runner   The testing framework to install along side Puppeteer.    "jasmine" ,  "jest" ,  "mocha" ,  "node"    true

Creating a single test file 

Puppeteer Angular Schematic exposes a method to create a single test
file.

    ng generate @puppeteer/ng-schematics:e2e "<TestName>"


Running test server and dev server at the same time 

By default the E2E test will run the app on the same port as  ng start .
To avoid this you can specify the port the an the  angular.json Update
either  e2e or  puppeteer (depending on the initial setup) to:

    {
      "e2e": {
        "builder": "@puppeteer/ng-schematics:puppeteer",
        "options": {
          "commands": [...],
          "devServerTarget": "sandbox:serve",
          "testRunner": "<TestRunner>",
          "port": 8080
        },
        ...
    }


Now update the E2E test file  utils.ts baseUrl to:

    const baseUrl = 'http://localhost:8080';


Contributing 

Check out our contributing guide to get an overview of what you need to
develop in the Puppeteer repo.

Sandbox smoke tests 

To make integration easier smoke test can be run with a single command,
that will create a fresh install of Angular (single application and a
milti application projects). Then it will install the schematics inside
them and run the initial e2e tests:

    node tools/smoke.mjs


Unit Testing 

The schematics utilize  @angular-devkit/schematics/testing for verifying
correct file creation and  package.json updates. To execute the test
suit:

    npm run test


Migrating from Protractor 

Entry point 

Puppeteer has its own  browser that exposes the browser process. A more
closes comparison for Protractor's  browser would be Puppeteer's  page .

    // Testing framework specific imports

    import {setupBrowserHooks, getBrowserState} from './utils';

    describe('<Test Name>', function () {
      setupBrowserHooks();
      it('is running', async function () {
        const {page} = getBrowserState();
        // Query elements
        await page
          .locator('my-component')
          // Click on the element once found
          .click();
      });
    });


Getting element properties 

You can easily get any property of the element.

    // Testing framework specific imports

    import {setupBrowserHooks, getBrowserState} from './utils';

    describe('<Test Name>', function () {
      setupBrowserHooks();
      it('is running', async function () {
        const {page} = getBrowserState();
        // Query elements
        const elementText = await page
          .locator('.my-component')
          .map(button => button.innerText)
          // Wait for element to show up
          .wait();

        // Assert via assertion library
      });
    });


Query Selectors 

Puppeteer supports multiple types of selectors, namely, the CSS, ARIA,
text, XPath and pierce selectors. The following table shows Puppeteer's
equivalents to Protractor By .

  For improved reliability and reduced flakiness try our Experimental
  Locators API

  By                  Protractor code                                Puppeteer querySelector
  ------------------- ---------------------------------------------- -------------------------------------------------------------
  CSS (Single)         $(by.css('<CSS>'))                             page.$('<CSS>')
  CSS (Multiple)       $$(by.css('<CSS>'))                            page.$$('<CSS>')
  Id                   $(by.id('<ID>'))                               page.$('#<ID>')
  CssContainingText    $(by.cssContainingText('<CSS>', '<TEXT>'))     page.$('<CSS> ::-p-text(<TEXT>)') `
  DeepCss              $(by.deepCss('<CSS>'))                         page.$(':scope >>> <CSS>')
  XPath                $(by.xpath('<XPATH>'))                         page.$('::-p-xpath(<XPATH>)')
  JS                   $(by.js('document.querySelector("<CSS>")'))    page.evaluateHandle(() => document.querySelector('<CSS>'))

  For advanced use cases such as Protractor's  by.addLocator you can
  check Puppeteer's Custom selectors .

Actions Selectors 

Puppeteer allows you to all necessary actions to allow test your
application.

    // Click on the element.
    element(locator).click();
    // Puppeteer equivalent
    await page.locator(locator).click();

    // Send keys to the element (usually an input).
    element(locator).sendKeys('my text');
    // Puppeteer equivalent
    await page.locator(locator).fill('my text');

    // Clear the text in an element (usually an input).
    element(locator).clear();
    // Puppeteer equivalent
    await page.locator(locator).fill('');

    // Get the value of an attribute, for example, get the value of an input.
    element(locator).getAttribute('value');
    // Puppeteer equivalent
    const element = await page.locator(locator).waitHandle();
    const value = await element.getProperty('value');


Example 

Sample Protractor test:

    describe('Protractor Demo', function () {
      it('should add one and two', function () {
        browser.get('http://juliemr.github.io/protractor-demo/');
        element(by.model('first')).sendKeys(1);
        element(by.model('second')).sendKeys(2);

        element(by.id('gobutton')).click();

        expect(element(by.binding('latest')).getText()).toEqual('3');
      });
    });


Sample Puppeteer migration:

    import {setupBrowserHooks, getBrowserState} from './utils';

    describe('Puppeteer Demo', function () {
      setupBrowserHooks();
      it('should add one and two', function () {
        const {page} = getBrowserState();
        await page.goto('http://juliemr.github.io/protractor-demo/');

        await page.locator('.form-inline > input:nth-child(1)').fill('1');
        await page.locator('.form-inline > input:nth-child(2)').fill('2');
        await page.locator('#gobutton').fill('2');

        const result = await page
          .locator('.table tbody td:last-of-type')
          .map(header => header.innerText)
          .wait();

        expect(result).toEqual('3');
      });
    });


